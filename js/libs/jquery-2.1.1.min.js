!function (element, proceed) {
    if ("object" == typeof module && "object" == typeof module.exports) {
        module.exports = element.document ? proceed(element, true) : function (element) {
            if (!element.document) {
                throw new Error("jQuery requires a window with a document");
            }
            return proceed(element);
        };
    } else {
        proceed(element);
    }
}("undefined" != typeof window ? window : this, function (win, dataAndEvents) {
    /**
     * @param {Object} obj
     * @return {?}
     */
    function isArraylike(obj) {
        var length = obj.length;
        var type = jQuery.type(obj);
        return "function" === type || jQuery.isWindow(obj) ? false : 1 === obj.nodeType && length ? true : "array" === type || (0 === length || "number" == typeof length && (length > 0 && length - 1 in obj));
    }
    /**
     * @param {string} elements
     * @param {Object} qualifier
     * @param {boolean} not
     * @return {?}
     */
    function winnow(elements, qualifier, not) {
        if (jQuery.isFunction(qualifier)) {
            return jQuery.grep(elements, function (elem, i) {
                return !!qualifier.call(elem, i, elem) !== not;
            });
        }
        if (qualifier.nodeType) {
            return jQuery.grep(elements, function (elem) {
                return elem === qualifier !== not;
            });
        }
        if ("string" == typeof qualifier) {
            if (risSimple.test(qualifier)) {
                return jQuery.filter(qualifier, elements, not);
            }
            qualifier = jQuery.filter(qualifier, elements);
        }
        return jQuery.grep(elements, function (elem) {
            return core_indexOf.call(qualifier, elem) >= 0 !== not;
        });
    }
    /**
     * @param {Object} cur
     * @param {string} dir
     * @return {?}
     */
    function sibling(cur, dir) {
        for (; (cur = cur[dir]) && 1 !== cur.nodeType;) {
        }
        return cur;
    }
    /**
     * @param {string} options
     * @return {?}
     */
    function createOptions(options) {
        var buf = optionsCache[options] = {};
        return jQuery.each(options.match(core_rnotwhite) || [], function (dataAndEvents, off) {
            /** @type {boolean} */
            buf[off] = true;
        }), buf;
    }
    /**
     * @return {undefined}
     */
    function completed() {
        doc.removeEventListener("DOMContentLoaded", completed, false);
        win.removeEventListener("load", completed, false);
        jQuery.ready();
    }
    /**
     * @return {undefined}
     */
    function Data() {
        Object.defineProperty(this.cache = {}, 0, {
            /**
             * @return {?}
             */
            get: function () {
                return {};
            }
        });
        this.expando = jQuery.expando + Math.random();
    }
    /**
     * @param {Object} elem
     * @param {string} key
     * @param {string} data
     * @return {?}
     */
    function dataAttr(elem, key, data) {
        var name;
        if (void 0 === data && 1 === elem.nodeType) {
            if (name = "data-" + key.replace(r20, "-$1").toLowerCase(), data = elem.getAttribute(name), "string" == typeof data) {
                try {
                    data = "true" === data ? true : "false" === data ? false : "null" === data ? null : +data + "" === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data;
                } catch (e) {
                }
                data_user.set(elem, key, data);
            } else {
                data = void 0;
            }
        }
        return data;
    }
    /**
     * @return {?}
     */
    function returnTrue() {
        return true;
    }
    /**
     * @return {?}
     */
    function returnFalse() {
        return false;
    }
    /**
     * @return {?}
     */
    function safeActiveElement() {
        try {
            return doc.activeElement;
        } catch (a) {
        }
    }
    /**
     * @param {Node} elem
     * @param {Element} content
     * @return {?}
     */
    function manipulationTarget(elem, content) {
        return jQuery.nodeName(elem, "table") && jQuery.nodeName(11 !== content.nodeType ? content : content.firstChild, "tr") ? elem.getElementsByTagName("tbody")[0] || elem.appendChild(elem.ownerDocument.createElement("tbody")) : elem;
    }
    /**
     * @param {Element} elem
     * @return {?}
     */
    function restoreScript(elem) {
        return elem.type = (null !== elem.getAttribute("type")) + "/" + elem.type, elem;
    }
    /**
     * @param {Element} s
     * @return {?}
     */
    function fn(s) {
        /** @type {(Array.<string>|null)} */
        var l = re.exec(s.type);
        return l ? s.type = l[1] : s.removeAttribute("type"), s;
    }
    /**
     * @param {(Array|NodeList)} elems
     * @param {Array} refElements
     * @return {undefined}
     */
    function setGlobalEval(elems, refElements) {
        /** @type {number} */
        var i = 0;
        var l = elems.length;
        for (; l > i; i++) {
            data_priv.set(elems[i], "globalEval", !refElements || data_priv.get(refElements[i], "globalEval"));
        }
    }
    /**
     * @param {Object} src
     * @param {Object} dest
     * @return {undefined}
     */
    function cloneCopyEvent(src, dest) {
        var i;
        var ilen;
        var type;
        var pdataOld;
        var pdataCur;
        var udataOld;
        var udataCur;
        var events;
        if (1 === dest.nodeType) {
            if (data_priv.hasData(src) && (pdataOld = data_priv.access(src), pdataCur = data_priv.set(dest, pdataOld), events = pdataOld.events)) {
                delete pdataCur.handle;
                pdataCur.events = {};
                for (type in events) {
                    /** @type {number} */
                    i = 0;
                    ilen = events[type].length;
                    for (; ilen > i; i++) {
                        jQuery.event.add(dest, type, events[type][i]);
                    }
                }
            }
            if (data_user.hasData(src)) {
                udataOld = data_user.access(src);
                udataCur = jQuery.extend({}, udataOld);
                data_user.set(dest, udataCur);
            }
        }
    }
    /**
     * @param {Node} context
     * @param {Object} tag
     * @return {?}
     */
    function getAll(context, tag) {
        var ret = context.getElementsByTagName ? context.getElementsByTagName(tag || "*") : context.querySelectorAll ? context.querySelectorAll(tag || "*") : [];
        return void 0 === tag || tag && jQuery.nodeName(context, tag) ? jQuery.merge([context], ret) : ret;
    }
    /**
     * @param {Element} src
     * @param {Element} dest
     * @return {undefined}
     */
    function fixInput(src, dest) {
        var name = dest.nodeName.toLowerCase();
        if ("input" === name && manipulation_rcheckableType.test(src.type)) {
            dest.checked = src.checked;
        } else {
            if ("input" === name || "textarea" === name) {
                dest.defaultValue = src.defaultValue;
            }
        }
    }
    /**
     * @param {?} name
     * @param {Document} doc
     * @return {?}
     */
    function actualDisplay(name, doc) {
        var result;
        var elem = jQuery(doc.createElement(name)).appendTo(doc.body);
        var f = win.getDefaultComputedStyle && (result = win.getDefaultComputedStyle(elem[0])) ? result.display : jQuery.css(elem[0], "display");
        return elem.detach(), f;
    }
    /**
     * @param {?} nodeName
     * @return {?}
     */
    function defaultDisplay(nodeName) {
        var d = doc;
        var display = elemdisplay[nodeName];
        return display || (display = actualDisplay(nodeName, d), "none" !== display && display || (iframe = (iframe || jQuery("<iframe frameborder='0' width='0' height='0'/>")).appendTo(d.documentElement), d = iframe[0].contentDocument, d.write(), d.close(), display = actualDisplay(nodeName, d), iframe.detach()), elemdisplay[nodeName] = display), display;
    }
    /**
     * @param {Object} node
     * @param {string} prop
     * @param {Object} styles
     * @return {?}
     */
    function css(node, prop, styles) {
        var width;
        var minWidth;
        var maxWidth;
        var val;
        var style = node.style;
        return styles = styles || getStyles(node), styles && (val = styles.getPropertyValue(prop) || styles[prop]), styles && ("" !== val || (jQuery.contains(node.ownerDocument, node) || (val = jQuery.style(node, prop))), regexp.test(val) && (rbracket.test(prop) && (width = style.width, minWidth = style.minWidth, maxWidth = style.maxWidth, style.minWidth = style.maxWidth = style.width = val, val = styles.width, style.width = width, style.minWidth = minWidth, style.maxWidth = maxWidth))), void 0 !== val ?
        val + "" : val;
    }
    /**
     * @param {?} $timeout
     * @param {Function} hookFn
     * @return {?}
     */
    function addGetHookIf($timeout, hookFn) {
        return {
            /**
             * @return {?}
             */
            get: function () {
                return $timeout() ? void delete this.get : (this.get = hookFn).apply(this, arguments);
            }
        };
    }
    /**
     * @param {Object} style
     * @param {string} name
     * @return {?}
     */
    function vendorPropName(style, name) {
        if (name in style) {
            return name;
        }
        var capName = name[0].toUpperCase() + name.slice(1);
        /** @type {string} */
        var origName = name;
        /** @type {number} */
        var i = cssPrefixes.length;
        for (; i--;) {
            if (name = cssPrefixes[i] + capName, name in style) {
                return name;
            }
        }
        return origName;
    }
    /**
     * @param {Object} elem
     * @param {string} value
     * @param {string} actual
     * @return {?}
     */
    function setPositiveNumber(elem, value, actual) {
        /** @type {(Array.<string>|null)} */
        var iterator = rrelNum.exec(value);
        return iterator ? Math.max(0, iterator[1] - (actual || 0)) + (iterator[2] || "px") : value;
    }
    /**
     * @param {Object} elem
     * @param {string} keepData
     * @param {string} extra
     * @param {boolean} isBorderBox
     * @param {?} styles
     * @return {?}
     */
    function augmentWidthOrHeight(elem, keepData, extra, isBorderBox, styles) {
        /** @type {number} */
        var i = extra === (isBorderBox ? "border" : "content") ? 4 : "width" === keepData ? 1 : 0;
        /** @type {number} */
        var val = 0;
        for (; 4 > i; i += 2) {
            if ("margin" === extra) {
                val += jQuery.css(elem, extra + cssExpand[i], true, styles);
            }
            if (isBorderBox) {
                if ("content" === extra) {
                    val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
                }
                if ("margin" !== extra) {
                    val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
                }
            } else {
                val += jQuery.css(elem, "padding" + cssExpand[i], true, styles);
                if ("padding" !== extra) {
                    val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
                }
            }
        }
        return val;
    }
    /**
     * @param {Object} elem
     * @param {string} name
     * @param {Object} extra
     * @return {?}
     */
    function getWidthOrHeight(elem, name, extra) {
        /** @type {boolean} */
        var valueIsBorderBox = true;
        var val = "width" === name ? elem.offsetWidth : elem.offsetHeight;
        var styles = getStyles(elem);
        /** @type {boolean} */
        var isBorderBox = "border-box" === jQuery.css(elem, "boxSizing", false, styles);
        if (0 >= val || null == val) {
            if (val = css(elem, name, styles), (0 > val || null == val) && (val = elem.style[name]), regexp.test(val)) {
                return val;
            }
            valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);
            /** @type {number} */
            val = parseFloat(val) || 0;
        }
        return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles) + "px";
    }
    /**
     * @param {Array} elements
     * @param {boolean} show
     * @return {?}
     */
    function showHide(elements, show) {
        var display;
        var elem;
        var hidden;
        /** @type {Array} */
        var values = [];
        /** @type {number} */
        var index = 0;
        var length = elements.length;
        for (; length > index; index++) {
            elem = elements[index];
            if (elem.style) {
                values[index] = data_priv.get(elem, "olddisplay");
                display = elem.style.display;
                if (show) {
                    if (!values[index]) {
                        if (!("none" !== display)) {
                            /** @type {string} */
                            elem.style.display = "";
                        }
                    }
                    if ("" === elem.style.display) {
                        if (isHidden(elem)) {
                            values[index] = data_priv.access(elem, "olddisplay", defaultDisplay(elem.nodeName));
                        }
                    }
                } else {
                    hidden = isHidden(elem);
                    if (!("none" === display && hidden)) {
                        data_priv.set(elem, "olddisplay", hidden ? display : jQuery.css(elem, "display"));
                    }
                }
            }
        }
        /** @type {number} */
        index = 0;
        for (; length > index; index++) {
            elem = elements[index];
            if (elem.style) {
                if (!(show && ("none" !== elem.style.display && "" !== elem.style.display))) {
                    elem.style.display = show ? values[index] || "" : "none";
                }
            }
        }
        return elements;
    }
    /**
     * @param {string} selector
     * @param {string} context
     * @param {string} prop
     * @param {string} end
     * @param {string} easing
     * @return {?}
     */
    function Tween(selector, context, prop, end, easing) {
        return new Tween.prototype.init(selector, context, prop, end, easing);
    }
    /**
     * @return {?}
     */
    function createFxNow() {
        return setTimeout(function () {
            fxNow = void 0;
        }), fxNow = jQuery.now();
    }
    /**
     * @param {string} type
     * @param {boolean} includeWidth
     * @return {?}
     */
    function genFx(type, includeWidth) {
        var which;
        /** @type {number} */
        var i = 0;
        var attrs = {
            height: type
        };
        /** @type {number} */
        includeWidth = includeWidth ? 1 : 0;
        for (; 4 > i; i += 2 - includeWidth) {
            which = cssExpand[i];
            attrs["margin" + which] = attrs["padding" + which] = type;
        }
        return includeWidth && (attrs.opacity = attrs.width = type), attrs;
    }
    /**
     * @param {?} value
     * @param {?} prop
     * @param {?} animation
     * @return {?}
     */
    function createTween(value, prop, animation) {
        var tween;
        var q = (cache[prop] || []).concat(cache["*"]);
        /** @type {number} */
        var i = 0;
        var l = q.length;
        for (; l > i; i++) {
            if (tween = q[i].call(animation, prop, value)) {
                return tween;
            }
        }
    }
    /**
     * @param {Object} elem
     * @param {Object} props
     * @param {Object} opts
     * @return {undefined}
     */
    function defaultPrefilter(elem, props, opts) {
        var prop;
        var value;
        var thisp;
        var tween;
        var hooks;
        var oldfire;
        var oldDisplay;
        var type;
        var anim = this;
        var orig = {};
        var style = elem.style;
        var hidden = elem.nodeType && isHidden(elem);
        var dataShow = data_priv.get(elem, "fxshow");
        if (!opts.queue) {
            hooks = jQuery._queueHooks(elem, "fx");
            if (null == hooks.unqueued) {
                /** @type {number} */
                hooks.unqueued = 0;
                /** @type {function (): undefined} */
                oldfire = hooks.empty.fire;
                /**
                 * @return {undefined}
                 */
                hooks.empty.fire = function () {
                    if (!hooks.unqueued) {
                        oldfire();
                    }
                };
            }
            hooks.unqueued++;
            anim.always(function () {
                anim.always(function () {
                    hooks.unqueued--;
                    if (!jQuery.queue(elem, "fx").length) {
                        hooks.empty.fire();
                    }
                });
            });
        }
        if (1 === elem.nodeType) {
            if ("height" in props || "width" in props) {
                /** @type {Array} */
                opts.overflow = [style.overflow, style.overflowX, style.overflowY];
                oldDisplay = jQuery.css(elem, "display");
                type = "none" === oldDisplay ? data_priv.get(elem, "olddisplay") || defaultDisplay(elem.nodeName) : oldDisplay;
                if ("inline" === type) {
                    if ("none" === jQuery.css(elem, "float")) {
                        /** @type {string} */
                        style.display = "inline-block";
                    }
                }
            }
        }
        if (opts.overflow) {
            /** @type {string} */
            style.overflow = "hidden";
            anim.always(function () {
                style.overflow = opts.overflow[0];
                style.overflowX = opts.overflow[1];
                style.overflowY = opts.overflow[2];
            });
        }
        for (prop in props) {
            if (value = props[prop], rplusequals.exec(value)) {
                if (delete props[prop], thisp = thisp || "toggle" === value, value === (hidden ? "hide" : "show")) {
                    if ("show" !== value || (!dataShow || void 0 === dataShow[prop])) {
                        continue;
                    }
                    /** @type {boolean} */
                    hidden = true;
                }
                orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
            } else {
                oldDisplay = void 0;
            }
        }
        if (jQuery.isEmptyObject(orig)) {
            if ("inline" === ("none" === oldDisplay ? defaultDisplay(elem.nodeName) : oldDisplay)) {
                style.display = oldDisplay;
            }
        } else {
            if (dataShow) {
                if ("hidden" in dataShow) {
                    hidden = dataShow.hidden;
                }
            } else {
                dataShow = data_priv.access(elem, "fxshow", {});
            }
            if (thisp) {
                /** @type {boolean} */
                dataShow.hidden = !hidden;
            }
            if (hidden) {
                jQuery(elem).show();
            } else {
                anim.done(function () {
                    jQuery(elem).hide();
                });
            }
            anim.done(function () {
                var prop;
                data_priv.remove(elem, "fxshow");
                for (prop in orig) {
                    jQuery.style(elem, prop, orig[prop]);
                }
            });
            for (prop in orig) {
                tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
                if (!(prop in dataShow)) {
                    dataShow[prop] = tween.start;
                    if (hidden) {
                        tween.end = tween.start;
                        /** @type {number} */
                        tween.start = "width" === prop || "height" === prop ? 1 : 0;
                    }
                }
            }
        }
    }
    /**
     * @param {Object} object
     * @param {Object} paramMap
     * @return {undefined}
     */
    function propFilter(object, paramMap) {
        var key;
        var name;
        var value;
        var data;
        var hooks;
        for (key in object) {
            if (name = jQuery.camelCase(key), value = paramMap[name], data = object[key], jQuery.isArray(data) && (value = data[1], data = object[key] = data[0]), key !== name && (object[name] = data, delete object[key]), hooks = jQuery.cssHooks[name], hooks && "expand" in hooks) {
                data = hooks.expand(data);
                delete object[name];
                for (key in data) {
                    if (!(key in object)) {
                        object[key] = data[key];
                        paramMap[key] = value;
                    }
                }
            } else {
                paramMap[name] = value;
            }
        }
    }
    /**
     * @param {string} elem
     * @param {?} properties
     * @param {Object} options
     * @return {?}
     */
    function Animation(elem, properties, options) {
        var result;
        var e;
        /** @type {number} */
        var index = 0;
        /** @type {number} */
        var length = animationPrefilters.length;
        var deferred = jQuery.Deferred().always(function () {
            delete tick.elem;
        });
        /**
         * @return {?}
         */
        var tick = function () {
            if (e) {
                return false;
            }
            var currentTime = fxNow || createFxNow();
            /** @type {number} */
            var remaining = Math.max(0, animation.startTime + animation.duration - currentTime);
            /** @type {number} */
            var temp = remaining / animation.duration || 0;
            /** @type {number} */
            var percent = 1 - temp;
            /** @type {number} */
            var index = 0;
            var startOffset = animation.tweens.length;
            for (; startOffset > index; index++) {
                animation.tweens[index].run(percent);
            }
            return deferred.notifyWith(elem, [animation, percent, remaining]), 1 > percent && startOffset ? remaining : (deferred.resolveWith(elem, [animation]), false);
        };
        var animation = deferred.promise({
            elem: elem,
            props: jQuery.extend({}, properties),
            opts: jQuery.extend(true, {
                specialEasing: {}
            }, options),
            originalProperties: properties,
            originalOptions: options,
            startTime: fxNow || createFxNow(),
            duration: options.duration,
            tweens: [],
            /**
             * @param {string} prop
             * @param {string} end
             * @return {?}
             */
            createTween: function (prop, end) {
                var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
                return animation.tweens.push(tween), tween;
            },
            /**
             * @param {boolean} gotoEnd
             * @return {?}
             */
            stop: function (gotoEnd) {
                /** @type {number} */
                var index = 0;
                var length = gotoEnd ? animation.tweens.length : 0;
                if (e) {
                    return this;
                }
                /** @type {boolean} */
                e = true;
                for (; length > index; index++) {
                    animation.tweens[index].run(1);
                }
                return gotoEnd ? deferred.resolveWith(elem, [animation, gotoEnd]) : deferred.rejectWith(elem, [animation, gotoEnd]), this;
            }
        });
        var scripts = animation.props;
        propFilter(scripts, animation.opts.specialEasing);
        for (; length > index; index++) {
            if (result = animationPrefilters[index].call(animation, elem, scripts, animation.opts)) {
                return result;
            }
        }
        return jQuery.map(scripts, createTween, animation), jQuery.isFunction(animation.opts.start) && animation.opts.start.call(elem, animation), jQuery.fx.timer(jQuery.extend(tick, {
            elem: elem,
            anim: animation,
            queue: animation.opts.queue
        })), animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
    }
    /**
     * @param {Array} structure
     * @return {?}
     */
    function addToPrefiltersOrTransports(structure) {
        return function (selector, fn) {
            if ("string" != typeof selector) {
                /** @type {(Function|string)} */
                fn = selector;
                /** @type {string} */
                selector = "*";
            }
            var node;
            /** @type {number} */
            var i = 0;
            var elem = selector.toLowerCase().match(core_rnotwhite) || [];
            if (jQuery.isFunction(fn)) {
                for (; node = elem[i++];) {
                    if ("+" === node[0]) {
                        node = node.slice(1) || "*";
                        (structure[node] = structure[node] || []).unshift(fn);
                    } else {
                        (structure[node] = structure[node] || []).push(fn);
                    }
                }
            }
        };
    }
    /**
     * @param {?} structure
     * @param {?} options
     * @param {Object} originalOptions
     * @param {?} jqXHR
     * @return {?}
     */
    function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
        /**
         * @param {string} key
         * @return {?}
         */
        function inspect(key) {
            var oldName;
            return old[key] = true, jQuery.each(structure[key] || [], function (dataAndEvents, prefilterOrFactory) {
                var name = prefilterOrFactory(options, originalOptions, jqXHR);
                return "string" != typeof name || (seekingTransport || old[name]) ? seekingTransport ? !(oldName = name) : void 0 : (options.dataTypes.unshift(name), inspect(name), false);
            }), oldName;
        }
        var old = {};
        /** @type {boolean} */
        var seekingTransport = structure === transports;
        return inspect(options.dataTypes[0]) || !old["*"] && inspect("*");
    }
    /**
     * @param {(Object|string)} target
     * @param {Object} src
     * @return {?}
     */
    function ajaxExtend(target, src) {
        var key;
        var deep;
        var flatOptions = jQuery.ajaxSettings.flatOptions || {};
        for (key in src) {
            if (void 0 !== src[key]) {
                (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
            }
        }
        return deep && jQuery.extend(true, target, deep), target;
    }
    /**
     * @param {Object} s
     * @param {XMLHttpRequest} jqXHR
     * @param {Object} responses
     * @return {?}
     */
    function ajaxHandleResponses(s, jqXHR, responses) {
        var ct;
        var type;
        var finalDataType;
        var firstDataType;
        var contents = s.contents;
        var dataTypes = s.dataTypes;
        for (; "*" === dataTypes[0];) {
            dataTypes.shift();
            if (void 0 === ct) {
                ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
            }
        }
        if (ct) {
            for (type in contents) {
                if (contents[type] && contents[type].test(ct)) {
                    dataTypes.unshift(type);
                    break;
                }
            }
        }
        if (dataTypes[0] in responses) {
            finalDataType = dataTypes[0];
        } else {
            for (type in responses) {
                if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
                    /** @type {string} */
                    finalDataType = type;
                    break;
                }
                if (!firstDataType) {
                    /** @type {string} */
                    firstDataType = type;
                }
            }
            /** @type {(string|undefined)} */
            finalDataType = finalDataType || firstDataType;
        }
        return finalDataType ? (finalDataType !== dataTypes[0] && dataTypes.unshift(finalDataType), responses[finalDataType]) : void 0;
    }
    /**
     * @param {Object} s
     * @param {(Object|string)} response
     * @param {?} jqXHR
     * @param {Object} isSuccess
     * @return {?}
     */
    function ajaxConvert(s, response, jqXHR, isSuccess) {
        var conv2;
        var current;
        var conv;
        var tmp;
        var prev;
        var converters = {};
        var dataTypes = s.dataTypes.slice();
        if (dataTypes[1]) {
            for (conv in s.converters) {
                converters[conv.toLowerCase()] = s.converters[conv];
            }
        }
        current = dataTypes.shift();
        for (; current;) {
            if (s.responseFields[current] && (jqXHR[s.responseFields[current]] = response), !prev && (isSuccess && (s.dataFilter && (response = s.dataFilter(response, s.dataType)))), prev = current, current = dataTypes.shift()) {
                if ("*" === current) {
                    current = prev;
                } else {
                    if ("*" !== prev && prev !== current) {
                        if (conv = converters[prev + " " + current] || converters["* " + current], !conv) {
                            for (conv2 in converters) {
                                if (tmp = conv2.split(" "), tmp[1] === current && (conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]])) {
                                    if (conv === true) {
                                        conv = converters[conv2];
                                    } else {
                                        if (converters[conv2] !== true) {
                                            /** @type {string} */
                                            current = tmp[0];
                                            dataTypes.unshift(tmp[1]);
                                        }
                                    }
                                    break;
                                }
                            }
                        }
                        if (conv !== true) {
                            if (conv && s["throws"]) {
                                response = conv(response);
                            } else {
                                try {
                                    response = conv(response);
                                } catch (e) {
                                    return {
                                        state: "parsererror",
                                        error: conv ? e : "No conversion from " + prev + " to " + current
                                    };
                                }
                            }
                        }
                    }
                }
            }
        }
        return {
            state: "success",
            data: response
        };
    }
    /**
     * @param {string} prefix
     * @param {Object} obj
     * @param {boolean} traditional
     * @param {Function} add
     * @return {undefined}
     */
    function buildParams(prefix, obj, traditional, add) {
        var name;
        if (jQuery.isArray(obj)) {
            jQuery.each(obj, function (i, v) {
                if (traditional || rmargin.test(prefix)) {
                    add(prefix, v);
                } else {
                    buildParams(prefix + "[" + ("object" == typeof v ? i : "") + "]", v, traditional, add);
                }
            });
        } else {
            if (traditional || "object" !== jQuery.type(obj)) {
                add(prefix, obj);
            } else {
                for (name in obj) {
                    buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
                }
            }
        }
    }
    /**
     * @param {Object} element
     * @return {?}
     */
    function getWindow(element) {
        return jQuery.isWindow(element) ? element : 9 === element.nodeType && element.defaultView;
    }
    /** @type {Array} */
    var core_deletedIds = [];
    /** @type {function (this:(Array.<T>|string|{length: number}), *=, *=): Array.<T>} */
    var core_slice = core_deletedIds.slice;
    /** @type {function (this:*, ...[*]): Array} */
    var core_concat = core_deletedIds.concat;
    /** @type {function (this:(Array.<T>|{length: number}), ...[T]): number} */
    var core_push = core_deletedIds.push;
    /** @type {function (this:(Array.<T>|string|{length: number}), T, number=): number} */
    var core_indexOf = core_deletedIds.indexOf;
    var class2type = {};
    /** @type {function (this:*): string} */
    var core_toString = class2type.toString;
    /** @type {function (this:Object, *): boolean} */
    var core_hasOwn = class2type.hasOwnProperty;
    var support = {};
    var doc = win.document;
    /** @type {string} */
    var core_version = "2.1.1";
    /**
     * @param {string} selector
     * @param {Function} context
     * @return {?}
     */
    var jQuery = function (selector, context) {
        return new jQuery.fn.init(selector, context);
    };
    /** @type {RegExp} */
    var badChars = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
    /** @type {RegExp} */
    var rmsPrefix = /^-ms-/;
    /** @type {RegExp} */
    var emptyParagraphRegexp = /-([\da-z])/gi;
    /**
     * @param {?} all
     * @param {string} letter
     * @return {?}
     */
    var fcamelCase = function (all, letter) {
        return letter.toUpperCase();
    };
    jQuery.fn = jQuery.prototype = {
        jquery: core_version,
        /** @type {function (string, Function): ?} */
        constructor: jQuery,
        selector: "",
        length: 0,
        /**
         * @return {?}
         */
        toArray: function () {
            return core_slice.call(this);
        },
        /**
         * @param {Object} num
         * @return {?}
         */
        get: function (num) {
            return null != num ? 0 > num ? this[num + this.length] : this[num] : core_slice.call(this);
        },
        /**
         * @param {Array} elems
         * @return {?}
         */
        pushStack: function (elems) {
            var ret = jQuery.merge(this.constructor(), elems);
            return ret.prevObject = this, ret.context = this.context, ret;
        },
        /**
         * @param {Function} opt_attributes
         * @param {Function} args
         * @return {?}
         */
        each: function (opt_attributes, args) {
            return jQuery.each(this, opt_attributes, args);
        },
        /**
         * @param {Function} callback
         * @return {?}
         */
        map: function (callback) {
            return this.pushStack(jQuery.map(this, function (el, operation) {
                return callback.call(el, operation, el);
            }));
        },
        /**
         * @return {?}
         */
        slice: function () {
            return this.pushStack(core_slice.apply(this, arguments));
        },
        /**
         * @return {?}
         */
        first: function () {
            return this.eq(0);
        },
        /**
         * @return {?}
         */
        last: function () {
            return this.eq(-1);
        },
        /**
         * @param {number} m
         * @return {?}
         */
        eq: function (m) {
            var l = this.length;
            var i = +m + (0 > m ? l : 0);
            return this.pushStack(i >= 0 && l > i ? [this[i]] : []);
        },
        /**
         * @return {?}
         */
        end: function () {
            return this.prevObject || this.constructor(null);
        },
        /** @type {function (this:(Array.<T>|{length: number}), ...[T]): number} */
        push: core_push,
        /** @type {function (this:(Array.<T>|{length: number}), function (T, T): number=): ?} */
        sort: core_deletedIds.sort,
        /** @type {function (this:(Array.<T>|{length: number}), *=, *=, ...[T]): Array.<T>} */
        splice: core_deletedIds.splice
    };
    /** @type {function (): ?} */
    jQuery.extend = jQuery.fn.extend = function () {
        var options;
        var name;
        var src;
        var copy;
        var copyIsArray;
        var clone;
        var target = arguments[0] || {};
        /** @type {number} */
        var i = 1;
        /** @type {number} */
        var l = arguments.length;
        /** @type {boolean} */
        var deep = false;
        if ("boolean" == typeof target) {
            /** @type {boolean} */
            deep = target;
            target = arguments[i] || {};
            i++;
        }
        if (!("object" == typeof target)) {
            if (!jQuery.isFunction(target)) {
                target = {};
            }
        }
        if (i === l) {
            target = this;
            i--;
        }
        for (; l > i; i++) {
            if (null != (options = arguments[i])) {
                for (name in options) {
                    src = target[name];
                    copy = options[name];
                    if (target !== copy) {
                        if (deep && (copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy))))) {
                            if (copyIsArray) {
                                /** @type {boolean} */
                                copyIsArray = false;
                                clone = src && jQuery.isArray(src) ? src : [];
                            } else {
                                clone = src && jQuery.isPlainObject(src) ? src : {};
                            }
                            target[name] = jQuery.extend(deep, clone, copy);
                        } else {
                            if (void 0 !== copy) {
                                target[name] = copy;
                            }
                        }
                    }
                }
            }
        }
        return target;
    };
    jQuery.extend({
        expando: "jQuery" + (core_version + Math.random()).replace(/\D/g, ""),
        isReady: true,
        /**
         * @param {Object} obj
         * @return {?}
         */
        error: function (obj) {
            throw new Error(obj);
        },
        /**
         * @return {undefined}
         */
        noop: function () {
        },
        /**
         * @param {Object} obj
         * @return {?}
         */
        isFunction: function (obj) {
            return "function" === jQuery.type(obj);
        },
        /** @type {function (*): boolean} */
        isArray: Array.isArray,
        /**
         * @param {Object} obj
         * @return {?}
         */
        isWindow: function (obj) {
            return null != obj && obj === obj.window;
        },
        /**
         * @param {string} val
         * @return {?}
         */
        isNumeric: function (val) {
            return !jQuery.isArray(val) && val - parseFloat(val) >= 0;
        },
        /**
         * @param {Object} obj
         * @return {?}
         */
        isPlainObject: function (obj) {
            return "object" !== jQuery.type(obj) || (obj.nodeType || jQuery.isWindow(obj)) ? false : obj.constructor && !core_hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ? false : true;
        },
        /**
         * @param {?} obj
         * @return {?}
         */
        isEmptyObject: function (obj) {
            var prop;
            for (prop in obj) {
                return false;
            }
            return true;
        },
        /**
         * @param {Object} obj
         * @return {?}
         */
        type: function (obj) {
            return null == obj ? obj + "" : "object" == typeof obj || "function" == typeof obj ? class2type[core_toString.call(obj)] || "object" : typeof obj;
        },
        /**
         * @param {string} code
         * @return {undefined}
         */
        globalEval: function (code) {
            var script;
            /** @type {function (string): *} */
            var indirect = eval;
            code = jQuery.trim(code);
            if (code) {
                if (1 === code.indexOf("use strict")) {
                    script = doc.createElement("script");
                    /** @type {string} */
                    script.text = code;
                    doc.head.appendChild(script).parentNode.removeChild(script);
                } else {
                    indirect(code);
                }
            }
        },
        /**
         * @param {string} string
         * @return {?}
         */
        camelCase: function (string) {
            return string.replace(rmsPrefix, "ms-").replace(emptyParagraphRegexp, fcamelCase);
        },
        /**
         * @param {Node} elem
         * @param {string} name
         * @return {?}
         */
        nodeName: function (elem, name) {
            return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
        },
        /**
         * @param {Function} obj
         * @param {Function} callback
         * @param {Object} args
         * @return {?}
         */
        each: function (obj, callback, args) {
            var value;
            /** @type {number} */
            var i = 0;
            var l = obj.length;
            var isArray = isArraylike(obj);
            if (args) {
                if (isArray) {
                    for (; l > i; i++) {
                        if (value = callback.apply(obj[i], args), value === false) {
                            break;
                        }
                    }
                } else {
                    for (i in obj) {
                        if (value = callback.apply(obj[i], args), value === false) {
                            break;
                        }
                    }
                }
            } else {
                if (isArray) {
                    for (; l > i; i++) {
                        if (value = callback.call(obj[i], i, obj[i]), value === false) {
                            break;
                        }
                    }
                } else {
                    for (i in obj) {
                        if (value = callback.call(obj[i], i, obj[i]), value === false) {
                            break;
                        }
                    }
                }
            }
            return obj;
        },
        /**
         * @param {Object} text
         * @return {?}
         */
        trim: function (text) {
            return null == text ? "" : (text + "").replace(badChars, "");
        },
        /**
         * @param {?} arr
         * @param {Array} results
         * @return {?}
         */
        makeArray: function (arr, results) {
            var ret = results || [];
            return null != arr && (isArraylike(Object(arr)) ? jQuery.merge(ret, "string" == typeof arr ? [arr] : arr) : core_push.call(ret, arr)), ret;
        },
        /**
         * @param {?} elem
         * @param {?} arr
         * @param {?} i
         * @return {?}
         */
        inArray: function (elem, arr, i) {
            return null == arr ? -1 : core_indexOf.call(arr, elem, i);
        },
        /**
         * @param {Array} first
         * @param {?} second
         * @return {?}
         */
        merge: function (first, second) {
            /** @type {number} */
            var jlen = +second.length;
            /** @type {number} */
            var j = 0;
            var i = first.length;
            for (; jlen > j; j++) {
                first[i++] = second[j];
            }
            return first.length = i, first;
        },
        /**
         * @param {Array} elems
         * @param {Function} callback
         * @param {?} inv
         * @return {?}
         */
        grep: function (elems, callback, inv) {
            var val;
            /** @type {Array} */
            var ret = [];
            /** @type {number} */
            var i = 0;
            var l = elems.length;
            /** @type {boolean} */
            var skip = !inv;
            for (; l > i; i++) {
                /** @type {boolean} */
                val = !callback(elems[i], i);
                if (val !== skip) {
                    ret.push(elems[i]);
                }
            }
            return ret;
        },
        /**
         * @param {Object} elems
         * @param {Function} callback
         * @param {boolean} arg
         * @return {?}
         */
        map: function (elems, callback, arg) {
            var value;
            /** @type {number} */
            var i = 0;
            var l = elems.length;
            var isArray = isArraylike(elems);
            /** @type {Array} */
            var args = [];
            if (isArray) {
                for (; l > i; i++) {
                    value = callback(elems[i], i, arg);
                    if (null != value) {
                        args.push(value);
                    }
                }
            } else {
                for (i in elems) {
                    value = callback(elems[i], i, arg);
                    if (null != value) {
                        args.push(value);
                    }
                }
            }
            return core_concat.apply([], args);
        },
        guid: 1,
        /**
         * @param {Object} fn
         * @param {(Function|string)} context
         * @return {?}
         */
        proxy: function (fn, context) {
            var tmp;
            var args;
            var proxy;
            return "string" == typeof context && (tmp = fn[context], context = fn, fn = tmp), jQuery.isFunction(fn) ? (args = core_slice.call(arguments, 2), proxy = function () {
                return fn.apply(context || this, args.concat(core_slice.call(arguments)));
            }, proxy.guid = fn.guid = fn.guid || jQuery.guid++, proxy) : void 0;
        },
        /** @type {function (): number} */
        now: Date.now,
        support: support
    });
    jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function (dataAndEvents, m3) {
        class2type["[object " + m3 + "]"] = m3.toLowerCase();
    });
    var Sizzle = function (win) {
        /**
         * @param {string} selector
         * @param {Object} context
         * @param {Array} results
         * @param {Array} seed
         * @return {?}
         */
        function Sizzle(selector, context, results, seed) {
            var match;
            var elem;
            var m;
            var nodeType;
            var i;
            var groups;
            var old;
            var nid;
            var newContext;
            var newSelector;
            if ((context ? context.ownerDocument || context : preferredDoc) !== doc && setDocument(context), context = context || doc, results = results || [], !selector || "string" != typeof selector) {
                return results;
            }
            if (1 !== (nodeType = context.nodeType) && 9 !== nodeType) {
                return [];
            }
            if (documentIsHTML && !seed) {
                if (match = rquickExpr.exec(selector)) {
                    if (m = match[1]) {
                        if (9 === nodeType) {
                            if (elem = context.getElementById(m), !elem || !elem.parentNode) {
                                return results;
                            }
                            if (elem.id === m) {
                                return results.push(elem), results;
                            }
                        } else {
                            if (context.ownerDocument && ((elem = context.ownerDocument.getElementById(m)) && (contains(context, elem) && elem.id === m))) {
                                return results.push(elem), results;
                            }
                        }
                    } else {
                        if (match[2]) {
                            return push.apply(results, context.getElementsByTagName(selector)), results;
                        }
                        if ((m = match[3]) && (support.getElementsByClassName && context.getElementsByClassName)) {
                            return push.apply(results, context.getElementsByClassName(m)), results;
                        }
                    }
                }
                if (support.qsa && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
                    if (nid = old = expando, newContext = context, newSelector = 9 === nodeType && selector, 1 === nodeType && "object" !== context.nodeName.toLowerCase()) {
                        groups = tokenize(selector);
                        if (old = context.getAttribute("id")) {
                            nid = old.replace(r20, "\\$&");
                        } else {
                            context.setAttribute("id", nid);
                        }
                        /** @type {string} */
                        nid = "[id='" + nid + "'] ";
                        i = groups.length;
                        for (; i--;) {
                            /** @type {string} */
                            groups[i] = nid + toSelector(groups[i]);
                        }
                        newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
                        newSelector = groups.join(",");
                    }
                    if (newSelector) {
                        try {
                            return push.apply(results, newContext.querySelectorAll(newSelector)), results;
                        } catch (y) {
                        } finally {
                            if (!old) {
                                context.removeAttribute("id");
                            }
                        }
                    }
                }
            }
            return select(selector.replace(rtrim, "$1"), context, results, seed);
        }
        /**
         * @return {?}
         */
        function createCache() {
            /**
             * @param {string} key
             * @param {?} value
             * @return {?}
             */
            function cache(key, value) {
                return buf.push(key + " ") > Expr.cacheLength && delete cache[buf.shift()], cache[key + " "] = value;
            }
            /** @type {Array} */
            var buf = [];
            return cache;
        }
        /**
         * @param {Function} fn
         * @return {?}
         */
        function markFunction(fn) {
            return fn[expando] = true, fn;
        }
        /**
         * @param {Function} fn
         * @return {?}
         */
        function assert(fn) {
            var t = doc.createElement("div");
            try {
                return !!fn(t);
            } catch (c) {
                return false;
            } finally {
                if (t.parentNode) {
                    t.parentNode.removeChild(t);
                }
                /** @type {null} */
                t = null;
            }
        }
        /**
         * @param {string} attrs
         * @param {Function} handler
         * @return {undefined}
         */
        function addHandle(attrs, handler) {
            var arr = attrs.split("|");
            var i = attrs.length;
            for (; i--;) {
                /** @type {Function} */
                Expr.attrHandle[arr[i]] = handler;
            }
        }
        /**
         * @param {Element} a
         * @param {Element} b
         * @return {?}
         */
        function siblingCheck(a, b) {
            var cur = b && a;
            var diff = cur && (1 === a.nodeType && (1 === b.nodeType && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE)));
            if (diff) {
                return diff;
            }
            if (cur) {
                for (; cur = cur.nextSibling;) {
                    if (cur === b) {
                        return -1;
                    }
                }
            }
            return a ? 1 : -1;
        }
        /**
         * @param {?} type
         * @return {?}
         */
        function createInputPseudo(type) {
            return function (elem) {
                var b = elem.nodeName.toLowerCase();
                return "input" === b && elem.type === type;
            };
        }
        /**
         * @param {?} type
         * @return {?}
         */
        function createButtonPseudo(type) {
            return function (elem) {
                var NULL = elem.nodeName.toLowerCase();
                return ("input" === NULL || "button" === NULL) && elem.type === type;
            };
        }
        /**
         * @param {Function} fn
         * @return {?}
         */
        function createPositionalPseudo(fn) {
            return markFunction(function (argument) {
                return argument = +argument, markFunction(function (seed, matches) {
                    var j;
                    var matchIndexes = fn([], seed.length, argument);
                    var i = matchIndexes.length;
                    for (; i--;) {
                        if (seed[j = matchIndexes[i]]) {
                            /** @type {boolean} */
                            seed[j] = !(matches[j] = seed[j]);
                        }
                    }
                });
            });
        }
        /**
         * @param {Object} context
         * @return {?}
         */
        function testContext(context) {
            return context && (typeof context.getElementsByTagName !== strundefined && context);
        }
        /**
         * @return {undefined}
         */
        function setFilters() {
        }
        /**
         * @param {Array} tokens
         * @return {?}
         */
        function toSelector(tokens) {
            /** @type {number} */
            var i = 0;
            var nTokens = tokens.length;
            /** @type {string} */
            var selector = "";
            for (; nTokens > i; i++) {
                selector += tokens[i].value;
            }
            return selector;
        }
        /**
         * @param {Function} matcher
         * @param {Object} combinator
         * @param {boolean} dataAndEvents
         * @return {?}
         */
        function addCombinator(matcher, combinator, dataAndEvents) {
            var dir = combinator.dir;
            var e = dataAndEvents && "parentNode" === dir;
            /** @type {number} */
            var doneName = done++;
            return combinator.first ? function (elem, context, xml) {
                for (; elem = elem[dir];) {
                    if (1 === elem.nodeType || e) {
                        return matcher(elem, context, xml);
                    }
                }
            } : function (elem, context, xml) {
                var oldCache;
                var outerCache;
                /** @type {Array} */
                var newCache = [dirruns, doneName];
                if (xml) {
                    for (; elem = elem[dir];) {
                        if ((1 === elem.nodeType || e) && matcher(elem, context, xml)) {
                            return true;
                        }
                    }
                } else {
                    for (; elem = elem[dir];) {
                        if (1 === elem.nodeType || e) {
                            if (outerCache = elem[expando] || (elem[expando] = {}), (oldCache = outerCache[dir]) && (oldCache[0] === dirruns && oldCache[1] === doneName)) {
                                return newCache[2] = oldCache[2];
                            }
                            if (outerCache[dir] = newCache, newCache[2] = matcher(elem, context, xml)) {
                                return true;
                            }
                        }
                    }
                }
            };
        }
        /**
         * @param {Array} matchers
         * @return {?}
         */
        function elementMatcher(matchers) {
            return matchers.length > 1 ? function (elem, context, xml) {
                var i = matchers.length;
                for (; i--;) {
                    if (!matchers[i](elem, context, xml)) {
                        return false;
                    }
                }
                return true;
            } : matchers[0];
        }
        /**
         * @param {string} selector
         * @param {Array} contexts
         * @param {?} results
         * @return {?}
         */
        function multipleContexts(selector, contexts, results) {
            /** @type {number} */
            var i = 0;
            var len = contexts.length;
            for (; len > i; i++) {
                Sizzle(selector, contexts[i], results);
            }
            return results;
        }
        /**
         * @param {Array} a
         * @param {Object} map
         * @param {string} filter
         * @param {Object} context
         * @param {?} xml
         * @return {?}
         */
        function condense(a, map, filter, context, xml) {
            var item;
            /** @type {Array} */
            var caseSensitive = [];
            /** @type {number} */
            var propName = 0;
            var al = a.length;
            /** @type {boolean} */
            var isFile = null != map;
            for (; al > propName; propName++) {
                if (item = a[propName]) {
                    if (!filter || filter(item, context, xml)) {
                        caseSensitive.push(item);
                        if (isFile) {
                            map.push(propName);
                        }
                    }
                }
            }
            return caseSensitive;
        }
        /**
         * @param {string} preFilter
         * @param {Object} selector
         * @param {boolean} matcher
         * @param {Object} postFilter
         * @param {(Object|string)} postFinder
         * @param {Object} postSelector
         * @return {?}
         */
        function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
            return postFilter && (!postFilter[expando] && (postFilter = setMatcher(postFilter))), postFinder && (!postFinder[expando] && (postFinder = setMatcher(postFinder, postSelector))), markFunction(function (seed, results, context, xml) {
                var temp;
                var i;
                var elem;
                /** @type {Array} */
                var preMap = [];
                /** @type {Array} */
                var postMap = [];
                var preexisting = results.length;
                var QUnit = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []);
                var matcherIn = !preFilter || !seed && selector ? QUnit : condense(QUnit, preMap, preFilter, context, xml);
                var matcherOut = matcher ? postFinder || (seed ? preFilter : preexisting || postFilter) ? [] : results : matcherIn;
                if (matcher && matcher(matcherIn, matcherOut, context, xml), postFilter) {
                    temp = condense(matcherOut, postMap);
                    postFilter(temp, [], context, xml);
                    i = temp.length;
                    for (; i--;) {
                        if (elem = temp[i]) {
                            /** @type {boolean} */
                            matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
                        }
                    }
                }
                if (seed) {
                    if (postFinder || preFilter) {
                        if (postFinder) {
                            /** @type {Array} */
                            temp = [];
                            i = matcherOut.length;
                            for (; i--;) {
                                if (elem = matcherOut[i]) {
                                    temp.push(matcherIn[i] = elem);
                                }
                            }
                            postFinder(null, matcherOut = [], temp, xml);
                        }
                        i = matcherOut.length;
                        for (; i--;) {
                            if (elem = matcherOut[i]) {
                                if ((temp = postFinder ? indexOf.call(seed, elem) : preMap[i]) > -1) {
                                    /** @type {boolean} */
                                    seed[temp] = !(results[temp] = elem);
                                }
                            }
                        }
                    }
                } else {
                    matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
                    if (postFinder) {
                        postFinder(null, results, matcherOut, xml);
                    } else {
                        push.apply(results, matcherOut);
                    }
                }
            });
        }
        /**
         * @param {Object} tokens
         * @return {?}
         */
        function matcherFromTokens(tokens) {
            var checkContext;
            var matcher;
            var j;
            var len = tokens.length;
            var leadingRelative = Expr.relative[tokens[0].type];
            var implicitRelative = leadingRelative || Expr.relative[" "];
            /** @type {number} */
            var i = leadingRelative ? 1 : 0;
            var matchContext = addCombinator(function (dataAndEvents) {
                return dataAndEvents === checkContext;
            }, implicitRelative, true);
            var matchAnyContext = addCombinator(function (elem) {
                return indexOf.call(checkContext, elem) > -1;
            }, implicitRelative, true);
            /** @type {Array} */
            var matchers = [function (elem, context, xml) {
                return !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
            }];
            for (; len > i; i++) {
                if (matcher = Expr.relative[tokens[i].type]) {
                    /** @type {Array} */
                    matchers = [addCombinator(elementMatcher(matchers), matcher)];
                } else {
                    if (matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches), matcher[expando]) {
                        /** @type {number} */
                        j = ++i;
                        for (; len > j; j++) {
                            if (Expr.relative[tokens[j].type]) {
                                break;
                            }
                        }
                        return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(tokens.slice(0, i - 1).concat({
                            value: " " === tokens[i - 2].type ? "*" : ""
                        })).replace(rtrim, "$1"), matcher, j > i && matcherFromTokens(tokens.slice(i, j)), len > j && matcherFromTokens(tokens = tokens.slice(j)), len > j && toSelector(tokens));
                    }
                    matchers.push(matcher);
                }
            }
            return elementMatcher(matchers);
        }
        /**
         * @param {Array} elementMatchers
         * @param {Array} setMatchers
         * @return {?}
         */
        function matcherFromGroupMatchers(elementMatchers, setMatchers) {
            /** @type {boolean} */
            var bySet = setMatchers.length > 0;
            /** @type {boolean} */
            var triggerElem = elementMatchers.length > 0;
            /**
             * @param {HTMLElement} results
             * @param {Function} context
             * @param {?} xml
             * @param {Array} ret
             * @param {Object} selFrom
             * @return {?}
             */
            var superMatcher = function (results, context, xml, ret, selFrom) {
                var elem;
                var j;
                var matcher;
                /** @type {number} */
                var matchedCount = 0;
                /** @type {string} */
                var i = "0";
                var matches = results && [];
                /** @type {Array} */
                var setMatched = [];
                var contextBackup = outermostContext;
                var unmatched = results || triggerElem && Expr.find.TAG("*", selFrom);
                var dirrunsUnique = dirruns += null == contextBackup ? 1 : Math.random() || 0.1;
                var len = unmatched.length;
                if (selFrom) {
                    outermostContext = context !== doc && context;
                }
                for (; i !== len && null != (elem = unmatched[i]) ; i++) {
                    if (triggerElem && elem) {
                        /** @type {number} */
                        j = 0;
                        for (; matcher = elementMatchers[j++];) {
                            if (matcher(elem, context, xml)) {
                                ret.push(elem);
                                break;
                            }
                        }
                        if (selFrom) {
                            dirruns = dirrunsUnique;
                        }
                    }
                    if (bySet) {
                        if (elem = !matcher && elem) {
                            matchedCount--;
                        }
                        if (results) {
                            matches.push(elem);
                        }
                    }
                }
                if (matchedCount += i, bySet && i !== matchedCount) {
                    /** @type {number} */
                    j = 0;
                    for (; matcher = setMatchers[j++];) {
                        matcher(matches, setMatched, context, xml);
                    }
                    if (results) {
                        if (matchedCount > 0) {
                            for (; i--;) {
                                if (!matches[i]) {
                                    if (!setMatched[i]) {
                                        setMatched[i] = pop.call(ret);
                                    }
                                }
                            }
                        }
                        setMatched = condense(setMatched);
                    }
                    push.apply(ret, setMatched);
                    if (selFrom) {
                        if (!results) {
                            if (setMatched.length > 0) {
                                if (matchedCount + setMatchers.length > 1) {
                                    Sizzle.uniqueSort(ret);
                                }
                            }
                        }
                    }
                }
                return selFrom && (dirruns = dirrunsUnique, outermostContext = contextBackup), matches;
            };
            return bySet ? markFunction(superMatcher) : superMatcher;
        }
        var i;
        var support;
        var Expr;
        var getText;
        var objectToString;
        var tokenize;
        var compile;
        var select;
        var outermostContext;
        var sortInput;
        var l;
        var setDocument;
        var doc;
        var docElem;
        var documentIsHTML;
        var rbuggyQSA;
        var rbuggyMatches;
        var matches;
        var contains;
        /** @type {string} */
        var expando = "sizzle" + -new Date;
        var preferredDoc = win.document;
        /** @type {number} */
        var dirruns = 0;
        /** @type {number} */
        var done = 0;
        var classCache = createCache();
        var tokenCache = createCache();
        var compilerCache = createCache();
        /**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        var sortOrder = function (a, b) {
            return a === b && (l = true), 0;
        };
        /** @type {string} */
        var strundefined = "undefined";
        /** @type {number} */
        var MAX_NEGATIVE = 1 << 31;
        /** @type {function (this:Object, *): boolean} */
        var hasOwn = {}.hasOwnProperty;
        /** @type {Array} */
        var arr = [];
        /** @type {function (this:(Array.<T>|{length: number})): T} */
        var pop = arr.pop;
        /** @type {function (this:(Array.<T>|{length: number}), ...[T]): number} */
        var fn = arr.push;
        /** @type {function (this:(Array.<T>|{length: number}), ...[T]): number} */
        var push = arr.push;
        /** @type {function (this:(Array.<T>|string|{length: number}), *=, *=): Array.<T>} */
        var slice = arr.slice;
        /** @type {function (this:(Array.<T>|string|{length: number}), T, number=): number} */
        var indexOf = arr.indexOf || function (type) {
            /** @type {number} */
            var j = 0;
            var len = this.length;
            for (; len > j; j++) {
                if (this[j] === type) {
                    return j;
                }
            }
            return -1;
        };
        /** @type {string} */
        var booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped";
        /** @type {string} */
        var version = "[\\x20\\t\\r\\n\\f]";
        /** @type {string} */
        var characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+";
        /** @type {string} */
        var identifier = characterEncoding.replace("w", "w#");
        /** @type {string} */
        var attributes = "\\[" + version + "*(" + characterEncoding + ")(?:" + version + "*([*^$|!~]?=)" + version + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + version + "*\\]";
        /** @type {string} */
        var pseudos = ":(" + characterEncoding + ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|.*)\\)|)";
        /** @type {RegExp} */
        var rtrim = new RegExp("^" + version + "+|((?:^|[^\\\\])(?:\\\\.)*)" + version + "+$", "g");
        /** @type {RegExp} */
        var rcomma = new RegExp("^" + version + "*," + version + "*");
        /** @type {RegExp} */
        var rcombinators = new RegExp("^" + version + "*([>+~]|" + version + ")" + version + "*");
        /** @type {RegExp} */
        var rattributeQuotes = new RegExp("=" + version + "*([^\\]'\"]*?)" + version + "*\\]", "g");
        /** @type {RegExp} */
        var rpseudo = new RegExp(pseudos);
        /** @type {RegExp} */
        var ridentifier = new RegExp("^" + identifier + "$");
        var matchExpr = {
            ID: new RegExp("^#(" + characterEncoding + ")"),
            CLASS: new RegExp("^\\.(" + characterEncoding + ")"),
            TAG: new RegExp("^(" + characterEncoding.replace("w", "w*") + ")"),
            ATTR: new RegExp("^" + attributes),
            PSEUDO: new RegExp("^" + pseudos),
            CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + version + "*(even|odd|(([+-]|)(\\d*)n|)" + version + "*(?:([+-]|)" + version + "*(\\d+)|))" + version + "*\\)|)", "i"),
            bool: new RegExp("^(?:" + booleans + ")$", "i"),
            needsContext: new RegExp("^" + version + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + version + "*((?:-\\d)?\\d*)" + version + "*\\)|)(?=[^-]|$)", "i")
        };
        /** @type {RegExp} */
        var rinputs = /^(?:input|select|textarea|button)$/i;
        /** @type {RegExp} */
        var rheader = /^h\d$/i;
        /** @type {RegExp} */
        var rnative = /^[^{]+\{\s*\[native \w/;
        /** @type {RegExp} */
        var rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/;
        /** @type {RegExp} */
        var rsibling = /[+~]/;
        /** @type {RegExp} */
        var r20 = /'|\\/g;
        /** @type {RegExp} */
        var runescape = new RegExp("\\\\([\\da-f]{1,6}" + version + "?|(" + version + ")|.)", "ig");
        /**
         * @param {?} _
         * @param {(number|string)} escaped
         * @param {boolean} escapedWhitespace
         * @return {?}
         */
        var funescape = function (_, escaped, escapedWhitespace) {
            /** @type {number} */
            var high = "0x" + escaped - 65536;
            return high !== high || escapedWhitespace ? escaped : 0 > high ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, 1023 & high | 56320);
        };
        try {
            push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
            arr[preferredDoc.childNodes.length].nodeType;
        } catch (eb) {
            push = {
                /** @type {function (?, ?): undefined} */
                apply: arr.length ? function (elems, args) {
                    fn.apply(elems, slice.call(args));
                } : function (second, collection) {
                    var j = second.length;
                    /** @type {number} */
                    var index = 0;
                    for (; second[j++] = collection[index++];) {
                    }
                    /** @type {number} */
                    second.length = j - 1;
                }
            };
        }
        support = Sizzle.support = {};
        /** @type {function (Object): ?} */
        objectToString = Sizzle.isXML = function (elem) {
            var node = elem && (elem.ownerDocument || elem).documentElement;
            return node ? "HTML" !== node.nodeName : false;
        };
        /** @type {function (boolean): ?} */
        setDocument = Sizzle.setDocument = function (node) {
            var hasCompare;
            var d = node ? node.ownerDocument || node : preferredDoc;
            var parent = d.defaultView;
            return d !== doc && (9 === d.nodeType && d.documentElement) ? (doc = d, docElem = d.documentElement, documentIsHTML = !objectToString(d), parent && (parent !== parent.top && (parent.addEventListener ? parent.addEventListener("unload", function () {
                setDocument();
            }, false) : parent.attachEvent && parent.attachEvent("onunload", function () {
                setDocument();
            }))), support.attributes = assert(function (div) {
                return div.className = "i", !div.getAttribute("className");
            }), support.getElementsByTagName = assert(function (div) {
                return div.appendChild(d.createComment("")), !div.getElementsByTagName("*").length;
            }), support.getElementsByClassName = rnative.test(d.getElementsByClassName) && assert(function (div) {
                return div.innerHTML = "<div class='a'></div><div class='a i'></div>", div.firstChild.className = "i", 2 === div.getElementsByClassName("i").length;
            }), support.getById = assert(function (div) {
                return docElem.appendChild(div).id = expando, !d.getElementsByName || !d.getElementsByName(expando).length;
            }), support.getById ? (Expr.find.ID = function (id, context) {
                if (typeof context.getElementById !== strundefined && documentIsHTML) {
                    var m = context.getElementById(id);
                    return m && m.parentNode ? [m] : [];
                }
            }, Expr.filter.ID = function (id) {
                var attrId = id.replace(runescape, funescape);
                return function (elem) {
                    return elem.getAttribute("id") === attrId;
                };
            }) : (delete Expr.find.ID, Expr.filter.ID = function (id) {
                var attrId = id.replace(runescape, funescape);
                return function (elem) {
                    var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
                    return node && node.value === attrId;
                };
            }), Expr.find.TAG = support.getElementsByTagName ? function (tag, from) {
                return typeof from.getElementsByTagName !== strundefined ? from.getElementsByTagName(tag) : void 0;
            } : function (tag, from) {
                var cur;
                /** @type {Array} */
                var eventPath = [];
                /** @type {number} */
                var ri = 0;
                var tmp = from.getElementsByTagName(tag);
                if ("*" === tag) {
                    for (; cur = tmp[ri++];) {
                        if (1 === cur.nodeType) {
                            eventPath.push(cur);
                        }
                    }
                    return eventPath;
                }
                return tmp;
            }, Expr.find.CLASS = support.getElementsByClassName && function (className, context) {
                return typeof context.getElementsByClassName !== strundefined && documentIsHTML ? context.getElementsByClassName(className) : void 0;
            }, rbuggyMatches = [], rbuggyQSA = [], (support.qsa = rnative.test(d.querySelectorAll)) && (assert(function (div) {
                /** @type {string} */
                div.innerHTML = "<select msallowclip=''><option selected=''></option></select>";
                if (div.querySelectorAll("[msallowclip^='']").length) {
                    rbuggyQSA.push("[*^$]=" + version + "*(?:''|\"\")");
                }
                if (!div.querySelectorAll("[selected]").length) {
                    rbuggyQSA.push("\\[" + version + "*(?:value|" + booleans + ")");
                }
                if (!div.querySelectorAll(":checked").length) {
                    rbuggyQSA.push(":checked");
                }
            }), assert(function (div) {
                var input = d.createElement("input");
                input.setAttribute("type", "hidden");
                div.appendChild(input).setAttribute("name", "D");
                if (div.querySelectorAll("[name=d]").length) {
                    rbuggyQSA.push("name" + version + "*[*^$|!~]?=");
                }
                if (!div.querySelectorAll(":enabled").length) {
                    rbuggyQSA.push(":enabled", ":disabled");
                }
                div.querySelectorAll("*,:x");
                rbuggyQSA.push(",.*:");
            })), (support.matchesSelector = rnative.test(matches = docElem.matches || (docElem.webkitMatchesSelector || (docElem.mozMatchesSelector || (docElem.oMatchesSelector || docElem.msMatchesSelector))))) && assert(function (div) {
                support.disconnectedMatch = matches.call(div, "div");
                matches.call(div, "[s!='']:x");
                rbuggyMatches.push("!=", pseudos);
            }), rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|")), rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|")), hasCompare = rnative.test(docElem.compareDocumentPosition), contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {
                var adown = 9 === a.nodeType ? a.documentElement : a;
                var bup = b && b.parentNode;
                return a === bup || !(!bup || (1 !== bup.nodeType || !(adown.contains ? adown.contains(bup) : a.compareDocumentPosition && 16 & a.compareDocumentPosition(bup))));
            } : function (a, b) {
                if (b) {
                    for (; b = b.parentNode;) {
                        if (b === a) {
                            return true;
                        }
                    }
                }
                return false;
            }, sortOrder = hasCompare ? function (a, b) {
                if (a === b) {
                    return l = true, 0;
                }
                /** @type {number} */
                var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
                return compare ? compare : (compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1, 1 & compare || !support.sortDetached && b.compareDocumentPosition(a) === compare ? a === d || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ? -1 : b === d || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ? 1 : sortInput ? indexOf.call(sortInput, a) - indexOf.call(sortInput, b) : 0 : 4 & compare ? -1 : 1);
            } : function (a, b) {
                if (a === b) {
                    return l = true, 0;
                }
                var cur;
                /** @type {number} */
                var i = 0;
                var aup = a.parentNode;
                var bup = b.parentNode;
                /** @type {Array} */
                var ap = [a];
                /** @type {Array} */
                var bp = [b];
                if (!aup || !bup) {
                    return a === d ? -1 : b === d ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf.call(sortInput, a) - indexOf.call(sortInput, b) : 0;
                }
                if (aup === bup) {
                    return siblingCheck(a, b);
                }
                cur = a;
                for (; cur = cur.parentNode;) {
                    ap.unshift(cur);
                }
                cur = b;
                for (; cur = cur.parentNode;) {
                    bp.unshift(cur);
                }
                for (; ap[i] === bp[i];) {
                    i++;
                }
                return i ? siblingCheck(ap[i], bp[i]) : ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
            }, d) : doc;
        };
        /**
         * @param {string} expr
         * @param {Array} elements
         * @return {?}
         */
        Sizzle.matches = function (expr, elements) {
            return Sizzle(expr, null, null, elements);
        };
        /**
         * @param {HTMLElement} elem
         * @param {string} expr
         * @return {?}
         */
        Sizzle.matchesSelector = function (elem, expr) {
            if ((elem.ownerDocument || elem) !== doc && setDocument(elem), expr = expr.replace(rattributeQuotes, "='$1']"), !(!support.matchesSelector || (!documentIsHTML || (rbuggyMatches && rbuggyMatches.test(expr) || rbuggyQSA && rbuggyQSA.test(expr))))) {
                try {
                    var ret = matches.call(elem, expr);
                    if (ret || (support.disconnectedMatch || elem.document && 11 !== elem.document.nodeType)) {
                        return ret;
                    }
                } catch (e) {
                }
            }
            return Sizzle(expr, doc, null, [elem]).length > 0;
        };
        /**
         * @param {Object} context
         * @param {Object} b
         * @return {?}
         */
        Sizzle.contains = function (context, b) {
            return (context.ownerDocument || context) !== doc && setDocument(context), contains(context, b);
        };
        /**
         * @param {Object} elem
         * @param {string} name
         * @return {?}
         */
        Sizzle.attr = function (elem, name) {
            if ((elem.ownerDocument || elem) !== doc) {
                setDocument(elem);
            }
            var fn = Expr.attrHandle[name.toLowerCase()];
            var val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : void 0;
            return void 0 !== val ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
        };
        /**
         * @param {Object} obj
         * @return {?}
         */
        Sizzle.error = function (obj) {
            throw new Error("Syntax error, unrecognized expression: " + obj);
        };
        /**
         * @param {Array} results
         * @return {?}
         */
        Sizzle.uniqueSort = function (results) {
            var elem;
            /** @type {Array} */
            var duplicates = [];
            /** @type {number} */
            var j = 0;
            /** @type {number} */
            var i = 0;
            if (l = !support.detectDuplicates, sortInput = !support.sortStable && results.slice(0), results.sort(sortOrder), l) {
                for (; elem = results[i++];) {
                    if (elem === results[i]) {
                        /** @type {number} */
                        j = duplicates.push(i);
                    }
                }
                for (; j--;) {
                    results.splice(duplicates[j], 1);
                }
            }
            return sortInput = null, results;
        };
        /** @type {function ((Array|Element)): ?} */
        getText = Sizzle.getText = function (elem) {
            var node;
            /** @type {string} */
            var ret = "";
            /** @type {number} */
            var i = 0;
            var nodeType = elem.nodeType;
            if (nodeType) {
                if (1 === nodeType || (9 === nodeType || 11 === nodeType)) {
                    if ("string" == typeof elem.textContent) {
                        return elem.textContent;
                    }
                    elem = elem.firstChild;
                    for (; elem; elem = elem.nextSibling) {
                        ret += getText(elem);
                    }
                } else {
                    if (3 === nodeType || 4 === nodeType) {
                        return elem.nodeValue;
                    }
                }
            } else {
                for (; node = elem[i++];) {
                    ret += getText(node);
                }
            }
            return ret;
        };
        Expr = Sizzle.selectors = {
            cacheLength: 50,
            /** @type {function (Function): ?} */
            createPseudo: markFunction,
            match: matchExpr,
            attrHandle: {},
            find: {},
            relative: {
                ">": {
                    dir: "parentNode",
                    first: true
                },
                " ": {
                    dir: "parentNode"
                },
                "+": {
                    dir: "previousSibling",
                    first: true
                },
                "~": {
                    dir: "previousSibling"
                }
            },
            preFilter: {
                /**
                 * @param {Array} match
                 * @return {?}
                 */
                ATTR: function (match) {
                    return match[1] = match[1].replace(runescape, funescape), match[3] = (match[3] || (match[4] || (match[5] || ""))).replace(runescape, funescape), "~=" === match[2] && (match[3] = " " + match[3] + " "), match.slice(0, 4);
                },
                /**
                 * @param {Array} match
                 * @return {?}
                 */
                CHILD: function (match) {
                    return match[1] = match[1].toLowerCase(), "nth" === match[1].slice(0, 3) ? (match[3] || Sizzle.error(match[0]), match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * ("even" === match[3] || "odd" === match[3])), match[5] = +(match[7] + match[8] || "odd" === match[3])) : match[3] && Sizzle.error(match[0]), match;
                },
                /**
                 * @param {Array} match
                 * @return {?}
                 */
                PSEUDO: function (match) {
                    var excess;
                    var unquoted = !match[6] && match[2];
                    return matchExpr.CHILD.test(match[0]) ? null : (match[3] ? match[2] = match[4] || (match[5] || "") : unquoted && (rpseudo.test(unquoted) && ((excess = tokenize(unquoted, true)) && ((excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length) && (match[0] = match[0].slice(0, excess), match[2] = unquoted.slice(0, excess))))), match.slice(0, 3));
                }
            },
            filter: {
                /**
                 * @param {string} nodeNameSelector
                 * @return {?}
                 */
                TAG: function (nodeNameSelector) {
                    var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
                    return "*" === nodeNameSelector ? function () {
                        return true;
                    } : function (elem) {
                        return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                    };
                },
                /**
                 * @param {string} className
                 * @return {?}
                 */
                CLASS: function (className) {
                    var pattern = classCache[className + " "];
                    return pattern || (pattern = new RegExp("(^|" + version + ")" + className + "(" + version + "|$)")) && classCache(className, function (elem) {
                        return pattern.test("string" == typeof elem.className && elem.className || (typeof elem.getAttribute !== strundefined && elem.getAttribute("class") || ""));
                    });
                },
                /**
                 * @param {string} name
                 * @param {string} not
                 * @param {string} b
                 * @return {?}
                 */
                ATTR: function (name, not, b) {
                    return function (elem) {
                        var a = Sizzle.attr(elem, name);
                        return null == a ? "!=" === not : not ? (a += "", "=" === not ? a === b : "!=" === not ? a !== b : "^=" === not ? b && 0 === a.indexOf(b) : "*=" === not ? b && a.indexOf(b) > -1 : "$=" === not ? b && a.slice(-b.length) === b : "~=" === not ? (" " + a + " ").indexOf(b) > -1 : "|=" === not ? a === b || a.slice(0, b.length + 1) === b + "-" : false) : true;
                    };
                },
                /**
                 * @param {string} type
                 * @param {string} argument
                 * @param {?} dataAndEvents
                 * @param {number} first
                 * @param {number} last
                 * @return {?}
                 */
                CHILD: function (type, argument, dataAndEvents, first, last) {
                    /** @type {boolean} */
                    var simple = "nth" !== type.slice(0, 3);
                    /** @type {boolean} */
                    var forward = "last" !== type.slice(-4);
                    /** @type {boolean} */
                    var value = "of-type" === argument;
                    return 1 === first && 0 === last ? function (contestant) {
                        return !!contestant.parentNode;
                    } : function (elem, dataAndEvents, computed) {
                        var cache;
                        var outerCache;
                        var node;
                        var diff;
                        var nodeIndex;
                        var eventPath;
                        /** @type {string} */
                        var which = simple !== forward ? "nextSibling" : "previousSibling";
                        var parent = elem.parentNode;
                        var attrNames = value && elem.nodeName.toLowerCase();
                        /** @type {boolean} */
                        var useCache = !computed && !value;
                        if (parent) {
                            if (simple) {
                                for (; which;) {
                                    /** @type {Node} */
                                    node = elem;
                                    for (; node = node[which];) {
                                        if (value ? node.nodeName.toLowerCase() === attrNames : 1 === node.nodeType) {
                                            return false;
                                        }
                                    }
                                    /** @type {(boolean|string)} */
                                    eventPath = which = "only" === type && (!eventPath && "nextSibling");
                                }
                                return true;
                            }
                            if (eventPath = [forward ? parent.firstChild : parent.lastChild], forward && useCache) {
                                outerCache = parent[expando] || (parent[expando] = {});
                                cache = outerCache[type] || [];
                                nodeIndex = cache[0] === dirruns && cache[1];
                                diff = cache[0] === dirruns && cache[2];
                                node = nodeIndex && parent.childNodes[nodeIndex];
                                for (; node = ++nodeIndex && (node && node[which]) || ((diff = nodeIndex = 0) || eventPath.pop()) ;) {
                                    if (1 === node.nodeType && (++diff && node === elem)) {
                                        /** @type {Array} */
                                        outerCache[type] = [dirruns, nodeIndex, diff];
                                        break;
                                    }
                                }
                            } else {
                                if (useCache && ((cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns)) {
                                    diff = cache[1];
                                } else {
                                    for (; node = ++nodeIndex && (node && node[which]) || ((diff = nodeIndex = 0) || eventPath.pop()) ;) {
                                        if ((value ? node.nodeName.toLowerCase() === attrNames : 1 === node.nodeType) && (++diff && (useCache && ((node[expando] || (node[expando] = {}))[type] = [dirruns, diff]), node === elem))) {
                                            break;
                                        }
                                    }
                                }
                            }
                            return diff -= last, diff === first || diff % first === 0 && diff / first >= 0;
                        }
                    };
                },
                /**
                 * @param {string} pseudo
                 * @param {?} argument
                 * @return {?}
                 */
                PSEUDO: function (pseudo, argument) {
                    var args;
                    var fn = Expr.pseudos[pseudo] || (Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo));
                    return fn[expando] ? fn(argument) : fn.length > 1 ? (args = [pseudo, pseudo, "", argument], Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
                        var idx;
                        var matched = fn(seed, argument);
                        var i = matched.length;
                        for (; i--;) {
                            /** @type {number} */
                            idx = indexOf.call(seed, matched[i]);
                            /** @type {boolean} */
                            seed[idx] = !(matches[idx] = matched[i]);
                        }
                    }) : function (err) {
                        return fn(err, 0, args);
                    }) : fn;
                }
            },
            pseudos: {
                not: markFunction(function (selector) {
                    /** @type {Array} */
                    var elem = [];
                    /** @type {Array} */
                    var memory = [];
                    var matcher = compile(selector.replace(rtrim, "$1"));
                    return matcher[expando] ? markFunction(function (seed, qs, dataAndEvents, xml) {
                        var val;
                        var unmatched = matcher(seed, null, xml, []);
                        var i = seed.length;
                        for (; i--;) {
                            if (val = unmatched[i]) {
                                /** @type {boolean} */
                                seed[i] = !(qs[i] = val);
                            }
                        }
                    }) : function (value, dataAndEvents, xml) {
                        return elem[0] = value, matcher(elem, null, xml, memory), !memory.pop();
                    };
                }),
                has: markFunction(function (selector) {
                    return function (elem) {
                        return Sizzle(selector, elem).length > 0;
                    };
                }),
                contains: markFunction(function (other) {
                    return function (elem) {
                        return (elem.textContent || (elem.innerText || getText(elem))).indexOf(other) > -1;
                    };
                }),
                lang: markFunction(function (lang) {
                    return ridentifier.test(lang || "") || Sizzle.error("unsupported lang: " + lang), lang = lang.replace(runescape, funescape).toLowerCase(), function (elem) {
                        var elemLang;
                        do {
                            if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                                return elemLang = elemLang.toLowerCase(), elemLang === lang || 0 === elemLang.indexOf(lang + "-");
                            }
                        } while ((elem = elem.parentNode) && 1 === elem.nodeType);
                        return false;
                    };
                }),
                /**
                 * @param {Object} obj
                 * @return {?}
                 */
                target: function (obj) {
                    var models = win.location && win.location.hash;
                    return models && models.slice(1) === obj.id;
                },
                /**
                 * @param {undefined} elem
                 * @return {?}
                 */
                root: function (elem) {
                    return elem === docElem;
                },
                /**
                 * @param {Object} elem
                 * @return {?}
                 */
                focus: function (elem) {
                    return elem === doc.activeElement && ((!doc.hasFocus || doc.hasFocus()) && !!(elem.type || (elem.href || ~elem.tabIndex)));
                },
                /**
                 * @param {EventTarget} a
                 * @return {?}
                 */
                enabled: function (a) {
                    return a.disabled === false;
                },
                /**
                 * @param {EventTarget} elem
                 * @return {?}
                 */
                disabled: function (elem) {
                    return elem.disabled === true;
                },
                /**
                 * @param {Node} node
                 * @return {?}
                 */
                checked: function (node) {
                    var b = node.nodeName.toLowerCase();
                    return "input" === b && !!node.checked || "option" === b && !!node.selected;
                },
                /**
                 * @param {Node} elem
                 * @return {?}
                 */
                selected: function (elem) {
                    return elem.parentNode && elem.parentNode.selectedIndex, elem.selected === true;
                },
                /**
                 * @param {(Array|Element)} elem
                 * @return {?}
                 */
                empty: function (elem) {
                    elem = elem.firstChild;
                    for (; elem; elem = elem.nextSibling) {
                        if (elem.nodeType < 6) {
                            return false;
                        }
                    }
                    return true;
                },
                /**
                 * @param {undefined} elem
                 * @return {?}
                 */
                parent: function (elem) {
                    return !Expr.pseudos.empty(elem);
                },
                /**
                 * @param {Node} elem
                 * @return {?}
                 */
                header: function (elem) {
                    return rheader.test(elem.nodeName);
                },
                /**
                 * @param {Node} elem
                 * @return {?}
                 */
                input: function (elem) {
                    return rinputs.test(elem.nodeName);
                },
                /**
                 * @param {Node} elem
                 * @return {?}
                 */
                button: function (elem) {
                    var b = elem.nodeName.toLowerCase();
                    return "input" === b && "button" === elem.type || "button" === b;
                },
                /**
                 * @param {Node} elem
                 * @return {?}
                 */
                text: function (elem) {
                    var evt;
                    return "input" === elem.nodeName.toLowerCase() && ("text" === elem.type && (null == (evt = elem.getAttribute("type")) || "text" === evt.toLowerCase()));
                },
                first: createPositionalPseudo(function () {
                    return [0];
                }),
                last: createPositionalPseudo(function (dataAndEvents, deepDataAndEvents) {
                    return [deepDataAndEvents - 1];
                }),
                eq: createPositionalPseudo(function (dataAndEvents, length, index) {
                    return [0 > index ? index + length : index];
                }),
                even: createPositionalPseudo(function (assigns, dataAndEvents) {
                    /** @type {number} */
                    var vvar = 0;
                    for (; dataAndEvents > vvar; vvar += 2) {
                        assigns.push(vvar);
                    }
                    return assigns;
                }),
                odd: createPositionalPseudo(function (assigns, dataAndEvents) {
                    /** @type {number} */
                    var vvar = 1;
                    for (; dataAndEvents > vvar; vvar += 2) {
                        assigns.push(vvar);
                    }
                    return assigns;
                }),
                lt: createPositionalPseudo(function (assigns, length, index) {
                    var vvar = 0 > index ? index + length : index;
                    for (; --vvar >= 0;) {
                        assigns.push(vvar);
                    }
                    return assigns;
                }),
                gt: createPositionalPseudo(function (assigns, length, index) {
                    var vvar = 0 > index ? index + length : index;
                    for (; ++vvar < length;) {
                        assigns.push(vvar);
                    }
                    return assigns;
                })
            }
        };
        Expr.pseudos.nth = Expr.pseudos.eq;
        for (i in {
            radio: true,
            checkbox: true,
            file: true,
            password: true,
            image: true
        }) {
            Expr.pseudos[i] = createInputPseudo(i);
        }
        for (i in {
            submit: true,
            reset: true
        }) {
            Expr.pseudos[i] = createButtonPseudo(i);
        }
        setFilters.prototype = Expr.filters = Expr.pseudos;
        Expr.setFilters = new setFilters;
        /** @type {function ((Object|string), boolean): ?} */
        tokenize = Sizzle.tokenize = function (selector, parseOnly) {
            var matched;
            var match;
            var tokens;
            var type;
            var soFar;
            var groups;
            var preFilters;
            var cached = tokenCache[selector + " "];
            if (cached) {
                return parseOnly ? 0 : cached.slice(0);
            }
            /** @type {(Object|string)} */
            soFar = selector;
            /** @type {Array} */
            groups = [];
            preFilters = Expr.preFilter;
            for (; soFar;) {
                if (!matched || (match = rcomma.exec(soFar))) {
                    if (match) {
                        soFar = soFar.slice(match[0].length) || soFar;
                    }
                    groups.push(tokens = []);
                }
                /** @type {boolean} */
                matched = false;
                if (match = rcombinators.exec(soFar)) {
                    /** @type {string} */
                    matched = match.shift();
                    tokens.push({
                        value: matched,
                        type: match[0].replace(rtrim, " ")
                    });
                    soFar = soFar.slice(matched.length);
                }
                for (type in Expr.filter) {
                    if (!!(match = matchExpr[type].exec(soFar))) {
                        if (!(preFilters[type] && !(match = preFilters[type](match)))) {
                            matched = match.shift();
                            tokens.push({
                                value: matched,
                                type: type,
                                matches: match
                            });
                            soFar = soFar.slice(matched.length);
                        }
                    }
                }
                if (!matched) {
                    break;
                }
            }
            return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : tokenCache(selector, groups).slice(0);
        };
        return compile = Sizzle.compile = function (selector, group) {
            var i;
            /** @type {Array} */
            var setMatchers = [];
            /** @type {Array} */
            var elementMatchers = [];
            var cached = compilerCache[selector + " "];
            if (!cached) {
                if (!group) {
                    group = tokenize(selector);
                }
                i = group.length;
                for (; i--;) {
                    cached = matcherFromTokens(group[i]);
                    if (cached[expando]) {
                        setMatchers.push(cached);
                    } else {
                        elementMatchers.push(cached);
                    }
                }
                cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
                /** @type {string} */
                cached.selector = selector;
            }
            return cached;
        }, select = Sizzle.select = function (selector, context, ret, a) {
            var i;
            var tokens;
            var token;
            var type;
            var find;
            /** @type {(Function|boolean)} */
            var compiled = "function" == typeof selector && selector;
            var match = !a && tokenize(selector = compiled.selector || selector);
            if (ret = ret || [], 1 === match.length) {
                if (tokens = match[0] = match[0].slice(0), tokens.length > 2 && ("ID" === (token = tokens[0]).type && (support.getById && (9 === context.nodeType && (documentIsHTML && Expr.relative[tokens[1].type]))))) {
                    if (context = (Expr.find.ID(token.matches[0].replace(runescape, funescape), context) || [])[0], !context) {
                        return ret;
                    }
                    if (compiled) {
                        context = context.parentNode;
                    }
                    selector = selector.slice(tokens.shift().value.length);
                }
                i = matchExpr.needsContext.test(selector) ? 0 : tokens.length;
                for (; i--;) {
                    if (token = tokens[i], Expr.relative[type = token.type]) {
                        break;
                    }
                    if ((find = Expr.find[type]) && (a = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context))) {
                        if (tokens.splice(i, 1), selector = a.length && toSelector(tokens), !selector) {
                            return push.apply(ret, a), ret;
                        }
                        break;
                    }
                }
            }
            return (compiled || compile(selector, match))(a, context, !documentIsHTML, ret, rsibling.test(selector) && testContext(context.parentNode) || context), ret;
        }, support.sortStable = expando.split("").sort(sortOrder).join("") === expando, support.detectDuplicates = !!l, setDocument(), support.sortDetached = assert(function (div1) {
            return 1 & div1.compareDocumentPosition(doc.createElement("div"));
        }), assert(function (div) {
            return div.innerHTML = "<a href='#'></a>", "#" === div.firstChild.getAttribute("href");
        }) || addHandle("type|href|height|width", function (elem, name, flag_xml) {
            return flag_xml ? void 0 : elem.getAttribute(name, "type" === name.toLowerCase() ? 1 : 2);
        }), support.attributes && assert(function (div) {
            return div.innerHTML = "<input/>", div.firstChild.setAttribute("value", ""), "" === div.firstChild.getAttribute("value");
        }) || addHandle("value", function (target, dataAndEvents, defaultValue) {
            return defaultValue || "input" !== target.nodeName.toLowerCase() ? void 0 : target.defaultValue;
        }), assert(function (div) {
            return null == div.getAttribute("disabled");
        }) || addHandle(booleans, function (elem, name, dataAndEvents) {
            var val;
            return dataAndEvents ? void 0 : elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
        }), Sizzle;
    }(win);
    jQuery.find = Sizzle;
    jQuery.expr = Sizzle.selectors;
    jQuery.expr[":"] = jQuery.expr.pseudos;
    jQuery.unique = Sizzle.uniqueSort;
    jQuery.text = Sizzle.getText;
    jQuery.isXMLDoc = Sizzle.isXML;
    jQuery.contains = Sizzle.contains;
    var rneedsContext = jQuery.expr.match.needsContext;
    /** @type {RegExp} */
    var rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/;
    /** @type {RegExp} */
    var risSimple = /^.[^:#\[\.,]*$/;
    /**
     * @param {Object} expr
     * @param {string} elems
     * @param {boolean} not
     * @return {?}
     */
    jQuery.filter = function (expr, elems, not) {
        var elem = elems[0];
        return not && (expr = ":not(" + expr + ")"), 1 === elems.length && 1 === elem.nodeType ? jQuery.find.matchesSelector(elem, expr) ? [elem] : [] : jQuery.find.matches(expr, jQuery.grep(elems, function (dest) {
            return 1 === dest.nodeType;
        }));
    };
    jQuery.fn.extend({
        /**
         * @param {string} selector
         * @return {?}
         */
        find: function (selector) {
            var i;
            var len = this.length;
            /** @type {Array} */
            var ret = [];
            var self = this;
            if ("string" != typeof selector) {
                return this.pushStack(jQuery(selector).filter(function () {
                    /** @type {number} */
                    i = 0;
                    for (; len > i; i++) {
                        if (jQuery.contains(self[i], this)) {
                            return true;
                        }
                    }
                }));
            }
            /** @type {number} */
            i = 0;
            for (; len > i; i++) {
                jQuery.find(selector, self[i], ret);
            }
            return ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret), ret.selector = this.selector ? this.selector + " " + selector : selector, ret;
        },
        /**
         * @param {Object} selector
         * @return {?}
         */
        filter: function (selector) {
            return this.pushStack(winnow(this, selector || [], false));
        },
        /**
         * @param {Array} selector
         * @return {?}
         */
        not: function (selector) {
            return this.pushStack(winnow(this, selector || [], true));
        },
        /**
         * @param {string} selector
         * @return {?}
         */
        is: function (selector) {
            return !!winnow(this, "string" == typeof selector && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
        }
    });
    var rootjQuery;
    /** @type {RegExp} */
    var rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/;
    /** @type {function (string, Object): ?} */
    var init = jQuery.fn.init = function (selector, context) {
        var match;
        var a;
        if (!selector) {
            return this;
        }
        if ("string" == typeof selector) {
            if (match = "<" === selector[0] && (">" === selector[selector.length - 1] && selector.length >= 3) ? [null, selector, null] : rquickExpr.exec(selector), !match || !match[1] && context) {
                return !context || context.jquery ? (context || rootjQuery).find(selector) : this.constructor(context).find(selector);
            }
            if (match[1]) {
                if (context = context instanceof jQuery ? context[0] : context, jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : doc, true)), rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
                    for (match in context) {
                        if (jQuery.isFunction(this[match])) {
                            this[match](context[match]);
                        } else {
                            this.attr(match, context[match]);
                        }
                    }
                }
                return this;
            }
            return a = doc.getElementById(match[2]), a && (a.parentNode && (this.length = 1, this[0] = a)), this.context = doc, this.selector = selector, this;
        }
        return selector.nodeType ? (this.context = this[0] = selector, this.length = 1, this) : jQuery.isFunction(selector) ? "undefined" != typeof rootjQuery.ready ? rootjQuery.ready(selector) : selector(jQuery) : (void 0 !== selector.selector && (this.selector = selector.selector, this.context = selector.context), jQuery.makeArray(selector, this));
    };
    init.prototype = jQuery.fn;
    rootjQuery = jQuery(doc);
    /** @type {RegExp} */
    var rparentsprev = /^(?:parents|prev(?:Until|All))/;
    var guaranteedUnique = {
        children: true,
        contents: true,
        next: true,
        prev: true
    };
    jQuery.extend({
        /**
         * @param {Object} elem
         * @param {string} dir
         * @param {string} until
         * @return {?}
         */
        dir: function (elem, dir, until) {
            /** @type {Array} */
            var matched = [];
            /** @type {boolean} */
            var truncate = void 0 !== until;
            for (; (elem = elem[dir]) && 9 !== elem.nodeType;) {
                if (1 === elem.nodeType) {
                    if (truncate && jQuery(elem).is(until)) {
                        break;
                    }
                    matched.push(elem);
                }
            }
            return matched;
        },
        /**
         * @param {(Array|Element)} n
         * @param {(Node|string)} elem
         * @return {?}
         */
        sibling: function (n, elem) {
            /** @type {Array} */
            var r = [];
            for (; n; n = n.nextSibling) {
                if (1 === n.nodeType) {
                    if (n !== elem) {
                        r.push(n);
                    }
                }
            }
            return r;
        }
    });
    jQuery.fn.extend({
        /**
         * @param {string} target
         * @return {?}
         */
        has: function (target) {
            var targets = jQuery(target, this);
            var l = targets.length;
            return this.filter(function () {
                /** @type {number} */
                var i = 0;
                for (; l > i; i++) {
                    if (jQuery.contains(this, targets[i])) {
                        return true;
                    }
                }
            });
        },
        /**
         * @param {string} selectors
         * @param {number} context
         * @return {?}
         */
        closest: function (selectors, context) {
            var cur;
            /** @type {number} */
            var i = 0;
            var l = this.length;
            /** @type {Array} */
            var matched = [];
            var pos = rneedsContext.test(selectors) || "string" != typeof selectors ? jQuery(selectors, context || this.context) : 0;
            for (; l > i; i++) {
                cur = this[i];
                for (; cur && cur !== context; cur = cur.parentNode) {
                    if (cur.nodeType < 11 && (pos ? pos.index(cur) > -1 : 1 === cur.nodeType && jQuery.find.matchesSelector(cur, selectors))) {
                        matched.push(cur);
                        break;
                    }
                }
            }
            return this.pushStack(matched.length > 1 ? jQuery.unique(matched) : matched);
        },
        /**
         * @param {boolean} elem
         * @return {?}
         */
        index: function (elem) {
            return elem ? "string" == typeof elem ? core_indexOf.call(jQuery(elem), this[0]) : core_indexOf.call(this, elem.jquery ? elem[0] : elem) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
        },
        /**
         * @param {Function} selector
         * @param {Object} context
         * @return {?}
         */
        add: function (selector, context) {
            return this.pushStack(jQuery.unique(jQuery.merge(this.get(), jQuery(selector, context))));
        },
        /**
         * @param {Object} selector
         * @return {?}
         */
        addBack: function (selector) {
            return this.add(null == selector ? this.prevObject : this.prevObject.filter(selector));
        }
    });
    jQuery.each({
        /**
         * @param {Node} elem
         * @return {?}
         */
        parent: function (elem) {
            var parent = elem.parentNode;
            return parent && 11 !== parent.nodeType ? parent : null;
        },
        /**
         * @param {Object} elem
         * @return {?}
         */
        parents: function (elem) {
            return jQuery.dir(elem, "parentNode");
        },
        /**
         * @param {Object} elem
         * @param {?} i
         * @param {string} until
         * @return {?}
         */
        parentsUntil: function (elem, i, until) {
            return jQuery.dir(elem, "parentNode", until);
        },
        /**
         * @param {Object} elem
         * @return {?}
         */
        next: function (elem) {
            return sibling(elem, "nextSibling");
        },
        /**
         * @param {Object} elem
         * @return {?}
         */
        prev: function (elem) {
            return sibling(elem, "previousSibling");
        },
        /**
         * @param {Object} elem
         * @return {?}
         */
        nextAll: function (elem) {
            return jQuery.dir(elem, "nextSibling");
        },
        /**
         * @param {Object} elem
         * @return {?}
         */
        prevAll: function (elem) {
            return jQuery.dir(elem, "previousSibling");
        },
        /**
         * @param {Object} elem
         * @param {?} i
         * @param {string} until
         * @return {?}
         */
        nextUntil: function (elem, i, until) {
            return jQuery.dir(elem, "nextSibling", until);
        },
        /**
         * @param {Object} elem
         * @param {?} i
         * @param {string} until
         * @return {?}
         */
        prevUntil: function (elem, i, until) {
            return jQuery.dir(elem, "previousSibling", until);
        },
        /**
         * @param {Node} elem
         * @return {?}
         */
        siblings: function (elem) {
            return jQuery.sibling((elem.parentNode || {}).firstChild, elem);
        },
        /**
         * @param {Element} elem
         * @return {?}
         */
        children: function (elem) {
            return jQuery.sibling(elem.firstChild);
        },
        /**
         * @param {Element} elem
         * @return {?}
         */
        contents: function (elem) {
            return elem.contentDocument || jQuery.merge([], elem.childNodes);
        }
    }, function (name, fn) {
        /**
         * @param {boolean} until
         * @param {boolean} selector
         * @return {?}
         */
        jQuery.fn[name] = function (until, selector) {
            var matched = jQuery.map(this, fn, until);
            return "Until" !== name.slice(-5) && (selector = until), selector && ("string" == typeof selector && (matched = jQuery.filter(selector, matched))), this.length > 1 && (guaranteedUnique[name] || jQuery.unique(matched), rparentsprev.test(name) && matched.reverse()), this.pushStack(matched);
        };
    });
    /** @type {RegExp} */
    var core_rnotwhite = /\S+/g;
    var optionsCache = {};
    /**
     * @param {Object} options
     * @return {?}
     */
    jQuery.Callbacks = function (options) {
        options = "string" == typeof options ? optionsCache[options] || createOptions(options) : jQuery.extend({}, options);
        var memory;
        var c;
        var r;
        var firingStart;
        var i;
        var firingIndex;
        /** @type {Array} */
        var list = [];
        /** @type {(Array|boolean)} */
        var stack = !options.once && [];
        /**
         * @param {Array} data
         * @return {undefined}
         */
        var fire = function (data) {
            memory = options.memory && data;
            /** @type {boolean} */
            c = true;
            firingIndex = firingStart || 0;
            /** @type {number} */
            firingStart = 0;
            i = list.length;
            /** @type {boolean} */
            r = true;
            for (; list && i > firingIndex; firingIndex++) {
                if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {
                    /** @type {boolean} */
                    memory = false;
                    break;
                }
            }
            /** @type {boolean} */
            r = false;
            if (list) {
                if (stack) {
                    if (stack.length) {
                        fire(stack.shift());
                    }
                } else {
                    if (memory) {
                        /** @type {Array} */
                        list = [];
                    } else {
                        self.disable();
                    }
                }
            }
        };
        var self = {
            /**
             * @return {?}
             */
            add: function () {
                if (list) {
                    var start = list.length;
                    !function add(args) {
                        jQuery.each(args, function (dataAndEvents, arg) {
                            var type = jQuery.type(arg);
                            if ("function" === type) {
                                if (!(options.unique && self.has(arg))) {
                                    list.push(arg);
                                }
                            } else {
                                if (arg) {
                                    if (arg.length) {
                                        if ("string" !== type) {
                                            add(arg);
                                        }
                                    }
                                }
                            }
                        });
                    }(arguments);
                    if (r) {
                        i = list.length;
                    } else {
                        if (memory) {
                            firingStart = start;
                            fire(memory);
                        }
                    }
                }
                return this;
            },
            /**
             * @return {?}
             */
            remove: function () {
                return list && jQuery.each(arguments, function (dataAndEvents, arg) {
                    var index;
                    for (; (index = jQuery.inArray(arg, list, index)) > -1;) {
                        list.splice(index, 1);
                        if (r) {
                            if (i >= index) {
                                i--;
                            }
                            if (firingIndex >= index) {
                                firingIndex--;
                            }
                        }
                    }
                }), this;
            },
            /**
             * @param {Object} fn
             * @return {?}
             */
            has: function (fn) {
                return fn ? jQuery.inArray(fn, list) > -1 : !(!list || !list.length);
            },
            /**
             * @return {?}
             */
            empty: function () {
                return list = [], i = 0, this;
            },
            /**
             * @return {?}
             */
            disable: function () {
                return list = stack = memory = void 0, this;
            },
            /**
             * @return {?}
             */
            disabled: function () {
                return !list;
            },
            /**
             * @return {?}
             */
            lock: function () {
                return stack = void 0, memory || self.disable(), this;
            },
            /**
             * @return {?}
             */
            locked: function () {
                return !stack;
            },
            /**
             * @param {?} context
             * @param {Array} args
             * @return {?}
             */
            fireWith: function (context, args) {
                return !list || (c && !stack || (args = args || [], args = [context, args.slice ? args.slice() : args], r ? stack.push(args) : fire(args))), this;
            },
            /**
             * @return {?}
             */
            fire: function () {
                return self.fireWith(this, arguments), this;
            },
            /**
             * @return {?}
             */
            fired: function () {
                return !!c;
            }
        };
        return self;
    };
    jQuery.extend({
        /**
         * @param {Function} func
         * @return {?}
         */
        Deferred: function (func) {
            /** @type {Array} */
            var which = [["resolve", "done", jQuery.Callbacks("once memory"), "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), "rejected"], ["notify", "progress", jQuery.Callbacks("memory")]];
            /** @type {string} */
            var state = "pending";
            var promise = {
                /**
                 * @return {?}
                 */
                state: function () {
                    return state;
                },
                /**
                 * @return {?}
                 */
                always: function () {
                    return deferred.done(arguments).fail(arguments), this;
                },
                /**
                 * @return {?}
                 */
                then: function () {
                    /** @type {Arguments} */
                    var fns = arguments;
                    return jQuery.Deferred(function (newDefer) {
                        jQuery.each(which, function (i, tuple) {
                            var fn = jQuery.isFunction(fns[i]) && fns[i];
                            deferred[tuple[1]](function () {
                                var returned = fn && fn.apply(this, arguments);
                                if (returned && jQuery.isFunction(returned.promise)) {
                                    returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);
                                } else {
                                    newDefer[tuple[0] + "With"](this === promise ? newDefer.promise() : this, fn ? [returned] : arguments);
                                }
                            });
                        });
                        /** @type {null} */
                        fns = null;
                    }).promise();
                },
                /**
                 * @param {string} obj
                 * @return {?}
                 */
                promise: function (obj) {
                    return null != obj ? jQuery.extend(obj, promise) : promise;
                }
            };
            var deferred = {};
            return promise.pipe = promise.then, jQuery.each(which, function (dataAndEvents, tuple) {
                var list = tuple[2];
                var stateString = tuple[3];
                promise[tuple[1]] = list.add;
                if (stateString) {
                    list.add(function () {
                        state = stateString;
                    }, which[1 ^ dataAndEvents][2].disable, which[2][2].lock);
                }
                /**
                 * @return {?}
                 */
                deferred[tuple[0]] = function () {
                    return deferred[tuple[0] + "With"](this === deferred ? promise : this, arguments), this;
                };
                deferred[tuple[0] + "With"] = list.fireWith;
            }), promise.promise(deferred), func && func.call(deferred, deferred), deferred;
        },
        /**
         * @param {Object} subordinate
         * @return {?}
         */
        when: function (subordinate) {
            /** @type {number} */
            var i = 0;
            /** @type {Array.<?>} */
            var resolveValues = core_slice.call(arguments);
            /** @type {number} */
            var length = resolveValues.length;
            /** @type {number} */
            var remaining = 1 !== length || subordinate && jQuery.isFunction(subordinate.promise) ? length : 0;
            var deferred = 1 === remaining ? subordinate : jQuery.Deferred();
            /**
             * @param {number} i
             * @param {(Array|NodeList)} contexts
             * @param {Array} values
             * @return {?}
             */
            var updateFunc = function (i, contexts, values) {
                return function (value) {
                    contexts[i] = this;
                    values[i] = arguments.length > 1 ? core_slice.call(arguments) : value;
                    if (values === progressValues) {
                        deferred.notifyWith(contexts, values);
                    } else {
                        if (!--remaining) {
                            deferred.resolveWith(contexts, values);
                        }
                    }
                };
            };
            var progressValues;
            var progressContexts;
            var resolveContexts;
            if (length > 1) {
                /** @type {Array} */
                progressValues = new Array(length);
                /** @type {Array} */
                progressContexts = new Array(length);
                /** @type {Array} */
                resolveContexts = new Array(length);
                for (; length > i; i++) {
                    if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
                        resolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues));
                    } else {
                        --remaining;
                    }
                }
            }
            return remaining || deferred.resolveWith(resolveContexts, resolveValues), deferred.promise();
        }
    });
    var readyList;
    /**
     * @param {Object} obj
     * @return {?}
     */
    jQuery.fn.ready = function (obj) {
        return jQuery.ready.promise().done(obj), this;
    };
    jQuery.extend({
        isReady: false,
        readyWait: 1,
        /**
         * @param {?} hold
         * @return {undefined}
         */
        holdReady: function (hold) {
            if (hold) {
                jQuery.readyWait++;
            } else {
                jQuery.ready(true);
            }
        },
        /**
         * @param {boolean} wait
         * @return {undefined}
         */
        ready: function (wait) {
            if (!(wait === true ? --jQuery.readyWait : jQuery.isReady)) {
                /** @type {boolean} */
                jQuery.isReady = true;
                if (!(wait !== true && --jQuery.readyWait > 0)) {
                    readyList.resolveWith(doc, [jQuery]);
                    if (jQuery.fn.triggerHandler) {
                        jQuery(doc).triggerHandler("ready");
                        jQuery(doc).off("ready");
                    }
                }
            }
        }
    });
    /**
     * @param {string} obj
     * @return {?}
     */
    jQuery.ready.promise = function (obj) {
        return readyList || (readyList = jQuery.Deferred(), "complete" === doc.readyState ? setTimeout(jQuery.ready) : (doc.addEventListener("DOMContentLoaded", completed, false), win.addEventListener("load", completed, false))), readyList.promise(obj);
    };
    jQuery.ready.promise();
    /** @type {function (Object, Function, Object, Function, boolean, string, boolean): ?} */
    var access = jQuery.access = function (elems, fn, key, value, chainable, emptyGet, raw) {
        /** @type {number} */
        var i = 0;
        var length = elems.length;
        /** @type {boolean} */
        var bulk = null == key;
        if ("object" === jQuery.type(key)) {
            /** @type {boolean} */
            chainable = true;
            for (i in key) {
                jQuery.access(elems, fn, i, key[i], true, emptyGet, raw);
            }
        } else {
            if (void 0 !== value && (chainable = true, jQuery.isFunction(value) || (raw = true), bulk && (raw ? (fn.call(elems, value), fn = null) : (bulk = fn, fn = function (elem, event, value) {
              return bulk.call(jQuery(elem), value);
            })), fn)) {
                for (; length > i; i++) {
                    fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
                }
            }
        }
        return chainable ? elems : bulk ? fn.call(elems) : length ? fn(elems[0], key) : emptyGet;
    };
    /**
     * @param {Object} elem
     * @return {?}
     */
    jQuery.acceptData = function (elem) {
        return 1 === elem.nodeType || (9 === elem.nodeType || !+elem.nodeType);
    };
    /** @type {number} */
    Data.uid = 1;
    /** @type {function (Object): ?} */
    Data.accepts = jQuery.acceptData;
    Data.prototype = {
        /**
         * @param {Object} owner
         * @return {?}
         */
        key: function (owner) {
            if (!Data.accepts(owner)) {
                return 0;
            }
            var descriptor = {};
            var unlock = owner[this.expando];
            if (!unlock) {
                /** @type {number} */
                unlock = Data.uid++;
                try {
                    descriptor[this.expando] = {
                        value: unlock
                    };
                    Object.defineProperties(owner, descriptor);
                } catch (d) {
                    /** @type {number} */
                    descriptor[this.expando] = unlock;
                    jQuery.extend(owner, descriptor);
                }
            }
            return this.cache[unlock] || (this.cache[unlock] = {}), unlock;
        },
        /**
         * @param {Object} owner
         * @param {string} data
         * @param {string} value
         * @return {?}
         */
        set: function (owner, data, value) {
            var prop;
            var unlock = this.key(owner);
            var cache = this.cache[unlock];
            if ("string" == typeof data) {
                /** @type {string} */
                cache[data] = value;
            } else {
                if (jQuery.isEmptyObject(cache)) {
                    jQuery.extend(this.cache[unlock], data);
                } else {
                    for (prop in data) {
                        cache[prop] = data[prop];
                    }
                }
            }
            return cache;
        },
        /**
         * @param {Object} owner
         * @param {string} value
         * @return {?}
         */
        get: function (owner, value) {
            var cache = this.cache[this.key(owner)];
            return void 0 === value ? cache : cache[value];
        },
        /**
         * @param {Object} owner
         * @param {Object} key
         * @param {number} value
         * @return {?}
         */
        access: function (owner, key, value) {
            var stored;
            return void 0 === key || key && ("string" == typeof key && void 0 === value) ? (stored = this.get(owner, key), void 0 !== stored ? stored : this.get(owner, jQuery.camelCase(key))) : (this.set(owner, key, value), void 0 !== value ? value : key);
        },
        /**
         * @param {Object} owner
         * @param {?} key
         * @return {undefined}
         */
        remove: function (owner, key) {
            var i;
            var name;
            var camel;
            var unlock = this.key(owner);
            var cache = this.cache[unlock];
            if (void 0 === key) {
                this.cache[unlock] = {};
            } else {
                if (jQuery.isArray(key)) {
                    name = key.concat(key.map(jQuery.camelCase));
                } else {
                    camel = jQuery.camelCase(key);
                    if (key in cache) {
                        /** @type {Array} */
                        name = [key, camel];
                    } else {
                        name = camel;
                        name = name in cache ? [name] : name.match(core_rnotwhite) || [];
                    }
                }
                i = name.length;
                for (; i--;) {
                    delete cache[name[i]];
                }
            }
        },
        /**
         * @param {Object} owner
         * @return {?}
         */
        hasData: function (owner) {
            return !jQuery.isEmptyObject(this.cache[owner[this.expando]] || {});
        },
        /**
         * @param {?} owner
         * @return {undefined}
         */
        discard: function (owner) {
            if (owner[this.expando]) {
                delete this.cache[owner[this.expando]];
            }
        }
    };
    var data_priv = new Data;
    var data_user = new Data;
    /** @type {RegExp} */
    var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/;
    /** @type {RegExp} */
    var r20 = /([A-Z])/g;
    jQuery.extend({
        /**
         * @param {Object} elem
         * @return {?}
         */
        hasData: function (elem) {
            return data_user.hasData(elem) || data_priv.hasData(elem);
        },
        /**
         * @param {Object} src
         * @param {?} name
         * @param {Object} data
         * @return {?}
         */
        data: function (src, name, data) {
            return data_user.access(src, name, data);
        },
        /**
         * @param {Object} elem
         * @param {?} key
         * @return {undefined}
         */
        removeData: function (elem, key) {
            data_user.remove(elem, key);
        },
        /**
         * @param {Object} elem
         * @param {Object} name
         * @param {number} data
         * @return {?}
         */
        _data: function (elem, name, data) {
            return data_priv.access(elem, name, data);
        },
        /**
         * @param {Object} elem
         * @param {?} name
         * @return {undefined}
         */
        _removeData: function (elem, name) {
            data_priv.remove(elem, name);
        }
    });
    jQuery.fn.extend({
        /**
         * @param {string} key
         * @param {?} value
         * @return {?}
         */
        data: function (key, value) {
            var len;
            var name;
            var data;
            var elem = this[0];
            var attrs = elem && elem.attributes;
            if (void 0 === key) {
                if (this.length && (data = data_user.get(elem), 1 === elem.nodeType && !data_priv.get(elem, "hasDataAttrs"))) {
                    len = attrs.length;
                    for (; len--;) {
                        if (attrs[len]) {
                            name = attrs[len].name;
                            if (0 === name.indexOf("data-")) {
                                name = jQuery.camelCase(name.slice(5));
                                dataAttr(elem, name, data[name]);
                            }
                        }
                    }
                    data_priv.set(elem, "hasDataAttrs", true);
                }
                return data;
            }
            return "object" == typeof key ? this.each(function () {
                data_user.set(this, key);
            }) : access(this, function (value) {
                var data;
                var camelKey = jQuery.camelCase(key);
                if (elem && void 0 === value) {
                    if (data = data_user.get(elem, key), void 0 !== data) {
                        return data;
                    }
                    if (data = data_user.get(elem, camelKey), void 0 !== data) {
                        return data;
                    }
                    if (data = dataAttr(elem, camelKey, void 0), void 0 !== data) {
                        return data;
                    }
                } else {
                    this.each(function () {
                        var data = data_user.get(this, camelKey);
                        data_user.set(this, camelKey, value);
                        if (-1 !== key.indexOf("-")) {
                            if (void 0 !== data) {
                                data_user.set(this, key, value);
                            }
                        }
                    });
                }
            }, null, value, arguments.length > 1, null, true);
        },
        /**
         * @param {?} key
         * @return {?}
         */
        removeData: function (key) {
            return this.each(function () {
                data_user.remove(this, key);
            });
        }
    });
    jQuery.extend({
        /**
         * @param {Object} elem
         * @param {string} type
         * @param {?} data
         * @return {?}
         */
        queue: function (elem, type, data) {
            var queue;
            return elem ? (type = (type || "fx") + "queue", queue = data_priv.get(elem, type), data && (!queue || jQuery.isArray(data) ? queue = data_priv.access(elem, type, jQuery.makeArray(data)) : queue.push(data)), queue || []) : void 0;
        },
        /**
         * @param {string} elem
         * @param {string} type
         * @return {undefined}
         */
        dequeue: function (elem, type) {
            type = type || "fx";
            var queue = jQuery.queue(elem, type);
            var ln = queue.length;
            var fn = queue.shift();
            var hooks = jQuery._queueHooks(elem, type);
            /**
             * @return {undefined}
             */
            var next = function () {
                jQuery.dequeue(elem, type);
            };
            if ("inprogress" === fn) {
                fn = queue.shift();
                ln--;
            }
            if (fn) {
                if ("fx" === type) {
                    queue.unshift("inprogress");
                }
                delete hooks.stop;
                fn.call(elem, next, hooks);
            }
            if (!ln) {
                if (hooks) {
                    hooks.empty.fire();
                }
            }
        },
        /**
         * @param {Object} elem
         * @param {string} type
         * @return {?}
         */
        _queueHooks: function (elem, type) {
            /** @type {string} */
            var key = type + "queueHooks";
            return data_priv.get(elem, key) || data_priv.access(elem, key, {
                empty: jQuery.Callbacks("once memory").add(function () {
                    data_priv.remove(elem, [type + "queue", key]);
                })
            });
        }
    });
    jQuery.fn.extend({
        /**
         * @param {string} type
         * @param {string} data
         * @return {?}
         */
        queue: function (type, data) {
            /** @type {number} */
            var setter = 2;
            return "string" != typeof type && (data = type, type = "fx", setter--), arguments.length < setter ? jQuery.queue(this[0], type) : void 0 === data ? this : this.each(function () {
                var queue = jQuery.queue(this, type, data);
                jQuery._queueHooks(this, type);
                if ("fx" === type) {
                    if ("inprogress" !== queue[0]) {
                        jQuery.dequeue(this, type);
                    }
                }
            });
        },
        /**
         * @param {string} type
         * @return {?}
         */
        dequeue: function (type) {
            return this.each(function () {
                jQuery.dequeue(this, type);
            });
        },
        /**
         * @param {string} type
         * @return {?}
         */
        clearQueue: function (type) {
            return this.queue(type || "fx", []);
        },
        /**
         * @param {string} type
         * @param {string} obj
         * @return {?}
         */
        promise: function (type, obj) {
            var body;
            /** @type {number} */
            var d = 1;
            var defer = jQuery.Deferred();
            var elements = this;
            var i = this.length;
            /**
             * @return {undefined}
             */
            var resolve = function () {
                if (!--d) {
                    defer.resolveWith(elements, [elements]);
                }
            };
            if ("string" != typeof type) {
                /** @type {string} */
                obj = type;
                type = void 0;
            }
            type = type || "fx";
            for (; i--;) {
                body = data_priv.get(elements[i], type + "queueHooks");
                if (body) {
                    if (body.empty) {
                        d++;
                        body.empty.add(resolve);
                    }
                }
            }
            return resolve(), defer.promise(obj);
        }
    });
    /** @type {string} */
    var core_pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
    /** @type {Array} */
    var cssExpand = ["Top", "Right", "Bottom", "Left"];
    /**
     * @param {Object} elem
     * @param {Function} el
     * @return {?}
     */
    var isHidden = function (elem, el) {
        return elem = el || elem, "none" === jQuery.css(elem, "display") || !jQuery.contains(elem.ownerDocument, elem);
    };
    /** @type {RegExp} */
    var manipulation_rcheckableType = /^(?:checkbox|radio)$/i;
    !function () {
        var fragment = doc.createDocumentFragment();
        var form = fragment.appendChild(doc.createElement("div"));
        var input = doc.createElement("input");
        input.setAttribute("type", "radio");
        input.setAttribute("checked", "checked");
        input.setAttribute("name", "t");
        form.appendChild(input);
        support.checkClone = form.cloneNode(true).cloneNode(true).lastChild.checked;
        /** @type {string} */
        form.innerHTML = "<textarea>x</textarea>";
        /** @type {boolean} */
        support.noCloneChecked = !!form.cloneNode(true).lastChild.defaultValue;
    }();
    /** @type {string} */
    var text = "undefined";
    /** @type {boolean} */
    support.focusinBubbles = "onfocusin" in win;
    /** @type {RegExp} */
    var rmouseEvent = /^key/;
    /** @type {RegExp} */
    var rkeyEvent = /^(?:mouse|pointer|contextmenu)|click/;
    /** @type {RegExp} */
    var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;
    /** @type {RegExp} */
    var rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;
    jQuery.event = {
        global: {},
        /**
         * @param {Object} elem
         * @param {Object} types
         * @param {Function} handler
         * @param {Object} e
         * @param {(Function|string)} selector
         * @return {undefined}
         */
        add: function (elem, types, handler, e, selector) {
            var handleObjIn;
            var eventHandle;
            var segmentMatch;
            var events;
            var t;
            var handleObj;
            var special;
            var handlers;
            var type;
            var namespaces;
            var origType;
            var elemData = data_priv.get(elem);
            if (elemData) {
                if (handler.handler) {
                    /** @type {Function} */
                    handleObjIn = handler;
                    handler = handleObjIn.handler;
                    selector = handleObjIn.selector;
                }
                if (!handler.guid) {
                    /** @type {number} */
                    handler.guid = jQuery.guid++;
                }
                if (!(events = elemData.events)) {
                    events = elemData.events = {};
                }
                if (!(eventHandle = elemData.handle)) {
                    /** @type {function (Event): ?} */
                    eventHandle = elemData.handle = function (e) {
                        return typeof jQuery !== text && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : void 0;
                    };
                }
                types = (types || "").match(core_rnotwhite) || [""];
                t = types.length;
                for (; t--;) {
                    /** @type {Array} */
                    segmentMatch = rtypenamespace.exec(types[t]) || [];
                    type = origType = segmentMatch[1];
                    namespaces = (segmentMatch[2] || "").split(".").sort();
                    if (type) {
                        special = jQuery.event.special[type] || {};
                        type = (selector ? special.delegateType : special.bindType) || type;
                        special = jQuery.event.special[type] || {};
                        handleObj = jQuery.extend({
                            type: type,
                            origType: origType,
                            data: e,
                            /** @type {Function} */
                            handler: handler,
                            guid: handler.guid,
                            selector: selector,
                            needsContext: selector && jQuery.expr.match.needsContext.test(selector),
                            namespace: namespaces.join(".")
                        }, handleObjIn);
                        if (!(handlers = events[type])) {
                            /** @type {Array} */
                            handlers = events[type] = [];
                            /** @type {number} */
                            handlers.delegateCount = 0;
                            if (!(special.setup && special.setup.call(elem, e, namespaces, eventHandle) !== false)) {
                                if (elem.addEventListener) {
                                    elem.addEventListener(type, eventHandle, false);
                                }
                            }
                        }
                        if (special.add) {
                            special.add.call(elem, handleObj);
                            if (!handleObj.handler.guid) {
                                handleObj.handler.guid = handler.guid;
                            }
                        }
                        if (selector) {
                            handlers.splice(handlers.delegateCount++, 0, handleObj);
                        } else {
                            handlers.push(handleObj);
                        }
                        /** @type {boolean} */
                        jQuery.event.global[type] = true;
                    }
                }
            }
        },
        /**
         * @param {Object} elem
         * @param {Object} types
         * @param {Function} handler
         * @param {boolean} selector
         * @param {boolean} keepData
         * @return {undefined}
         */
        remove: function (elem, types, handler, selector, keepData) {
            var j;
            var origCount;
            var tmp;
            var events;
            var t;
            var handleObj;
            var special;
            var handlers;
            var type;
            var namespaces;
            var origType;
            var elemData = data_priv.hasData(elem) && data_priv.get(elem);
            if (elemData && (events = elemData.events)) {
                types = (types || "").match(core_rnotwhite) || [""];
                t = types.length;
                for (; t--;) {
                    if (tmp = rtypenamespace.exec(types[t]) || [], type = origType = tmp[1], namespaces = (tmp[2] || "").split(".").sort(), type) {
                        special = jQuery.event.special[type] || {};
                        type = (selector ? special.delegateType : special.bindType) || type;
                        handlers = events[type] || [];
                        tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");
                        origCount = j = handlers.length;
                        for (; j--;) {
                            handleObj = handlers[j];
                            if (!(!keepData && origType !== handleObj.origType)) {
                                if (!(handler && handler.guid !== handleObj.guid)) {
                                    if (!(tmp && !tmp.test(handleObj.namespace))) {
                                        if (!(selector && (selector !== handleObj.selector && ("**" !== selector || !handleObj.selector)))) {
                                            handlers.splice(j, 1);
                                            if (handleObj.selector) {
                                                handlers.delegateCount--;
                                            }
                                            if (special.remove) {
                                                special.remove.call(elem, handleObj);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (origCount) {
                            if (!handlers.length) {
                                if (!(special.teardown && special.teardown.call(elem, namespaces, elemData.handle) !== false)) {
                                    jQuery.removeEvent(elem, type, elemData.handle);
                                }
                                delete events[type];
                            }
                        }
                    } else {
                        for (type in events) {
                            jQuery.event.remove(elem, type + types[t], handler, selector, true);
                        }
                    }
                }
                if (jQuery.isEmptyObject(events)) {
                    delete elemData.handle;
                    data_priv.remove(elem, "events");
                }
            }
        },
        /**
         * @param {Object} event
         * @param {?} data
         * @param {Object} elem
         * @param {boolean} onlyHandlers
         * @return {?}
         */
        trigger: function (event, data, elem, onlyHandlers) {
            var i;
            var cur;
            var tmp;
            var bubbleType;
            var ontype;
            var handle;
            var special;
            /** @type {Array} */
            var eventPath = [elem || doc];
            var type = core_hasOwn.call(event, "type") ? event.type : event;
            var namespaces = core_hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
            if (cur = tmp = elem = elem || doc, 3 !== elem.nodeType && (8 !== elem.nodeType && (!rfocusMorph.test(type + jQuery.event.triggered) && (type.indexOf(".") >= 0 && (namespaces = type.split("."), type = namespaces.shift(), namespaces.sort()), ontype = type.indexOf(":") < 0 && "on" + type, event = event[jQuery.expando] ? event : new jQuery.Event(type, "object" == typeof event && event), event.isTrigger = onlyHandlers ? 2 : 3, event.namespace = namespaces.join("."), event.namespace_re = event.namespace ?
            new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, event.result = void 0, event.target || (event.target = elem), data = null == data ? [event] : jQuery.makeArray(data, [event]), special = jQuery.event.special[type] || {}, onlyHandlers || (!special.trigger || special.trigger.apply(elem, data) !== false))))) {
                if (!onlyHandlers && (!special.noBubble && !jQuery.isWindow(elem))) {
                    bubbleType = special.delegateType || type;
                    if (!rfocusMorph.test(bubbleType + type)) {
                        cur = cur.parentNode;
                    }
                    for (; cur; cur = cur.parentNode) {
                        eventPath.push(cur);
                        tmp = cur;
                    }
                    if (tmp === (elem.ownerDocument || doc)) {
                        eventPath.push(tmp.defaultView || (tmp.parentWindow || win));
                    }
                }
                /** @type {number} */
                i = 0;
                for (; (cur = eventPath[i++]) && !event.isPropagationStopped() ;) {
                    event.type = i > 1 ? bubbleType : special.bindType || type;
                    handle = (data_priv.get(cur, "events") || {})[event.type] && data_priv.get(cur, "handle");
                    if (handle) {
                        handle.apply(cur, data);
                    }
                    handle = ontype && cur[ontype];
                    if (handle) {
                        if (handle.apply) {
                            if (jQuery.acceptData(cur)) {
                                event.result = handle.apply(cur, data);
                                if (event.result === false) {
                                    event.preventDefault();
                                }
                            }
                        }
                    }
                }
                return event.type = type, onlyHandlers || (event.isDefaultPrevented() || (special._default && special._default.apply(eventPath.pop(), data) !== false || (!jQuery.acceptData(elem) || ontype && (jQuery.isFunction(elem[type]) && (!jQuery.isWindow(elem) && (tmp = elem[ontype], tmp && (elem[ontype] = null), jQuery.event.triggered = type, elem[type](), jQuery.event.triggered = void 0, tmp && (elem[ontype] = tmp))))))), event.result;
            }
        },
        /**
         * @param {Object} event
         * @return {?}
         */
        dispatch: function (event) {
            event = jQuery.event.fix(event);
            var i;
            var j;
            var ret;
            var matched;
            var handleObj;
            /** @type {Array} */
            var handlerQueue = [];
            /** @type {Array.<?>} */
            var args = core_slice.call(arguments);
            var handlers = (data_priv.get(this, "events") || {})[event.type] || [];
            var special = jQuery.event.special[event.type] || {};
            if (args[0] = event, event.delegateTarget = this, !special.preDispatch || special.preDispatch.call(this, event) !== false) {
                handlerQueue = jQuery.event.handlers.call(this, event, handlers);
                /** @type {number} */
                i = 0;
                for (; (matched = handlerQueue[i++]) && !event.isPropagationStopped() ;) {
                    event.currentTarget = matched.elem;
                    /** @type {number} */
                    j = 0;
                    for (; (handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped() ;) {
                        if (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {
                            event.handleObj = handleObj;
                            event.data = handleObj.data;
                            ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
                            if (void 0 !== ret) {
                                if ((event.result = ret) === false) {
                                    event.preventDefault();
                                    event.stopPropagation();
                                }
                            }
                        }
                    }
                }
                return special.postDispatch && special.postDispatch.call(this, event), event.result;
            }
        },
        /**
         * @param {Event} event
         * @param {Object} handlers
         * @return {?}
         */
        handlers: function (event, handlers) {
            var j;
            var matches;
            var sel;
            var handleObj;
            /** @type {Array} */
            var handlerQueue = [];
            var delegateCount = handlers.delegateCount;
            var cur = event.target;
            if (delegateCount && (cur.nodeType && (!event.button || "click" !== event.type))) {
                for (; cur !== this; cur = cur.parentNode || this) {
                    if (cur.disabled !== true || "click" !== event.type) {
                        /** @type {Array} */
                        matches = [];
                        /** @type {number} */
                        j = 0;
                        for (; delegateCount > j; j++) {
                            handleObj = handlers[j];
                            /** @type {string} */
                            sel = handleObj.selector + " ";
                            if (void 0 === matches[sel]) {
                                matches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) >= 0 : jQuery.find(sel, this, null, [cur]).length;
                            }
                            if (matches[sel]) {
                                matches.push(handleObj);
                            }
                        }
                        if (matches.length) {
                            handlerQueue.push({
                                elem: cur,
                                handlers: matches
                            });
                        }
                    }
                }
            }
            return delegateCount < handlers.length && handlerQueue.push({
                elem: this,
                handlers: handlers.slice(delegateCount)
            }), handlerQueue;
        },
        props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
        fixHooks: {},
        keyHooks: {
            props: "char charCode key keyCode".split(" "),
            /**
             * @param {Object} event
             * @param {Event} original
             * @return {?}
             */
            filter: function (event, original) {
                return null == event.which && (event.which = null != original.charCode ? original.charCode : original.keyCode), event;
            }
        },
        mouseHooks: {
            props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
            /**
             * @param {Object} event
             * @param {Event} original
             * @return {?}
             */
            filter: function (event, original) {
                var d;
                var de;
                var b;
                var button = original.button;
                return null == event.pageX && (null != original.clientX && (d = event.target.ownerDocument || doc, de = d.documentElement, b = d.body, event.pageX = original.clientX + (de && de.scrollLeft || (b && b.scrollLeft || 0)) - (de && de.clientLeft || (b && b.clientLeft || 0)), event.pageY = original.clientY + (de && de.scrollTop || (b && b.scrollTop || 0)) - (de && de.clientTop || (b && b.clientTop || 0)))), event.which || (void 0 === button || (event.which = 1 & button ? 1 : 2 & button ? 3 : 4 &
                button ? 2 : 0)), event;
            }
        },
        /**
         * @param {Object} event
         * @return {?}
         */
        fix: function (event) {
            if (event[jQuery.expando]) {
                return event;
            }
            var i;
            var prop;
            var copy;
            var type = event.type;
            /** @type {Object} */
            var originalEvent = event;
            var fixHook = this.fixHooks[type];
            if (!fixHook) {
                this.fixHooks[type] = fixHook = rkeyEvent.test(type) ? this.mouseHooks : rmouseEvent.test(type) ? this.keyHooks : {};
            }
            copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;
            event = new jQuery.Event(originalEvent);
            i = copy.length;
            for (; i--;) {
                prop = copy[i];
                event[prop] = originalEvent[prop];
            }
            return event.target || (event.target = doc), 3 === event.target.nodeType && (event.target = event.target.parentNode), fixHook.filter ? fixHook.filter(event, originalEvent) : event;
        },
        special: {
            load: {
                noBubble: true
            },
            focus: {
                /**
                 * @return {?}
                 */
                trigger: function () {
                    return this !== safeActiveElement() && this.focus ? (this.focus(), false) : void 0;
                },
                delegateType: "focusin"
            },
            blur: {
                /**
                 * @return {?}
                 */
                trigger: function () {
                    return this === safeActiveElement() && this.blur ? (this.blur(), false) : void 0;
                },
                delegateType: "focusout"
            },
            click: {
                /**
                 * @return {?}
                 */
                trigger: function () {
                    return "checkbox" === this.type && (this.click && jQuery.nodeName(this, "input")) ? (this.click(), false) : void 0;
                },
                /**
                 * @param {Function} event
                 * @return {?}
                 */
                _default: function (event) {
                    return jQuery.nodeName(event.target, "a");
                }
            },
            beforeunload: {
                /**
                 * @param {Object} event
                 * @return {undefined}
                 */
                postDispatch: function (event) {
                    if (void 0 !== event.result) {
                        if (event.originalEvent) {
                            event.originalEvent.returnValue = event.result;
                        }
                    }
                }
            }
        },
        /**
         * @param {string} type
         * @param {Object} elem
         * @param {?} event
         * @param {boolean} dataAndEvents
         * @return {undefined}
         */
        simulate: function (type, elem, event, dataAndEvents) {
            var e = jQuery.extend(new jQuery.Event, event, {
                type: type,
                isSimulated: true,
                originalEvent: {}
            });
            if (dataAndEvents) {
                jQuery.event.trigger(e, null, elem);
            } else {
                jQuery.event.dispatch.call(elem, e);
            }
            if (e.isDefaultPrevented()) {
                event.preventDefault();
            }
        }
    };
    /**
     * @param {Object} elem
     * @param {?} type
     * @param {?} handle
     * @return {undefined}
     */
    jQuery.removeEvent = function (elem, type, handle) {
        if (elem.removeEventListener) {
            elem.removeEventListener(type, handle, false);
        }
    };
    /**
     * @param {Object} src
     * @param {boolean} props
     * @return {?}
     */
    jQuery.Event = function (src, props) {
        return this instanceof jQuery.Event ? (src && src.type ? (this.originalEvent = src, this.type = src.type, this.isDefaultPrevented = src.defaultPrevented || void 0 === src.defaultPrevented && src.returnValue === false ? returnTrue : returnFalse) : this.type = src, props && jQuery.extend(this, props), this.timeStamp = src && src.timeStamp || jQuery.now(), void (this[jQuery.expando] = true)) : new jQuery.Event(src, props);
    };
    jQuery.Event.prototype = {
        /** @type {function (): ?} */
        isDefaultPrevented: returnFalse,
        /** @type {function (): ?} */
        isPropagationStopped: returnFalse,
        /** @type {function (): ?} */
        isImmediatePropagationStopped: returnFalse,
        /**
         * @return {undefined}
         */
        preventDefault: function () {
            var e = this.originalEvent;
            /** @type {function (): ?} */
            this.isDefaultPrevented = returnTrue;
            if (e) {
                if (e.preventDefault) {
                    e.preventDefault();
                }
            }
        },
        /**
         * @return {undefined}
         */
        stopPropagation: function () {
            var e = this.originalEvent;
            /** @type {function (): ?} */
            this.isPropagationStopped = returnTrue;
            if (e) {
                if (e.stopPropagation) {
                    e.stopPropagation();
                }
            }
        },
        /**
         * @return {undefined}
         */
        stopImmediatePropagation: function () {
            var e = this.originalEvent;
            /** @type {function (): ?} */
            this.isImmediatePropagationStopped = returnTrue;
            if (e) {
                if (e.stopImmediatePropagation) {
                    e.stopImmediatePropagation();
                }
            }
            this.stopPropagation();
        }
    };
    jQuery.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout",
        pointerenter: "pointerover",
        pointerleave: "pointerout"
    }, function (orig, fix) {
        jQuery.event.special[orig] = {
            delegateType: fix,
            bindType: fix,
            /**
             * @param {Object} event
             * @return {?}
             */
            handle: function (event) {
                var returnValue;
                var target = this;
                var related = event.relatedTarget;
                var handleObj = event.handleObj;
                return (!related || related !== target && !jQuery.contains(target, related)) && (event.type = handleObj.origType, returnValue = handleObj.handler.apply(this, arguments), event.type = fix), returnValue;
            }
        };
    });
    if (!support.focusinBubbles) {
        jQuery.each({
            focus: "focusin",
            blur: "focusout"
        }, function (event, name) {
            /**
             * @param {Object} event
             * @return {undefined}
             */
            var handler = function (event) {
                jQuery.event.simulate(name, event.target, jQuery.event.fix(event), true);
            };
            jQuery.event.special[name] = {
                /**
                 * @return {undefined}
                 */
                setup: function () {
                    var node = this.ownerDocument || this;
                    var descriptor = data_priv.access(node, name);
                    if (!descriptor) {
                        node.addEventListener(event, handler, true);
                    }
                    data_priv.access(node, name, (descriptor || 0) + 1);
                },
                /**
                 * @return {undefined}
                 */
                teardown: function () {
                    var node = this.ownerDocument || this;
                    /** @type {number} */
                    var data = data_priv.access(node, name) - 1;
                    if (data) {
                        data_priv.access(node, name, data);
                    } else {
                        node.removeEventListener(event, handler, true);
                        data_priv.remove(node, name);
                    }
                }
            };
        });
    }
    jQuery.fn.extend({
        /**
         * @param {Object} types
         * @param {Object} selector
         * @param {Function} data
         * @param {Function} fn
         * @param {(number|string)} one
         * @return {?}
         */
        on: function (types, selector, data, fn, one) {
            var origFn;
            var type;
            if ("object" == typeof types) {
                if ("string" != typeof selector) {
                    data = data || selector;
                    selector = void 0;
                }
                for (type in types) {
                    this.on(type, selector, data, types[type], one);
                }
                return this;
            }
            if (null == data && null == fn ? (fn = selector, data = selector = void 0) : null == fn && ("string" == typeof selector ? (fn = data, data = void 0) : (fn = data, data = selector, selector = void 0)), fn === false) {
                /** @type {function (): ?} */
                fn = returnFalse;
            } else {
                if (!fn) {
                    return this;
                }
            }
            return 1 === one && (origFn = fn, fn = function (event) {
                return jQuery().off(event), origFn.apply(this, arguments);
            }, fn.guid = origFn.guid || (origFn.guid = jQuery.guid++)), this.each(function () {
                jQuery.event.add(this, types, fn, data, selector);
            });
        },
        /**
         * @param {Object} types
         * @param {Object} selector
         * @param {Function} data
         * @param {Function} fn
         * @return {?}
         */
        one: function (types, selector, data, fn) {
            return this.on(types, selector, data, fn, 1);
        },
        /**
         * @param {Object} types
         * @param {Function} selector
         * @param {Function} fn
         * @return {?}
         */
        off: function (types, selector, fn) {
            var handleObj;
            var type;
            if (types && (types.preventDefault && types.handleObj)) {
                return handleObj = types.handleObj, jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler), this;
            }
            if ("object" == typeof types) {
                for (type in types) {
                    this.off(type, selector, types[type]);
                }
                return this;
            }
            return (selector === false || "function" == typeof selector) && (fn = selector, selector = void 0), fn === false && (fn = returnFalse), this.each(function () {
                jQuery.event.remove(this, types, fn, selector);
            });
        },
        /**
         * @param {string} type
         * @param {?} data
         * @return {?}
         */
        trigger: function (type, data) {
            return this.each(function () {
                jQuery.event.trigger(type, data, this);
            });
        },
        /**
         * @param {string} type
         * @param {?} data
         * @return {?}
         */
        triggerHandler: function (type, data) {
            var parent = this[0];
            return parent ? jQuery.event.trigger(type, data, parent, true) : void 0;
        }
    });
    /** @type {RegExp} */
    var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi;
    /** @type {RegExp} */
    var rtagName = /<([\w:]+)/;
    /** @type {RegExp} */
    var rhtml = /<|&#?\w+;/;
    /** @type {RegExp} */
    var rchecked = /<(?:script|style|link)/i;
    /** @type {RegExp} */
    var isSimple = /checked\s*(?:[^=]|=\s*.checked.)/i;
    /** @type {RegExp} */
    var stopParent = /^$|\/(?:java|ecma)script/i;
    /** @type {RegExp} */
    var re = /^true\/(.*)/;
    /** @type {RegExp} */
    var rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
    var wrapMap = {
        option: [1, "<select multiple='multiple'>", "</select>"],
        thead: [1, "<table>", "</table>"],
        col: [2, "<table><colgroup>", "</colgroup></table>"],
        tr: [2, "<table><tbody>", "</tbody></table>"],
        td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
        _default: [0, "", ""]
    };
    /** @type {Array} */
    wrapMap.optgroup = wrapMap.option;
    /** @type {Array} */
    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    /** @type {Array} */
    wrapMap.th = wrapMap.td;
    jQuery.extend({
        /**
         * @param {Object} elem
         * @param {boolean} dataAndEvents
         * @param {boolean} deepDataAndEvents
         * @return {?}
         */
        clone: function (elem, dataAndEvents, deepDataAndEvents) {
            var i;
            var l;
            var srcElements;
            var destElements;
            var clone = elem.cloneNode(true);
            var inPage = jQuery.contains(elem.ownerDocument, elem);
            if (!(support.noCloneChecked || (1 !== elem.nodeType && 11 !== elem.nodeType || jQuery.isXMLDoc(elem)))) {
                destElements = getAll(clone);
                srcElements = getAll(elem);
                /** @type {number} */
                i = 0;
                l = srcElements.length;
                for (; l > i; i++) {
                    fixInput(srcElements[i], destElements[i]);
                }
            }
            if (dataAndEvents) {
                if (deepDataAndEvents) {
                    srcElements = srcElements || getAll(elem);
                    destElements = destElements || getAll(clone);
                    /** @type {number} */
                    i = 0;
                    l = srcElements.length;
                    for (; l > i; i++) {
                        cloneCopyEvent(srcElements[i], destElements[i]);
                    }
                } else {
                    cloneCopyEvent(elem, clone);
                }
            }
            return destElements = getAll(clone, "script"), destElements.length > 0 && setGlobalEval(destElements, !inPage && getAll(elem, "script")), clone;
        },
        /**
         * @param {Array} elems
         * @param {Document} context
         * @param {boolean} scripts
         * @param {?} selection
         * @return {?}
         */
        buildFragment: function (elems, context, scripts, selection) {
            var elem;
            var tmp;
            var tag;
            var wrap;
            var contains;
            var j;
            var fragment = context.createDocumentFragment();
            /** @type {Array} */
            var nodes = [];
            /** @type {number} */
            var i = 0;
            var l = elems.length;
            for (; l > i; i++) {
                if (elem = elems[i], elem || 0 === elem) {
                    if ("object" === jQuery.type(elem)) {
                        jQuery.merge(nodes, elem.nodeType ? [elem] : elem);
                    } else {
                        if (rhtml.test(elem)) {
                            tmp = tmp || fragment.appendChild(context.createElement("div"));
                            tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
                            wrap = wrapMap[tag] || wrapMap._default;
                            tmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, "<$1></$2>") + wrap[2];
                            j = wrap[0];
                            for (; j--;) {
                                tmp = tmp.lastChild;
                            }
                            jQuery.merge(nodes, tmp.childNodes);
                            tmp = fragment.firstChild;
                            /** @type {string} */
                            tmp.textContent = "";
                        } else {
                            nodes.push(context.createTextNode(elem));
                        }
                    }
                }
            }
            /** @type {string} */
            fragment.textContent = "";
            /** @type {number} */
            i = 0;
            for (; elem = nodes[i++];) {
                if ((!selection || -1 === jQuery.inArray(elem, selection)) && (contains = jQuery.contains(elem.ownerDocument, elem), tmp = getAll(fragment.appendChild(elem), "script"), contains && setGlobalEval(tmp), scripts)) {
                    /** @type {number} */
                    j = 0;
                    for (; elem = tmp[j++];) {
                        if (stopParent.test(elem.type || "")) {
                            scripts.push(elem);
                        }
                    }
                }
            }
            return fragment;
        },
        /**
         * @param {?} elems
         * @return {undefined}
         */
        cleanData: function (elems) {
            var data;
            var elem;
            var type;
            var key;
            var special = jQuery.event.special;
            /** @type {number} */
            var i = 0;
            for (; void 0 !== (elem = elems[i]) ; i++) {
                if (jQuery.acceptData(elem) && (key = elem[data_priv.expando], key && (data = data_priv.cache[key]))) {
                    if (data.events) {
                        for (type in data.events) {
                            if (special[type]) {
                                jQuery.event.remove(elem, type);
                            } else {
                                jQuery.removeEvent(elem, type, data.handle);
                            }
                        }
                    }
                    if (data_priv.cache[key]) {
                        delete data_priv.cache[key];
                    }
                }
                delete data_user.cache[elem[data_user.expando]];
            }
        }
    });
    jQuery.fn.extend({
        /**
         * @param {Function} value
         * @return {?}
         */
        text: function (value) {
            return access(this, function (textString) {
                return void 0 === textString ? jQuery.text(this) : this.empty().each(function () {
                    if (1 === this.nodeType || (11 === this.nodeType || 9 === this.nodeType)) {
                        /** @type {string} */
                        this.textContent = textString;
                    }
                });
            }, null, value, arguments.length);
        },
        /**
         * @return {?}
         */
        append: function () {
            return this.domManip(arguments, function (elem) {
                if (1 === this.nodeType || (11 === this.nodeType || 9 === this.nodeType)) {
                    var target = manipulationTarget(this, elem);
                    target.appendChild(elem);
                }
            });
        },
        /**
         * @return {?}
         */
        prepend: function () {
            return this.domManip(arguments, function (elem) {
                if (1 === this.nodeType || (11 === this.nodeType || 9 === this.nodeType)) {
                    var target = manipulationTarget(this, elem);
                    target.insertBefore(elem, target.firstChild);
                }
            });
        },
        /**
         * @return {?}
         */
        before: function () {
            return this.domManip(arguments, function (elem) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this);
                }
            });
        },
        /**
         * @return {?}
         */
        after: function () {
            return this.domManip(arguments, function (elem) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this.nextSibling);
                }
            });
        },
        /**
         * @param {boolean} selector
         * @param {?} keepData
         * @return {?}
         */
        remove: function (selector, keepData) {
            var elem;
            var elems = selector ? jQuery.filter(selector, this) : this;
            /** @type {number} */
            var i = 0;
            for (; null != (elem = elems[i]) ; i++) {
                if (!keepData) {
                    if (!(1 !== elem.nodeType)) {
                        jQuery.cleanData(getAll(elem));
                    }
                }
                if (elem.parentNode) {
                    if (keepData) {
                        if (jQuery.contains(elem.ownerDocument, elem)) {
                            setGlobalEval(getAll(elem, "script"));
                        }
                    }
                    elem.parentNode.removeChild(elem);
                }
            }
            return this;
        },
        /**
         * @return {?}
         */
        empty: function () {
            var elem;
            /** @type {number} */
            var unlock = 0;
            for (; null != (elem = this[unlock]) ; unlock++) {
                if (1 === elem.nodeType) {
                    jQuery.cleanData(getAll(elem, false));
                    /** @type {string} */
                    elem.textContent = "";
                }
            }
            return this;
        },
        /**
         * @param {boolean} dataAndEvents
         * @param {boolean} deepDataAndEvents
         * @return {?}
         */
        clone: function (dataAndEvents, deepDataAndEvents) {
            return dataAndEvents = null == dataAndEvents ? false : dataAndEvents, deepDataAndEvents = null == deepDataAndEvents ? dataAndEvents : deepDataAndEvents, this.map(function () {
                return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
            });
        },
        /**
         * @param {Function} value
         * @return {?}
         */
        html: function (value) {
            return access(this, function (value) {
                var elem = this[0] || {};
                /** @type {number} */
                var i = 0;
                var l = this.length;
                if (void 0 === value && 1 === elem.nodeType) {
                    return elem.innerHTML;
                }
                if ("string" == typeof value && (!rchecked.test(value) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()])) {
                    /** @type {string} */
                    value = value.replace(rxhtmlTag, "<$1></$2>");
                    try {
                        for (; l > i; i++) {
                            elem = this[i] || {};
                            if (1 === elem.nodeType) {
                                jQuery.cleanData(getAll(elem, false));
                                /** @type {string} */
                                elem.innerHTML = value;
                            }
                        }
                        /** @type {number} */
                        elem = 0;
                    } catch (e) {
                    }
                }
                if (elem) {
                    this.empty().append(value);
                }
            }, null, value, arguments.length);
        },
        /**
         * @return {?}
         */
        replaceWith: function () {
            var arg = arguments[0];
            return this.domManip(arguments, function (s) {
                arg = this.parentNode;
                jQuery.cleanData(getAll(this));
                if (arg) {
                    arg.replaceChild(s, this);
                }
            }), arg && (arg.length || arg.nodeType) ? this : this.remove();
        },
        /**
         * @param {Object} selector
         * @return {?}
         */
        detach: function (selector) {
            return this.remove(selector, true);
        },
        /**
         * @param {Object} args
         * @param {Function} callback
         * @return {?}
         */
        domManip: function (args, callback) {
            /** @type {Array} */
            args = core_concat.apply([], args);
            var fragment;
            var first;
            var scripts;
            var _len;
            var node;
            var doc;
            /** @type {number} */
            var i = 0;
            var l = this.length;
            var keys = this;
            /** @type {number} */
            var iNoClone = l - 1;
            var qualifier = args[0];
            var shouldQualify = jQuery.isFunction(qualifier);
            if (shouldQualify || l > 1 && ("string" == typeof qualifier && (!support.checkClone && isSimple.test(qualifier)))) {
                return this.each(function (i) {
                    var q = keys.eq(i);
                    if (shouldQualify) {
                        args[0] = qualifier.call(this, i, q.html());
                    }
                    q.domManip(args, callback);
                });
            }
            if (l && (fragment = jQuery.buildFragment(args, this[0].ownerDocument, false, this), first = fragment.firstChild, 1 === fragment.childNodes.length && (fragment = first), first)) {
                scripts = jQuery.map(getAll(fragment, "script"), restoreScript);
                _len = scripts.length;
                for (; l > i; i++) {
                    node = fragment;
                    if (i !== iNoClone) {
                        node = jQuery.clone(node, true, true);
                        if (_len) {
                            jQuery.merge(scripts, getAll(node, "script"));
                        }
                    }
                    callback.call(this[i], node, i);
                }
                if (_len) {
                    doc = scripts[scripts.length - 1].ownerDocument;
                    jQuery.map(scripts, fn);
                    /** @type {number} */
                    i = 0;
                    for (; _len > i; i++) {
                        node = scripts[i];
                        if (stopParent.test(node.type || "")) {
                            if (!data_priv.access(node, "globalEval")) {
                                if (jQuery.contains(doc, node)) {
                                    if (node.src) {
                                        if (jQuery._evalUrl) {
                                            jQuery._evalUrl(node.src);
                                        }
                                    } else {
                                        jQuery.globalEval(node.textContent.replace(rcleanScript, ""));
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return this;
        }
    });
    jQuery.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function (original, method) {
        /**
         * @param {string} scripts
         * @return {?}
         */
        jQuery.fn[original] = function (scripts) {
            var resp;
            /** @type {Array} */
            var ret = [];
            var insert = jQuery(scripts);
            /** @type {number} */
            var segments = insert.length - 1;
            /** @type {number} */
            var i = 0;
            for (; segments >= i; i++) {
                resp = i === segments ? this : this.clone(true);
                jQuery(insert[i])[method](resp);
                core_push.apply(ret, resp.get());
            }
            return this.pushStack(ret);
        };
    });
    var iframe;
    var elemdisplay = {};
    /** @type {RegExp} */
    var rbracket = /^margin/;
    /** @type {RegExp} */
    var regexp = new RegExp("^(" + core_pnum + ")(?!px)[a-z%]+$", "i");
    /**
     * @param {Object} elem
     * @return {?}
     */
    var getStyles = function (elem) {
        return elem.ownerDocument.defaultView.getComputedStyle(elem, null);
    };
    !function () {
        var b;
        var c;
        var body = doc.documentElement;
        var testElement = doc.createElement("div");
        var div = doc.createElement("div");
        if (div.style) {
            /** @type {string} */
            div.style.backgroundClip = "content-box";
            /** @type {string} */
            div.cloneNode(true).style.backgroundClip = "";
            /** @type {boolean} */
            support.clearCloneStyle = "content-box" === div.style.backgroundClip;
            /** @type {string} */
            testElement.style.cssText = "border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;position:absolute";
            testElement.appendChild(div);
            /**
             * @return {undefined}
             */
            var computePixelPositionAndBoxSizingReliable = function () {
                /** @type {string} */
                div.style.cssText = "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute";
                /** @type {string} */
                div.innerHTML = "";
                body.appendChild(testElement);
                var divStyle = win.getComputedStyle(div, null);
                /** @type {boolean} */
                b = "1%" !== divStyle.top;
                /** @type {boolean} */
                c = "4px" === divStyle.width;
                body.removeChild(testElement);
            };
            if (win.getComputedStyle) {
                jQuery.extend(support, {
                    /**
                     * @return {?}
                     */
                    pixelPosition: function () {
                        return computePixelPositionAndBoxSizingReliable(), b;
                    },
                    /**
                     * @return {?}
                     */
                    boxSizingReliable: function () {
                        return null == c && computePixelPositionAndBoxSizingReliable(), c;
                    },
                    /**
                     * @return {?}
                     */
                    reliableMarginRight: function () {
                        var b;
                        var marginDiv = div.appendChild(doc.createElement("div"));
                        return marginDiv.style.cssText = div.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0", marginDiv.style.marginRight = marginDiv.style.width = "0", div.style.width = "1px", body.appendChild(testElement), b = !parseFloat(win.getComputedStyle(marginDiv, null).marginRight), body.removeChild(testElement), b;
                    }
                });
            }
        }
    }();
    /**
     * @param {Object} elem
     * @param {Object} options
     * @param {Function} callback
     * @param {Array} args
     * @return {?}
     */
    jQuery.swap = function (elem, options, callback, args) {
        var ret;
        var name;
        var old = {};
        for (name in options) {
            old[name] = elem.style[name];
            elem.style[name] = options[name];
        }
        ret = callback.apply(elem, args || []);
        for (name in options) {
            elem.style[name] = old[name];
        }
        return ret;
    };
    /** @type {RegExp} */
    var rdisplayswap = /^(none|table(?!-c[ea]).+)/;
    /** @type {RegExp} */
    var rrelNum = new RegExp("^(" + core_pnum + ")(.*)$", "i");
    /** @type {RegExp} */
    var re2 = new RegExp("^([+-])=(" + core_pnum + ")", "i");
    var props = {
        position: "absolute",
        visibility: "hidden",
        display: "block"
    };
    var object = {
        letterSpacing: "0",
        fontWeight: "400"
    };
    /** @type {Array} */
    var cssPrefixes = ["Webkit", "O", "Moz", "ms"];
    jQuery.extend({
        cssHooks: {
            opacity: {
                /**
                 * @param {Object} elem
                 * @param {string} value
                 * @return {?}
                 */
                get: function (elem, value) {
                    if (value) {
                        var buffer = css(elem, "opacity");
                        return "" === buffer ? "1" : buffer;
                    }
                }
            }
        },
        cssNumber: {
            columnCount: true,
            fillOpacity: true,
            flexGrow: true,
            flexShrink: true,
            fontWeight: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            widows: true,
            zIndex: true,
            zoom: true
        },
        cssProps: {
            "float": "cssFloat"
        },
        /**
         * @param {Object} elem
         * @param {string} name
         * @param {string} val
         * @param {string} extra
         * @return {?}
         */
        style: function (elem, name, val, extra) {
            if (elem && (3 !== elem.nodeType && (8 !== elem.nodeType && elem.style))) {
                var ret;
                var type;
                var hooks;
                var origName = jQuery.camelCase(name);
                var style = elem.style;
                return name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName)), hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName], void 0 === val ? hooks && ("get" in hooks && void 0 !== (ret = hooks.get(elem, false, extra))) ? ret : style[name] : (type = typeof val, "string" === type && ((ret = re2.exec(val)) && (val = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name)), type = "number")), null != val && (val === val && ("number" !== type || (jQuery.cssNumber[origName] ||
                (val += "px")), support.clearCloneStyle || ("" !== val || (0 !== name.indexOf("background") || (style[name] = "inherit"))), hooks && ("set" in hooks && void 0 === (val = hooks.set(elem, val, extra))) || (style[name] = val))), void 0);
            }
        },
        /**
         * @param {Object} elem
         * @param {string} prop
         * @param {boolean} recurring
         * @param {?} key
         * @return {?}
         */
        css: function (elem, prop, recurring, key) {
            var value;
            var val;
            var hooks;
            var origName = jQuery.camelCase(prop);
            return prop = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName)), hooks = jQuery.cssHooks[prop] || jQuery.cssHooks[origName], hooks && ("get" in hooks && (value = hooks.get(elem, true, recurring))), void 0 === value && (value = css(elem, prop, key)), "normal" === value && (prop in object && (value = object[prop])), "" === recurring || recurring ? (val = parseFloat(value), recurring === true || jQuery.isNumeric(val) ? val || 0 : value) : value;
        }
    });
    jQuery.each(["height", "width"], function (dataAndEvents, name) {
        jQuery.cssHooks[name] = {
            /**
             * @param {Object} elem
             * @param {string} value
             * @param {Object} extra
             * @return {?}
             */
            get: function (elem, value, extra) {
                return value ? rdisplayswap.test(jQuery.css(elem, "display")) && 0 === elem.offsetWidth ? jQuery.swap(elem, props, function () {
                    return getWidthOrHeight(elem, name, extra);
                }) : getWidthOrHeight(elem, name, extra) : void 0;
            },
            /**
             * @param {Object} elem
             * @param {string} value
             * @param {Object} extra
             * @return {?}
             */
            set: function (elem, value, extra) {
                var styles = extra && getStyles(elem);
                return setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(elem, name, extra, "border-box" === jQuery.css(elem, "boxSizing", false, styles), styles) : 0);
            }
        };
    });
    jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight, function (cur, value) {
        return value ? jQuery.swap(cur, {
            display: "inline-block"
        }, css, [cur, "marginRight"]) : void 0;
    });
    jQuery.each({
        margin: "",
        padding: "",
        border: "Width"
    }, function (prefix, suffix) {
        jQuery.cssHooks[prefix + suffix] = {
            /**
             * @param {string} line
             * @return {?}
             */
            expand: function (line) {
                /** @type {number} */
                var i = 0;
                var expanded = {};
                /** @type {Array} */
                var tokens = "string" == typeof line ? line.split(" ") : [line];
                for (; 4 > i; i++) {
                    expanded[prefix + cssExpand[i] + suffix] = tokens[i] || (tokens[i - 2] || tokens[0]);
                }
                return expanded;
            }
        };
        if (!rbracket.test(prefix)) {
            /** @type {function (Object, string, string): ?} */
            jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
        }
    });
    jQuery.fn.extend({
        /**
         * @param {Object} second
         * @param {string} value
         * @return {?}
         */
        css: function (second, value) {
            return access(this, function (elem, prop, value) {
                var styles;
                var _len;
                var map = {};
                /** @type {number} */
                var name = 0;
                if (jQuery.isArray(prop)) {
                    styles = getStyles(elem);
                    _len = prop.length;
                    for (; _len > name; name++) {
                        map[prop[name]] = jQuery.css(elem, prop[name], false, styles);
                    }
                    return map;
                }
                return void 0 !== value ? jQuery.style(elem, prop, value) : jQuery.css(elem, prop);
            }, second, value, arguments.length > 1);
        },
        /**
         * @return {?}
         */
        show: function () {
            return showHide(this, true);
        },
        /**
         * @return {?}
         */
        hide: function () {
            return showHide(this);
        },
        /**
         * @param {?} state
         * @return {?}
         */
        toggle: function (state) {
            return "boolean" == typeof state ? state ? this.show() : this.hide() : this.each(function () {
                if (isHidden(this)) {
                    jQuery(this).show();
                } else {
                    jQuery(this).hide();
                }
            });
        }
    });
    /** @type {function (string, string, string, string, string): ?} */
    jQuery.Tween = Tween;
    Tween.prototype = {
        /** @type {function (string, string, string, string, string): ?} */
        constructor: Tween,
        /**
         * @param {?} allBindingsAccessor
         * @param {Object} options
         * @param {?} prop
         * @param {number} to
         * @param {string} easing
         * @param {string} unit
         * @return {undefined}
         */
        init: function (allBindingsAccessor, options, prop, to, easing, unit) {
            this.elem = allBindingsAccessor;
            this.prop = prop;
            this.easing = easing || "swing";
            /** @type {Object} */
            this.options = options;
            this.start = this.now = this.cur();
            /** @type {number} */
            this.end = to;
            this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
        },
        /**
         * @return {?}
         */
        cur: function () {
            var hooks = Tween.propHooks[this.prop];
            return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
        },
        /**
         * @param {number} percent
         * @return {?}
         */
        run: function (percent) {
            var eased;
            var hooks = Tween.propHooks[this.prop];
            return this.pos = eased = this.options.duration ? jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration) : percent, this.now = (this.end - this.start) * eased + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), hooks && hooks.set ? hooks.set(this) : Tween.propHooks._default.set(this), this;
        }
    };
    Tween.prototype.init.prototype = Tween.prototype;
    Tween.propHooks = {
        _default: {
            /**
             * @param {Object} elem
             * @return {?}
             */
            get: function (elem) {
                var node;
                return null == elem.elem[elem.prop] || elem.elem.style && null != elem.elem.style[elem.prop] ? (node = jQuery.css(elem.elem, elem.prop, ""), node && "auto" !== node ? node : 0) : elem.elem[elem.prop];
            },
            /**
             * @param {Object} tween
             * @return {undefined}
             */
            set: function (tween) {
                if (jQuery.fx.step[tween.prop]) {
                    jQuery.fx.step[tween.prop](tween);
                } else {
                    if (tween.elem.style && (null != tween.elem.style[jQuery.cssProps[tween.prop]] || jQuery.cssHooks[tween.prop])) {
                        jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
                    } else {
                        tween.elem[tween.prop] = tween.now;
                    }
                }
            }
        }
    };
    Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        /**
         * @param {Object} elem
         * @return {undefined}
         */
        set: function (elem) {
            if (elem.elem.nodeType) {
                if (elem.elem.parentNode) {
                    elem.elem[elem.prop] = elem.now;
                }
            }
        }
    };
    jQuery.easing = {
        /**
         * @param {?} t
         * @return {?}
         */
        linear: function (t) {
            return t;
        },
        /**
         * @param {number} p
         * @return {?}
         */
        swing: function (p) {
            return 0.5 - Math.cos(p * Math.PI) / 2;
        }
    };
    /** @type {function (?, Object, ?, number, string, string): undefined} */
    jQuery.fx = Tween.prototype.init;
    jQuery.fx.step = {};
    var fxNow;
    var scrollIntervalId;
    /** @type {RegExp} */
    var rplusequals = /^(?:toggle|show|hide)$/;
    /** @type {RegExp} */
    var rfxnum = new RegExp("^(?:([+-])=|)(" + core_pnum + ")([a-z%]*)$", "i");
    /** @type {RegExp} */
    var numbers = /queueHooks$/;
    /** @type {Array} */
    var animationPrefilters = [defaultPrefilter];
    var cache = {
        "*": [function (prop, value) {
            var tween = this.createTween(prop, value);
            var l0 = tween.cur();
            /** @type {(Array.<string>|null)} */
            var parts = rfxnum.exec(value);
            /** @type {string} */
            var unit = parts && parts[3] || (jQuery.cssNumber[prop] ? "" : "px");
            var start = (jQuery.cssNumber[prop] || "px" !== unit && +l0) && rfxnum.exec(jQuery.css(tween.elem, prop));
            /** @type {number} */
            var scale = 1;
            /** @type {number} */
            var i = 20;
            if (start && start[3] !== unit) {
                unit = unit || start[3];
                /** @type {Array} */
                parts = parts || [];
                /** @type {number} */
                start = +l0 || 1;
                do {
                    /** @type {(number|string)} */
                    scale = scale || ".5";
                    start /= scale;
                    jQuery.style(tween.elem, prop, start + unit);
                } while (scale !== (scale = tween.cur() / l0) && (1 !== scale && --i));
            }
            return parts && (start = tween.start = +start || (+l0 || 0), tween.unit = unit, tween.end = parts[1] ? start + (parts[1] + 1) * parts[2] : +parts[2]), tween;
        }]
    };
    jQuery.Animation = jQuery.extend(Animation, {
        /**
         * @param {Object} html
         * @param {Function} callback
         * @return {undefined}
         */
        tweener: function (html, callback) {
            if (jQuery.isFunction(html)) {
                /** @type {Object} */
                callback = html;
                /** @type {Array} */
                html = ["*"];
            } else {
                html = html.split(" ");
            }
            var c;
            /** @type {number} */
            var x = 0;
            var w = html.length;
            for (; w > x; x++) {
                c = html[x];
                cache[c] = cache[c] || [];
                cache[c].unshift(callback);
            }
        },
        /**
         * @param {?} callback
         * @param {?} prepend
         * @return {undefined}
         */
        prefilter: function (callback, prepend) {
            if (prepend) {
                animationPrefilters.unshift(callback);
            } else {
                animationPrefilters.push(callback);
            }
        }
    });
    /**
     * @param {string} speed
     * @param {boolean} easing
     * @param {string} fn
     * @return {?}
     */
    jQuery.speed = function (speed, easing, fn) {
        var opt = speed && "object" == typeof speed ? jQuery.extend({}, speed) : {
            complete: fn || (!fn && easing || jQuery.isFunction(speed) && speed),
            duration: speed,
            easing: fn && easing || easing && (!jQuery.isFunction(easing) && easing)
        };
        return opt.duration = jQuery.fx.off ? 0 : "number" == typeof opt.duration ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default, (null == opt.queue || opt.queue === true) && (opt.queue = "fx"), opt.old = opt.complete, opt.complete = function () {
            if (jQuery.isFunction(opt.old)) {
                opt.old.call(this);
            }
            if (opt.queue) {
                jQuery.dequeue(this, opt.queue);
            }
        }, opt;
    };
    jQuery.fn.extend({
        /**
         * @param {string} speed
         * @param {(number|string)} to
         * @param {boolean} callback
         * @param {string} _callback
         * @return {?}
         */
        fadeTo: function (speed, to, callback, _callback) {
            return this.filter(isHidden).css("opacity", 0).show().end().animate({
                opacity: to
            }, speed, callback, _callback);
        },
        /**
         * @param {?} prop
         * @param {string} speed
         * @param {boolean} easing
         * @param {string} callback
         * @return {?}
         */
        animate: function (prop, speed, easing, callback) {
            var empty = jQuery.isEmptyObject(prop);
            var optall = jQuery.speed(speed, easing, callback);
            /**
             * @return {undefined}
             */
            var doAnimation = function () {
                var anim = Animation(this, jQuery.extend({}, prop), optall);
                if (empty || data_priv.get(this, "finish")) {
                    anim.stop(true);
                }
            };
            return doAnimation.finish = doAnimation, empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
        },
        /**
         * @param {boolean} type
         * @param {boolean} clearQueue
         * @param {boolean} gotoEnd
         * @return {?}
         */
        stop: function (type, clearQueue, gotoEnd) {
            /**
             * @param {Object} e
             * @return {undefined}
             */
            var stop = function (e) {
                var stop = e.stop;
                delete e.stop;
                stop(gotoEnd);
            };
            return "string" != typeof type && (gotoEnd = clearQueue, clearQueue = type, type = void 0), clearQueue && (type !== false && this.queue(type || "fx", [])), this.each(function () {
                /** @type {boolean} */
                var dequeue = true;
                var i = null != type && type + "queueHooks";
                /** @type {Array} */
                var timers = jQuery.timers;
                var gradient = data_priv.get(this);
                if (i) {
                    if (gradient[i]) {
                        if (gradient[i].stop) {
                            stop(gradient[i]);
                        }
                    }
                } else {
                    for (i in gradient) {
                        if (gradient[i]) {
                            if (gradient[i].stop) {
                                if (numbers.test(i)) {
                                    stop(gradient[i]);
                                }
                            }
                        }
                    }
                }
                /** @type {number} */
                i = timers.length;
                for (; i--;) {
                    if (!(timers[i].elem !== this)) {
                        if (!(null != type && timers[i].queue !== type)) {
                            timers[i].anim.stop(gotoEnd);
                            /** @type {boolean} */
                            dequeue = false;
                            timers.splice(i, 1);
                        }
                    }
                }
                if (dequeue || !gotoEnd) {
                    jQuery.dequeue(this, type);
                }
            });
        },
        /**
         * @param {string} type
         * @return {?}
         */
        finish: function (type) {
            return type !== false && (type = type || "fx"), this.each(function () {
                var index;
                var data = data_priv.get(this);
                var array = data[type + "queue"];
                var event = data[type + "queueHooks"];
                /** @type {Array} */
                var timers = jQuery.timers;
                var length = array ? array.length : 0;
                /** @type {boolean} */
                data.finish = true;
                jQuery.queue(this, type, []);
                if (event) {
                    if (event.stop) {
                        event.stop.call(this, true);
                    }
                }
                /** @type {number} */
                index = timers.length;
                for (; index--;) {
                    if (timers[index].elem === this) {
                        if (timers[index].queue === type) {
                            timers[index].anim.stop(true);
                            timers.splice(index, 1);
                        }
                    }
                }
                /** @type {number} */
                index = 0;
                for (; length > index; index++) {
                    if (array[index]) {
                        if (array[index].finish) {
                            array[index].finish.call(this);
                        }
                    }
                }
                delete data.finish;
            });
        }
    });
    jQuery.each(["toggle", "show", "hide"], function (dataAndEvents, name) {
        var matcherFunction = jQuery.fn[name];
        /**
         * @param {string} speed
         * @param {boolean} callback
         * @param {string} next_callback
         * @return {?}
         */
        jQuery.fn[name] = function (speed, callback, next_callback) {
            return null == speed || "boolean" == typeof speed ? matcherFunction.apply(this, arguments) : this.animate(genFx(name, true), speed, callback, next_callback);
        };
    });
    jQuery.each({
        slideDown: genFx("show"),
        slideUp: genFx("hide"),
        slideToggle: genFx("toggle"),
        fadeIn: {
            opacity: "show"
        },
        fadeOut: {
            opacity: "hide"
        },
        fadeToggle: {
            opacity: "toggle"
        }
    }, function (original, props) {
        /**
         * @param {string} speed
         * @param {boolean} callback
         * @param {string} next_callback
         * @return {?}
         */
        jQuery.fn[original] = function (speed, callback, next_callback) {
            return this.animate(props, speed, callback, next_callback);
        };
    });
    /** @type {Array} */
    jQuery.timers = [];
    /**
     * @return {undefined}
     */
    jQuery.fx.tick = function () {
        var last;
        /** @type {number} */
        var i = 0;
        /** @type {Array} */
        var timers = jQuery.timers;
        fxNow = jQuery.now();
        for (; i < timers.length; i++) {
            last = timers[i];
            if (!last()) {
                if (!(timers[i] !== last)) {
                    timers.splice(i--, 1);
                }
            }
        }
        if (!timers.length) {
            jQuery.fx.stop();
        }
        fxNow = void 0;
    };
    /**
     * @param {?} timer
     * @return {undefined}
     */
    jQuery.fx.timer = function (timer) {
        jQuery.timers.push(timer);
        if (timer()) {
            jQuery.fx.start();
        } else {
            jQuery.timers.pop();
        }
    };
    /** @type {number} */
    jQuery.fx.interval = 13;
    /**
     * @return {undefined}
     */
    jQuery.fx.start = function () {
        if (!scrollIntervalId) {
            /** @type {number} */
            scrollIntervalId = setInterval(jQuery.fx.tick, jQuery.fx.interval);
        }
    };
    /**
     * @return {undefined}
     */
    jQuery.fx.stop = function () {
        clearInterval(scrollIntervalId);
        /** @type {null} */
        scrollIntervalId = null;
    };
    jQuery.fx.speeds = {
        slow: 600,
        fast: 200,
        _default: 400
    };
    /**
     * @param {HTMLElement} time
     * @param {string} type
     * @return {?}
     */
    jQuery.fn.delay = function (time, type) {
        return time = jQuery.fx ? jQuery.fx.speeds[time] || time : time, type = type || "fx", this.queue(type, function (next, event) {
            /** @type {number} */
            var timeout = setTimeout(next, time);
            /**
             * @return {undefined}
             */
            event.stop = function () {
                clearTimeout(timeout);
            };
        });
    };
    (function () {
        var input = doc.createElement("input");
        var select = doc.createElement("select");
        var opt = select.appendChild(doc.createElement("option"));
        /** @type {string} */
        input.type = "checkbox";
        /** @type {boolean} */
        support.checkOn = "" !== input.value;
        support.optSelected = opt.selected;
        /** @type {boolean} */
        select.disabled = true;
        /** @type {boolean} */
        support.optDisabled = !opt.disabled;
        input = doc.createElement("input");
        /** @type {string} */
        input.value = "t";
        /** @type {string} */
        input.type = "radio";
        /** @type {boolean} */
        support.radioValue = "t" === input.value;
    })();
    var nodeHook;
    var boolHook;
    var values = jQuery.expr.attrHandle;
    jQuery.fn.extend({
        /**
         * @param {Object} name
         * @param {string} value
         * @return {?}
         */
        attr: function (name, value) {
            return access(this, jQuery.attr, name, value, arguments.length > 1);
        },
        /**
         * @param {Object} name
         * @return {?}
         */
        removeAttr: function (name) {
            return this.each(function () {
                jQuery.removeAttr(this, name);
            });
        }
    });
    jQuery.extend({
        /**
         * @param {Object} elem
         * @param {string} name
         * @param {Object} value
         * @return {?}
         */
        attr: function (elem, name, value) {
            var hooks;
            var ret;
            var nodeType = elem.nodeType;
            if (elem && (3 !== nodeType && (8 !== nodeType && 2 !== nodeType))) {
                return typeof elem.getAttribute === text ? jQuery.prop(elem, name, value) : (1 === nodeType && jQuery.isXMLDoc(elem) || (name = name.toLowerCase(), hooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name) ? boolHook : nodeHook)), void 0 === value ? hooks && ("get" in hooks && null !== (ret = hooks.get(elem, name))) ? ret : (ret = jQuery.find.attr(elem, name), null == ret ? void 0 : ret) : null !== value ? hooks && ("set" in hooks && void 0 !== (ret = hooks.set(elem, value, name))) ?
                    ret : (elem.setAttribute(name, value + ""), value) : void jQuery.removeAttr(elem, name));
            }
        },
        /**
         * @param {Object} elem
         * @param {string} value
         * @return {undefined}
         */
        removeAttr: function (elem, value) {
            var name;
            var propName;
            /** @type {number} */
            var i = 0;
            var attrNames = value && value.match(core_rnotwhite);
            if (attrNames && 1 === elem.nodeType) {
                for (; name = attrNames[i++];) {
                    propName = jQuery.propFix[name] || name;
                    if (jQuery.expr.match.bool.test(name)) {
                        /** @type {boolean} */
                        elem[propName] = false;
                    }
                    elem.removeAttribute(name);
                }
            }
        },
        attrHooks: {
            type: {
                /**
                 * @param {Object} elem
                 * @param {string} value
                 * @return {?}
                 */
                set: function (elem, value) {
                    if (!support.radioValue && ("radio" === value && jQuery.nodeName(elem, "input"))) {
                        var val = elem.value;
                        return elem.setAttribute("type", value), val && (elem.value = val), value;
                    }
                }
            }
        }
    });
    boolHook = {
        /**
         * @param {Object} elem
         * @param {string} value
         * @param {string} name
         * @return {?}
         */
        set: function (elem, value, name) {
            return value === false ? jQuery.removeAttr(elem, name) : elem.setAttribute(name, name), name;
        }
    };
    jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (dataAndEvents, name) {
        var callback = values[name] || jQuery.find.attr;
        /**
         * @param {Object} body
         * @param {string} key
         * @param {Object} arg
         * @return {?}
         */
        values[name] = function (body, key, arg) {
            var result;
            var value;
            return arg || (value = values[key], values[key] = result, result = null != callback(body, key, arg) ? key.toLowerCase() : null, values[key] = value), result;
        };
    });
    /** @type {RegExp} */
    var rinputs = /^(?:input|select|textarea|button)$/i;
    jQuery.fn.extend({
        /**
         * @param {Object} name
         * @param {?} value
         * @return {?}
         */
        prop: function (name, value) {
            return access(this, jQuery.prop, name, value, arguments.length > 1);
        },
        /**
         * @param {?} name
         * @return {?}
         */
        removeProp: function (name) {
            return this.each(function () {
                delete this[jQuery.propFix[name] || name];
            });
        }
    });
    jQuery.extend({
        propFix: {
            "for": "htmlFor",
            "class": "className"
        },
        /**
         * @param {Object} elem
         * @param {string} name
         * @param {string} value
         * @return {?}
         */
        prop: function (elem, name, value) {
            var ret;
            var hooks;
            var n;
            var nodeType = elem.nodeType;
            if (elem && (3 !== nodeType && (8 !== nodeType && 2 !== nodeType))) {
                return n = 1 !== nodeType || !jQuery.isXMLDoc(elem), n && (name = jQuery.propFix[name] || name, hooks = jQuery.propHooks[name]), void 0 !== value ? hooks && ("set" in hooks && void 0 !== (ret = hooks.set(elem, value, name))) ? ret : elem[name] = value : hooks && ("get" in hooks && null !== (ret = hooks.get(elem, name))) ? ret : elem[name];
            }
        },
        propHooks: {
            tabIndex: {
                /**
                 * @param {Object} elem
                 * @return {?}
                 */
                get: function (elem) {
                    return elem.hasAttribute("tabindex") || (rinputs.test(elem.nodeName) || elem.href) ? elem.tabIndex : -1;
                }
            }
        }
    });
    if (!support.optSelected) {
        jQuery.propHooks.selected = {
            /**
             * @param {Object} elem
             * @return {?}
             */
            get: function (elem) {
                var parent = elem.parentNode;
                return parent && (parent.parentNode && parent.parentNode.selectedIndex), null;
            }
        };
    }
    jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
        jQuery.propFix[this.toLowerCase()] = this;
    });
    /** @type {RegExp} */
    var rclass = /[\t\r\n\f]/g;
    jQuery.fn.extend({
        /**
         * @param {string} value
         * @return {?}
         */
        addClass: function (value) {
            var classes;
            var elem;
            var cur;
            var clazz;
            var j;
            var finalValue;
            /** @type {(boolean|string)} */
            var proceed = "string" == typeof value && value;
            /** @type {number} */
            var i = 0;
            var l = this.length;
            if (jQuery.isFunction(value)) {
                return this.each(function (j) {
                    jQuery(this).addClass(value.call(this, j, this.className));
                });
            }
            if (proceed) {
                classes = (value || "").match(core_rnotwhite) || [];
                for (; l > i; i++) {
                    if (elem = this[i], cur = 1 === elem.nodeType && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : " ")) {
                        /** @type {number} */
                        j = 0;
                        for (; clazz = classes[j++];) {
                            if (cur.indexOf(" " + clazz + " ") < 0) {
                                cur += clazz + " ";
                            }
                        }
                        finalValue = jQuery.trim(cur);
                        if (elem.className !== finalValue) {
                            elem.className = finalValue;
                        }
                    }
                }
            }
            return this;
        },
        /**
         * @param {string} value
         * @return {?}
         */
        removeClass: function (value) {
            var res;
            var elem;
            var cur;
            var apn;
            var resLength;
            var finalValue;
            /** @type {(boolean|string)} */
            var h = 0 === arguments.length || "string" == typeof value && value;
            /** @type {number} */
            var i = 0;
            var l = this.length;
            if (jQuery.isFunction(value)) {
                return this.each(function (j) {
                    jQuery(this).removeClass(value.call(this, j, this.className));
                });
            }
            if (h) {
                res = (value || "").match(core_rnotwhite) || [];
                for (; l > i; i++) {
                    if (elem = this[i], cur = 1 === elem.nodeType && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : "")) {
                        /** @type {number} */
                        resLength = 0;
                        for (; apn = res[resLength++];) {
                            for (; cur.indexOf(" " + apn + " ") >= 0;) {
                                /** @type {string} */
                                cur = cur.replace(" " + apn + " ", " ");
                            }
                        }
                        finalValue = value ? jQuery.trim(cur) : "";
                        if (elem.className !== finalValue) {
                            elem.className = finalValue;
                        }
                    }
                }
            }
            return this;
        },
        /**
         * @param {string} value
         * @param {?} stateVal
         * @return {?}
         */
        toggleClass: function (value, stateVal) {
            /** @type {string} */
            var type = typeof value;
            return "boolean" == typeof stateVal && "string" === type ? stateVal ? this.addClass(value) : this.removeClass(value) : this.each(jQuery.isFunction(value) ? function (i) {
                jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);
            } : function () {
                if ("string" === type) {
                    var className;
                    /** @type {number} */
                    var i = 0;
                    var self = jQuery(this);
                    var classNames = value.match(core_rnotwhite) || [];
                    for (; className = classNames[i++];) {
                        if (self.hasClass(className)) {
                            self.removeClass(className);
                        } else {
                            self.addClass(className);
                        }
                    }
                } else {
                    if (type === text || "boolean" === type) {
                        if (this.className) {
                            data_priv.set(this, "__className__", this.className);
                        }
                        this.className = this.className || value === false ? "" : data_priv.get(this, "__className__") || "";
                    }
                }
            });
        },
        /**
         * @param {string} selector
         * @return {?}
         */
        hasClass: function (selector) {
            /** @type {string} */
            var expectation = " " + selector + " ";
            /** @type {number} */
            var i = 0;
            var l = this.length;
            for (; l > i; i++) {
                if (1 === this[i].nodeType && (" " + this[i].className + " ").replace(rclass, " ").indexOf(expectation) >= 0) {
                    return true;
                }
            }
            return false;
        }
    });
    /** @type {RegExp} */
    var rreturn = /\r/g;
    jQuery.fn.extend({
        /**
         * @param {Function} value
         * @return {?}
         */
        val: function (value) {
            var hooks;
            var ret;
            var isFunction;
            var elem = this[0];
            if (arguments.length) {
                return isFunction = jQuery.isFunction(value), this.each(function (i) {
                    var val;
                    if (1 === this.nodeType) {
                        val = isFunction ? value.call(this, i, jQuery(this).val()) : value;
                        if (null == val) {
                            /** @type {string} */
                            val = "";
                        } else {
                            if ("number" == typeof val) {
                                val += "";
                            } else {
                                if (jQuery.isArray(val)) {
                                    val = jQuery.map(val, function (month) {
                                        return null == month ? "" : month + "";
                                    });
                                }
                            }
                        }
                        hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
                        if (!(hooks && ("set" in hooks && void 0 !== hooks.set(this, val, "value")))) {
                            this.value = val;
                        }
                    }
                });
            }
            if (elem) {
                return hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()], hooks && ("get" in hooks && void 0 !== (ret = hooks.get(elem, "value"))) ? ret : (ret = elem.value, "string" == typeof ret ? ret.replace(rreturn, "") : null == ret ? "" : ret);
            }
        }
    });
    jQuery.extend({
        valHooks: {
            option: {
                /**
                 * @param {Object} elem
                 * @return {?}
                 */
                get: function (elem) {
                    var handle = jQuery.find.attr(elem, "value");
                    return null != handle ? handle : jQuery.trim(jQuery.text(elem));
                }
            },
            select: {
                /**
                 * @param {Object} elem
                 * @return {?}
                 */
                get: function (elem) {
                    var copies;
                    var option;
                    var options = elem.options;
                    var index = elem.selectedIndex;
                    /** @type {boolean} */
                    var one = "select-one" === elem.type || 0 > index;
                    /** @type {(Array|null)} */
                    var out = one ? null : [];
                    var max = one ? index + 1 : options.length;
                    var i = 0 > index ? max : one ? index : 0;
                    for (; max > i; i++) {
                        if (option = options[i], !(!option.selected && i !== index || ((support.optDisabled ? option.disabled : null !== option.getAttribute("disabled")) || option.parentNode.disabled && jQuery.nodeName(option.parentNode, "optgroup")))) {
                            if (copies = jQuery(option).val(), one) {
                                return copies;
                            }
                            out.push(copies);
                        }
                    }
                    return out;
                },
                /**
                 * @param {Object} elem
                 * @param {string} value
                 * @return {?}
                 */
                set: function (elem, value) {
                    var c;
                    var option;
                    var options = elem.options;
                    var values = jQuery.makeArray(value);
                    var i = options.length;
                    for (; i--;) {
                        option = options[i];
                        if (option.selected = jQuery.inArray(option.value, values) >= 0) {
                            /** @type {boolean} */
                            c = true;
                        }
                    }
                    return c || (elem.selectedIndex = -1), values;
                }
            }
        }
    });
    jQuery.each(["radio", "checkbox"], function () {
        jQuery.valHooks[this] = {
            /**
             * @param {Object} elem
             * @param {string} value
             * @return {?}
             */
            set: function (elem, value) {
                return jQuery.isArray(value) ? elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0 : void 0;
            }
        };
        if (!support.checkOn) {
            /**
             * @param {Object} elem
             * @return {?}
             */
            jQuery.valHooks[this].get = function (elem) {
                return null === elem.getAttribute("value") ? "on" : elem.value;
            };
        }
    });
    jQuery.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "), function (dataAndEvents, name) {
        /**
         * @param {Function} data
         * @param {Function} fn
         * @return {?}
         */
        jQuery.fn[name] = function (data, fn) {
            return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
        };
    });
    jQuery.fn.extend({
        /**
         * @param {undefined} fnOver
         * @param {Object} fnOut
         * @return {?}
         */
        hover: function (fnOver, fnOut) {
            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
        },
        /**
         * @param {Object} types
         * @param {Function} data
         * @param {Function} fn
         * @return {?}
         */
        bind: function (types, data, fn) {
            return this.on(types, null, data, fn);
        },
        /**
         * @param {Object} types
         * @param {Function} fn
         * @return {?}
         */
        unbind: function (types, fn) {
            return this.off(types, null, fn);
        },
        /**
         * @param {Object} selector
         * @param {Object} types
         * @param {Function} data
         * @param {Function} fn
         * @return {?}
         */
        delegate: function (selector, types, data, fn) {
            return this.on(types, selector, data, fn);
        },
        /**
         * @param {string} selector
         * @param {Object} types
         * @param {Function} fn
         * @return {?}
         */
        undelegate: function (selector, types, fn) {
            return 1 === arguments.length ? this.off(selector, "**") : this.off(types, selector || "**", fn);
        }
    });
    var iIdCounter = jQuery.now();
    /** @type {RegExp} */
    var rquery = /\?/;
    /**
     * @param {Object} data
     * @return {?}
     */
    jQuery.parseJSON = function (data) {
        return JSON.parse(data + "");
    };
    /**
     * @param {string} data
     * @return {?}
     */
    jQuery.parseXML = function (data) {
        var xml;
        var tmp;
        if (!data || "string" != typeof data) {
            return null;
        }
        try {
            /** @type {DOMParser} */
            tmp = new DOMParser;
            /** @type {(Document|null)} */
            xml = tmp.parseFromString(data, "text/xml");
        } catch (d) {
            xml = void 0;
        }
        return (!xml || xml.getElementsByTagName("parsererror").length) && jQuery.error("Invalid XML: " + data), xml;
    };
    var prop;
    var ajaxLocation;
    /** @type {RegExp} */
    var currDirRegExp = /#.*$/;
    /** @type {RegExp} */
    var rts = /([?&])_=[^&]*/;
    /** @type {RegExp} */
    var r = /^(.*?):[ \t]*([^\r\n]*)$/gm;
    /** @type {RegExp} */
    var fnTest = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/;
    /** @type {RegExp} */
    var rnoContent = /^(?:GET|HEAD)$/;
    /** @type {RegExp} */
    var rprotocol = /^\/\//;
    /** @type {RegExp} */
    var quickExpr = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/;
    var prefilters = {};
    var transports = {};
    /** @type {string} */
    var pc = "*/".concat("*");
    try {
        /** @type {string} */
        ajaxLocation = location.href;
    } catch (qc) {
        ajaxLocation = doc.createElement("a");
        /** @type {string} */
        ajaxLocation.href = "";
        /** @type {string} */
        ajaxLocation = ajaxLocation.href;
    }
    /** @type {Array} */
    prop = quickExpr.exec(ajaxLocation.toLowerCase()) || [];
    jQuery.extend({
        active: 0,
        lastModified: {},
        etag: {},
        ajaxSettings: {
            url: ajaxLocation,
            type: "GET",
            isLocal: fnTest.test(prop[1]),
            global: true,
            processData: true,
            async: true,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            accepts: {
                "*": pc,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
            },
            contents: {
                xml: /xml/,
                html: /html/,
                json: /json/
            },
            responseFields: {
                xml: "responseXML",
                text: "responseText",
                json: "responseJSON"
            },
            converters: {
                /** @type {function (new:String, *=): string} */
                "* text": String,
                "text html": true,
                /** @type {function (Object): ?} */
                "text json": jQuery.parseJSON,
                /** @type {function (string): ?} */
                "text xml": jQuery.parseXML
            },
            flatOptions: {
                url: true,
                context: true
            }
        },
        /**
         * @param {(Object|string)} target
         * @param {Object} settings
         * @return {?}
         */
        ajaxSetup: function (target, settings) {
            return settings ? ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : ajaxExtend(jQuery.ajaxSettings, target);
        },
        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
        ajaxTransport: addToPrefiltersOrTransports(transports),
        /**
         * @param {Object} url
         * @param {Object} options
         * @return {?}
         */
        ajax: function (url, options) {
            /**
             * @param {number} status
             * @param {(number|string)} nativeStatusText
             * @param {Object} responses
             * @param {string} total
             * @return {undefined}
             */
            function done(status, nativeStatusText, responses, total) {
                var isSuccess;
                var success;
                var error;
                var response;
                var modified;
                /** @type {(number|string)} */
                var statusText = nativeStatusText;
                if (2 !== number) {
                    /** @type {number} */
                    number = 2;
                    if (tref) {
                        clearTimeout(tref);
                    }
                    transport = void 0;
                    value = total || "";
                    /** @type {number} */
                    jqXHR.readyState = status > 0 ? 4 : 0;
                    /** @type {boolean} */
                    isSuccess = status >= 200 && 300 > status || 304 === status;
                    if (responses) {
                        response = ajaxHandleResponses(s, jqXHR, responses);
                    }
                    response = ajaxConvert(s, response, jqXHR, isSuccess);
                    if (isSuccess) {
                        if (s.ifModified) {
                            modified = jqXHR.getResponseHeader("Last-Modified");
                            if (modified) {
                                jQuery.lastModified[cacheURL] = modified;
                            }
                            modified = jqXHR.getResponseHeader("etag");
                            if (modified) {
                                jQuery.etag[cacheURL] = modified;
                            }
                        }
                        if (204 === status || "HEAD" === s.type) {
                            /** @type {string} */
                            statusText = "nocontent";
                        } else {
                            if (304 === status) {
                                /** @type {string} */
                                statusText = "notmodified";
                            } else {
                                statusText = response.state;
                                success = response.data;
                                error = response.error;
                                /** @type {boolean} */
                                isSuccess = !error;
                            }
                        }
                    } else {
                        error = statusText;
                        if (status || !statusText) {
                            /** @type {string} */
                            statusText = "error";
                            if (0 > status) {
                                /** @type {number} */
                                status = 0;
                            }
                        }
                    }
                    /** @type {number} */
                    jqXHR.status = status;
                    /** @type {string} */
                    jqXHR.statusText = (nativeStatusText || statusText) + "";
                    if (isSuccess) {
                        deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
                    } else {
                        deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
                    }
                    jqXHR.statusCode(statusCode);
                    statusCode = void 0;
                    if (g) {
                        globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
                    }
                    completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);
                    if (g) {
                        globalEventContext.trigger("ajaxComplete", [jqXHR, s]);
                        if (!--jQuery.active) {
                            jQuery.event.trigger("ajaxStop");
                        }
                    }
                }
            }
            if ("object" == typeof url) {
                /** @type {Object} */
                options = url;
                url = void 0;
            }
            options = options || {};
            var transport;
            var cacheURL;
            var value;
            var target;
            var tref;
            var h;
            var g;
            var i;
            var s = jQuery.ajaxSetup({}, options);
            var callbackContext = s.context || s;
            var globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event;
            var deferred = jQuery.Deferred();
            var completeDeferred = jQuery.Callbacks("once memory");
            var statusCode = s.statusCode || {};
            var requestHeaders = {};
            var requestHeadersNames = {};
            /** @type {number} */
            var number = 0;
            /** @type {string} */
            var strAbort = "canceled";
            var jqXHR = {
                readyState: 0,
                /**
                 * @param {string} key
                 * @return {?}
                 */
                getResponseHeader: function (key) {
                    var src;
                    if (2 === number) {
                        if (!target) {
                            target = {};
                            for (; src = r.exec(value) ;) {
                                /** @type {string} */
                                target[src[1].toLowerCase()] = src[2];
                            }
                        }
                        src = target[key.toLowerCase()];
                    }
                    return null == src ? null : src;
                },
                /**
                 * @return {?}
                 */
                getAllResponseHeaders: function () {
                    return 2 === number ? value : null;
                },
                /**
                 * @param {string} name
                 * @param {?} value
                 * @return {?}
                 */
                setRequestHeader: function (name, value) {
                    var lname = name.toLowerCase();
                    return number || (name = requestHeadersNames[lname] = requestHeadersNames[lname] || name, requestHeaders[name] = value), this;
                },
                /**
                 * @param {(Object|number)} type
                 * @return {?}
                 */
                overrideMimeType: function (type) {
                    return number || (s.mimeType = type), this;
                },
                /**
                 * @param {Object} map
                 * @return {?}
                 */
                statusCode: function (map) {
                    var letter;
                    if (map) {
                        if (2 > number) {
                            for (letter in map) {
                                /** @type {Array} */
                                statusCode[letter] = [statusCode[letter], map[letter]];
                            }
                        } else {
                            jqXHR.always(map[jqXHR.status]);
                        }
                    }
                    return this;
                },
                /**
                 * @param {string} statusText
                 * @return {?}
                 */
                abort: function (statusText) {
                    var finalText = statusText || strAbort;
                    return transport && transport.abort(finalText), done(0, finalText), this;
                }
            };
            if (deferred.promise(jqXHR).complete = completeDeferred.add, jqXHR.success = jqXHR.done, jqXHR.error = jqXHR.fail, s.url = ((url || (s.url || ajaxLocation)) + "").replace(currDirRegExp, "").replace(rprotocol, prop[1] + "//"), s.type = options.method || (options.type || (s.method || s.type)), s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().match(core_rnotwhite) || [""], null == s.crossDomain && (h = quickExpr.exec(s.url.toLowerCase()), s.crossDomain = !(!h || h[1] === prop[1] && (h[2] ===
            prop[2] && (h[3] || ("http:" === h[1] ? "80" : "443")) === (prop[3] || ("http:" === prop[1] ? "80" : "443"))))), s.data && (s.processData && ("string" != typeof s.data && (s.data = jQuery.param(s.data, s.traditional)))), inspectPrefiltersOrTransports(prefilters, s, options, jqXHR), 2 === number) {
                return jqXHR;
            }
            g = s.global;
            if (g) {
                if (0 === jQuery.active++) {
                    jQuery.event.trigger("ajaxStart");
                }
            }
            s.type = s.type.toUpperCase();
            /** @type {boolean} */
            s.hasContent = !rnoContent.test(s.type);
            cacheURL = s.url;
            if (!s.hasContent) {
                if (s.data) {
                    /** @type {string} */
                    cacheURL = s.url += (rquery.test(cacheURL) ? "&" : "?") + s.data;
                    delete s.data;
                }
                if (s.cache === false) {
                    s.url = rts.test(cacheURL) ? cacheURL.replace(rts, "$1_=" + iIdCounter++) : cacheURL + (rquery.test(cacheURL) ? "&" : "?") + "_=" + iIdCounter++;
                }
            }
            if (s.ifModified) {
                if (jQuery.lastModified[cacheURL]) {
                    jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
                }
                if (jQuery.etag[cacheURL]) {
                    jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
                }
            }
            if (s.data && (s.hasContent && s.contentType !== false) || options.contentType) {
                jqXHR.setRequestHeader("Content-Type", s.contentType);
            }
            jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + ("*" !== s.dataTypes[0] ? ", " + pc + "; q=0.01" : "") : s.accepts["*"]);
            for (i in s.headers) {
                jqXHR.setRequestHeader(i, s.headers[i]);
            }
            if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || 2 === number)) {
                return jqXHR.abort();
            }
            /** @type {string} */
            strAbort = "abort";
            for (i in {
                success: 1,
                error: 1,
                complete: 1
            }) {
                jqXHR[i](s[i]);
            }
            if (transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR)) {
                /** @type {number} */
                jqXHR.readyState = 1;
                if (g) {
                    globalEventContext.trigger("ajaxSend", [jqXHR, s]);
                }
                if (s.async) {
                    if (s.timeout > 0) {
                        /** @type {number} */
                        tref = setTimeout(function () {
                            jqXHR.abort("timeout");
                        }, s.timeout);
                    }
                }
                try {
                    /** @type {number} */
                    number = 1;
                    transport.send(requestHeaders, done);
                } catch (e) {
                    if (!(2 > number)) {
                        throw e;
                    }
                    done(-1, e);
                }
            } else {
                done(-1, "No Transport");
            }
            return jqXHR;
        },
        /**
         * @param {Object} cur
         * @param {string} data
         * @param {Object} callback
         * @return {?}
         */
        getJSON: function (cur, data, callback) {
            return jQuery.get(cur, data, callback, "json");
        },
        /**
         * @param {Object} cur
         * @param {Object} callback
         * @return {?}
         */
        getScript: function (cur, callback) {
            return jQuery.get(cur, void 0, callback, "script");
        }
    });
    jQuery.each(["get", "post"], function (dataAndEvents, method) {
        /**
         * @param {string} requestUrl
         * @param {Object} html
         * @param {Function} success
         * @param {(Object|string)} dataType
         * @return {?}
         */
        jQuery[method] = function (requestUrl, html, success, dataType) {
            return jQuery.isFunction(html) && (dataType = dataType || success, success = html, html = void 0), jQuery.ajax({
                url: requestUrl,
                type: method,
                dataType: dataType,
                data: html,
                /** @type {Function} */
                success: success
            });
        };
    });
    jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (dataAndEvents, name) {
        /**
         * @param {Object} selector
         * @return {?}
         */
        jQuery.fn[name] = function (selector) {
            return this.on(name, selector);
        };
    });
    /**
     * @param {string} url
     * @return {?}
     */
    jQuery._evalUrl = function (url) {
        return jQuery.ajax({
            url: url,
            type: "GET",
            dataType: "script",
            async: false,
            global: false,
            "throws": true
        });
    };
    jQuery.fn.extend({
        /**
         * @param {Function} html
         * @return {?}
         */
        wrapAll: function (html) {
            var wrap;
            return jQuery.isFunction(html) ? this.each(function (i) {
                jQuery(this).wrapAll(html.call(this, i));
            }) : (this[0] && (wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true), this[0].parentNode && wrap.insertBefore(this[0]), wrap.map(function () {
                var elem = this;
                for (; elem.firstElementChild;) {
                    elem = elem.firstElementChild;
                }
                return elem;
            }).append(this)), this);
        },
        /**
         * @param {Function} html
         * @return {?}
         */
        wrapInner: function (html) {
            return this.each(jQuery.isFunction(html) ? function (i) {
                jQuery(this).wrapInner(html.call(this, i));
            } : function () {
                var self = jQuery(this);
                var contents = self.contents();
                if (contents.length) {
                    contents.wrapAll(html);
                } else {
                    self.append(html);
                }
            });
        },
        /**
         * @param {Function} html
         * @return {?}
         */
        wrap: function (html) {
            var isFunction = jQuery.isFunction(html);
            return this.each(function (i) {
                jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
            });
        },
        /**
         * @return {?}
         */
        unwrap: function () {
            return this.parent().each(function () {
                if (!jQuery.nodeName(this, "body")) {
                    jQuery(this).replaceWith(this.childNodes);
                }
            }).end();
        }
    });
    /**
     * @param {Object} obj
     * @return {?}
     */
    jQuery.expr.filters.hidden = function (obj) {
        return obj.offsetWidth <= 0 && obj.offsetHeight <= 0;
    };
    /**
     * @param {Object} obj
     * @return {?}
     */
    jQuery.expr.filters.visible = function (obj) {
        return !jQuery.expr.filters.hidden(obj);
    };
    /** @type {RegExp} */
    var rQuot = /%20/g;
    /** @type {RegExp} */
    var rmargin = /\[\]$/;
    /** @type {RegExp} */
    var rCRLF = /\r?\n/g;
    /** @type {RegExp} */
    var exclude = /^(?:submit|button|image|reset|file)$/i;
    /** @type {RegExp} */
    var rsubmittable = /^(?:input|select|textarea|keygen)/i;
    /**
     * @param {Object} a
     * @param {Object} traditional
     * @return {?}
     */
    jQuery.param = function (a, traditional) {
        var prefix;
        /** @type {Array} */
        var klass = [];
        /**
         * @param {?} key
         * @param {string} value
         * @return {undefined}
         */
        var add = function (key, value) {
            value = jQuery.isFunction(value) ? value() : null == value ? "" : value;
            /** @type {string} */
            klass[klass.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
        };
        if (void 0 === traditional && (traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional), jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
            jQuery.each(a, function () {
                add(this.name, this.value);
            });
        } else {
            for (prefix in a) {
                buildParams(prefix, a[prefix], traditional, add);
            }
        }
        return klass.join("&").replace(rQuot, "+");
    };
    jQuery.fn.extend({
        /**
         * @return {?}
         */
        serialize: function () {
            return jQuery.param(this.serializeArray());
        },
        /**
         * @return {?}
         */
        serializeArray: function () {
            return this.map(function () {
                var elements = jQuery.prop(this, "elements");
                return elements ? jQuery.makeArray(elements) : this;
            }).filter(function () {
                var type = this.type;
                return this.name && (!jQuery(this).is(":disabled") && (rsubmittable.test(this.nodeName) && (!exclude.test(type) && (this.checked || !manipulation_rcheckableType.test(type)))));
            }).map(function (dataAndEvents, elem) {
                var val = jQuery(this).val();
                return null == val ? null : jQuery.isArray(val) ? jQuery.map(val, function (val) {
                    return {
                        name: elem.name,
                        value: val.replace(rCRLF, "\r\n")
                    };
                }) : {
                    name: elem.name,
                    value: val.replace(rCRLF, "\r\n")
                };
            }).get();
        }
    });
    /**
     * @return {?}
     */
    jQuery.ajaxSettings.xhr = function () {
        try {
            return new XMLHttpRequest;
        } catch (a) {
        }
    };
    /** @type {number} */
    var rightId = 0;
    var map = {};
    var xhrSuccessStatus = {
        0: 200,
        1223: 204
    };
    var xhrSupported = jQuery.ajaxSettings.xhr();
    if (win.ActiveXObject) {
        jQuery(win).on("unload", function () {
            var letter;
            for (letter in map) {
                map[letter]();
            }
        });
    }
    /** @type {boolean} */
    support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
    /** @type {boolean} */
    support.ajax = xhrSupported = !!xhrSupported;
    jQuery.ajaxTransport(function (options) {
        var callback;
        return support.cors || xhrSupported && !options.crossDomain ? {
            /**
             * @param {Object} headers
             * @param {Function} complete
             * @return {undefined}
             */
            send: function (headers, complete) {
                var i;
                var xhr = options.xhr();
                /** @type {number} */
                var id = ++rightId;
                if (xhr.open(options.type, options.url, options.async, options.username, options.password), options.xhrFields) {
                    for (i in options.xhrFields) {
                        xhr[i] = options.xhrFields[i];
                    }
                }
                if (options.mimeType) {
                    if (xhr.overrideMimeType) {
                        xhr.overrideMimeType(options.mimeType);
                    }
                }
                if (!options.crossDomain) {
                    if (!headers["X-Requested-With"]) {
                        /** @type {string} */
                        headers["X-Requested-With"] = "XMLHttpRequest";
                    }
                }
                for (i in headers) {
                    xhr.setRequestHeader(i, headers[i]);
                }
                /**
                 * @param {string} status
                 * @return {?}
                 */
                callback = function (status) {
                    return function () {
                        if (callback) {
                            delete map[id];
                            /** @type {null} */
                            callback = xhr.onload = xhr.onerror = null;
                            if ("abort" === status) {
                                xhr.abort();
                            } else {
                                if ("error" === status) {
                                    complete(xhr.status, xhr.statusText);
                                } else {
                                    complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, "string" == typeof xhr.responseText ? {
                                        text: xhr.responseText
                                    } : void 0, xhr.getAllResponseHeaders());
                                }
                            }
                        }
                    };
                };
                xhr.onload = callback();
                xhr.onerror = callback("error");
                callback = map[id] = callback("abort");
                try {
                    xhr.send(options.hasContent && options.data || null);
                } catch (h) {
                    if (callback) {
                        throw h;
                    }
                }
            },
            /**
             * @return {undefined}
             */
            abort: function () {
                if (callback) {
                    callback();
                }
            }
        } : void 0;
    });
    jQuery.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /(?:java|ecma)script/
        },
        converters: {
            /**
             * @param {string} value
             * @return {?}
             */
            "text script": function (value) {
                return jQuery.globalEval(value), value;
            }
        }
    });
    jQuery.ajaxPrefilter("script", function (s) {
        if (void 0 === s.cache) {
            /** @type {boolean} */
            s.cache = false;
        }
        if (s.crossDomain) {
            /** @type {string} */
            s.type = "GET";
        }
    });
    jQuery.ajaxTransport("script", function (s) {
        if (s.crossDomain) {
            var script;
            var callback;
            return {
                /**
                 * @param {?} _
                 * @param {Function} complete
                 * @return {undefined}
                 */
                send: function (_, complete) {
                    script = jQuery("<script>").prop({
                        async: true,
                        charset: s.scriptCharset,
                        src: s.url
                    }).on("load error", callback = function (evt) {
                        script.remove();
                        /** @type {null} */
                        callback = null;
                        if (evt) {
                            complete("error" === evt.type ? 404 : 200, evt.type);
                        }
                    });
                    doc.head.appendChild(script[0]);
                },
                /**
                 * @return {undefined}
                 */
                abort: function () {
                    if (callback) {
                        callback();
                    }
                }
            };
        }
    });
    /** @type {Array} */
    var eventPath = [];
    /** @type {RegExp} */
    var rjsonp = /(=)\?(?=&|$)|\?\?/;
    jQuery.ajaxSetup({
        jsonp: "callback",
        /**
         * @return {?}
         */
        jsonpCallback: function () {
            var unlock = eventPath.pop() || jQuery.expando + "_" + iIdCounter++;
            return this[unlock] = true, unlock;
        }
    });
    jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {
        var callbackName;
        var fn2;
        var args;
        /** @type {(boolean|string)} */
        var jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : "string" == typeof s.data && (!(s.contentType || "").indexOf("application/x-www-form-urlencoded") && (rjsonp.test(s.data) && "data")));
        return jsonProp || "jsonp" === s.dataTypes[0] ? (callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback, jsonProp ? s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName) : s.jsonp !== false && (s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName), s.converters["script json"] = function () {
            return args || jQuery.error(callbackName + " was not called"), args[0];
        }, s.dataTypes[0] = "json", fn2 = win[callbackName], win[callbackName] = function () {
            /** @type {Arguments} */
            args = arguments;
        }, jqXHR.always(function () {
            win[callbackName] = fn2;
            if (s[callbackName]) {
                s.jsonpCallback = originalSettings.jsonpCallback;
                eventPath.push(callbackName);
            }
            if (args) {
                if (jQuery.isFunction(fn2)) {
                    fn2(args[0]);
                }
            }
            args = fn2 = void 0;
        }), "script") : void 0;
    });
    /**
     * @param {?} data
     * @param {Object} context
     * @param {(Function|string)} keepScripts
     * @return {?}
     */
    jQuery.parseHTML = function (data, context, keepScripts) {
        if (!data || "string" != typeof data) {
            return null;
        }
        if ("boolean" == typeof context) {
            /** @type {Object} */
            keepScripts = context;
            /** @type {boolean} */
            context = false;
        }
        context = context || doc;
        /** @type {(Array.<string>|null)} */
        var parsed = rsingleTag.exec(data);
        /** @type {(Array|boolean)} */
        var scripts = !keepScripts && [];
        return parsed ? [context.createElement(parsed[1])] : (parsed = jQuery.buildFragment([data], context, scripts), scripts && (scripts.length && jQuery(scripts).remove()), jQuery.merge([], parsed.childNodes));
    };
    /** @type {function ((Function|string), Object, Object): ?} */
    var matcherFunction = jQuery.fn.load;
    /**
     * @param {(Function|string)} url
     * @param {Object} data
     * @param {Object} attributes
     * @return {?}
     */
    jQuery.fn.load = function (url, data, attributes) {
        if ("string" != typeof url && matcherFunction) {
            return matcherFunction.apply(this, arguments);
        }
        var selector;
        var type;
        var response;
        var self = this;
        var off = url.indexOf(" ");
        return off >= 0 && (selector = jQuery.trim(url.slice(off)), url = url.slice(0, off)), jQuery.isFunction(data) ? (attributes = data, data = void 0) : data && ("object" == typeof data && (type = "POST")), self.length > 0 && jQuery.ajax({
            url: url,
            type: type,
            dataType: "html",
            data: data
        }).done(function (responseText) {
            /** @type {Arguments} */
            response = arguments;
            self.html(selector ? jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) : responseText);
        }).complete(attributes && function (obj, a) {
            self.each(attributes, response || [obj.responseText, a, obj]);
        }), this;
    };
    /**
     * @param {undefined} elem
     * @return {?}
     */
    jQuery.expr.filters.animated = function (elem) {
        return jQuery.grep(jQuery.timers, function (fn) {
            return elem === fn.elem;
        }).length;
    };
    var docElem = win.document.documentElement;
    jQuery.offset = {
        /**
         * @param {Object} elem
         * @param {Object} options
         * @param {?} i
         * @return {undefined}
         */
        setOffset: function (elem, options, i) {
            var curPosition;
            var curLeft;
            var curCSSTop;
            var curTop;
            var curOffset;
            var curCSSLeft;
            var j;
            var position = jQuery.css(elem, "position");
            var block = jQuery(elem);
            var o = {};
            if ("static" === position) {
                /** @type {string} */
                elem.style.position = "relative";
            }
            curOffset = block.offset();
            curCSSTop = jQuery.css(elem, "top");
            curCSSLeft = jQuery.css(elem, "left");
            /** @type {boolean} */
            j = ("absolute" === position || "fixed" === position) && (curCSSTop + curCSSLeft).indexOf("auto") > -1;
            if (j) {
                curPosition = block.position();
                curTop = curPosition.top;
                curLeft = curPosition.left;
            } else {
                /** @type {number} */
                curTop = parseFloat(curCSSTop) || 0;
                /** @type {number} */
                curLeft = parseFloat(curCSSLeft) || 0;
            }
            if (jQuery.isFunction(options)) {
                options = options.call(elem, i, curOffset);
            }
            if (null != options.top) {
                /** @type {number} */
                o.top = options.top - curOffset.top + curTop;
            }
            if (null != options.left) {
                /** @type {number} */
                o.left = options.left - curOffset.left + curLeft;
            }
            if ("using" in options) {
                options.using.call(elem, o);
            } else {
                block.css(o);
            }
        }
    };
    jQuery.fn.extend({
        /**
         * @param {number} options
         * @return {?}
         */
        offset: function (options) {
            if (arguments.length) {
                return void 0 === options ? this : this.each(function (dataName) {
                    jQuery.offset.setOffset(this, options, dataName);
                });
            }
            var doc;
            var win;
            var b = this[0];
            var box = {
                top: 0,
                left: 0
            };
            var element = b && b.ownerDocument;
            if (element) {
                return doc = element.documentElement, jQuery.contains(doc, b) ? (typeof b.getBoundingClientRect !== text && (box = b.getBoundingClientRect()), win = getWindow(element), {
                    top: box.top + win.pageYOffset - doc.clientTop,
                    left: box.left + win.pageXOffset - doc.clientLeft
                }) : box;
            }
        },
        /**
         * @return {?}
         */
        position: function () {
            if (this[0]) {
                var offsetParent;
                var offset;
                var elem = this[0];
                var parentOffset = {
                    top: 0,
                    left: 0
                };
                return "fixed" === jQuery.css(elem, "position") ? offset = elem.getBoundingClientRect() : (offsetParent = this.offsetParent(), offset = this.offset(), jQuery.nodeName(offsetParent[0], "html") || (parentOffset = offsetParent.offset()), parentOffset.top += jQuery.css(offsetParent[0], "borderTopWidth", true), parentOffset.left += jQuery.css(offsetParent[0], "borderLeftWidth", true)), {
                    top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
                    left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
                };
            }
        },
        /**
         * @return {?}
         */
        offsetParent: function () {
            return this.map(function () {
                var offsetParent = this.offsetParent || docElem;
                for (; offsetParent && (!jQuery.nodeName(offsetParent, "html") && "static" === jQuery.css(offsetParent, "position")) ;) {
                    offsetParent = offsetParent.offsetParent;
                }
                return offsetParent || docElem;
            });
        }
    });
    jQuery.each({
        scrollLeft: "pageXOffset",
        scrollTop: "pageYOffset"
    }, function (name, prop) {
        /** @type {boolean} */
        var top = "pageYOffset" === prop;
        /**
         * @param {Function} isXML
         * @return {?}
         */
        jQuery.fn[name] = function (isXML) {
            return access(this, function (element, k, val) {
                var obj = getWindow(element);
                return void 0 === val ? obj ? obj[prop] : element[k] : void (obj ? obj.scrollTo(top ? win.pageXOffset : val, top ? val : win.pageYOffset) : element[k] = val);
            }, name, isXML, arguments.length, null);
        };
    });
    jQuery.each(["top", "left"], function (dataAndEvents, prop) {
        jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, val) {
            return val ? (val = css(elem, prop), regexp.test(val) ? jQuery(elem).position()[prop] + "px" : val) : void 0;
        });
    });
    jQuery.each({
        Height: "height",
        Width: "width"
    }, function (name, type) {
        jQuery.each({
            padding: "inner" + name,
            content: type,
            "": "outer" + name
        }, function (defaultExtra, original) {
            /**
             * @param {?} margin
             * @param {boolean} value
             * @return {?}
             */
            jQuery.fn[original] = function (margin, value) {
                var chainable = arguments.length && (defaultExtra || "boolean" != typeof margin);
                var extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
                return access(this, function (elem, prop, value) {
                    var doc;
                    return jQuery.isWindow(elem) ? elem.document.documentElement["client" + name] : 9 === elem.nodeType ? (doc = elem.documentElement, Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name])) : void 0 === value ? jQuery.css(elem, prop, extra) : jQuery.style(elem, prop, value, extra);
                }, type, chainable ? margin : void 0, chainable, null);
            };
        });
    });
    /**
     * @return {?}
     */
    jQuery.fn.size = function () {
        return this.length;
    };
    jQuery.fn.andSelf = jQuery.fn.addBack;
    if ("function" == typeof define) {
        if (define.amd) {
            define("jquery", [], function () {
                return jQuery;
            });
        }
    }
    var $ = win.jQuery;
    var _$ = win.$;
    return jQuery.noConflict = function (deep) {
        return win.$ === jQuery && (win.$ = _$), deep && (win.jQuery === jQuery && (win.jQuery = $)), jQuery;
    }, typeof dataAndEvents === text && (win.jQuery = win.$ = jQuery), jQuery;
});
