using LMWebApp.cs;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.OleDb;
using System.Data.OracleClient;
using System.DirectoryServices;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Mail;
using System.Net.Mime;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.ServiceModel.Activation;
using System.Text;
using System.Web;
using System.Web.Hosting;
using System.Web.Script.Serialization;

namespace LMWebApp.ws
{
    // NOTE: You can use the "Rename" command on the "Refactor" menu to change the class name "ServiceMain" in code, svc and config file together.
    // NOTE: In order to launch WCF Test Client for testing this service, please select ServiceMain.svc or ServiceMain.svc.cs at the Solution Explorer and start debugging.

    [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed)]
    public class ServiceMain : IServiceMain
    {
        public string GetGazarListForDDL(string yr)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT BR_ID, DOMAIN_ORG, BR_NAME FROM TBL_BRANCH WHERE BR_TYPE1 IN (1,3) AND BR_ID!=2499 AND YR=" + yr + " ORDER BY SORT");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string GetGazarListForSelect2(string yr, string selectedList)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT a.BR_ID, a.DOMAIN_ORG, a.BR_NAME, NVL2(b.BR_ID,' selected=\"selected\"',null) as ISSELECTED FROM ( SELECT BR_ID, DOMAIN_ORG, BR_NAME, SORT FROM TBL_BRANCH WHERE BR_TYPE1 IN (1,3) AND BR_ID!=2499 AND YR=" + yr + " ) a LEFT JOIN ( SELECT TO_NUMBER(BR_ID) as BR_ID FROM ( select regexp_substr('" + selectedList + "','[^,]+', 1, level) AS BR_ID from dual connect by regexp_substr('" + selectedList + "', '[^,]+', 1, level) is not null ) a ) b ON a.BR_ID=b.BR_ID ORDER BY a.SORT");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string GetHeltesListForDDL(string yr, string gazar)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strQry = "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                if ("0" != myObj.OracleExecuteScalar("SELECT COUNT(1) FROM TBL_BRANCH WHERE BR_TYPE1 IN (1,2) AND BR_MAIN_ID1=" + gazar + " AND YR=" + yr).ToString())
                    strQry = @"SELECT BR_ID, DOMAIN_ORG, BR_NAME FROM TBL_BRANCH WHERE BR_TYPE1 IN (1,3) AND BR_ID=" + gazar + " AND YR="+yr+@"
UNION ALL
SELECT BR_ID, DOMAIN_ORG, BR_NAME FROM TBL_BRANCH WHERE BR_TYPE1 IN (1,2) AND BR_MAIN_ID1=" + gazar + " AND YR=" + yr;
                else
                    strQry = "SELECT BR_ID, DOMAIN_ORG, BR_NAME FROM TBL_BRANCH WHERE BR_TYPE1 IN (1,3) AND BR_MAIN_ID1=" + gazar + " AND YR=" + yr;
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string GetStaffListForDDL(string yr, string gazar, string heltes)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strQry = "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                if (heltes == "")
                    strQry = "SELECT a.ID as ST_ID, SUBSTR(a.LNAME,0,1)||'.'||SUBSTR(a.FNAME,0,1)||LOWER(SUBSTR(a.FNAME,2)) as ST_NAME, d.NAME as POS_NAME, f.ID as BR_ID, CASE WHEN f.ID=f.FATHER_ID THEN f.INITNAME ELSE g.INITNAME||'-'||f.INITNAME END as DOMAIN_ORG FROM hrdbuser.ST_STAFFS a INNER JOIN hrdbuser.ST_STBR b ON a.ID=b.STAFFS_ID AND b.ISACTIVE=1 INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID=c.ID AND c.ACTIVE=1 LEFT JOIN hrdbuser.STN_POS d ON b.POS_ID=d.ID INNER JOIN hrdbuser.ST_BRANCH f ON b.BRANCH_ID=f.ID AND f.ISACTIVE=1 INNER JOIN hrdbuser.ST_BRANCH g ON f.FATHER_ID=g.ID AND g.ISACTIVE=1 WHERE f.FATHER_ID=" + gazar + " ORDER BY g.SORT, f.SORT, d.SORT";
                else
                    strQry = @"SELECT h.ST_ID, SUBSTR(a.LNAME,0,1)||'.'||SUBSTR(a.FNAME,0,1)||LOWER(SUBSTR(a.FNAME,2)) as ST_NAME, d.NAME as POS_NAME, f.ID as BR_ID, CASE WHEN f.ID=f.FATHER_ID THEN f.INITNAME ELSE g.INITNAME||'-'||f.INITNAME END as DOMAIN_ORG 
FROM(
  SELECT ST_ID
  FROM(
    SELECT a.ID as ST_ID
    FROM hrdbuser.ST_STAFFS a
    INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1
    INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1
    INNER JOIN hrdbuser.ST_BRANCH f ON b.BRANCH_ID = f.ID AND f.ISACTIVE = 1
    WHERE f.FATHER_ID = (SELECT FATHER_ID FROM hrdbuser.ST_BRANCH WHERE ID = " + heltes + @" AND ISACTIVE = 1) AND b.POS_ID = 2010201
    UNION ALL
    SELECT a.ID as ST_ID
    FROM hrdbuser.ST_STAFFS a
    INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1
    INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1
    INNER JOIN hrdbuser.ST_BRANCH f ON b.BRANCH_ID = f.ID AND f.ISACTIVE = 1
    WHERE f.ID = " + heltes + @"
  )
  GROUP BY ST_ID
) h
INNER JOIN hrdbuser.ST_STAFFS a ON h.ST_ID = a.ID
INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1
INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1
LEFT JOIN hrdbuser.STN_POS d ON b.POS_ID = d.ID
INNER JOIN hrdbuser.ST_BRANCH f ON b.BRANCH_ID = f.ID AND f.ISACTIVE = 1
INNER JOIN hrdbuser.ST_BRANCH g ON f.FATHER_ID = g.ID AND g.ISACTIVE = 1
ORDER BY g.SORT, f.SORT, d.SORT";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string GetNegjListForDDL(string yr)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT a.BR_MAIN_ID1 as GAZAR_ID, a.BR_ID as HELTES_ID, b.DOMAIN_ORG as GAZAR_NAME, a.DOMAIN_ORG as HELTES_NAMEINIT, a.BR_NAME as HELTES_NAME, CASE WHEN c.CNT>0 THEN 1 ELSE 0 END as ISCHILD FROM TBL_BRANCH a INNER JOIN TBL_BRANCH b ON a.BR_MAIN_ID1=b.BR_ID AND b.YR=" + yr + " LEFT JOIN ( SELECT a.BR_MAIN_ID1 as GAZARID, b.DOMAIN_ORG, COUNT(a.BR_ID)-1 as CNT FROM TBL_BRANCH a INNER JOIN TBL_BRANCH b ON a.BR_MAIN_ID1=b.BR_ID AND b.YR=" + yr + " WHERE a.YR=" + yr + " AND a.BR_TYPE1 IN (1,2,3) GROUP BY a.BR_MAIN_ID1, b.DOMAIN_ORG ) c ON a.BR_ID=c.GAZARID WHERE a.YR=" + yr + " AND a.BR_TYPE1 IN (1,2,3) ORDER BY b.SORT, a.SORT");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string GetNegjListForSelect2(string yr, string selectedList)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT a.BR_MAIN_ID1 as GAZAR_ID, a.BR_ID as HELTES_ID, b.DOMAIN_ORG as GAZAR_NAME, a.DOMAIN_ORG as HELTES_NAMEINIT, a.BR_NAME as HELTES_NAME, CASE WHEN c.CNT>0 THEN 1 ELSE 0 END as ISCHILD, NVL2(d.BR_ID,' selected=\"selected\"',null) as ISSELECTED FROM TBL_BRANCH a INNER JOIN TBL_BRANCH b ON a.BR_MAIN_ID1=b.BR_ID AND b.YR=" + yr + " LEFT JOIN ( SELECT a.BR_MAIN_ID1 as GAZARID, b.DOMAIN_ORG, COUNT(a.BR_ID)-1 as CNT FROM TBL_BRANCH a INNER JOIN TBL_BRANCH b ON a.BR_MAIN_ID1=b.BR_ID AND b.YR=" + yr + " WHERE a.YR=" + yr + " AND a.BR_TYPE1 IN (1,2,3) GROUP BY a.BR_MAIN_ID1, b.DOMAIN_ORG ) c ON a.BR_ID=c.GAZARID LEFT JOIN ( SELECT TO_NUMBER(BR_ID) as BR_ID FROM ( select regexp_substr('" + selectedList + "','[^,]+', 1, level) AS BR_ID from dual connect by regexp_substr('" + selectedList + "', '[^,]+', 1, level) is not null ) a ) d ON a.BR_ID=d.BR_ID WHERE a.YR=" + yr + " AND a.BR_TYPE1 IN (1,2,3) ORDER BY b.SORT, a.SORT");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string GetStaffListForSelect2(string yr, string selectedList)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT b.BRANCH_ID , CASE WHEN d.ID = d.FATHER_ID THEN d.INITNAME ELSE f.INITNAME || '-' || d.INITNAME END AS NEGJNAME , a.ID as STAFFS_ID , SUBSTR(a.LNAME, 0, 1) || '.' || SUBSTR(a.FNAME, 1, 1) || LOWER(SUBSTR(a.FNAME, 2)) as STAFFS_NAME , g.NAME as POS_NAME , NVL2(h.STAFFS_ID, ' selected=\"selected\"', null) as ISSELECTED FROM hrdbuser.ST_STAFFS a INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1 INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1 INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1 INNER JOIN hrdbuser.ST_BRANCH f ON d.FATHER_ID = f.ID AND d.ISACTIVE = 1 INNER JOIN hrdbuser.STN_POS g ON b.POS_ID = g.ID LEFT JOIN( select regexp_substr('"+selectedList+"', '[^,]+', 1, level) AS STAFFS_ID from dual connect by regexp_substr('"+selectedList+"', '[^,]+', 1, level) is not null ) h ON a.ID = h.STAFFS_ID ORDER BY f.SORT, d.SORT, g.SORT, a.ID");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string OracleExecuteScalar(string qry)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                return myObj.OracleExecuteScalar(qry).ToString();
            }
            catch (NullReferenceException ex)
            {
                return "";
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void OracleExecuteNonQuery(string qry)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                myObj.OracleExecuteNonQuery(qry).ToString();
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string OracleExecuteDataSet(string qry)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet(qry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void DeleteFile(string filename)
        {
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string Path = HostingEnvironment.MapPath(filename);
                FileInfo file = new FileInfo(Path);
                if (file.Exists)
                {
                    file.Delete();
                }
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void SessionKill()
        {
            HttpContext.Current.Session["LM_IsUser"] = null;
            HttpContext.Current.Session["LM_UserDomain"] = null;
            HttpContext.Current.Session["LM_UserID"] = null;
        }
        public void gotoHRMIS(string stid)
        {
            HttpContext.Current.Session["HRMIS_UserID"] = stid;
        }
        public void gotoLM(string stid)
        {
            HttpContext.Current.Session["LM_UserID"] = stid;
        }

        public string GetGazarListForDDL_MySQL()
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.MySqlExecuteDataSet("SELECT ID, group_name, init_name FROM mof_groups_rs WHERE id IN (SELECT parent_id FROM mof_groups_rs WHERE parent_id is not null GROUP BY parent_id) ORDER BY ID");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string GetGazarListForSelect2_MySql(string selectedList)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strQry = "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                strQry = @"SELECT a.ID, a.group_name, a.init_name, CASE WHEN b.ID is not null THEN ' selected' ELSE null END as ISSELECTED
FROM mof_groups_rs a
LEFT JOIN ( 
	SELECT CAST(SUBSTRING_INDEX(SUBSTRING_INDEX(t.val, ',', n.n), ',', -1) as UNSIGNED) as ID
	FROM (
		SELECT '"+ selectedList + @"' as val FROM DUAL
	) t CROSS JOIN 
	(
	   SELECT a.N + b.N * 10 + 1 n
		 FROM 
		(SELECT 0 AS N UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) a
	   ,(SELECT 0 AS N UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) b
		ORDER BY n
	) n
	 WHERE n.n <= 1 + (LENGTH(t.val) - LENGTH(REPLACE(t.val, ',', '')))
) b ON a.ID=b.ID
WHERE a.id IN (SELECT parent_id FROM mof_groups_rs WHERE parent_id is not null GROUP BY parent_id) ORDER BY ID";
                DataSet ds = myObj.MySqlExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string MySqlExecuteScalar(string qry)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                return myObj.MySqlExecuteScalar(qry).ToString();
            }
            catch (NullReferenceException ex)
            {
                return "";
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void MySqlExecuteNonQuery(string qry)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                myObj.MySqlExecuteNonQuery(qry).ToString();
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }

        //*****planmnth.aspx*****//
        public string PlanmnthTab1Datatable1(string yr, string mnth, string gazar, string heltes, string stid, string isplaned, string tp)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (gazar != "") gazar = " AND f.BR_ID=" + gazar;
            if (heltes != "") heltes = " AND d.BR_ID=" + heltes;
            if (stid != "") stid = " AND g.USER_ID=" + stid;
            if (isplaned != "") isplaned = " AND c.IS_PLANED=" + isplaned;
            string strQry = "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                strQry = "SELECT ROWNUM as ROWNO, a.* FROM ( SELECT a.PLANMNTH_ID, b.PLANYR_ID, c.FUNC_ACTION_ID, f.BR_ID as STRAT_BRID, f.NO||'.'||d.NO||'.'||c.NO||'.'||b.NO||'. '||b.NAME as PLANMNTH_NAME, TO_CHAR(b.STRT_DATE,'YYYY-MM-DD')||' - '||TO_CHAR(b.END_DATE,'YYYY-MM-DD') as DT, a.STAFFIDLIST, a.STAFFNAMELIST, CASE WHEN b.SUBMIT_D2=1 THEN ' checked=\"checked\"' ELSE null END as SUBMIT, NVL2(g.PLAN_ID,1,0) as ISIMPL, NVL2(h.PLANYR_ID,1,0) as ISEVAL FROM( SELECT a.PLANMNTH_ID, NVL(RTRIM(xmlagg(xmlelement(e, b.USER_ID || ',') ORDER BY f.SORT, b.USER_ID).extract('//text()'), ','), 'none') STAFFIDLIST, NVL(RTRIM(xmlagg(xmlelement(e, ' ' || SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 1, 1) || LOWER(SUBSTR(c.FNAME, 2)) || ',') ORDER BY f.SORT, b.USER_ID).extract('//text()'), ','), 'none') STAFFNAMELIST FROM( SELECT a.ID as PLANMNTH_ID FROM TBL_PLANMNTH a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID = b.ID INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID = c.ID INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID = d.FUNC_ACTION_ID INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID = f.ID AND b.YR = f.YR LEFT JOIN TBL_PLANMNTH_USER g ON a.ID = g.PLANMNTH_ID WHERE b.YR = " + yr + " AND TO_NUMBER(TO_CHAR(a.STRT_DATE, 'mm')) = " + mnth + gazar + heltes + stid + isplaned + " GROUP BY a.ID ) a LEFT JOIN TBL_PLANMNTH_USER b ON a.PLANMNTH_ID = b.PLANMNTH_ID LEFT JOIN hrdbuser.ST_STAFFS c ON b.USER_ID = c.ID LEFT JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1 LEFT JOIN hrdbuser.STN_POS f ON d.POS_ID = f.ID GROUP BY a.PLANMNTH_ID ) a INNER JOIN TBL_PLANMNTH b ON a.PLANMNTH_ID = b.ID INNER JOIN TBL_PLANYR c ON b.PLANYR_ID = c.ID INNER JOIN TBL_FUNC_ACTION d ON c.FUNC_ACTION_ID = d.ID INNER JOIN TBL_FUNC_STRAT f ON d.FUNC_STRAT_ID = f.ID LEFT JOIN TBL_PLAN_IMPL g ON a.PLANMNTH_ID = g.PLAN_ID AND g.YR = c.YR AND TO_NUMBER(TO_CHAR(b.STRT_DATE, 'mm')) = g.MNTH AND g.TP = 'month' LEFT JOIN TBL_PLANYR_EVAL h ON b.PLANYR_ID = h.PLANYR_ID AND h.TP = 'month' AND h.INTERVAL = " + mnth + " ORDER BY f.NO, d.NO, c.NO, b.NO ) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string PlanmnthTab1Datatable2(string yr, string mnth, string gazar, string heltes, string stid, string isplaned, string tp)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (gazar != "") gazar = " AND f.BR_ID=" + gazar;
            if (heltes != "") heltes = " AND d.BR_ID=" + heltes;
            if (stid != "") stid = " AND g.USER_ID=" + stid;
            if (isplaned != "") isplaned = " AND c.IS_PLANED=" + isplaned;
            string strQry = "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                strQry = "SELECT ROWNUM as ROWNO, a.* FROM( SELECT a.TUSHAAL_ZAALT_ID, c.TUSHAAL_NUMBER, c.TUSHAAL_NAME, b.NAME as ZAALT, c.SUCCESS_DATE || ' - ' || CASE WHEN b.ENDDATE is null THEN '...' ELSE b.ENDDATE END as ENDDATE, a.HARIUTSSAN_STNAMELIST FROM( SELECT TUSHAAL_ZAALT_ID, NVL(RTRIM(xmlagg(xmlelement(e, ' ' || ST_NAME || ',')).extract('//text()'), ','), 'none') as HARIUTSSAN_STNAMELIST FROM( SELECT a.TUSHAAL_ZAALT_ID, SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 1, 1) || LOWER(SUBSTR(c.FNAME, 2)) as ST_NAME FROM( SELECT a.ID as TUSHAAL_ZAALT_ID, a.TUSHAAL_ID FROM TBL_TUSHAAL_ZAALT a INNER JOIN TBL_TUSHAAL b ON a.TUSHAAL_ID = b.ID INNER JOIN TBL_TUSHAAL_ZAALT_BR f ON a.ID = f.TUSHAAL_ZAALT_ID WHERE a.ISCLOSED = 0 AND b.TUSHAAL_TYPE = 3 AND TO_NUMBER(TO_CHAR(TO_DATE(b.SUCCESS_DATE, 'yyyy-mm-dd'), 'yyyy')) = " + yr + " AND f.BR_TYPE = 1" + gazar + " ) a LEFT JOIN TBL_TUSHAAL_USERS b ON a.TUSHAAL_ID = b.TUSHAAL_ID AND b.USER_TYPE = 1 LEFT JOIN hrdbuser.ST_STAFFS c ON b.ST_ID = c.ID GROUP BY a.TUSHAAL_ZAALT_ID, SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 1, 1) || LOWER(SUBSTR(c.FNAME, 2)) ) GROUP BY TUSHAAL_ZAALT_ID ) a INNER JOIN TBL_TUSHAAL_ZAALT b ON a.TUSHAAL_ZAALT_ID = b.ID INNER JOIN TBL_TUSHAAL c ON b.TUSHAAL_ID = c.ID INNER JOIN TBL_TUSHAAL_TYPE d ON TO_CHAR(c.TUSHAAL_TYPE_ID) = TO_CHAR(d.ID) ORDER BY c.SUCCESS_DATE DESC ) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string PlanmnthTab1Datatable3(string yr, string mnth, string gazar, string heltes, string stid, string isplaned, string tp)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (gazar != "") gazar = " AND f.BR_ID=" + gazar;
            if (heltes != "") heltes = " AND d.BR_ID=" + heltes;
            if (stid != "") stid = " AND g.USER_ID=" + stid;
            if (isplaned != "") isplaned = " AND c.IS_PLANED=" + isplaned;
            string strQry = "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                strQry = "SELECT ROWNUM as ROWNO, a.* FROM( SELECT a.TUSHAAL_ZAALT_ID, c.TUSHAAL_NUMBER, c.TUSHAAL_NAME, b.NAME as ZAALT, c.SUCCESS_DATE || ' - ' || CASE WHEN b.ENDDATE is null THEN '...' ELSE b.ENDDATE END as ENDDATE, a.HARIUTSSAN_STNAMELIST FROM( SELECT TUSHAAL_ZAALT_ID, NVL(RTRIM(xmlagg(xmlelement(e, ' ' || ST_NAME || ',')).extract('//text()'), ','), 'none') as HARIUTSSAN_STNAMELIST FROM( SELECT a.TUSHAAL_ZAALT_ID, SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 1, 1) || LOWER(SUBSTR(c.FNAME, 2)) as ST_NAME FROM( SELECT a.ID as TUSHAAL_ZAALT_ID, a.TUSHAAL_ID FROM TBL_TUSHAAL_ZAALT a INNER JOIN TBL_TUSHAAL b ON a.TUSHAAL_ID = b.ID INNER JOIN TBL_TUSHAAL_ZAALT_BR f ON a.ID = f.TUSHAAL_ZAALT_ID WHERE a.ISCLOSED = 0 AND b.TUSHAAL_TYPE = 2 AND TO_NUMBER(TO_CHAR(TO_DATE(b.SUCCESS_DATE, 'yyyy-mm-dd'), 'yyyy')) = " + yr + " AND f.BR_TYPE = 1" + gazar + " ) a LEFT JOIN TBL_TUSHAAL_USERS b ON a.TUSHAAL_ID = b.TUSHAAL_ID AND b.USER_TYPE = 1 LEFT JOIN hrdbuser.ST_STAFFS c ON b.ST_ID = c.ID GROUP BY a.TUSHAAL_ZAALT_ID, SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 1, 1) || LOWER(SUBSTR(c.FNAME, 2)) ) GROUP BY TUSHAAL_ZAALT_ID ) a INNER JOIN TBL_TUSHAAL_ZAALT b ON a.TUSHAAL_ZAALT_ID = b.ID INNER JOIN TBL_TUSHAAL c ON b.TUSHAAL_ID = c.ID INNER JOIN TBL_TUSHAAL_TYPE d ON TO_CHAR(c.TUSHAAL_TYPE_ID) = TO_CHAR(d.ID) ORDER BY c.SUCCESS_DATE DESC ) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string PlanmnthTab1Datatable4(string yr, string mnth, string gazar, string heltes, string stid, string isplaned, string tp)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (gazar != "") gazar = " AND f.BR_ID=" + gazar;
            if (heltes != "") heltes = " AND d.BR_ID=" + heltes;
            if (stid != "") stid = " AND g.USER_ID=" + stid;
            if (isplaned != "") isplaned = " AND c.IS_PLANED=" + isplaned;
            string strQry = "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                strQry = "SELECT ROWNUM AS ROWNO, a.* FROM( SELECT a.ID as ZAALT_ID, a.NAME as ZAALT, b.SUCCES_DATE || ' - ' || CASE WHEN b.DONE_DATE is null THEN '...' ELSE b.DONE_DATE END as ENDDATE FROM TBL_ZAALT a INNER JOIN( SELECT a.ID as TOGTOOL_ID FROM TBL_TOGTOOL a INNER JOIN TBL_TOGTOOL_BR f ON a.ID = f.TOGTOOL_ID WHERE TO_NUMBER(TO_CHAR(TO_DATE(a.SUCCES_DATE, 'yyyy-mm-dd'), 'yyyy')) = " + yr + gazar + " ) d ON a.TOGTOOL_ID = d.TOGTOOL_ID INNER JOIN TBL_TOGTOOL b ON d.TOGTOOL_ID = b.ID INNER JOIN TBL_TOGTOOL_TYPE c ON b.TOGTOOL_TYPE_ID = c.ID WHERE a.IS_IMPL = 1 ORDER BY b.SUCCES_DATE DESC ) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string PlanmnthTab1Datatable5(string gazar)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (gazar != "") gazar = " AND b.BR_ID=" + gazar;
            string strQry = "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                strQry = @"SELECT ROWNUM as ROWNO, a.* FROM ( SELECT a.ID, c.NO as AUDITEXTERNAL_REPORT_NO, c.NAME as AUDITEXTERNAL_REPORT_NAME, b.NO, b.NAME, a.BRLISTNAME, CASE WHEN b.SUCCESSDATE is null THEN 'Байнга' ELSE b.SUCCESSDATE END as SUCCESSDATE
    FROM (
      SELECT a.ID, NVL(RTRIM(xmlagg(xmlelement(e, b.DOMAIN_ORG || ',') ORDER BY b.SORT).extract('//text()'), ','), 'none') as BRLISTNAME
      FROM(
        SELECT ID, BR_ID
        FROM(
          SELECT a.ID, b.BR_ID
          FROM TBL_AUDITEXTERNAL_RECOMMEND a
          INNER JOIN TBL_AUDITEXTERNAL_REC_BR b ON a.ID = b.AUDITEXTERNAL_RECOMMEND_ID
          INNER JOIN TBL_AUDITEXTERNAL_REPORT c ON a.AUDITEXTERNAL_REPORT_ID = c.ID
          WHERE a.ISCLOSED=0"+ gazar + @"
          GROUP BY a.ID, b.BR_ID
          UNION ALL
          SELECT a.ID, b.BR_ID
          FROM TBL_AUDITEXTERNAL_RECOMMEND a
          INNER JOIN TBL_AUDITEXTERNAL_REC_BR2 b ON a.ID = b.AUDITEXTERNAL_RECOMMEND_ID
          INNER JOIN TBL_AUDITEXTERNAL_REPORT c ON a.AUDITEXTERNAL_REPORT_ID = c.ID
          WHERE a.ISCLOSED=0" + gazar + @"
          GROUP BY a.ID, b.BR_ID
        )
        GROUP BY ID, BR_ID
      ) a
      LEFT JOIN TBL_BRANCH b ON a.BR_ID = b.BR_ID AND b.YR IN(SELECT YR FROM TBL_SYSSET WHERE ACTIVE = 1)
      GROUP BY a.ID
    ) a
    INNER JOIN TBL_AUDITEXTERNAL_RECOMMEND b ON a.ID = b.ID
    INNER JOIN TBL_AUDITEXTERNAL_REPORT c ON b.AUDITEXTERNAL_REPORT_ID = c.ID
    INNER JOIN TBL_AUDITEXTERNAL_TYPE d ON b.AUDITEXTERNAL_TYPE_ID = d.ID
    ORDER BY c.NO, d.NO, b.NO ) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string PlanmnthTab1Datatable6(string gazar)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (gazar != "") gazar = " AND b.BR_ID=" + gazar;
            string strQry = "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                strQry = @"SELECT ROWNUM as ROWNO, a.* FROM ( SELECT a.ID, c.NO as AUDITINTERNAL_REPORT_NO, c.NAME as AUDITINTERNAL_REPORT_NAME, b.NO, b.NAME, a.BRLISTNAME, CASE WHEN b.SUCCESSDATE is null THEN 'Байнга' ELSE b.SUCCESSDATE END as SUCCESSDATE
    FROM (
      SELECT a.ID, NVL(RTRIM(xmlagg(xmlelement(e, b.DOMAIN_ORG || ',') ORDER BY b.SORT).extract('//text()'), ','), 'none') as BRLISTNAME
      FROM(
        SELECT ID, BR_ID
        FROM(
          SELECT a.ID, b.BR_ID
          FROM TBL_AUDITINTERNAL_RECOMMEND a
          INNER JOIN TBL_AUDITINTERNAL_REC_BR b ON a.ID = b.AUDITINTERNAL_RECOMMEND_ID
          INNER JOIN TBL_AUDITINTERNAL_REPORT c ON a.AUDITINTERNAL_REPORT_ID = c.ID
          WHERE a.ISCLOSED=0"+ gazar + @"
          GROUP BY a.ID, b.BR_ID
          UNION ALL
          SELECT a.ID, b.BR_ID
          FROM TBL_AUDITEXTERNAL_RECOMMEND a
          INNER JOIN TBL_AUDITEXTERNAL_REC_BR2 b ON a.ID = b.AUDITEXTERNAL_RECOMMEND_ID
          INNER JOIN TBL_AUDITEXTERNAL_REPORT c ON a.AUDITEXTERNAL_REPORT_ID = c.ID
          WHERE a.ISCLOSED=0" + gazar + @"
          GROUP BY a.ID, b.BR_ID
        )
        GROUP BY ID, BR_ID
      ) a
      LEFT JOIN TBL_BRANCH b ON a.BR_ID = b.BR_ID AND b.YR IN(SELECT YR FROM TBL_SYSSET WHERE ACTIVE = 1)
      GROUP BY a.ID
    ) a
    INNER JOIN TBL_AUDITINTERNAL_RECOMMEND b ON a.ID = b.ID
    INNER JOIN TBL_AUDITINTERNAL_REPORT c ON b.AUDITINTERNAL_REPORT_ID = c.ID
    ORDER BY c.NO, b.NO ) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string PlanmnthTab1Datatable7(string gazarinitname, string mnth)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strQry = "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                strQry = @"SELECT a.ID, b.TRANSPARENCYTYPE_ID, c.NAME as TRANSPARENCYTYPE_NAME, b.NAME, a.GROUPLIST_ID, a.GROUPLIST_NAME, a.MNTHLIST_ID
FROM (
	SELECT a.ID, a.GROUPLIST_ID, a.GROUPLIST_NAME, GROUP_CONCAT(CAST(b.MNTH as char(100)) ORDER BY b.MNTH) as MNTHLIST_ID
    FROM (
		SELECT a.ID, GROUP_CONCAT(CAST(b.groups_rs_id as char(100))) as GROUPLIST_ID, GROUP_CONCAT(CAST(c.init_name as nchar(100)) ORDER BY b.groups_rs_id) as GROUPLIST_NAME
		FROM (
			SELECT a.ID
			FROM TBL_TRANSPARENCY a
			INNER JOIN TBL_TRANSPARENCY_BR b ON a.ID=b.TRANSPARENCY_ID
			INNER JOIN mof_groups_rs c ON b.groups_rs_id=c.ID
            INNER JOIN TBL_TRANSPARENCY_MNTH d ON a.ID=d.TRANSPARENCY_ID
			WHERE c.init_name='"+ gazarinitname + "' AND d.MNTH="+mnth+@"
			GROUP BY a.ID
		) a
		INNER JOIN TBL_TRANSPARENCY_BR b ON a.ID=b.TRANSPARENCY_ID
		INNER JOIN mof_groups_rs c ON b.groups_rs_id=c.ID
		GROUP BY a.ID
	) a
    INNER JOIN TBL_TRANSPARENCY_MNTH b ON a.ID=b.TRANSPARENCY_ID
	GROUP BY a.ID, a.GROUPLIST_ID, a.GROUPLIST_NAME
) a
INNER JOIN TBL_TRANSPARENCY b ON a.ID=b.ID
INNER JOIN TBL_TRANSPARENCYTYPE c ON b.TRANSPARENCYTYPE_ID=c.ID
ORDER BY b.TRANSPARENCYTYPE_ID, b.NAME, a.ID";
                DataSet ds = myObj.MySqlExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }



        public string PlanmnthTab1PlanyrListDDL(string action)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT a.ID, c.NO||'.'||b.NO||'.'||a.NO||'. '||a.NAME as NAME FROM TBL_PLANYR a INNER JOIN TBL_FUNC_ACTION b ON a.FUNC_ACTION_ID=b.ID INNER JOIN TBL_FUNC_STRAT c ON b.FUNC_STRAT_ID=c.ID WHERE a.SUBMIT_D2=1 AND b.ID=" + action + " ORDER BY c.NO, b.NO, a.NO");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void PlanmnthTab1SP_PLANM_DELETE(string P_PLANM_ID)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[1], ParamValue = new string[1];
                ParamName[0] = "P_PLANM_ID";
                ParamValue[0] = P_PLANM_ID;
                myObj.SP_OracleExecuteNonQuery("PLANM_DELETE", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string PlanmnthTab1ModalStaffListForSelect2(string id, string selectedList)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT a.ST_ID, a.ST_NAME, a.SORT, NVL2(b.ST_ID,' selected=\"selected\"',null) as ISSELECTED FROM( SELECT a.ST_ID, SUBSTR(b.LNAME, 0, 1) || '.' || SUBSTR(b.FNAME, 0, 1) || LOWER(SUBSTR(b.FNAME, 2)) as ST_NAME, c.SORT FROM TBL_PLANYR_USER a INNER JOIN hrdbuser.ST_STAFFS b ON a.ST_ID = b.ID INNER JOIN hrdbuser.ST_STBR d ON b.ID = d.STAFFS_ID AND d.ISACTIVE = 1 INNER JOIN hrdbuser.STN_POS c ON d.POS_ID = c.ID WHERE a.PLANYR_ID = " + id + " ) a LEFT JOIN( SELECT TO_NUMBER(ST_ID) as ST_ID FROM( select regexp_substr('" + selectedList + "', '[^,]+', 1, level) AS ST_ID from dual connect by regexp_substr('" + selectedList + "', '[^,]+', 1, level) is not null ) a ) b ON a.ST_ID = b.ST_ID ORDER BY a.SORT, a.ST_ID");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string PlanmnthTab1ModalStaffListNotPlanedForSelect2(string funcActionId)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet(@"SELECT STAFFS_ID, STAFFNAME, BRANCH_ID, NEGJ, NEGJSORT, POSSORT 
FROM(
  SELECT a.ID as STAFFS_ID, (SUBSTR(a.LNAME, 0, 1) || '.' || SUBSTR(a.FNAME, 0, 1) || LOWER(SUBSTR(a.FNAME, 2))) as STAFFNAME, d.ID as BRANCH_ID, d.INITNAME as NEGJ, d.SORT as NEGJSORT, g.SORT as POSSORT
  FROM hrdbuser.ST_STAFFS a
  INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1 AND b.BRANCH_ID IN(SELECT b.FATHER_ID FROM TBL_FUNC_ACTION_BR a INNER JOIN hrdbuser.ST_BRANCH b ON a.BR_ID = b.ID AND b.ISACTIVE = 1 WHERE a.FUNC_ACTION_ID = " + funcActionId + @" GROUP BY b.FATHER_ID)
  INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1
  INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
  INNER JOIN hrdbuser.STN_POS g ON b.POS_ID = g.ID
  WHERE b.POS_ID = 2010201
  UNION ALL
  SELECT a.ID as STAFFS_ID, (SUBSTR(a.LNAME, 0, 1) || '.' || SUBSTR(a.FNAME, 0, 1) || LOWER(SUBSTR(a.FNAME, 2))) as STAFFNAME, d.ID as BRANCH_ID, CASE WHEN d.ID = d.FATHER_ID THEN d.INITNAME ELSE f.INITNAME || '-' || d.INITNAME END as NEGJ, d.SORT as NEGJSORT, g.SORT as POSSORT
  FROM hrdbuser.ST_STAFFS a
  INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1 AND b.BRANCH_ID IN(SELECT BR_ID FROM TBL_FUNC_ACTION_BR WHERE FUNC_ACTION_ID = " + funcActionId + @")
  INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1
  INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
  INNER JOIN hrdbuser.ST_BRANCH f ON d.FATHER_ID = f.ID AND f.ISACTIVE = 1
  INNER JOIN hrdbuser.STN_POS g ON b.POS_ID = g.ID
  WHERE b.POS_ID != 2010201
)
ORDER BY NEGJSORT, POSSORT, STAFFS_ID");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void PlanmnthTab1SP_PLANM_NOTPLANED_INSERT(string P_FUNC_ACTION_ID, string P_NO, string P_NAME, string P_STRT_DATE, string P_END_DATE, string P_STAFFLIST, string P_STAFFID)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[7], ParamValue = new string[7];
                ParamName[0] = "P_FUNC_ACTION_ID";
                ParamName[1] = "P_NO";
                ParamName[2] = "P_NAME";
                ParamName[3] = "P_STRT_DATE";
                ParamName[4] = "P_END_DATE";
                ParamName[5] = "P_STAFFLIST";
                ParamName[6] = "P_STAFFID";
                ParamValue[0] = P_FUNC_ACTION_ID;
                ParamValue[1] = P_NO;
                ParamValue[2] = P_NAME;
                ParamValue[3] = P_STRT_DATE;
                ParamValue[4] = P_END_DATE;
                ParamValue[5] = P_STAFFLIST;
                ParamValue[6] = P_STAFFID;
                myObj.SP_OracleExecuteNonQuery("PLANM_NOTPLANED_INSERT", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void PlanmnthTab1SP_PLANM_INSERT(string P_PLANYR_ID, string P_NO, string P_NAME, string P_STRT_DATE, string P_END_DATE, string P_STAFFLIST, string P_STAFFID)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[7], ParamValue = new string[7];
                ParamName[0] = "P_PLANYR_ID";
                ParamName[1] = "P_NO";
                ParamName[2] = "P_NAME";
                ParamName[3] = "P_STRT_DATE";
                ParamName[4] = "P_END_DATE";
                ParamName[5] = "P_STAFFLIST";
                ParamName[6] = "P_STAFFID";
                ParamValue[0] = P_PLANYR_ID;
                ParamValue[1] = P_NO;
                ParamValue[2] = P_NAME;
                ParamValue[3] = P_STRT_DATE;
                ParamValue[4] = P_END_DATE;
                ParamValue[5] = P_STAFFLIST;
                ParamValue[6] = P_STAFFID;
                myObj.SP_OracleExecuteNonQuery("PLANM_INSERT", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void PlanmnthTab1SP_PLANM_UPDATE(string P_PLANM_ID, string P_PLANYR_ID, string P_NO, string P_NAME, string P_STRT_DATE, string P_END_DATE, string P_STAFFLIST, string P_STAFFID)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[8], ParamValue = new string[8];
                ParamName[0] = "P_PLANM_ID";
                ParamName[1] = "P_PLANYR_ID";
                ParamName[2] = "P_NO";
                ParamName[3] = "P_NAME";
                ParamName[4] = "P_STRT_DATE";
                ParamName[5] = "P_END_DATE";
                ParamName[6] = "P_STAFFLIST";
                ParamName[7] = "P_STAFFID";
                ParamValue[0] = P_PLANM_ID;
                ParamValue[1] = P_PLANYR_ID;
                ParamValue[2] = P_NO;
                ParamValue[3] = P_NAME;
                ParamValue[4] = P_STRT_DATE;
                ParamValue[5] = P_END_DATE;
                ParamValue[6] = P_STAFFLIST;
                ParamValue[7] = P_STAFFID;
                myObj.SP_OracleExecuteNonQuery("PLANM_UPDATE", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string PlanmnthAddStafflistModalSelectStafflist(string id)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet(@"SELECT STAFFS_ID, STAFFNANE, BRANCH_ID, NEGJ, NEGJSORT, POSSORT 
FROM(
  SELECT d.STAFFS_ID, (SUBSTR(g.LNAME, 0, 1) || '.' || SUBSTR(g.FNAME, 0, 1) || LOWER(SUBSTR(g.FNAME, 2))) as STAFFNANE, h.ID as BRANCH_ID, h.INITNAME as NEGJ, h.SORT as NEGJSORT, j.SORT as POSSORT
  FROM TBL_PLANYR a
  INNER JOIN TBL_FUNC_ACTION b ON a.FUNC_ACTION_ID = b.ID
  INNER JOIN TBL_FUNC_STRAT c ON b.FUNC_STRAT_ID = c.ID
  INNER JOIN hrdbuser.ST_STBR d ON c.BR_ID = d.BRANCH_ID AND d.ISACTIVE = 1
  INNER JOIN hrdbuser.STN_MOVE f ON d.MOVE_ID = f.ID AND f.ACTIVE = 1
  INNER JOIN hrdbuser.ST_STAFFS g ON d.STAFFS_ID = g.ID
  INNER JOIN hrdbuser.ST_BRANCH h ON d.BRANCH_ID = h.ID AND h.ISACTIVE = 1
  INNER JOIN hrdbuser.STN_POS j ON d.POS_ID = j.ID
  WHERE a.ID = " + id + @" AND d.POS_ID = 2010201
  UNION ALL
  SELECT d.STAFFS_ID, (SUBSTR(g.LNAME, 0, 1) || '.' || SUBSTR(g.FNAME, 0, 1) || LOWER(SUBSTR(g.FNAME, 2))) as STAFFNANE, h.ID as BRANCH_ID, CASE WHEN h.ID = h.FATHER_ID THEN h.INITNAME ELSE i.INITNAME || '-' || h.INITNAME END as NEGJ, h.SORT as NEGJSORT, j.SORT as POSSORT
  FROM TBL_PLANYR a
  INNER JOIN TBL_FUNC_ACTION b ON a.FUNC_ACTION_ID = b.ID
  INNER JOIN TBL_FUNC_ACTION_BR j ON b.ID = j.FUNC_ACTION_ID
  INNER JOIN TBL_FUNC_STRAT c ON b.FUNC_STRAT_ID = c.ID
  INNER JOIN hrdbuser.ST_STBR d ON j.BR_ID = d.BRANCH_ID AND d.ISACTIVE = 1
  INNER JOIN hrdbuser.STN_MOVE f ON d.MOVE_ID = f.ID AND f.ACTIVE = 1
  INNER JOIN hrdbuser.ST_STAFFS g ON d.STAFFS_ID = g.ID
  INNER JOIN hrdbuser.ST_BRANCH h ON d.BRANCH_ID = h.ID AND h.ISACTIVE = 1
  INNER JOIN hrdbuser.ST_BRANCH i ON h.FATHER_ID = i.ID AND i.ISACTIVE = 1
  INNER JOIN hrdbuser.STN_POS j ON d.POS_ID = j.ID
  WHERE a.ID = " + id + @" AND d.POS_ID != 2010201
)
ORDER BY NEGJSORT, POSSORT, STAFFS_ID");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string PlanmnthAddStafflistDatatable(string id)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet(@"SELECT ROWNUM, a.* 
FROM(
  SELECT a.ST_ID, SUBSTR(b.LNAME, 0, 1) || LOWER(SUBSTR(b.LNAME, 2)) as ovog, SUBSTR(b.FNAME, 0, 1) || LOWER(SUBSTR(b.FNAME, 2)) as name, a.ISREAL
  FROM TBL_PLANYR_USER a
  INNER JOIN hrdbuser.ST_STAFFS b ON a.ST_ID = b.ID
  WHERE a.PLANYR_ID = " + id + @"
  ORDER BY a.ST_ID
) a");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string PlanmnthTab1PlanPrintModalDatatable(string yr, string mnth, string isplaned, string gazar, string heltes, string staff, string issubmit)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strQry = "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                if (gazar != "") gazar = " AND f.BR_ID=" + gazar;
                if (heltes != "") heltes = " AND g.BR_ID=" + heltes;
                if (staff != "") staff = " AND c.ST_ID=" + staff;
                if (isplaned != "") isplaned = " AND b.IS_PLANED=" + isplaned;
                if (issubmit != "") issubmit = " AND a.SUBMIT_D2=" + issubmit;
                strQry = @"SELECT a.PLANMNTH_ID, f.NO as STRAT_NO, f.NAME as STRAT_NAME, d.NO as ACTION_NO, d.NAME as ACTION_NAME, c.NO as PLANYR_NO, c.NAME as PLANYR_NAME, b.NO as PLANMNTH_NO, b.NAME as PLANMNTH_NAME, c.CRITERIA, c.CNT, c.QUALITY, a.STLISTNAME, REPLACE(NVL(c.BUDGET,'Жилдээ'),'1,2,3,4,5,6,7,8,9,10,11,12','Сар бүр') as BUDGET, f.BR_ID as STRAT_BRID, d.ID as ACTION_ID, TO_CHAR(b.STRT_DATE,'MM/DD')||'-'||TO_CHAR(b.END_DATE,'MM/DD') as DT 
FROM(
  SELECT a.PLANMNTH_ID, NVL(RTRIM(xmlagg(xmlelement(e, ' ' || SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 1, 1) || LOWER(SUBSTR(c.FNAME, 2)) || ',') ORDER BY f.SORT DESC).extract('//text()'), ','), 'none') STLISTNAME
  FROM(
    SELECT a.ID as PLANMNTH_ID
    FROM TBL_PLANMNTH a
    INNER JOIN TBL_PLANYR b ON a.PLANYR_ID = b.ID
    INNER JOIN TBL_PLANMNTH_USER c ON a.ID = c.PLANMNTH_ID
    INNER JOIN TBL_FUNC_ACTION d ON b.FUNC_ACTION_ID = d.ID
    INNER JOIN TBL_FUNC_STRAT f ON d.FUNC_STRAT_ID = f.ID AND f.YR = " + yr + @"
    INNER JOIN TBL_FUNC_ACTION_BR g ON d.ID = g.FUNC_ACTION_ID
    WHERE b.YR = " + yr + "  AND TO_NUMBER(TO_CHAR(a.STRT_DATE, 'mm')) = " + mnth + gazar + heltes + staff + isplaned + issubmit + @"
    GROUP BY a.ID
  ) a
  LEFT JOIN TBL_PLANMNTH_USER b ON a.PLANMNTH_ID = b.PLANMNTH_ID
  LEFT JOIN hrdbuser.ST_STAFFS c ON b.USER_ID = c.ID
  LEFT JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
  LEFT JOIN hrdbuser.STN_POS f ON d.POS_ID = f.ID
  GROUP BY a.PLANMNTH_ID
) a
INNER JOIN TBL_PLANMNTH b ON a.PLANMNTH_ID = b.ID
INNER JOIN TBL_PLANYR c ON b.PLANYR_ID = c.ID
INNER JOIN TBL_FUNC_ACTION d ON c.FUNC_ACTION_ID = d.ID
INNER JOIN TBL_FUNC_STRAT f ON d.FUNC_STRAT_ID = f.ID
INNER JOIN TBL_BRANCH g ON f.BR_ID = g.BR_ID AND g.YR = " + yr + @"
ORDER BY f.NO, d.NO, c.NO, b.NO";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string PlanmnthTab2Datatable(string yr, string mnth, string gazar, string heltes, string stid, string isplaned)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] stafflist = new string[0];
                string isMine = "";
                if (gazar != "") gazar = " AND f.BR_ID=" + gazar;
                if (heltes != "") heltes = " AND d.BR_ID=" + heltes;
                if (stid != "") stid = " AND g.USER_ID=" + stid;
                if (isplaned != "") isplaned = " AND c.IS_PLANED=" + isplaned;
                string qry = @"SELECT ROWNUM as ROWNO, a.* FROM ( SELECT a.PLANMNTH_ID, f.NO||'.'||d.NO||'.'||c.NO||'.'||b.NO||'. '||b.NAME as PLANMNTH_NAME, TO_CHAR(b.STRT_DATE,'YYYY-MM-DD')||' - '||TO_CHAR(b.END_DATE,'YYYY-MM-DD') as DT, a.STAFFIDLIST, a.STAFFNAMELIST, a.ISIMPL, a.FILE_NAME, NVL2(g.EVAL,1,0) as ISEVAL FROM ( SELECT a.PLANMNTH_ID, a.STAFFIDLIST, a.STAFFNAMELIST, NVL2(b.IMPL_DATA,'glyphicon glyphicon-check txt-color-green font-xl','glyphicon glyphicon-edit txt-color-red font-xl') as ISIMPL, b.FILE_NAME FROM ( SELECT a.PLANMNTH_ID, NVL(RTRIM(xmlagg (xmlelement (e, b.USER_ID || ',') ORDER BY d.SORT, b.USER_ID).extract('//text()'), ','),'none') STAFFIDLIST, NVL(RTRIM(xmlagg (xmlelement (e, ' '||SUBSTR(c.LNAME,0,1)||'.'||SUBSTR(c.FNAME,1,1)||LOWER(SUBSTR(c.FNAME,2)) || ',') ORDER BY d.SORT, b.USER_ID).extract('//text()'), ','),'none') STAFFNAMELIST FROM ( SELECT a.ID as PLANMNTH_ID FROM TBL_PLANMNTH a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID AND b.YR=f.YR INNER JOIN TBL_PLANMNTH_USER g ON a.ID=g.PLANMNTH_ID WHERE a.SUBMIT_D2=1 AND b.YR=" + yr + " AND TO_NUMBER(TO_CHAR(a.STRT_DATE,'mm'))=" + mnth + gazar + heltes + stid + isplaned + @" GROUP BY a.ID ) a INNER JOIN TBL_PLANMNTH_USER b ON a.PLANMNTH_ID=b.PLANMNTH_ID INNER JOIN hrdbuser.ST_STAFFS c ON b.USER_ID=c.ID 
      INNER JOIN hrdbuser.ST_STBR f ON c.ID = f.STAFFS_ID AND f.ISACTIVE = 1
      INNER JOIN ST_POS d ON f.POS_ID = d.POS_ID GROUP BY a.PLANMNTH_ID ) a LEFT JOIN TBL_PLAN_IMPL b ON b.YR=" + yr + " AND a.PLANMNTH_ID=b.PLAN_ID AND b.MNTH=" + mnth + " AND b.TP='month' ) a INNER JOIN TBL_PLANMNTH b ON a.PLANMNTH_ID=b.ID INNER JOIN TBL_PLANYR c ON b.PLANYR_ID=c.ID INNER JOIN TBL_FUNC_ACTION d ON c.FUNC_ACTION_ID=d.ID INNER JOIN TBL_FUNC_STRAT f ON d.FUNC_STRAT_ID=f.ID LEFT JOIN TBL_PLANYR_EVAL g ON b.PLANYR_ID=g.PLANYR_ID AND g.TP='month' AND g.INTERVAL=" + mnth + " ORDER BY f.NO, d.NO, c.NO, b.NO ) a";
                DataSet ds = myObj.OracleExecuteDataSet(qry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string PlanmnthTab3Datatable(string yr, string mnth, string gazar, string heltes, string isplaned)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                if (gazar != "") gazar = " AND d.BR_ID=" + gazar;
                if (heltes != "") heltes = " AND f.BR_ID=" + heltes;
                if (isplaned != "") isplaned = " AND c.IS_PLANED=" + isplaned;
                string qry = "SELECT ROWNUM, a.* FROM ( SELECT f.NO as STRAT_NO, c.NO as ACTION_NO, b.PLANYR_ID, c.NO as PLANYR_NO, c.NAME as PLANYR_NAME, null as IS_PLANED, NVL2(h.EVAL,1,0) as ISEVAL, NVL(h.EVAL,0) as EVAL, NVL(h.DESCRIPTION,'-') as DESCRIPTION, b.NAME as PLANMNTH_NAME, g.IMPL_DATA, NVL2(g.FILE_NAME,1,0) as ISFILE, g.FILE_NAME as FILE_NAME FROM ( SELECT a.ID as PLANMNTH_ID FROM TBL_PLANMNTH a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID AND b.YR=d.YR INNER JOIN TBL_FUNC_ACTION_BR f ON c.ID=f.FUNC_ACTION_ID WHERE a.SUBMIT_D2=1 AND b.YR=" + yr + " AND TO_NUMBER(TO_CHAR(a.STRT_DATE,'mm'))=" + mnth + gazar + heltes + isplaned + " GROUP BY a.ID ) a INNER JOIN TBL_PLANMNTH b ON a.PLANMNTH_ID=b.ID INNER JOIN TBL_PLANYR c ON b.PLANYR_ID=c.ID INNER JOIN TBL_FUNC_ACTION d ON c.FUNC_ACTION_ID=d.ID INNER JOIN TBL_FUNC_STRAT f ON d.FUNC_STRAT_ID=f.ID LEFT JOIN TBL_PLAN_IMPL g ON a.PLANMNTH_ID=g.PLAN_ID AND g.YR=" + yr + " AND g.MNTH=" + mnth + " AND g.TP='month' LEFT JOIN TBL_PLANYR_EVAL h ON c.ID=h.PLANYR_ID AND h.TP='month' AND h.INTERVAL=" + mnth + " ORDER BY f.NO, c.NO, c.NO ) a";
                DataSet ds = myObj.OracleExecuteDataSet(qry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string PlanmnthTab4t1Datatable(string yr, string mnth, string gazar)
        {
            ModifyDB myObj = new ModifyDB();

            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                if (gazar != "") gazar = " AND d.BR_ID=" + gazar;
                DataSet ds = myObj.OracleExecuteDataSet("SELECT b.IS_PLANED, d.NO as STRAT_NO, c.NO as ACTION_NO, b.ID as PLANYR_ID, b.NO as PLANYR_NO, b.NAME as PLANYR_NAME, h.PLANMNTH_CNT, a.NO as PLANMNTH_NO, a.NAME as PLANMNTH_NAME, f.IMPL_DATA, NVL2(g.EVAL,1,0) as ISEVAL, g.EVAL FROM TBL_PLANMNTH a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID AND d.YR=b.YR LEFT JOIN TBL_PLAN_IMPL f ON a.ID=f.PLAN_ID AND f.MNTH=" + mnth + " AND TP='month' AND f.YR=b.YR LEFT JOIN TBL_PLANYR_EVAL g ON b.ID=g.PLANYR_ID AND g.TP='month' AND g.INTERVAL=" + mnth + " INNER JOIN ( SELECT PLANYR_ID, COUNT(PLANMNTH_ID) as PLANMNTH_CNT FROM ( SELECT b.ID as PLANYR_ID, a.ID as PLANMNTH_ID FROM TBL_PLANMNTH a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID INNER JOIN TBL_FUNC_ACTION_BR i ON c.ID=i.FUNC_ACTION_ID WHERE a.SUBMIT_D2=1 AND b.YR=" + yr + " AND TO_NUMBER(TO_CHAR(a.STRT_DATE,'mm'))=" + mnth + gazar + " GROUP BY b.ID, a.ID ) GROUP BY PLANYR_ID ) h ON b.ID=h.PLANYR_ID WHERE a.SUBMIT_D2=1 AND b.YR=" + yr + " AND TO_NUMBER(TO_CHAR(a.STRT_DATE,'mm'))=" + mnth + gazar + " ORDER BY d.NO, c.NO, b.NO, a.NO");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string PlanmnthTab4t2Datatable(string yr, string mnth, string gazar)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                if (gazar != "") gazar = " AND d.BR_ID=" + gazar;
                string qry = "SELECT ROWNUM as ROWNO, STRAT_NO||'.'||ACTION_NO||'.'||PLANYR_NO||'.'||PLANMNTH_NO||'. '||PLANMNTH_NAME as PLANMNTH, DOMAIN_ORG, EVAL, DESCRIPTION FROM ( SELECT d.NO as STRAT_NO, c.NO as ACTION_NO, b.NO as PLANYR_NO, a.NO as PLANMNTH_NO, a.NAME as PLANMNTH_NAME, g.DOMAIN_ORG, f.EVAL, NVL(f.DESCRIPTION,'-') as DESCRIPTION FROM TBL_PLANMNTH a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID LEFT JOIN TBL_PLANYR_EVAL f ON b.ID=f.PLANYR_ID AND f.TP='month' AND f.INTERVAL=" + mnth + " INNER JOIN TBL_BRANCH g ON d.BR_ID=g.BR_ID AND g.YR="+yr+@" WHERE a.SUBMIT_D2=1 AND b.YR=" + yr + " AND TO_NUMBER(TO_CHAR(a.STRT_DATE,'mm'))=" + mnth + gazar + " AND f.EVAL<=70 ORDER BY d.NO, c.NO, b.NO, a.NO )";
                DataSet ds = myObj.OracleExecuteDataSet(qry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string PlanmnthTab5t1Datatable(string yr, string mnth)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string qry = "SELECT b.BR_NAME, COUNT(a.PLANMNTH_CNT) as PLANMNTH_CNT, NVL(TO_CHAR(SUM(a.EVAL100)),'-') as EVAL100, NVL(TO_CHAR(SUM(a.EVAL90)),'-') as EVAL90, NVL(TO_CHAR(SUM(a.EVAL80)),'-') as EVAL80, NVL(TO_CHAR(SUM(a.EVAL70)),'-') as EVAL70, NVL(TO_CHAR(SUM(a.EVAL50)),'-') as EVAL50, NVL(TO_CHAR(SUM(a.EVAL30)),'-') as EVAL30, NVL(TO_CHAR(SUM(a.EVAL10)),'-') as EVAL10, NVL(TO_CHAR(SUM(a.EVAL0)),'-') as EVAL0, NVL(TO_CHAR(SUM(a.EVALNONE)),'-') as EVALNONE, ROUND((((NVL(SUM(a.EVAL100),0)*100)+ (NVL(SUM(a.EVAL90),0)*90)+ (NVL(SUM(a.EVAL80),0)*80)+ (NVL(SUM(a.EVAL70),0)*70)+ (NVL(SUM(a.EVAL50),0)*50)+ (NVL(SUM(a.EVAL30),0)*30)+ (NVL(SUM(a.EVAL10),0)*10)+ (NVL(SUM(a.EVAL0),0)*0))/CASE WHEN ((NVL(SUM(a.EVAL100),0)+NVL(SUM(a.EVAL90),0)+NVL(SUM(a.EVAL80),0)+NVL(SUM(a.EVAL70),0)+NVL(SUM(a.EVAL50),0)+NVL(SUM(a.EVAL30),0)+NVL(SUM(a.EVAL10),0)+NVL(SUM(a.EVAL0),0))*100)=0 THEN 1 ELSE ((NVL(SUM(a.EVAL100),0)+NVL(SUM(a.EVAL90),0)+NVL(SUM(a.EVAL80),0)+NVL(SUM(a.EVAL70),0)+NVL(SUM(a.EVAL50),0)+NVL(SUM(a.EVAL30),0)+NVL(SUM(a.EVAL10),0)+NVL(SUM(a.EVAL0),0))*100) END)*100,1) as PERAVG, b.SORT FROM ( SELECT d.BR_ID, b.ID as PLANYR_ID, COUNT(a.ID) as PLANMNTH_CNT, CASE WHEN f.EVAL=100 THEN 1 END as EVAL100, CASE WHEN f.EVAL=90 THEN 1 END as EVAL90, CASE WHEN f.EVAL=80 THEN 1 END as EVAL80, CASE WHEN f.EVAL=70 THEN 1 END as EVAL70, CASE WHEN f.EVAL=50 THEN 1 END as EVAL50, CASE WHEN f.EVAL=30 THEN 1 END as EVAL30, CASE WHEN f.EVAL=10 THEN 1 END as EVAL10, CASE WHEN f.EVAL=0 THEN 1 END as EVAL0, CASE WHEN f.EVAL is null THEN 1 END as EVALNONE FROM TBL_PLANMNTH a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID LEFT JOIN TBL_PLANYR_EVAL f ON b.ID=f.PLANYR_ID AND f.TP='month' AND f.INTERVAL=" + mnth + " WHERE a.SUBMIT_D2=1 AND b.YR=" + yr + " AND TO_NUMBER(TO_CHAR(a.STRT_DATE,'mm'))=" + mnth + " GROUP BY d.BR_ID, b.ID, f.EVAL ) a INNER JOIN TBL_BRANCH b ON a.BR_ID=b.BR_ID AND b.YR=" + yr + " GROUP BY b.BR_NAME, b.SORT ORDER BY b.SORT";
                DataSet ds = myObj.OracleExecuteDataSet(qry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        //hyanah tailan
        public string PlanmnthTab4t4Datatable(string yr, string mnth) {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string mnthlike = ","+mnth+",", mnthlikelist="";
                for (int i = 1; i <= Int32.Parse(mnth); i++) {
                    if (mnthlikelist != "") mnthlikelist += " OR ";
                    mnthlikelist += "BUDGET LIKE '%," + i.ToString() + ",%'";
                }
                string strQry = @"SELECT ROWNUM as ROWNO, a.DOMAIN_ORG, 
  CASE WHEN a.D1 = 0 THEN '-' ELSE TO_CHAR(a.D1) END as D1,
  CASE WHEN a.D2 = 0 THEN '-' ELSE TO_CHAR(a.D2) END as D2,
  CASE WHEN a.D3 = 0 THEN '-' ELSE TO_CHAR(a.D3) END as D3,
  CASE WHEN a.D4 = 0 THEN '-' ELSE TO_CHAR(a.D4) END as D4,
  CASE WHEN a.D5 = 0 THEN '-' ELSE TO_CHAR(a.D5) END as D5,
  CASE WHEN a.D6 = 0 THEN '-' ELSE TO_CHAR(a.D6) END as D6,
  CASE WHEN a.D7 = 0 THEN '-' ELSE TO_CHAR(a.D7) END as D7,
  CASE WHEN a.D8 = 0 THEN '-' ELSE TO_CHAR(a.D8) END as D8,
  CASE WHEN a.D9 = 0 THEN '-' ELSE TO_CHAR(a.D9) END as D9,
  CASE WHEN a.D10 = 0 THEN '-' ELSE TO_CHAR(a.D10) END as D10,
  CASE WHEN a.D11 = 0 THEN '-' ELSE TO_CHAR(a.D11) END as D11,
  CASE WHEN a.D12 = 0 THEN '-' ELSE TO_CHAR(a.D12) END as D12
FROM (
  SELECT a.BR_ID, a.DOMAIN_ORG, a.SORT, 
    NVL(b.CNTPLANYR,0) as D1, 
    NVL(b.ISPLANED1,0) as D2, 
    NVL(b.ISPLANED0,0) as D3, 
    NVL(c.CNTPLANYR,0) as D4, 
    NVL(d.CNTPLANYR,0) as D5, 
    NVL(f.CNTPLANYR,0) as D6, 
    NVL(g.CNTPLANYR,0) as D7, 
    NVL(h.CNTPLANYR,0) as D8, 
    NVL(i.CNTPLANYR,0) as D9, 
    NVL(j.CNTPLANYR,0) as D10, 
    NVL(k.CNTPLANYR,0) as D11, 
    NVL(l.CNTPLANYR,0) as D12
  FROM TBL_BRANCH a
  LEFT JOIN (
    SELECT BR_ID, COUNT(ID) as CNTPLANYR, SUM(ISPLANED1) as ISPLANED1, SUM(ISPLANED0) as ISPLANED0
    FROM(
      SELECT c.BR_ID, a.ID, CASE WHEN b.IS_PLANED=1 THEN 1 ELSE 0 END as ISPLANED1, CASE WHEN b.IS_PLANED=0 THEN 1 ELSE 0 END as ISPLANED0
      FROM TBL_PLANYR a
      INNER JOIN TBL_FUNC_ACTION b ON a.FUNC_ACTION_ID = b.ID
      INNER JOIN TBL_FUNC_STRAT c ON b.FUNC_STRAT_ID = c.ID
      WHERE a.SUBMIT_D2 = 1 AND a.YR = "+yr+ @"
      GROUP BY c.BR_ID, a.ID, CASE WHEN b.IS_PLANED=1 THEN 1 ELSE 0 END, CASE WHEN b.IS_PLANED=0 THEN 1 ELSE 0 END
    )
    GROUP BY BR_ID
  ) b ON a.BR_ID=b.BR_ID
  LEFT JOIN (
    SELECT BR_ID, COUNT(ID) as CNTPLANYR
    FROM(
      SELECT c.BR_ID, a.ID
      FROM TBL_PLANYR a
      INNER JOIN TBL_FUNC_ACTION b ON a.FUNC_ACTION_ID = b.ID
      INNER JOIN TBL_FUNC_STRAT c ON b.FUNC_STRAT_ID = c.ID
      WHERE a.SUBMIT_D2 = 1 AND b.IS_PLANED=1 AND a.YR = " + yr + @" AND a.BUDGET IS NULL
      GROUP BY c.BR_ID, a.ID
    )
    GROUP BY BR_ID
  ) c ON a.BR_ID=c.BR_ID
  LEFT JOIN (
    SELECT BR_ID, COUNT(ID) as CNTPLANYR
    FROM(
      SELECT BR_ID, ID
      FROM (
        SELECT c.BR_ID, a.ID, ','||a.BUDGET||',' as BUDGET
        FROM TBL_PLANYR a
        INNER JOIN TBL_FUNC_ACTION b ON a.FUNC_ACTION_ID = b.ID
        INNER JOIN TBL_FUNC_STRAT c ON b.FUNC_STRAT_ID = c.ID
        WHERE a.SUBMIT_D2 = 1 AND b.IS_PLANED=1 AND a.YR = " + yr + @" AND a.BUDGET IS NOT NULL
        GROUP BY c.BR_ID, a.ID, a.BUDGET
      ) 
      WHERE "+ mnthlikelist + @"
    )
    GROUP BY BR_ID
  ) d ON a.BR_ID=d.BR_ID
  LEFT JOIN (
    SELECT BR_ID, COUNT(ID) as CNTPLANYR
    FROM(
      SELECT BR_ID, ID
      FROM (
        SELECT c.BR_ID, a.ID, ','||a.BUDGET||',' as BUDGET
        FROM TBL_PLANYR a
        INNER JOIN TBL_FUNC_ACTION b ON a.FUNC_ACTION_ID = b.ID
        INNER JOIN TBL_FUNC_STRAT c ON b.FUNC_STRAT_ID = c.ID
        WHERE a.SUBMIT_D2 = 1 AND b.IS_PLANED=1 AND a.YR = " + yr + @" AND a.BUDGET IS NOT NULL
        GROUP BY c.BR_ID, a.ID, a.BUDGET
      ) 
      WHERE BUDGET LIKE '%,"+mnth+@",%'
    )
    GROUP BY BR_ID
  ) f ON a.BR_ID=f.BR_ID
  LEFT JOIN (
    SELECT BR_ID, COUNT(ID) as CNTPLANYR
    FROM(
      SELECT d.BR_ID, b.ID
      FROM TBL_PLANMNTH a
      INNER JOIN TBL_PLANYR b ON a.PLANYR_ID = b.ID AND b.SUBMIT_D2 = 1
      INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID = c.ID
      INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID = d.ID
      WHERE a.SUBMIT_D2 = 1 AND c.IS_PLANED=1 AND b.YR = " + yr + @" AND b.BUDGET IS NULL
      GROUP BY d.BR_ID, b.ID
    )
    GROUP BY BR_ID
  ) g ON a.BR_ID=g.BR_ID
  LEFT JOIN (
    SELECT BR_ID, COUNT(ID) as CNTPLANYR
    FROM(
      SELECT BR_ID, ID
      FROM (
        SELECT d.BR_ID, b.ID, ','||b.BUDGET||',' as BUDGET
        FROM TBL_PLANMNTH a
        INNER JOIN TBL_PLANYR b ON a.PLANYR_ID = b.ID AND b.SUBMIT_D2 = 1
        INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID = c.ID
        INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID = d.ID
        WHERE a.SUBMIT_D2 = 1 AND c.IS_PLANED=1 AND b.YR = " + yr + @" AND b.BUDGET IS NOT NULL
        GROUP BY d.BR_ID, b.ID, b.BUDGET
      ) 
      WHERE " + mnthlikelist + @"
    )
    GROUP BY BR_ID
  ) h ON a.BR_ID=h.BR_ID
  LEFT JOIN (
    SELECT BR_ID, COUNT(ID) as CNTPLANYR
    FROM( 
      SELECT BR_ID, ID
      FROM (
        SELECT d.BR_ID, b.ID, ','||b.BUDGET||',' as BUDGET
        FROM TBL_PLANMNTH a
        INNER JOIN TBL_PLANYR b ON a.PLANYR_ID = b.ID AND b.SUBMIT_D2 = 1
        INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID = c.ID
        INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID = d.ID
        WHERE a.SUBMIT_D2 = 1 AND c.IS_PLANED=1 AND b.YR = " + yr + @" AND b.BUDGET IS NOT NULL
        GROUP BY d.BR_ID, b.ID, b.BUDGET
      ) 
      WHERE BUDGET LIKE '%," + mnth + @",%'
    )
    GROUP BY BR_ID
  ) i ON a.BR_ID=i.BR_ID
  LEFT JOIN (
    SELECT BR_ID, COUNT(ID) as CNTPLANYR
    FROM(    
      SELECT c.BR_ID, a.ID
      FROM TBL_PLANYR a
      INNER JOIN TBL_FUNC_ACTION b ON a.FUNC_ACTION_ID = b.ID
      INNER JOIN TBL_FUNC_STRAT c ON b.FUNC_STRAT_ID = c.ID
      WHERE a.SUBMIT_D2 = 1 AND b.IS_PLANED=1 AND a.YR = " + yr + @" AND a.ID NOT IN(SELECT b.ID as PLANYR_ID
          FROM TBL_PLANMNTH a
          INNER JOIN TBL_PLANYR b ON a.PLANYR_ID = b.ID AND b.SUBMIT_D2 = 1
          INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID = c.ID
          INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID = d.ID
          WHERE a.SUBMIT_D2 = 1 AND b.YR = " + yr + @" AND c.IS_PLANED=1
          GROUP BY b.ID) AND a.BUDGET IS NULL
      GROUP BY c.BR_ID, a.ID
    )
    GROUP BY BR_ID
  ) j ON a.BR_ID=j.BR_ID
  LEFT JOIN (
    SELECT BR_ID, COUNT(ID) as CNTPLANYR
    FROM(
      SELECT c.BR_ID, a.ID
      FROM TBL_PLANYR a
      INNER JOIN TBL_FUNC_ACTION b ON a.FUNC_ACTION_ID = b.ID
      INNER JOIN TBL_FUNC_STRAT c ON b.FUNC_STRAT_ID = c.ID
      WHERE a.SUBMIT_D2 = 1 AND b.IS_PLANED=1 AND a.YR = " + yr + @" AND a.ID NOT IN(SELECT b.ID as PLANYR_ID
          FROM TBL_PLANMNTH a
          INNER JOIN TBL_PLANYR b ON a.PLANYR_ID = b.ID AND b.SUBMIT_D2 = 1
          INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID = c.ID
          INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID = d.ID
          WHERE a.SUBMIT_D2 = 1 AND b.YR = " + yr + @" AND c.IS_PLANED=1
          GROUP BY b.ID) AND a.BUDGET IS NOT NULL
      GROUP BY c.BR_ID, a.ID
    )
    GROUP BY BR_ID
  ) k ON a.BR_ID=k.BR_ID
  LEFT JOIN (
    SELECT BR_ID, COUNT(ID) as CNTPLANYR
    FROM(
      SELECT BR_ID, ID
      FROM (
        SELECT c.BR_ID, a.ID, ','||a.BUDGET||',' as BUDGET
        FROM TBL_PLANYR a
        INNER JOIN TBL_FUNC_ACTION b ON a.FUNC_ACTION_ID = b.ID
        INNER JOIN TBL_FUNC_STRAT c ON b.FUNC_STRAT_ID = c.ID
        WHERE a.SUBMIT_D2 = 1 AND b.IS_PLANED=1 AND a.YR = " + yr + @" AND a.BUDGET IS NOT NULL
        GROUP BY c.BR_ID, a.ID, a.BUDGET
      ) 
      WHERE BUDGET LIKE '%," + mnth + @",%' AND ID NOT IN (SELECT b.ID as PLANYR_ID
          FROM TBL_PLANMNTH a
          INNER JOIN TBL_PLANYR b ON a.PLANYR_ID = b.ID AND b.SUBMIT_D2 = 1
          INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID = c.ID
          INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID = d.ID
          WHERE a.SUBMIT_D2 = 1 AND b.YR = " + yr + @" AND c.IS_PLANED=1
          GROUP BY b.ID)
    )
    GROUP BY BR_ID
  ) l ON a.BR_ID=l.BR_ID
  WHERE a.BR_TYPE1=3 AND a.BR_ID NOT IN (9911,9903) AND a.YR=" + yr + @"
  ORDER BY a.SORT
) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string PlanmnthTab4t5Datatable(string yr, string mnth)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strMnthList = "";
            for (int i = 1; i <= Int32.Parse(mnth); i++) {
                if (strMnthList != "") strMnthList += ",";
                strMnthList += i.ToString();
            }
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = @"SELECT ROWNUM AS ROWNO, a.*
  FROM (
    SELECT a.BR_ID, a.DOMAIN_ORG, a.SORT, 
      CASE WHEN NVL(b.PLANMNTH_CNT,0)=0 THEN '-' ELSE TO_CHAR(NVL(b.PLANMNTH_CNT,0)) END as PLANMNTH_CNT, 
      CASE WHEN NVL(b.ISPLANED1,0)=0 THEN '-' ELSE TO_CHAR(NVL(b.ISPLANED1,0)) END as ISPLANED1, 
      CASE WHEN NVL(b.ISPLANED0,0)=0 THEN '-' ELSE TO_CHAR(NVL(b.ISPLANED0,0)) END as ISPLANED0, 
      CASE WHEN NVL(b.ISIMPL1,0)=0 THEN '-' ELSE TO_CHAR(NVL(b.ISIMPL1,0)) END as ISIMPL1, 
      CASE WHEN NVL(b.ISIMPL0,0)=0 THEN '-' ELSE TO_CHAR(NVL(b.ISIMPL0,0)) END as ISIMPL0, 
      CASE WHEN NVL(c.EVALMNTH_CNT,0)=0 THEN '-' ELSE TO_CHAR(NVL(c.EVALMNTH_CNT,0)) END as EVALMNTH_CNT, 
      CASE WHEN NVL(c.AVGPER,0)=0 THEN '-' ELSE TO_CHAR(NVL(c.AVGPER,0)) END as AVGPER
    FROM TBL_BRANCH a
    LEFT JOIN (
      SELECT 
        d.BR_ID,
        COUNT(a.ID) as PLANMNTH_CNT,
        SUM(CASE WHEN b.IS_PLANED=1 THEN 1 ELSE 0 END) as ISPLANED1, 
        SUM(CASE WHEN b.IS_PLANED=0 THEN 1 ELSE 0 END) as ISPLANED0, 
        SUM(CASE WHEN f.ID IS NOT NULL THEN 1 ELSE 0 END) as ISIMPL1, 
        SUM(CASE WHEN f.ID IS NULL THEN 1 ELSE 0 END) as ISIMPL0
      FROM TBL_PLANMNTH a 
      INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID AND b.SUBMIT_D2=1
      INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
      INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID 
      LEFT JOIN TBL_PLAN_IMPL f ON a.ID=f.PLAN_ID AND f.YR="+yr+ @" AND f.MNTH="+mnth+@" AND f.TP='month' AND f.IMPL_DATA IS NOT NULL
      WHERE a.SUBMIT_D2=1 AND b.YR=" + yr + @" AND TO_NUMBER(TO_CHAR(a.STRT_DATE,'mm'))=" + mnth + @" 
      GROUP BY d.BR_ID
    ) b ON a.BR_ID=b.BR_ID
    LEFT JOIN (
      SELECT 
        d.BR_ID,
        COUNT(a.ID) as EVALMNTH_CNT,
        ROUND(AVG(f.EVAL),2) as AVGPER
      FROM TBL_PLANMNTH a 
      INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID AND b.SUBMIT_D2=1
      INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
      INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID 
      INNER JOIN TBL_PLANYR_EVAL f ON b.ID=f.PLANYR_ID AND f.TP='month' AND f.INTERVAL IN ("+ strMnthList + @") AND f.EVAL IS NOT NULL
      WHERE a.SUBMIT_D2=1 AND b.YR=" + yr + @" AND TO_NUMBER(TO_CHAR(a.STRT_DATE,'mm')) IN (" + strMnthList + @") 
      GROUP BY d.BR_ID
    ) c ON a.BR_ID=c.BR_ID
    WHERE a.BR_TYPE1=3 AND a.BR_ID NOT IN (9911,9903) AND a.YR=" + yr + @"
    ORDER BY a.SORT
  ) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }



        //*****planyr.aspx*****//
        public string PlanyrTab1Datatable(string yr)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT a.ID, a.NO, a.NAME, a.BR_ID, b.DOMAIN_ORG FROM TBL_FUNC_STRAT a INNER JOIN TBL_BRANCH b ON a.BR_ID=b.BR_ID AND b.YR=" + yr + " WHERE a.YR=" + yr + " ORDER BY a.NO");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }

        public string PlanyrTab2Datatable(string yr, string gazar)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (gazar != "") gazar = " WHERE b.BR_ID=" + gazar;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT a.ID as FUNC_ACTION_ID, a.FUNC_STRAT_ID as FUNC_STRAT_ID, b.NO as FUNC_STRAT_NO, b.NAME as FUNC_STRAT_NAME, a.NO as FUNC_ACTION_NO, a.NAME as FUNC_ACTION_NAME, b.BR_ID as GAZAR_ID, c.DOMAIN_ORG as GAZAR_NAME, NVL(RTRIM(xmlagg (xmlelement (e, f.BR_ID || ',') ORDER BY f.BR_ID).extract('//text()'), ','),'none') as HELTES_ID, NVL(RTRIM(xmlagg (xmlelement (e, g.DOMAIN_ORG || ',') ORDER BY f.BR_ID).extract('//text()'), ','),'none') as HELTES_NAME, a.IS_PLANED, a.IS_LOCAL FROM TBL_FUNC_ACTION a INNER JOIN TBL_FUNC_STRAT b ON a.FUNC_STRAT_ID=b.ID AND b.YR=" + yr + " INNER JOIN TBL_BRANCH c ON b.BR_ID=c.BR_ID AND c.YR=" + yr + " INNER JOIN TBL_FUNC_ACTION_BR f ON a.ID=f.FUNC_ACTION_ID INNER JOIN TBL_BRANCH g ON f.BR_ID=g.BR_ID AND g.YR=" + yr + gazar + " GROUP BY a.ID,a.FUNC_STRAT_ID,b.NO,b.NAME,a.NO,a.NAME,b.BR_ID, c.DOMAIN_ORG, a.IS_PLANED, a.IS_LOCAL ORDER BY b.NO, a.NO ");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string PlanyrTab2StratListDDL(string yr)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT BR_ID, NO, NAME FROM TBL_FUNC_STRAT WHERE YR=" + yr + " ORDER BY NO");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string PlanyrTab2ModalHeltesListForSelect2(string gazar, string selectedList, string yr)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = "";
                if ("0" != myObj.OracleExecuteScalar("SELECT COUNT(1) FROM TBL_BRANCH WHERE BR_TYPE1=2 AND BR_MAIN_ID1=" + gazar + " AND YR=" + yr).ToString())
                    strQry = @"SELECT HELTESID, HELTESNAME, GAZARID, GAZARNAME 
FROM ( 
    SELECT a.BR_ID as HELTESID, a.DOMAIN_ORG as HELTESNAME, b.BR_ID as GAZARID, b.DOMAIN_ORG as GAZARNAME 
    FROM TBL_BRANCH a 
    INNER JOIN TBL_BRANCH b ON a.BR_MAIN_ID1=b.BR_ID AND a.YR=" + yr + " AND b.YR=" + yr + @" 
    WHERE a.BR_TYPE1=3 AND a.BR_ID=" + gazar + @"
    UNION ALL
    SELECT a.BR_ID as HELTESID, a.DOMAIN_ORG as HELTESNAME, b.BR_ID as GAZARID, b.DOMAIN_ORG as GAZARNAME 
    FROM TBL_BRANCH a 
    INNER JOIN TBL_BRANCH b ON a.BR_MAIN_ID1=b.BR_ID AND a.YR=" + yr + " AND b.YR=" + yr + " WHERE a.BR_TYPE1=2 AND a.BR_MAIN_ID1=" + gazar + " UNION ALL SELECT a.BR_ID as HELTESID, a.DOMAIN_ORG as HELTESNAME, b.BR_ID as GAZARID, b.DOMAIN_ORG as GAZARNAME FROM TBL_BRANCH a INNER JOIN TBL_BRANCH b ON a.BR_MAIN_ID1=b.BR_ID AND a.YR=" + yr + " AND b.YR=" + yr + " WHERE a.BR_TYPE1=3 AND a.BR_MAIN_ID1=9911 ) ORDER BY GAZARID, HELTESID";
                else
                    strQry = "SELECT HELTESID, HELTESNAME, GAZARID, GAZARNAME FROM ( SELECT a.BR_ID as HELTESID, a.DOMAIN_ORG as HELTESNAME, b.BR_ID as GAZARID, b.DOMAIN_ORG as GAZARNAME FROM TBL_BRANCH a INNER JOIN TBL_BRANCH b ON a.BR_MAIN_ID1=b.BR_ID AND a.YR=" + yr + " AND b.YR=" + yr + " WHERE a.BR_TYPE1=3 AND a.BR_MAIN_ID1=" + gazar + " UNION ALL SELECT a.BR_ID as HELTESID, a.DOMAIN_ORG as HELTESNAME, b.BR_ID as GAZARID, b.DOMAIN_ORG as GAZARNAME FROM TBL_BRANCH a INNER JOIN TBL_BRANCH b ON a.BR_MAIN_ID1=b.BR_ID AND a.YR=" + yr + " AND b.YR=" + yr + " WHERE a.BR_TYPE1=3 AND a.BR_MAIN_ID1=9911 ) ORDER BY GAZARID, HELTESID";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void PlanyrTab2SP_FUNC_ACTION_INSERT(string P_FUNC_STRAT_ID, string P_NO, string P_NAME, string P_BRANCHLIST, string P_STAFFID, string P_IS_PLANED, string P_YR, string P_IS_LOCAL)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[8], ParamValue = new string[8];
                ParamName[0] = "P_FUNC_STRAT_ID";
                ParamName[1] = "P_NO";
                ParamName[2] = "P_NAME";
                ParamName[3] = "P_BRANCHLIST";
                ParamName[4] = "P_STAFFID";
                ParamName[5] = "P_IS_PLANED";
                ParamName[6] = "P_YR";
                ParamName[7] = "P_IS_LOCAL";
                ParamValue[0] = P_FUNC_STRAT_ID;
                ParamValue[1] = P_NO;
                ParamValue[2] = P_NAME;
                ParamValue[3] = P_BRANCHLIST;
                ParamValue[4] = P_STAFFID;
                ParamValue[5] = P_IS_PLANED;
                ParamValue[6] = P_YR;
                ParamValue[7] = P_IS_LOCAL;
                myObj.SP_OracleExecuteNonQuery("FUNC_ACTION_INSERT", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void PlanyrTab2SP_FUNC_ACTION_UPDATE(string P_ID, string P_FUNC_STRAT_ID, string P_NO, string P_NAME, string P_BRANCHLIST, string P_STAFFID, string P_IS_PLANED, string P_YR, string P_IS_LOCAL)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[9], ParamValue = new string[9];
                ParamName[0] = "P_ID";
                ParamName[1] = "P_FUNC_STRAT_ID";
                ParamName[2] = "P_NO";
                ParamName[3] = "P_NAME";
                ParamName[4] = "P_BRANCHLIST";
                ParamName[5] = "P_STAFFID";
                ParamName[6] = "P_IS_PLANED";
                ParamName[7] = "P_YR";
                ParamName[8] = "P_IS_LOCAL";
                ParamValue[0] = P_ID;
                ParamValue[1] = P_FUNC_STRAT_ID;
                ParamValue[2] = P_NO;
                ParamValue[3] = P_NAME;
                ParamValue[4] = P_BRANCHLIST;
                ParamValue[5] = P_STAFFID;
                ParamValue[6] = P_IS_PLANED;
                ParamValue[7] = P_YR;
                ParamValue[8] = P_IS_LOCAL;
                myObj.SP_OracleExecuteNonQuery("FUNC_ACTION_UPDATE", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void PlanyrTab2SP_FUNC_ACTION_DELETE(string P_ID)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[1], ParamValue = new string[1];
                ParamName[0] = "P_ID";
                ParamValue[0] = P_ID;
                myObj.SP_OracleExecuteNonQuery("FUNC_ACTION_DELETE", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }

        public string PlanyrTab3Datatable(string yr, string gazar, string heltes, string staff, string isplaned)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (gazar != "") gazar = " AND d.BR_ID=" + gazar;
            if (heltes != "") heltes = " AND f.BR_ID=" + heltes;
            if (staff != "") staff = " AND b.ST_ID=" + staff;
            if (isplaned != "") isplaned = " AND a.IS_PLANED=" + isplaned;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = "SELECT ROWNUM as ROWNO, a.* FROM ( SELECT a.PLANYR_ID, d.NO as STRAT_NO, c.NO as ACTION_NO, b.NO as PLANYR_NO, b.NAME as PLANYR_NAME, b.CRITERIA, b.CNT, b.QUALITY, f.DOMAIN_ORG as GAZARNAME, a.HELTESNAME, a.STLISTNAME, CASE WHEN b.SUBMIT_D0=1 THEN ' checked=\"checked\"' ELSE '' END as SUBMIT_D0, CASE WHEN b.SUBMIT_D1=1 THEN ' checked=\"checked\"' ELSE '' END as SUBMIT_D1, CASE WHEN b.SUBMIT_D2=1 THEN ' checked=\"checked\"' ELSE '' END as SUBMIT_D2, CASE WHEN b.IS_MOF=1 THEN ' checked=\"checked\"' ELSE '' END as IS_MOF, REPLACE(NVL(b.BUDGET,'Жилдээ'),'1,2,3,4,5,6,7,8,9,10,11,12','Сар бүр') as BUDGET, d.BR_ID as STRAT_BRID, c.ID as ACTION_ID, a.STLISTID, b.DODAY, a.POLICYPLANLISTID FROM( SELECT a.PLANYR_ID, a.HELTESID, a.HELTESNAME, a.STLISTID, a.STLISTNAME, RTRIM(xmlagg(xmlelement(e, a.WORK_ID || ',')).extract('//text()'), ',') as POLICYPLANLISTID FROM( SELECT a.PLANYR_ID, a.HELTESID, a.HELTESNAME, a.STLISTID, a.STLISTNAME, b.WORK_ID FROM( SELECT a.PLANYR_ID, a.HELTESID, a.HELTESNAME, NVL(RTRIM(xmlagg(xmlelement(e, b.ST_ID || ',') ORDER BY f.SORT DESC).extract('//text()'), ','), 'none') STLISTID, NVL(RTRIM(xmlagg(xmlelement(e, ' ' || SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 1, 1) || LOWER(SUBSTR(c.FNAME, 2)) || ',') ORDER BY f.SORT DESC).extract('//text()'), ','), 'none') STLISTNAME FROM( SELECT a.PLANYR_ID, NVL(RTRIM(xmlagg(xmlelement(e, d.BR_ID || ',') ORDER BY d.BR_ID).extract('//text()'), ','), 'none') as HELTESID, NVL(RTRIM(xmlagg(xmlelement(e, ' ' || f.DOMAIN_ORG || ',') ORDER BY d.BR_ID).extract('//text()'), ','), 'none') as HELTESNAME FROM( SELECT a.ID as PLANYR_ID FROM TBL_PLANYR a INNER JOIN TBL_PLANYR_USER b ON a.ID = b.PLANYR_ID INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID = c.ID INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID = d.ID AND d.YR = " + yr + " INNER JOIN TBL_FUNC_ACTION_BR f ON c.ID = f.FUNC_ACTION_ID WHERE a.YR = " + yr + gazar + heltes + staff + isplaned + " GROUP BY a.ID ) a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID = b.ID INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID = c.ID INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID = d.FUNC_ACTION_ID INNER JOIN TBL_BRANCH f ON d.BR_ID = f.BR_ID AND f.YR = " + yr + " GROUP BY a.PLANYR_ID ) a INNER JOIN TBL_PLANYR_USER b ON a.PLANYR_ID = b.PLANYR_ID INNER JOIN hrdbuser.ST_STAFFS c ON b.ST_ID = c.ID INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1 INNER JOIN hrdbuser.STN_POS f ON d.POS_ID = f.ID WHERE b.ISREAL = 1 GROUP BY a.PLANYR_ID, a.HELTESID, HELTESNAME ) a LEFT JOIN( SELECT a.PLANYR_ID, a.WORK_ID, c.POLICYTYPE_ID FROM TBL_PLANYR_WORK a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID = b.ID INNER JOIN( SELECT a.ID as POLICYPLAN_ID, c.POLICYTYPE_ID FROM TBL_POLICYPLAN a INNER JOIN TBL_POLICYZORILT b ON a.POLICYZORILT_ID = b.ID INNER JOIN TBL_POLICYBODLOGO c ON b.POLICYBODLOGO_ID = c.ID ) c ON a.WORK_ID = c.POLICYPLAN_ID WHERE b.YR = " + yr + " ) b ON a.PLANYR_ID = b.PLANYR_ID ) a GROUP BY a.PLANYR_ID, a.HELTESID, a.HELTESNAME, a.STLISTID, a.STLISTNAME ) a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID = b.ID INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID = c.ID INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID = d.ID INNER JOIN TBL_BRANCH f ON d.BR_ID = f.BR_ID AND f.YR = " + yr + " ORDER BY d.NO, c.NO, b.NO ) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string PlanyrTab3ActionListDDL(string yr, string gazar)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT a.ID, b.NO||'.'||a.NO||'. '||a.NAME as NAME FROM TBL_FUNC_ACTION a INNER JOIN TBL_FUNC_STRAT b ON a.FUNC_STRAT_ID=b.ID AND b.YR=" + yr + " WHERE b.BR_ID=" + gazar);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void PlanyrTab3SP_PLANT_INSERT(string P_NDSGAPEGLIST, string P_FUNC_ACTION_ID, string P_IS_PLANED, string P_NO, string P_NAME, string P_CRITERIA, string P_QUALITY, string P_CNT, string P_BUDGET, string P_STAFFLIST, string P_STAFFID, string P_YR, string P_DODAY)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[13], ParamValue = new string[13];
                ParamName[0] = "P_NDSGAPEGLIST";
                ParamName[1] = "P_FUNC_ACTION_ID";
                ParamName[2] = "P_IS_PLANED";
                ParamName[3] = "P_NO";
                ParamName[4] = "P_NAME";
                ParamName[5] = "P_CRITERIA";
                ParamName[6] = "P_QUALITY";
                ParamName[7] = "P_CNT";
                ParamName[8] = "P_BUDGET";
                ParamName[9] = "P_STAFFLIST";
                ParamName[10] = "P_STAFFID";
                ParamName[11] = "P_YR";
                ParamName[12] = "P_DODAY";
                ParamValue[0] = P_NDSGAPEGLIST;
                ParamValue[1] = P_FUNC_ACTION_ID;
                ParamValue[2] = P_IS_PLANED;
                ParamValue[3] = P_NO;
                ParamValue[4] = P_NAME;
                ParamValue[5] = P_CRITERIA;
                ParamValue[6] = P_QUALITY;
                ParamValue[7] = P_CNT;
                ParamValue[8] = P_BUDGET;
                ParamValue[9] = P_STAFFLIST;
                ParamValue[10] = P_STAFFID;
                ParamValue[11] = P_YR;
                ParamValue[12] = P_DODAY;
                myObj.SP_OracleExecuteNonQuery("PLANT_INSERT", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void PlanyrTab3SP_PLANT_UPDATE(string P_PLANYR_ID, string P_NDSGAPEGLIST, string P_FUNC_ACTION_ID, string P_IS_PLANED, string P_NO, string P_NAME, string P_CRITERIA, string P_QUALITY, string P_CNT, string P_BUDGET, string P_STAFFLIST, string P_STAFFID, string P_DODAY)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[13], ParamValue = new string[13];
                ParamName[0] = "P_PLANYR_ID";
                ParamName[1] = "P_NDSGAPEGLIST";
                ParamName[2] = "P_FUNC_ACTION_ID";
                ParamName[3] = "P_IS_PLANED";
                ParamName[4] = "P_NO";
                ParamName[5] = "P_NAME";
                ParamName[6] = "P_CRITERIA";
                ParamName[7] = "P_QUALITY";
                ParamName[8] = "P_CNT";
                ParamName[9] = "P_BUDGET";
                ParamName[10] = "P_STAFFLIST";
                ParamName[11] = "P_STAFFID";
                ParamName[12] = "P_DODAY";
                ParamValue[0] = P_PLANYR_ID;
                ParamValue[1] = P_NDSGAPEGLIST;
                ParamValue[2] = P_FUNC_ACTION_ID;
                ParamValue[3] = P_IS_PLANED;
                ParamValue[4] = P_NO;
                ParamValue[5] = P_NAME;
                ParamValue[6] = P_CRITERIA;
                ParamValue[7] = P_QUALITY;
                ParamValue[8] = P_CNT;
                ParamValue[9] = P_BUDGET;
                ParamValue[10] = P_STAFFLIST;
                ParamValue[11] = P_STAFFID;
                ParamValue[12] = P_DODAY;
                myObj.SP_OracleExecuteNonQuery("PLANT_UPDATE", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void PlanyrTab3SP_PLANT_DELETE(string P_PLANYR_ID)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[1], ParamValue = new string[1];
                ParamName[0] = "P_PLANYR_ID";
                ParamValue[0] = P_PLANYR_ID;
                myObj.SP_OracleExecuteNonQuery("PLANT_DELETE", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string PlanyrTab3ModalBodlogoDatatable(string policyplanlistid)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = "SELECT a.ID, a.POLICYZORILT_ID, b.POLICYBODLOGO_ID, c.POLICYTYPE_ID, d.NAME as POLICYTYPE_NAME, c.NO || '.' || b.NO || '.' || a.NO || '. ' || a.NAME as POLICYPLAN FROM TBL_POLICYPLAN a INNER JOIN TBL_POLICYZORILT b ON a.POLICYZORILT_ID = b.ID INNER JOIN TBL_POLICYBODLOGO c ON b.POLICYBODLOGO_ID = c.ID INNER JOIN TBL_POLICYTYPE d ON c.POLICYTYPE_ID = d.ID WHERE a.ID IN (" + policyplanlistid + ")";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string PlanyrTab3ModalStaffListForSelect2(string id, string selectedList, string yr)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = "SELECT a.ST_ID, a.ST_NAME, a.POS_NAME, a.BR_ID, a.DOMAIN_ORG, a.SORT, NVL2(b.ST_ID,' selected=\"selected\"',null) as ISSELECTED FROM ( SELECT a.ID as ST_ID, SUBSTR(a.LNAME, 0, 1) || '.' || SUBSTR(a.FNAME, 0, 1) || LOWER(SUBSTR(a.FNAME, 2)) as ST_NAME, f.ID as BR_ID, f.INITNAME as DOMAIN_ORG, g.NAME as POS_NAME, g.SORT FROM hrdbuser.ST_STAFFS a INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1 INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1 INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID INNER JOIN hrdbuser.ST_BRANCH f ON d.FATHER_ID = f.ID INNER JOIN hrdbuser.STN_POS g ON b.POS_ID = g.ID WHERE b.BRANCH_ID IN ( SELECT BR_MAIN_ID1 FROM TBL_BRANCH WHERE YR = " + yr + " AND BR_ID IN ( SELECT d.BR_ID FROM TBL_FUNC_ACTION a INNER JOIN TBL_FUNC_ACTION_BR b ON a.ID = b.FUNC_ACTION_ID INNER JOIN TBL_FUNC_STRAT c ON a.FUNC_STRAT_ID = c.ID INNER JOIN TBL_BRANCH d ON b.BR_ID = d.BR_ID AND c.YR = d.YR WHERE a.ID = " + id + " ) GROUP BY BR_MAIN_ID1 ) AND b.POS_ID = 2010201 UNION ALL SELECT f.ID as ST_ID, SUBSTR(f.LNAME, 0, 1) || '.' || SUBSTR(f.FNAME, 0, 1) || LOWER(SUBSTR(f.FNAME, 2)) as ST_NAME, g.ID as BR_ID, CASE WHEN g.ID = g.FATHER_ID THEN h.INITNAME ELSE h.INITNAME || '-' || g.INITNAME END as DOMAIN_ORG, i.NAME as POS_NAME, i.SORT FROM TBL_FUNC_ACTION a INNER JOIN TBL_FUNC_ACTION_BR b ON a.ID = b.FUNC_ACTION_ID INNER JOIN hrdbuser.ST_STBR c ON b.BR_ID = c.BRANCH_ID AND c.ISACTIVE = 1 INNER JOIN hrdbuser.STN_MOVE d ON c.MOVE_ID = d.ID AND d.ACTIVE = 1 INNER JOIN hrdbuser.ST_STAFFS f ON c.STAFFS_ID = f.ID INNER JOIN hrdbuser.ST_BRANCH g ON c.BRANCH_ID = g.ID INNER JOIN hrdbuser.ST_BRANCH h ON g.FATHER_ID = h.ID INNER JOIN hrdbuser.STN_POS i ON c.POS_ID = i.ID WHERE a.ID = " + id + " AND c.POS_ID != 2010201 ) a LEFT JOIN ( SELECT TO_NUMBER(ST_ID) as ST_ID FROM(select regexp_substr('" + selectedList + "', '[^,]+', 1, level) AS ST_ID from dual connect by regexp_substr('" + selectedList + "', '[^,]+', 1, level) is not null) a ) b ON a.ST_ID = b.ST_ID ORDER BY a.BR_ID, a.SORT, a.ST_ID";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string PlanyrTab3ModalNDSGAPEGListForSelect2(string yr, string type, string brid, string selectedList)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT a.ID as WORK_ID, c.NO||'.'||b.NO||'.'||a.NO||'. '||a.NAME as WORK_NAME, NVL2(f.WORK_ID,' selected=\"selected\"',null) as ISSELECTED FROM TBL_POLICYPLAN a INNER JOIN TBL_POLICYZORILT b ON a.POLICYZORILT_ID = b.ID INNER JOIN TBL_POLICYBODLOGO c ON b.POLICYBODLOGO_ID = c.ID INNER JOIN TBL_POLICYPLAN_BR d ON a.ID = d.POLICYPLAN_ID LEFT JOIN( SELECT TO_NUMBER(WORK_ID) as WORK_ID FROM( select regexp_substr('" + selectedList + "', '[^,]+', 1, level) AS WORK_ID from dual connect by regexp_substr('" + selectedList + "', '[^,]+', 1, level) is not null ) a ) f ON a.ID = f.WORK_ID WHERE c.POLICYTYPE_ID = " + type + " AND " + yr + " BETWEEN a.BEGINYR AND a.ENDYR AND d.BR_ID = " + brid + " GROUP BY a.ID, c.NO, b.NO, a.NO, a.NAME, NVL2(f.WORK_ID, ' selected=\"selected\"', null) ORDER BY c.NO, b.NO, a.NO");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string PlanyrTab3ModalBodlogoModalPolicyTypeListDDL(string policytypeid)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (policytypeid != "") policytypeid = " UNION ALL SELECT ID FROM TBL_POLICYTYPE WHERE ID = " + policytypeid;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT a.ID, b.NAME FROM( SELECT ID FROM( SELECT ID FROM TBL_POLICYTYPE WHERE ISACTIVE = 1 " + policytypeid + " ) GROUP BY ID ) a INNER JOIN TBL_POLICYTYPE b ON a.ID = b.ID ORDER BY b.NAME");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string PlanyrTab3ModalBodlogoModalPlanListDDL(string policyzoriltid, string br_id)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet(" SELECT a.ID, a.NO||'. '||a.NAME as POLICYPLAN,b.BR_ID FROM TBL_POLICYPLAN   a INNER JOIN TBL_POLICYPLAN_BR b ON b.POLICYPLAN_ID=a.ID   WHERE POLICYZORILT_ID=" + policyzoriltid + " AND b.BR_ID in ('"+ br_id + "') ORDER BY a.NO");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void PlanyrTab3SP_PLANT_IMPORT(string P_PLANLIST, string P_YR, string P_STAFFID)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[3], ParamValue = new string[3];
                ParamName[0] = "P_PLANLIST";
                ParamName[1] = "P_YR";
                ParamName[2] = "P_STAFFID";
                ParamValue[0] = P_PLANLIST;
                ParamValue[1] = P_YR;
                ParamValue[2] = P_STAFFID;
                myObj.SP_OracleExecuteNonQuery("PLANT_IMPORT", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }

        public string PlanyrTab4Datatable(string yr, string quarter, string isplaned, string gazar, string heltes, string staff)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string qrtrmonths = "";
            if (gazar != "") gazar = " AND g.BR_ID=" + gazar;
            if (heltes != "") heltes = " AND h.BR_ID=" + heltes;
            if (staff != "") staff = " AND i.ST_ID=" + staff;
            if (isplaned != "") isplaned = " AND d.IS_PLANED=" + isplaned;
            if (quarter == "1") qrtrmonths = "1,2,3";
            else if (quarter == "2") qrtrmonths = "1,2,3,4,5,6";
            else if (quarter == "3") qrtrmonths = "1,2,3,4,5,6,7,8,9";
            else if (quarter == "4") qrtrmonths = "1,2,3,4,5,6,7,8,9,10,11,12";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = @"SELECT ROWNUM, a.* 
FROM(
  SELECT a.ID as PLANYR_ID, b.NO as ACTION_NO, b.NAME as ACTION_NAME, c.NO as STRAT_NO, c.NAME as STRAT_NAME, a.NO as PLANYR_NO, a.NAME as PLANYR_NAME, a.IS_PLANED, a.CRITERIA, a.CNT, a.QUALITY, g.MNTHLIST, k.STAFFNAMELIST, NVL2(h.IMPL_DATA, 'glyphicon glyphicon-check txt-color-green font-xl', 'glyphicon glyphicon-edit txt-color-red font-xl') as ISIMPL, g.ISUSE, REPLACE(NVL(a.BUDGET, 'Жилдээ'), '1,2,3,4,5,6,7,8,9,10,11,12', 'Сар бүр') as MNTHLISTPLAN, h.FILE_NAME
  FROM TBL_PLANYR a
  INNER JOIN TBL_FUNC_ACTION b ON a.FUNC_ACTION_ID = b.ID
  INNER JOIN TBL_FUNC_STRAT c ON b.FUNC_STRAT_ID = c.ID
  INNER JOIN TBL_FUNC_ACTION_BR d ON b.ID = d.FUNC_ACTION_ID
  INNER JOIN(
    SELECT d.ID as PLANYR_ID, NVL2(j.PLANYR_ID, 1, 0) as ISUSE, j.MNTHLIST
    FROM TBL_PLANYR d
    INNER JOIN TBL_FUNC_ACTION f ON d.FUNC_ACTION_ID = f.ID
    INNER JOIN TBL_FUNC_STRAT g ON f.FUNC_STRAT_ID = g.ID
    INNER JOIN TBL_FUNC_ACTION_BR h ON f.ID = h.FUNC_ACTION_ID
    INNER JOIN TBL_PLANYR_USER i ON d.ID = i.PLANYR_ID
    LEFT JOIN(
      SELECT PLANYR_ID, NVL(RTRIM(xmlagg(xmlelement(e, MNTHS || ',') ORDER BY MNTHS).extract('//text()'), ','), 'none') as MNTHLIST
      FROM(
        SELECT a.PLANYR_ID, TO_NUMBER(TO_CHAR(a.STRT_DATE, 'mm')) as MNTHS
        FROM TBL_PLANMNTH a
        INNER JOIN TBL_PLANYR d ON a.PLANYR_ID = d.ID
        INNER JOIN TBL_FUNC_ACTION f ON d.FUNC_ACTION_ID = f.ID
        INNER JOIN TBL_FUNC_STRAT g ON f.FUNC_STRAT_ID = g.ID
        INNER JOIN TBL_FUNC_ACTION_BR h ON f.ID = h.FUNC_ACTION_ID
        INNER JOIN TBL_PLANYR_USER i ON d.ID = i.PLANYR_ID
        LEFT JOIN TBL_PLANYR_EVAL b ON a.PLANYR_ID = b.PLANYR_ID AND b.TP = 'month' AND TO_NUMBER(TO_CHAR(a.STRT_DATE, 'mm')) = b.INTERVAL
        WHERE d.YR = " + yr + " AND TO_NUMBER(TO_CHAR(a.STRT_DATE, 'mm')) IN(" + qrtrmonths + ")" + gazar + heltes + staff + isplaned + @"
        GROUP BY a.PLANYR_ID, TO_NUMBER(TO_CHAR(a.STRT_DATE, 'mm')), NVL(b.DESCRIPTION, 'none'), NVL(b.EVAL, 0), NVL2(b.EVAL, 1, 0), CASE WHEN b.EVAL is not null THEN 1 ELSE 0 END
      )
      GROUP BY PLANYR_ID
    ) j ON d.ID = j.PLANYR_ID
    WHERE d.YR = " + yr + gazar + heltes + staff + isplaned + @"
    GROUP BY d.ID, NVL2(j.PLANYR_ID, 1, 0), j.MNTHLIST
  ) g ON a.ID = g.PLANYR_ID
  LEFT JOIN TBL_PLAN_IMPL h ON a.ID = h.PLAN_ID AND h.YR = " + yr + " AND h.QRTR = " + quarter + @" AND h.TP = 'quarter'
  INNER JOIN(
    SELECT PLANYR_ID, NVL(RTRIM(xmlagg(xmlelement(e, ' ' || STAFFNAME || ',') ORDER BY POSSORT DESC, ST_ID).extract('//text()'), ','), 'none') STAFFNAMELIST
    FROM(
      SELECT d.ID as PLANYR_ID, i.ST_ID, l.SORT as POSSORT, SUBSTR(j.LNAME, 0, 1) || '.' || SUBSTR(j.FNAME, 1, 1) || LOWER(SUBSTR(j.FNAME, 2)) as STAFFNAME
      FROM TBL_PLANYR d
      INNER JOIN TBL_FUNC_ACTION f ON d.FUNC_ACTION_ID = f.ID
      INNER JOIN TBL_FUNC_STRAT g ON f.FUNC_STRAT_ID = g.ID
      INNER JOIN TBL_FUNC_ACTION_BR h ON f.ID = h.FUNC_ACTION_ID
      INNER JOIN TBL_PLANYR_USER i ON d.ID = i.PLANYR_ID
      INNER JOIN hrdbuser.ST_STAFFS j ON i.ST_ID = j.ID
      INNER JOIN hrdbuser.ST_STBR k ON j.ID = k.STAFFS_ID AND k.ISACTIVE = 1
      INNER JOIN hrdbuser.STN_POS l ON k.POS_ID = l.ID
      WHERE d.YR = " + yr + gazar + heltes + staff + isplaned + @"
      GROUP BY d.ID, i.ST_ID, l.SORT, SUBSTR(j.LNAME, 0, 1) || '.' || SUBSTR(j.FNAME, 1, 1) || LOWER(SUBSTR(j.FNAME, 2))
    )
    GROUP BY PLANYR_ID
  ) k ON g.PLANYR_ID = k.PLANYR_ID
  GROUP BY a.ID, b.NO, b.NAME, c.NO, c.NAME, a.NO, a.NAME, a.IS_PLANED, a.CRITERIA, a.CNT, a.QUALITY, g.MNTHLIST, k.STAFFNAMELIST, NVL2(h.IMPL_DATA, 'glyphicon glyphicon-check txt-color-green font-xl', 'glyphicon glyphicon-edit txt-color-red font-xl'), g.ISUSE, REPLACE(NVL(a.BUDGET, 'Жилдээ'), '1,2,3,4,5,6,7,8,9,10,11,12', 'Сар бүр'), h.FILE_NAME
  ORDER BY b.NO, c.NO, a.NO
) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }

        public string PlanyrTab5Datatable(string yr, string quarter, string isplaned, string gazar, string heltes, string staff)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string qrtrmonths = "";
            if (gazar != "") gazar = " AND g.BR_ID=" + gazar;
            if (heltes != "") heltes = " AND h.BR_ID=" + heltes;
            if (staff != "") staff = " AND i.ST_ID=" + staff;
            if (isplaned != "") isplaned = " AND d.IS_PLANED=" + isplaned;
            if (quarter == "1") qrtrmonths = "1,2,3";
            else if (quarter == "2") qrtrmonths = "1,2,3,4,5,6";
            else if (quarter == "3") qrtrmonths = "1,2,3,4,5,6,7,8,9";
            else if (quarter == "4") qrtrmonths = "1,2,3,4,5,6,7,8,9,10,11,12";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = @"SELECT ROWNUM, a.* 
FROM ( 
  SELECT a.ID as PLANYR_ID, b.NO as ACTION_NO, b.NAME as ACTION_NAME, c.NO as STRAT_NO, c.NAME as STRAT_NAME, a.NO as PLANYR_NO, a.NAME as PLANYR_NAME, a.IS_PLANED, g.AVGPER, a.CRITERIA, a.CNT, a.QUALITY, g.MNTHLIST, k.STAFFNAMELIST, NVL2(h.IMPL_DATA,'1','0') as ISIMPL, g.ISEVALLIST, g.EVALLIST, g.DESCLIST, g.ISUSE, REPLACE(NVL(a.BUDGET,'Жилдээ'),'1,2,3,4,5,6,7,8,9,10,11,12','Сар бүр') as MNTHLISTPLAN, h.IMPL_DATA, NVL2(l.EVAL,1,0) as ISEVALLAST, NVL(l.EVAL,0) as EVALLAST, CASE WHEN g.AVGPER < 50 THEN 'bg-color-red' WHEN g.AVGPER > 49 AND g.AVGPER < 80 THEN 'bg-color-orange' WHEN g.AVGPER>79 THEN 'bg-color-greenLight' END as AVGPERCOLOR 
  FROM TBL_PLANYR a 
  INNER JOIN TBL_FUNC_ACTION b ON a.FUNC_ACTION_ID=b.ID 
  INNER JOIN TBL_FUNC_STRAT c ON b.FUNC_STRAT_ID=c.ID 
  INNER JOIN ( 
    SELECT d.ID as PLANYR_ID, NVL2(j.PLANYR_ID,1,0) as ISUSE, j.MNTHLIST, j.ISEVALLIST, j.EVALLIST, j.DESCLIST, NVL(j.AVGPER,0) as AVGPER 
    FROM TBL_PLANYR d 
    INNER JOIN TBL_FUNC_ACTION f ON d.FUNC_ACTION_ID=f.ID 
    INNER JOIN TBL_FUNC_STRAT g ON f.FUNC_STRAT_ID=g.ID 
    INNER JOIN TBL_FUNC_ACTION_BR h ON f.ID=h.FUNC_ACTION_ID 
    INNER JOIN TBL_PLANYR_USER i ON d.ID=i.PLANYR_ID 
    LEFT JOIN ( 
      SELECT PLANYR_ID, NVL(RTRIM(xmlagg (xmlelement (e, MNTHS || ',') ORDER BY MNTHS ).extract('//text()'), ','),'none') as MNTHLIST, NVL(RTRIM(xmlagg (xmlelement (e, ISEVAL || ',') ORDER BY MNTHS ).extract('//text()'), ','),'none') as ISEVALLIST, NVL(RTRIM(xmlagg (xmlelement (e, EVAL || ',') ORDER BY MNTHS ).extract('//text()'), ','),'none') as EVALLIST, NVL(RTRIM(xmlagg (xmlelement (e, DESCRIPTION || '~') ORDER BY MNTHS ).extract('//text()'), '~'),'none') as DESCLIST, ROUND(SUM(EVAL)/CASE WHEN SUM(ISEVALCNT)=0 THEN 1 ELSE SUM(ISEVALCNT) END,1) as AVGPER 
      FROM ( 
        SELECT a.PLANYR_ID, a.MNTHS, NVL(b.DESCRIPTION,'none') as DESCRIPTION, NVL(b.EVAL,0) as EVAL, NVL2(b.EVAL,1,0) as ISEVAL, CASE WHEN b.EVAL is not null THEN 1 ELSE 0 END as ISEVALCNT 
        FROM ( 
          SELECT TO_NUMBER(TO_CHAR(a.STRT_DATE,'mm')) as MNTHS, d.ID as PLANYR_ID 
          FROM TBL_PLANMNTH a 
          INNER JOIN TBL_PLANYR d ON a.PLANYR_ID=d.ID 
          INNER JOIN TBL_FUNC_ACTION f ON d.FUNC_ACTION_ID=f.ID 
          INNER JOIN TBL_FUNC_STRAT g ON f.FUNC_STRAT_ID=g.ID AND g.YR=d.YR 
          INNER JOIN TBL_FUNC_ACTION_BR h ON f.ID=h.FUNC_ACTION_ID 
          INNER JOIN TBL_PLANYR_USER i ON d.ID=i.PLANYR_ID 
          WHERE d.YR=" + yr + " AND TO_NUMBER(TO_CHAR(a.STRT_DATE,'mm')) IN (" + qrtrmonths + ")" + gazar + heltes + staff + isplaned + @" 
          GROUP BY TO_NUMBER(TO_CHAR(a.STRT_DATE, 'mm')), d.ID
        ) a
        LEFT JOIN TBL_PLANYR_EVAL b ON a.PLANYR_ID = b.PLANYR_ID AND b.TP = 'month' AND a.MNTHS = b.INTERVAL
      ) 
      GROUP BY PLANYR_ID
    ) j ON d.ID = j.PLANYR_ID
    WHERE d.YR = " + yr + gazar + heltes + staff + isplaned + @"
    GROUP BY d.ID, NVL2(j.PLANYR_ID, 1, 0), j.MNTHLIST, j.ISEVALLIST, j.EVALLIST, j.DESCLIST, j.AVGPER
  ) g ON a.ID = g.PLANYR_ID
  LEFT JOIN TBL_PLAN_IMPL h ON a.ID = h.PLAN_ID AND h.YR = " + yr + " AND h.QRTR = " + quarter + @" AND h.TP = 'quarter'
  INNER JOIN (
    SELECT PLANYR_ID, NVL(RTRIM(xmlagg(xmlelement(e, ' ' || STAFFNAME || ',') ORDER BY POSSORT DESC, ST_ID).extract('//text()'), ','), 'none') STAFFNAMELIST
     FROM (
       SELECT d.ID as PLANYR_ID, i.ST_ID, l.SORT as POSSORT, SUBSTR(j.LNAME, 0, 1) || '.' || SUBSTR(j.FNAME, 1, 1) || LOWER(SUBSTR(j.FNAME, 2)) as STAFFNAME 
       FROM TBL_PLANYR d 
       INNER JOIN TBL_FUNC_ACTION f ON d.FUNC_ACTION_ID = f.ID 
       INNER JOIN TBL_FUNC_STRAT g ON f.FUNC_STRAT_ID = g.ID 
       INNER JOIN TBL_FUNC_ACTION_BR h ON f.ID = h.FUNC_ACTION_ID 
       INNER JOIN TBL_PLANYR_USER i ON d.ID = i.PLANYR_ID 
       INNER JOIN hrdbuser.ST_STAFFS j ON i.ST_ID = j.ID 
       INNER JOIN hrdbuser.ST_STBR k ON j.ID = k.STAFFS_ID AND k.ISACTIVE = 1 
       INNER JOIN hrdbuser.STN_POS l ON k.POS_ID = l.ID 
       WHERE d.YR = " + yr + gazar + heltes + staff + isplaned + @" 
       GROUP BY d.ID, i.ST_ID, l.SORT, SUBSTR(j.LNAME, 0, 1) || '.' || SUBSTR(j.FNAME, 1, 1) || LOWER(SUBSTR(j.FNAME, 2))
    ) 
    GROUP BY PLANYR_ID
  ) k ON g.PLANYR_ID = k.PLANYR_ID
  LEFT JOIN TBL_PLANYR_EVAL l ON a.ID = l.PLANYR_ID AND l.TP = 'quarter' AND l.INTERVAL = " + quarter + @"
  ORDER BY b.NO, c.NO, a.NO
) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }

        public string PlanyrTab6t1Datatable(string yr, string qrtr, string gazar)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (gazar != "") gazar = " AND g.BR_ID=" + gazar;
            string qrtrmonths = "1,2,3,4,5,6,7,8,9,10,11,12";
            if (qrtr == "1") qrtrmonths = "1,2,3";
            else if (qrtr == "2") qrtrmonths = "1,2,3,4,5,6";
            else if (qrtr == "3") qrtrmonths = "1,2,3,4,5,6,7,8,9";
            else if (qrtr == "4") qrtrmonths = "1,2,3,4,5,6,7,8,9,10,11,12";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = @"SELECT ROWNUM, a.* 
FROM ( 
  SELECT a.ID as PLANYR_ID, b.NO as ACTION_NO, b.NAME as ACTION_NAME, c.NO as STRAT_NO, c.NAME as STRAT_NAME, a.NO as PLANYR_NO, a.NAME as PLANYR_NAME, a.IS_PLANED, g.AVGPER, a.CRITERIA, a.CNT, a.QUALITY, g.MNTHLIST, k.STAFFNAMELIST, NVL2(h.IMPL_DATA,'1','0') as ISIMPL, g.ISEVALLIST, g.EVALLIST, g.DESCLIST, g.ISUSE, REPLACE(NVL(a.BUDGET,'Жилдээ'),'1,2,3,4,5,6,7,8,9,10,11,12','Сар бүр') as MNTHLISTPLAN, h.IMPL_DATA, NVL2(l.EVAL,1,0) as ISEVALLAST, NVL(l.EVAL,0) as EVALLAST, c.ID as STRAT_ID, b.ID as ACTION_ID 
  FROM TBL_PLANYR a 
  INNER JOIN TBL_FUNC_ACTION b ON a.FUNC_ACTION_ID=b.ID 
  INNER JOIN TBL_FUNC_STRAT c ON b.FUNC_STRAT_ID=c.ID 
  INNER JOIN ( 
    SELECT d.ID as PLANYR_ID, NVL2(j.PLANYR_ID,1,0) as ISUSE, j.MNTHLIST, j.ISEVALLIST, j.EVALLIST, j.DESCLIST, NVL(j.AVGPER,0) as AVGPER 
    FROM TBL_PLANYR d 
    INNER JOIN TBL_FUNC_ACTION f ON d.FUNC_ACTION_ID=f.ID 
    INNER JOIN TBL_FUNC_STRAT g ON f.FUNC_STRAT_ID=g.ID 
    INNER JOIN TBL_FUNC_ACTION_BR h ON f.ID=h.FUNC_ACTION_ID 
    INNER JOIN TBL_PLANYR_USER i ON d.ID=i.PLANYR_ID 
    LEFT JOIN ( 
      SELECT PLANYR_ID, NVL(RTRIM(xmlagg (xmlelement (e, MNTHS || ',') ORDER BY MNTHS ).extract('//text()'), ','),'none') as MNTHLIST, NVL(RTRIM(xmlagg (xmlelement (e, ISEVAL || ',') ORDER BY MNTHS ).extract('//text()'), ','),'none') as ISEVALLIST, NVL(RTRIM(xmlagg (xmlelement (e, EVAL || ',') ORDER BY MNTHS ).extract('//text()'), ','),'none') as EVALLIST, NVL(RTRIM(xmlagg (xmlelement (e, DESCRIPTION || '~') ORDER BY MNTHS ).extract('//text()'), '~'),'none') as DESCLIST, ROUND(SUM(EVAL)/CASE WHEN SUM(ISEVALCNT)=0 THEN 1 ELSE SUM(ISEVALCNT) END,1) as AVGPER 
      FROM ( 
        SELECT a.PLANYR_ID, a.MNTHS, NVL(b.DESCRIPTION,'none') as DESCRIPTION, NVL(b.EVAL,0) as EVAL, NVL2(b.EVAL,1,0) as ISEVAL, CASE WHEN b.EVAL is not null THEN 1 ELSE 0 END as ISEVALCNT 
        FROM ( 
          SELECT TO_NUMBER(TO_CHAR(a.STRT_DATE,'mm')) as MNTHS, d.ID as PLANYR_ID 
          FROM TBL_PLANMNTH a 
          INNER JOIN TBL_PLANYR d ON a.PLANYR_ID=d.ID 
          INNER JOIN TBL_FUNC_ACTION f ON d.FUNC_ACTION_ID=f.ID 
          INNER JOIN TBL_FUNC_STRAT g ON f.FUNC_STRAT_ID=g.ID AND g.YR=d.YR 
          INNER JOIN TBL_FUNC_ACTION_BR h ON f.ID=h.FUNC_ACTION_ID 
          INNER JOIN TBL_PLANYR_USER i ON d.ID=i.PLANYR_ID 
          WHERE d.YR=" + yr + " AND TO_NUMBER(TO_CHAR(a.STRT_DATE,'mm')) IN (" + qrtrmonths + ")" + gazar + @" 
          GROUP BY TO_NUMBER(TO_CHAR(a.STRT_DATE, 'mm')), d.ID
        ) a
        LEFT JOIN TBL_PLANYR_EVAL b ON a.PLANYR_ID = b.PLANYR_ID AND b.TP = 'month' AND a.MNTHS = b.INTERVAL
      ) 
      GROUP BY PLANYR_ID
    ) j ON d.ID = j.PLANYR_ID
    WHERE d.YR = " + yr + gazar + @"
    GROUP BY d.ID, NVL2(j.PLANYR_ID, 1, 0), j.MNTHLIST, j.ISEVALLIST, j.EVALLIST, j.DESCLIST, j.AVGPER
  ) g ON a.ID = g.PLANYR_ID
  LEFT JOIN TBL_PLAN_IMPL h ON a.ID = h.PLAN_ID AND h.YR = " + yr + " AND h.QRTR = " + qrtr + @" AND h.TP = 'quarter'
  INNER JOIN (
    SELECT PLANYR_ID, NVL(RTRIM(xmlagg(xmlelement(e, ' ' || STAFFNAME || ',') ORDER BY POSSORT DESC, ST_ID).extract('//text()'), ','), 'none') STAFFNAMELIST
     FROM (
       SELECT d.ID as PLANYR_ID, i.ST_ID, l.SORT as POSSORT, SUBSTR(j.LNAME, 0, 1) || '.' || SUBSTR(j.FNAME, 1, 1) || LOWER(SUBSTR(j.FNAME, 2)) as STAFFNAME 
       FROM TBL_PLANYR d 
       INNER JOIN TBL_FUNC_ACTION f ON d.FUNC_ACTION_ID = f.ID 
       INNER JOIN TBL_FUNC_STRAT g ON f.FUNC_STRAT_ID = g.ID 
       INNER JOIN TBL_FUNC_ACTION_BR h ON f.ID = h.FUNC_ACTION_ID 
       INNER JOIN TBL_PLANYR_USER i ON d.ID = i.PLANYR_ID 
       INNER JOIN hrdbuser.ST_STAFFS j ON i.ST_ID = j.ID 
       INNER JOIN hrdbuser.ST_STBR k ON j.ID = k.STAFFS_ID AND k.ISACTIVE = 1 
       INNER JOIN hrdbuser.STN_POS l ON k.POS_ID = l.ID 
       WHERE d.YR = " + yr + gazar + @" 
       GROUP BY d.ID, i.ST_ID, l.SORT, SUBSTR(j.LNAME, 0, 1) || '.' || SUBSTR(j.FNAME, 1, 1) || LOWER(SUBSTR(j.FNAME, 2))
    ) 
    GROUP BY PLANYR_ID
  ) k ON g.PLANYR_ID = k.PLANYR_ID
  LEFT JOIN TBL_PLANYR_EVAL l ON a.ID = l.PLANYR_ID AND l.TP = 'quarter' AND l.INTERVAL = " + qrtr + @"
  ORDER BY b.NO, c.NO, a.NO
) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string PlanyrTab6t2Datatable(string yr, string qrtr, string gazar)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (gazar != "") gazar = " AND g.BR_ID=" + gazar;
            string qrtrmonths = "1,2,3,4,5,6,7,8,9,10,11,12";
            if (qrtr == "1") qrtrmonths = "1,2,3";
            else if (qrtr == "2") qrtrmonths = "1,2,3,4,5,6";
            else if (qrtr == "3") qrtrmonths = "1,2,3,4,5,6,7,8,9";
            else if (qrtr == "4") qrtrmonths = "1,2,3,4,5,6,7,8,9,10,11,12";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = @"SELECT ROWNUM, a.* 
FROM ( 
  SELECT b.NO as ACTION_NO, b.NAME as ACTION_NAME, c.NO as STRAT_NO, c.NAME as STRAT_NAME, a.NO as PLANYR_NO, a.NAME as PLANYR_NAME, g.AVGPER, g.MNTHLIST, k.STAFFNAMELIST, g.ISEVALLIST, g.EVALLIST, g.ISUSE, CASE WHEN NVL2(l.EVAL,1,0)=1 THEN TO_CHAR(l.EVAL) ELSE TO_CHAR('-') END as EVALLAST, NVL(l.DESCRIPTION,'-') as EVALLASTDESC, h.IMPL_DATA 
  FROM TBL_PLANYR a 
  INNER JOIN TBL_FUNC_ACTION b ON a.FUNC_ACTION_ID=b.ID 
  INNER JOIN TBL_FUNC_STRAT c ON b.FUNC_STRAT_ID=c.ID 
  INNER JOIN ( 
    SELECT d.ID as PLANYR_ID, NVL2(j.PLANYR_ID,1,0) as ISUSE, j.MNTHLIST, j.ISEVALLIST, j.EVALLIST, NVL(j.AVGPER,0) as AVGPER 
    FROM TBL_PLANYR d 
    INNER JOIN TBL_FUNC_ACTION f ON d.FUNC_ACTION_ID=f.ID 
    INNER JOIN TBL_FUNC_STRAT g ON f.FUNC_STRAT_ID=g.ID 
    INNER JOIN TBL_FUNC_ACTION_BR h ON f.ID=h.FUNC_ACTION_ID 
    INNER JOIN TBL_PLANYR_USER i ON d.ID=i.PLANYR_ID 
    LEFT JOIN ( 
      SELECT PLANYR_ID, NVL(RTRIM(xmlagg (xmlelement (e, MNTHS || ',') ORDER BY MNTHS ).extract('//text()'), ','),'none') as MNTHLIST, NVL(RTRIM(xmlagg (xmlelement (e, ISEVAL || ',') ORDER BY MNTHS ).extract('//text()'), ','),'none') as ISEVALLIST, NVL(RTRIM(xmlagg (xmlelement (e, EVAL || ',') ORDER BY MNTHS ).extract('//text()'), ','),'none') as EVALLIST, ROUND(SUM(EVAL)/CASE WHEN SUM(ISEVALCNT)=0 THEN 1 ELSE SUM(ISEVALCNT) END,1) as AVGPER 
      FROM ( 
        SELECT a.PLANYR_ID, TO_NUMBER(TO_CHAR(a.STRT_DATE,'mm')) as MNTHS, NVL(b.DESCRIPTION,'none') as DESCRIPTION, NVL(b.EVAL,0) as EVAL, NVL2(b.EVAL,1,0) as ISEVAL, CASE WHEN b.EVAL is not null THEN 1 ELSE 0 END as ISEVALCNT 
        FROM TBL_PLANMNTH a 
        INNER JOIN TBL_PLANYR d ON a.PLANYR_ID=d.ID 
        INNER JOIN TBL_FUNC_ACTION f ON d.FUNC_ACTION_ID=f.ID 
        INNER JOIN TBL_FUNC_STRAT g ON f.FUNC_STRAT_ID=g.ID 
        INNER JOIN TBL_FUNC_ACTION_BR h ON f.ID=h.FUNC_ACTION_ID 
        LEFT JOIN TBL_PLANYR_EVAL b ON a.PLANYR_ID=b.PLANYR_ID AND b.TP='month' AND TO_NUMBER(TO_CHAR(a.STRT_DATE,'mm'))=b.INTERVAL WHERE d.YR=" + yr + " AND TO_NUMBER(TO_CHAR(a.STRT_DATE,'mm')) IN (" + qrtrmonths + ")" + gazar + @" 
        GROUP BY a.PLANYR_ID, TO_NUMBER(TO_CHAR(a.STRT_DATE, 'mm')), NVL(b.DESCRIPTION, 'none'), NVL(b.EVAL, 0), NVL2(b.EVAL, 1, 0), CASE WHEN b.EVAL is not null THEN 1 ELSE 0 END
      ) 
      GROUP BY PLANYR_ID
    ) j ON d.ID = j.PLANYR_ID
    WHERE d.YR = " + yr + gazar + @"
    GROUP BY d.ID, NVL2(j.PLANYR_ID, 1, 0), j.MNTHLIST, j.ISEVALLIST, j.EVALLIST, j.AVGPER
  ) g ON a.ID = g.PLANYR_ID
  LEFT JOIN TBL_PLAN_IMPL h ON a.ID = h.PLAN_ID AND h.YR = " + yr + " AND h.QRTR = " + qrtr + @" AND h.TP = 'quarter'
  INNER JOIN (
    SELECT PLANYR_ID, NVL(RTRIM(xmlagg(xmlelement(e, ' ' || STAFFNAME || ',') ORDER BY POSSORT DESC, ST_ID).extract('//text()'), ','), 'none') STAFFNAMELIST
     FROM (
       SELECT d.ID as PLANYR_ID, i.ST_ID, l.SORT as POSSORT, SUBSTR(j.LNAME, 0, 1) || '.' || SUBSTR(j.FNAME, 1, 1) || LOWER(SUBSTR(j.FNAME, 2)) as STAFFNAME 
       FROM TBL_PLANYR d 
       INNER JOIN TBL_FUNC_ACTION f ON d.FUNC_ACTION_ID = f.ID 
       INNER JOIN TBL_FUNC_STRAT g ON f.FUNC_STRAT_ID = g.ID 
       INNER JOIN TBL_FUNC_ACTION_BR h ON f.ID = h.FUNC_ACTION_ID 
       INNER JOIN TBL_PLANYR_USER i ON d.ID = i.PLANYR_ID 
       INNER JOIN hrdbuser.ST_STAFFS j ON i.ST_ID = j.ID 
       INNER JOIN hrdbuser.ST_STBR k ON j.ID = k.STAFFS_ID AND k.ISACTIVE = 1 
       INNER JOIN hrdbuser.STN_POS l ON k.POS_ID = l.ID 
       WHERE d.YR = " + yr + gazar + @" 
       GROUP BY d.ID, i.ST_ID, l.SORT, SUBSTR(j.LNAME, 0, 1) || '.' || SUBSTR(j.FNAME, 1, 1) || LOWER(SUBSTR(j.FNAME, 2))
    ) 
    GROUP BY PLANYR_ID
  ) k ON g.PLANYR_ID = k.PLANYR_ID
  LEFT JOIN TBL_PLANYR_EVAL l ON a.ID = l.PLANYR_ID AND l.TP = 'quarter' AND l.INTERVAL = " + qrtr + @"
  WHERE g.MNTHLIST IS NOT NULL AND NVL(g.AVGPER, 0)< 71
  ORDER BY b.NO, c.NO, a.NO
) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string PlanyrTab6t3Datatable(string yr, string qrtr, string gazar)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (gazar != "") gazar = " AND g.BR_ID=" + gazar;
            string qrtrmonths = "1,2,3,4,5,6,7,8,9,10,11,12";
            if (qrtr == "1") qrtrmonths = "1,2,3";
            else if (qrtr == "2") qrtrmonths = "1,2,3,4,5,6";
            else if (qrtr == "3") qrtrmonths = "1,2,3,4,5,6,7,8,9";
            else if (qrtr == "4") qrtrmonths = "1,2,3,4,5,6,7,8,9,10,11,12";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet(@"SELECT ROWNUM, a.* FROM ( SELECT b.NO as ACTION_NO, c.NO as STRAT_NO, a.NO as PLANYR_NO, a.NAME as PLANYR_NAME, g.MNTHLIST, k.STAFFNAMELIST, g.ISUSE, REPLACE(NVL(a.BUDGET,'Жилдээ'),'1,2,3,4,5,6,7,8,9,10,11,12','Сар бүр') as MNTHLISTPLAN FROM TBL_PLANYR a INNER JOIN TBL_FUNC_ACTION b ON a.FUNC_ACTION_ID=b.ID INNER JOIN TBL_FUNC_STRAT c ON b.FUNC_STRAT_ID=c.ID INNER JOIN TBL_FUNC_ACTION_BR d ON b.ID=d.FUNC_ACTION_ID INNER JOIN ( SELECT d.ID as PLANYR_ID, NVL2(j.PLANYR_ID,1,0) as ISUSE, j.MNTHLIST FROM TBL_PLANYR d INNER JOIN TBL_FUNC_ACTION f ON d.FUNC_ACTION_ID=f.ID INNER JOIN TBL_FUNC_STRAT g ON f.FUNC_STRAT_ID=g.ID INNER JOIN TBL_FUNC_ACTION_BR h ON f.ID=h.FUNC_ACTION_ID INNER JOIN TBL_PLANYR_USER i ON d.ID=i.PLANYR_ID LEFT JOIN ( SELECT PLANYR_ID, NVL(RTRIM(xmlagg (xmlelement (e, MNTHS || ',') ORDER BY MNTHS ).extract('//text()'), ','),'none') as MNTHLIST FROM ( SELECT a.PLANYR_ID, TO_NUMBER(TO_CHAR(a.STRT_DATE,'mm')) as MNTHS FROM TBL_PLANMNTH a INNER JOIN TBL_PLANYR d ON a.PLANYR_ID=d.ID INNER JOIN TBL_FUNC_ACTION f ON d.FUNC_ACTION_ID=f.ID INNER JOIN TBL_FUNC_STRAT g ON f.FUNC_STRAT_ID=g.ID INNER JOIN TBL_FUNC_ACTION_BR h ON f.ID=h.FUNC_ACTION_ID LEFT JOIN TBL_PLANYR_EVAL b ON a.PLANYR_ID=b.PLANYR_ID AND b.TP='month' AND TO_NUMBER(TO_CHAR(a.STRT_DATE,'mm'))=b.INTERVAL WHERE d.YR=" + yr + " AND TO_NUMBER(TO_CHAR(a.STRT_DATE,'mm')) IN (" + qrtrmonths + ")" + gazar + " GROUP BY a.PLANYR_ID, TO_NUMBER(TO_CHAR(a.STRT_DATE,'mm')) ) GROUP BY PLANYR_ID ) j ON d.ID=j.PLANYR_ID WHERE d.YR=" + yr + gazar + @" GROUP BY d.ID, NVL2(j.PLANYR_ID,1,0), j.MNTHLIST ) g ON a.ID=g.PLANYR_ID INNER JOIN ( SELECT PLANYR_ID, NVL(RTRIM(xmlagg (xmlelement (e, ' '||STAFFNAME || ',') ORDER BY POSSORT DESC, ST_ID).extract('//text()'), ','),'none') STAFFNAMELIST FROM ( SELECT d.ID as PLANYR_ID, i.ST_ID, l.SORT as POSSORT, SUBSTR(j.LNAME,0,1)||'.'||SUBSTR(j.FNAME,1,1)||LOWER(SUBSTR(j.FNAME,2)) as STAFFNAME 
      FROM TBL_PLANYR d
      INNER JOIN TBL_FUNC_ACTION f ON d.FUNC_ACTION_ID = f.ID
      INNER JOIN TBL_FUNC_STRAT g ON f.FUNC_STRAT_ID = g.ID
      INNER JOIN TBL_FUNC_ACTION_BR h ON f.ID = h.FUNC_ACTION_ID
      INNER JOIN TBL_PLANYR_USER i ON d.ID = i.PLANYR_ID
      INNER JOIN hrdbuser.ST_STAFFS j ON i.ST_ID = j.ID
      INNER JOIN hrdbuser.ST_STBR k ON j.ID = k.STAFFS_ID AND k.ISACTIVE = 1
      INNER JOIN hrdbuser.STN_POS l ON k.POS_ID = l.ID
      WHERE d.YR = " + yr + gazar + @"
      GROUP BY d.ID, i.ST_ID, l.SORT, SUBSTR(j.LNAME, 0, 1) || '.' || SUBSTR(j.FNAME, 1, 1) || LOWER(SUBSTR(j.FNAME, 2))) GROUP BY PLANYR_ID ) k ON g.PLANYR_ID=k.PLANYR_ID WHERE g.MNTHLIST IS NULL GROUP BY b.NO, c.NO, a.NO, a.NAME, g.MNTHLIST, k.STAFFNAMELIST, g.ISUSE, REPLACE(NVL(a.BUDGET,'Жилдээ'),'1,2,3,4,5,6,7,8,9,10,11,12','Сар бүр') ORDER BY b.NO, c.NO, a.NO ) a");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string PlanyrTab6t5Datatable(string yr)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strQry = "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                strQry = @"SELECT a.PLANYR_ID, d.NO as STRAT_NO, d.NAME as STRAT_NAME, c.NO as ACTION_NO, c.NAME as ACTION_NAME, b.NO as PLANYR_NO, b.NAME as PLANYR_NAME, b.CRITERIA, b.CNT, b.QUALITY, a.STLISTNAME, REPLACE(NVL(b.BUDGET,'Жилдээ'),'1,2,3,4,5,6,7,8,9,10,11,12','Сар бүр') as BUDGET, d.BR_ID as STRAT_BRID, c.ID as ACTION_ID, a.BRNAMELIST 
FROM ( 
  SELECT a.PLANYR_ID, a.BRNAMELIST, NVL(RTRIM(xmlagg (xmlelement (e, ' '||SUBSTR(c.LNAME,0,1)||'.'||SUBSTR(c.FNAME,1,1)||LOWER(SUBSTR(c.FNAME,2)) || ',') ORDER BY f.SORT DESC).extract('//text()'), ','),'none') STLISTNAME 
  FROM ( 
    SELECT a.PLANYR_ID, NVL(RTRIM(xmlagg (xmlelement (e, ' '|| CASE WHEN b.BR_ID=b.BR_MAIN_ID1 THEN b.DOMAIN_ORG ELSE c.DOMAIN_ORG||'-'||b.DOMAIN_ORG END || ',') ORDER BY b.SORT, c.SORT DESC).extract('//text()'), ','),'none') BRNAMELIST
    FROM (
        SELECT a.ID as PLANYR_ID, f.BR_ID
        FROM TBL_PLANYR a 
        INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID 
        INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID 
        INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID AND d.YR=" + yr + @" 
        INNER JOIN TBL_FUNC_ACTION_BR f ON c.ID=f.FUNC_ACTION_ID 
        WHERE a.SUBMIT_D2=1 AND a.IS_MOF=1 AND a.YR=" + yr + @" 
        GROUP BY a.ID, f.BR_ID
    ) a
    INNER JOIN TBL_BRANCH b ON a.BR_ID=b.BR_ID AND b.YR=" + yr + @"
    INNER JOIN TBL_BRANCH c ON b.BR_MAIN_ID1=c.BR_ID AND c.YR=" + yr + @"
    GROUP BY a.PLANYR_ID
  ) a 
  INNER JOIN TBL_PLANYR_USER b ON a.PLANYR_ID=b.PLANYR_ID 
  INNER JOIN hrdbuser.ST_STAFFS c ON b.ST_ID=c.ID
  INNER JOIN hrdbuser.ST_STBR d ON c.ID=d.STAFFS_ID AND d.ISACTIVE=1
  INNER JOIN hrdbuser.STN_POS f ON d.POS_ID=f.ID  
  WHERE b.ISREAL=1 
  GROUP BY a.PLANYR_ID, a.BRNAMELIST 
) a 
INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID 
INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID 
INNER JOIN TBL_BRANCH f ON d.BR_ID=f.BR_ID AND f.YR=" + yr + @" 
ORDER BY d.NO, c.NO, b.NO";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string planyrTab7t1Datatable(string yr, string qrtr, string tp)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (qrtr == "1") qrtr = "1,2,3";
            else if (qrtr == "2") qrtr = "1,2,3,4,5,6";
            else if (qrtr == "3") qrtr = "1,2,3,4,5,6,7,8,9";
            else if (qrtr == "4") qrtr = "1,2,3,4,5,6,7,8,9,10,11,12";
            if (tp != "") {
                if (tp == "1") tp = " AND f.IS_PLANED=1 AND f.IS_LOCAL=0";                
                else if (tp=="2") tp = " AND f.IS_PLANED=0 AND f.IS_LOCAL=0";
                else if (tp == "3") tp = " AND f.IS_LOCAL=1";
            }
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = "SELECT b.BR_NAME, COUNT(a.BR_ID) as CNT, SUM(a.PER100) as PER100, SUM(a.PER99T90) as PER90, SUM(a.PER89T80) as PER80, SUM(a.PER79T70) as PER70, SUM(a.PER69T50) as PER50, SUM(a.PER59T30) as PER30, SUM(a.PER29T10) as PER10, SUM(a.PER9T0) as PER0, SUM(a.PERNONE) as PERNONE, ROUND(SUM(a.AVGPER)/CASE WHEN (COUNT(a.BR_ID)-SUM(a.PERNONE))=0 THEN 1 ELSE (COUNT(a.BR_ID)-SUM(a.PERNONE)) END,1) as PER, b.SORT FROM ( SELECT BR_ID, NVL(AVGPER,0) as AVGPER, CASE WHEN AVGPER=100 THEN 1 ELSE 0 END as PER100, CASE WHEN AVGPER>=90 AND AVGPER<100 THEN 1 ELSE 0 END as PER99T90, CASE WHEN AVGPER>=80 AND AVGPER<90 THEN 1 ELSE 0 END as PER89T80, CASE WHEN AVGPER>=70 AND AVGPER<80 THEN 1 ELSE 0 END as PER79T70, CASE WHEN AVGPER>=50 AND AVGPER<70 THEN 1 ELSE 0 END as PER69T50, CASE WHEN AVGPER>=30 AND AVGPER<50 THEN 1 ELSE 0 END as PER59T30, CASE WHEN AVGPER>=10 AND AVGPER<30 THEN 1 ELSE 0 END as PER29T10, CASE WHEN AVGPER>=0 AND AVGPER<10 THEN 1 ELSE 0 END as PER9T0, CASE WHEN AVGPER IS NULL THEN 1 ELSE 0 END as PERNONE FROM ( SELECT g.BR_ID, j.AVGPER FROM TBL_PLANYR d INNER JOIN TBL_FUNC_ACTION f ON d.FUNC_ACTION_ID=f.ID INNER JOIN TBL_FUNC_STRAT g ON f.FUNC_STRAT_ID=g.ID LEFT JOIN ( SELECT PLANYR_ID, ROUND(SUM(EVAL)/CASE WHEN SUM(ISEVALCNT)=0 THEN 1 ELSE SUM(ISEVALCNT) END,1) as AVGPER FROM ( SELECT PLANYR_ID, MNTHS, EVAL, ISEVAL, ISEVALCNT FROM ( SELECT a.PLANYR_ID, a.MNTHS, NVL(b.EVAL,0) as EVAL, NVL2(b.EVAL,1,0) as ISEVAL, CASE WHEN b.EVAL is not null THEN 1 ELSE 0 END as ISEVALCNT FROM ( SELECT TO_NUMBER(TO_CHAR(a.STRT_DATE,'mm')) as MNTHS, d.ID as PLANYR_ID FROM TBL_PLANMNTH a INNER JOIN TBL_PLANYR d ON a.PLANYR_ID=d.ID INNER JOIN TBL_FUNC_ACTION f ON d.FUNC_ACTION_ID=f.ID INNER JOIN TBL_FUNC_STRAT g ON f.FUNC_STRAT_ID=g.ID WHERE d.YR=" + yr+tp + " AND TO_NUMBER(TO_CHAR(a.STRT_DATE,'mm')) IN (" + qrtr + ") GROUP BY TO_NUMBER(TO_CHAR(a.STRT_DATE,'mm')), d.ID ) a INNER JOIN TBL_PLANYR_EVAL b ON a.PLANYR_ID=b.PLANYR_ID AND b.TP='month' AND a.MNTHS=b.INTERVAL ORDER BY a.PLANYR_ID, a.MNTHS ) WHERE ISEVALCNT!= 0 ) GROUP BY PLANYR_ID ) j ON d.ID=j.PLANYR_ID WHERE d.YR=" + yr+tp + " ) ) a INNER JOIN TBL_BRANCH b ON a.BR_ID=b.BR_ID AND b.YR=" + yr + " GROUP BY b.BR_NAME, b.SORT ORDER BY b.SORT";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }



        //*****workingtime.aspx*****//
        public string WorkingtimeTab2Datatable(string yr, string month, string month2, string gazar, string heltes, string stid)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string yr1 = yr, strMonthList = "";
            for (int i = Int32.Parse(month); i <= Int32.Parse(month2); i++)
            {
                if (strMonthList == "") strMonthList += i.ToString();
                else strMonthList += "," + i.ToString();
            }
            if (gazar != "") gazar = " AND c.FATHER_ID=" + gazar;
            if (heltes != "") heltes = " AND c.ID=" + heltes;
            if (stid != "") stid = " AND b.STAFFS_ID=" + stid;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = "";
                strQry = @"SELECT ROWNUM as ROWNO, a.* 
FROM (
  SELECT 
    a.ST_ID, 
    CASE WHEN d.ID = d.FATHER_ID THEN d.INITNAME ELSE f.INITNAME || '-' || d.INITNAME END as NEGJ, 
    g.NAME as POS_NAME, 
    SUBSTR(h.LNAME, 0, 1) || '.' || SUBSTR(h.FNAME, 1, 1) || LOWER(SUBSTR(h.FNAME, 2)) as STAFFNAME, 
    a.WORKDAY, 
    a.CHOLOODAYSUM, 
    a.UWCHTEIDAYSUM, 
    a.AMRALTDAYSUM, 
    a.TOMILOLTDAYSUM, 
    ROUND((a.WORKDAY - (a.CHOLOODAYSUM + a.UWCHTEIDAYSUM + a.AMRALTDAYSUM + a.TOMILOLTDAYSUM + a.TASALSANDAYSUM + a.HOTSORSONDAYSUM + a.ERTDAYSUM)), 2) as WORKEDAY, 
    a.TASALSANDAYSUM, 
    ROUND(a.HOTSORSONMINUTESUM, 1) as HOTSORSONMINUTESUM, 
    ROUND(a.HOTSORSONDAYSUM,1) as HOTSORSONDAYSUM, 
    ROUND(a.ERTMINUTESUM, 1) as ERTMINUTESUM, 
    ROUND(a.OROIMINUTESUM, 1) as OROIMINUTESUM, 
    ROUND((a.WORKDAY - (a.TASALSANDAYSUM + a.HOTSORSONDAYSUM + a.ERTDAYSUM)), 2) as EVALWORKEDDAY, 
    ROUND(((a.WORKDAY - (a.TASALSANDAYSUM + a.HOTSORSONDAYSUM + a.ERTDAYSUM)) / a.WORKDAY) * 100, 2) as PER
  FROM(
    SELECT ST_ID,
      SUM(ISWORK) as WORKDAY,
      SUM(CHOLOODAY) as CHOLOODAYSUM,
      SUM(UWCHTEIDAY) as UWCHTEIDAYSUM,
      SUM(AMRALTDAY) as AMRALTDAYSUM,
      SUM(TOMILOLTDAY) as TOMILOLTDAYSUM,
      SUM(ISTASALSAN) as TASALSANDAYSUM,
      SUM(HOTSORSONMINUTE) as HOTSORSONMINUTESUM,
      SUM(HOTSORSONDAY) as HOTSORSONDAYSUM,
      SUM(ERTMINUTE) as ERTMINUTESUM,
      SUM(ERTDAY) as ERTDAYSUM,
      SUM(OROIMINUTE) as OROIMINUTESUM,
      SUM(OROIDAY) as OROIDAYSUM
    FROM(
      SELECT ST_ID, TP, DT, MINTM, MAXTM, ISWORK,
        CASE WHEN TP = 11 AND ISWORK = 1 OR TP = 12 THEN 1 ELSE 0 END as CHOLOODAY,
        CASE WHEN TP = 13 AND ISWORK = 1 THEN 1 ELSE 0 END as UWCHTEIDAY,
        CASE WHEN TP = 21 AND ISWORK = 1 THEN 1 ELSE 0 END as AMRALTDAY,
        CASE WHEN TP = 31 AND ISWORK = 1 THEN 1 ELSE 0 END as TOMILOLTDAY,
        CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM = MAXTM THEN 1 ELSE 0 END as ISTASALSAN,
        CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'hotsorson', 'minute') ELSE 0 END as HOTSORSONMINUTE,
        CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'hotsorson', 'day') ELSE 0 END as HOTSORSONDAY,
        CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'ert', 'minute') ELSE 0 END as ERTMINUTE,
        CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'ert', 'day') ELSE 0 END as ERTDAY,
        CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'oroi', 'minute') ELSE 0 END as OROIMINUTE,
        CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'oroi', 'day') ELSE 0 END as OROIDAY
      FROM(
        SELECT a.ST_ID, a.TP, a.DT, a.MINTM, a.MAXTM, CASE WHEN b.DT is null THEN a.ISWORK ELSE 0 END as ISWORK
        FROM(
          SELECT a.ST_ID, NVL(b.TP, 0) as TP, a.DT, a.MINTM, a.MAXTM, a.ISWORK
          FROM(
            SELECT a.ST_ID, a.DT, NVL(b.TP, 0) as TP, NVL(b.MINTM, '00:00:00') as MINTM, NVL(b.MAXTM, '00:00:00') as MAXTM, a.ISWORK
            FROM(
              SELECT a.STAFFS_ID as ST_ID, a.DT, CASE WHEN b.DT IS NULL THEN a.ISWORK ELSE 1 END as ISWORK
              FROM ( 
                SELECT a.ID, b.STAFFS_ID, c.FATHER_ID as GAZAR_ID, c.ID as HELTES_ID, a.DT, CASE WHEN(MOD(TO_CHAR(a.DT, 'J'), 7) + 1) = 6 OR(MOD(TO_CHAR(a.DT, 'J'), 7) + 1) = 7 THEN 0 ELSE 1 END as ISWORK
                FROM (
                  SELECT a.ID, a.BEGINDT, a.ENDDT, b.DT
                  FROM (
                    SELECT a.ID, 
                      CASE 
                        WHEN TO_DATE(a.DT,'YYYY-MM-DD')>TO_DATE('" + yr + "-" + month + @"-01','YYYY-MM-DD') 
                        THEN a.DT 
                        ELSE '" + yr + "-" + month + @"-01' 
                      END as BEGINDT, 
                      CASE 
                        --WHEN TO_DATE(CASE WHEN c.ACTIVE=0 THEN NVL(a.ENDDT,a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE,'YYYY-MM-DD')) END,'YYYY-MM-DD')<LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01','YYYY-MM-DD')) 
                        --THEN CASE WHEN c.ACTIVE=0 THEN NVL(a.ENDDT,a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE,'YYYY-MM-DD')) END ELSE TO_CHAR(LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01','YYYY-MM-DD')),'YYYY-MM-DD') END as ENDDT
                        WHEN TO_DATE(CASE WHEN c.ACTIVE=0 THEN TO_CHAR((TO_DATE(NVL(a.ENDDT,a.DT),'YYYY-MM-DD')-1),'YYYY-MM-DD') ELSE NVL(TO_CHAR((TO_DATE(a.ENDDT,'YYYY-MM-DD')-1),'YYYY-MM-DD'), TO_CHAR(SYSDATE,'YYYY-MM-DD')) END,'YYYY-MM-DD')<LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01','YYYY-MM-DD')) 
                        THEN CASE WHEN c.ACTIVE=0 THEN TO_CHAR((TO_DATE(NVL(a.ENDDT,a.DT),'YYYY-MM-DD')-1),'YYYY-MM-DD') ELSE NVL(TO_CHAR((TO_DATE(a.ENDDT,'YYYY-MM-DD')-1),'YYYY-MM-DD'), TO_CHAR(SYSDATE,'YYYY-MM-DD')) END ELSE TO_CHAR(LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01','YYYY-MM-DD')),'YYYY-MM-DD') END as ENDDT
                    FROM hrdbuser.ST_STBR a
                    INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID=b.ID AND b.ISACTIVE=1
                    INNER JOIN hrdbuser.STN_MOVE c ON a.MOVE_ID=c.ID
                    WHERE a.POS_ID!=2020102 AND c.ACTIVE=1
                    AND ((
                        TO_DATE('" + yr + "-" + month + @"-01','YYYY-MM-DD') 
                        BETWEEN TO_DATE(a.DT,'YYYY-MM-DD') AND TO_DATE(CASE WHEN c.ACTIVE=0 THEN NVL(a.ENDDT,a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE,'YYYY-MM-DD')) END,'YYYY-MM-DD')
                        OR 
                        LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01','YYYY-MM-DD')) 
                        BETWEEN TO_DATE(a.DT,'YYYY-MM-DD') AND TO_DATE(CASE WHEN c.ACTIVE=0 THEN NVL(a.ENDDT,a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE,'YYYY-MM-DD')) END,'YYYY-MM-DD')
                      ) OR 
                        (
                          TO_DATE('" + yr + "-" + month + @"-01','YYYY-MM-DD')<TO_DATE(a.DT,'YYYY-MM-DD') AND LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01','YYYY-MM-DD'))>TO_DATE(a.DT,'YYYY-MM-DD')
                        ))
                  ) a, (
                    SELECT DT
                    FROM(
                      SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                      FROM DUAL
                      CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                    )
                    WHERE DT BETWEEN TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') AND SYSDATE AND MOD(TO_CHAR(DT, 'J'), 7) + 1 IN(1, 2, 3, 4, 5, 6, 7)
                  ) b
                ) a
                INNER JOIN hrdbuser.ST_STBR b ON a.ID=b.ID
                INNER JOIN hrdbuser.ST_BRANCH c ON b.BRANCH_ID=c.ID AND c.ISACTIVE=1
                WHERE a.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD') AND b.POS_ID!=2020102" + gazar + heltes + stid + @"
              ) a
              LEFT JOIN(
                SELECT TO_DATE(HOLDATE, 'YYYY-MM-DD') as DT FROM hrdbuser.ST_HOLIDAYISWORK WHERE TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'YYYY')) = "+yr+ @" AND TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'MM')) IN(" + strMonthList + @")
              ) b ON a.DT = b.DT  
            ) a
            LEFT JOIN(
              SELECT a.MONTH, a.INOUT as TP, b.ID as ST_ID, TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd') as DT, TO_CHAR(MIN(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY || ' ' || a.HOUR || ':' || a.MINUTE || ':' || a.SECOND, 'yyyy-mm-dd hh24:mi:ss')), 'hh24:mi:ss') as MINTM, TO_CHAR(MAX(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY || ' ' || a.HOUR || ':' || a.MINUTE || ':' || a.SECOND, 'yyyy-mm-dd hh24:mi:ss')), 'hh24:mi:ss') as MAXTM
              FROM STN_TRCDLOG a
              INNER JOIN hrdbuser.ST_STAFFS b ON a.ENO = b.FINGERID
              INNER JOIN hrdbuser.ST_STBR c ON b.ID = c.STAFFS_ID
              INNER JOIN hrdbuser.STN_MOVE d ON c.MOVE_ID = d.ID
              INNER JOIN hrdbuser.ST_BRANCH f ON c.BRANCH_ID = f.ID AND f.ISACTIVE = 1
              WHERE c.POS_ID!=2020102 AND a.INOUT = 0 AND a.YEAR = " + yr+ @" AND a.MONTH IN(" + strMonthList + @") AND TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd') BETWEEN TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') AND SYSDATE AND MOD(TO_CHAR(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd'), 'J'), 7) + 1 IN(1, 2, 3, 4, 5, 6, 7)
              GROUP BY a.MONTH, a.INOUT, b.ID, TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd')
            ) b ON a.ST_ID = b.ST_ID AND a.DT = b.DT  
          ) a
          LEFT JOIN(
            SELECT DT, STAFFS_ID, MAX(TP) as TP
            FROM(
              SELECT b.DT, a.STAFFS_ID, 11 as TP
              FROM hrdbuser.ST_CHULUUDAYF3 a,
              (
                SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                FROM DUAL
                CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
              ) b
              WHERE
                b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
              UNION ALL
              SELECT b.DT, a.STAFFS_ID, 12 as TP
              FROM hrdbuser.ST_CHULUUDAYT2 a,
              (
                SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                FROM DUAL
                CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
              ) b
              WHERE
                a.ISRECEIVED = 1 AND
                b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
              UNION ALL
              SELECT b.DT, a.STAFFS_ID, 13 as TP
              FROM hrdbuser.ST_CHULUUSICK a,
              (
                SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                FROM DUAL
                CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
              ) b
              WHERE
                b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
              UNION ALL
              SELECT b.DT, a.STAFFS_ID, 21 as TP
              FROM hrdbuser.ST_AMRALT a,
              (
                SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                FROM DUAL
                CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
              ) b
              WHERE
                a.TZISRECEIVED = 1 AND
                b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
              UNION ALL
              SELECT b.DT, a.STAFFS_ID, 31 as TP
              FROM hrdbuser.ST_TOMILOLT_STAFFS a
              INNER JOIN hrdbuser.ST_TOMILOLT c ON a.TOMILOLT_ID = c.ID,
              (
                SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                FROM DUAL
                CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
              ) b
              WHERE
                b.DT BETWEEN TO_DATE(c.FROMDATE, 'YYYY-MM-DD') AND TO_DATE(c.TODATE, 'YYYY-MM-DD')
            )
            GROUP BY DT, STAFFS_ID
          ) b ON a.DT = b.DT AND a.ST_ID = b.STAFFS_ID
        ) a
        LEFT JOIN(
          SELECT TO_DATE('" + yr+ @"-' || HOLMONTH || '-' || HOLDAY, 'YYYY-MM-DD') as DT
          FROM hrdbuser.ST_HOLIDAYOFFICIAL
          WHERE HOLMONTH IN(" + strMonthList + @")
          UNION ALL
          SELECT TO_DATE(HOLDATE, 'YYYY-MM-DD') as DT
          FROM hrdbuser.ST_HOLIDAYUNOFFICIAL
          WHERE TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'YYYY')) = "+yr+@" AND TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'MM')) IN(" + strMonthList + @")
        ) b ON a.DT = b.DT
        GROUP BY a.ST_ID, a.TP, a.DT, a.MINTM, a.MAXTM, CASE WHEN b.DT is null THEN a.ISWORK ELSE 0 END
      )
    )
    GROUP BY ST_ID
  ) a
  INNER JOIN hrdbuser.ST_STBR c ON a.ST_ID = c.STAFFS_ID AND c.ISACTIVE = 1
  INNER JOIN hrdbuser.ST_BRANCH d ON c.BRANCH_ID = d.ID AND d.ISACTIVE = 1
  INNER JOIN hrdbuser.ST_BRANCH f ON d.FATHER_ID = f.ID AND f.ISACTIVE = 1
  INNER JOIN hrdbuser.STN_POS g ON c.POS_ID = g.ID
  INNER JOIN hrdbuser.ST_STAFFS h ON a.ST_ID = h.ID
  WHERE a.WORKDAY>0
  ORDER BY f.SORT, d.SORT, g.SORT, a.ST_ID 
) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string WorkingtimeTab4t3Datatable(string yr)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = @"SELECT * FROM (
    SELECT 
      b.NAME as GAZAR_NAME, a.MNTH, ROUND(((a.WORKDAY - (a.TASALSANDAYSUM + a.HOTSORSONDAYSUM + a.ERTDAYSUM)) / a.WORKDAY) * 100, 2) as PER, b.SORT
    FROM (
      SELECT FATHER_ID as GAZAR_ID, TO_NUMBER(TO_CHAR(DT,'MM')) as MNTH, 
          SUM(ISWORK) as WORKDAY,
          SUM(CHOLOODAY) as CHOLOODAYSUM,
          SUM(UWCHTEIDAY) as UWCHTEIDAYSUM,
          SUM(AMRALTDAY) as AMRALTDAYSUM,
          SUM(TOMILOLTDAY) as TOMILOLTDAYSUM,
          SUM(ISTASALSAN) as TASALSANDAYSUM,
          SUM(HOTSORSONMINUTE) as HOTSORSONMINUTESUM,
          SUM(HOTSORSONDAY) as HOTSORSONDAYSUM,
          SUM(ERTMINUTE) as ERTMINUTESUM,
          SUM(ERTDAY) as ERTDAYSUM,
          SUM(OROIMINUTE) as OROIMINUTESUM,
          SUM(OROIDAY) as OROIDAYSUM
        FROM(
          SELECT FATHER_ID, ST_ID, TP, DT, MINTM, MAXTM, ISWORK,
            CASE WHEN TP = 11 AND ISWORK = 1 OR TP = 12 THEN 1 ELSE 0 END as CHOLOODAY,
            CASE WHEN TP = 13 AND ISWORK = 1 THEN 1 ELSE 0 END as UWCHTEIDAY,
            CASE WHEN TP = 21 AND ISWORK = 1 THEN 1 ELSE 0 END as AMRALTDAY,
            CASE WHEN TP = 31 AND ISWORK = 1 THEN 1 ELSE 0 END as TOMILOLTDAY,
            CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM = MAXTM THEN 1 ELSE 0 END as ISTASALSAN,
            CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'hotsorson', 'minute') ELSE 0 END as HOTSORSONMINUTE,
            CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'hotsorson', 'day') ELSE 0 END as HOTSORSONDAY,
            CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'ert', 'minute') ELSE 0 END as ERTMINUTE,
            CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'ert', 'day') ELSE 0 END as ERTDAY,
            CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'oroi', 'minute') ELSE 0 END as OROIMINUTE,
            CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'oroi', 'day') ELSE 0 END as OROIDAY
          FROM(
            SELECT a.FATHER_ID, a.ST_ID, a.TP, a.DT, a.MINTM, a.MAXTM, CASE WHEN b.DT is null THEN a.ISWORK ELSE 0 END as ISWORK
            FROM(
              SELECT a.FATHER_ID, a.ST_ID, NVL(b.TP, 0) as TP, a.DT, a.MINTM, a.MAXTM, a.ISWORK
              FROM(
                SELECT a.FATHER_ID, a.ST_ID, a.DT, NVL(b.TP, 0) as TP, NVL(b.MINTM, '00:00:00') as MINTM, NVL(b.MAXTM, '00:00:00') as MAXTM, a.ISWORK
                FROM(
                  SELECT a.FATHER_ID, a.STAFFS_ID as ST_ID, a.DT, CASE WHEN b.DT IS NULL THEN a.ISWORK ELSE 1 END as ISWORK
                  FROM ( 
                    SELECT a.ID, c.FATHER_ID, b.STAFFS_ID, c.FATHER_ID as GAZAR_ID, c.ID as HELTES_ID, a.DT, CASE WHEN(MOD(TO_CHAR(a.DT, 'J'), 7) + 1) = 6 OR(MOD(TO_CHAR(a.DT, 'J'), 7) + 1) = 7 THEN 0 ELSE 1 END as ISWORK
                    FROM (
                      SELECT a.ID, a.BEGINDT, a.ENDDT, b.DT
                      FROM (
                        SELECT a.ID, 
                          CASE 
                            WHEN TO_DATE(a.DT,'YYYY-MM-DD')>TO_DATE('" + yr+@"-01-01','YYYY-MM-DD') 
                            THEN a.DT 
                            ELSE '"+yr+@"-01-01' 
                          END as BEGINDT, 
                          CASE 
                            --WHEN TO_DATE(CASE WHEN c.ACTIVE=0 THEN NVL(a.ENDDT,a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE,'YYYY-MM-DD')) END,'YYYY-MM-DD')<LAST_DAY(TO_DATE('"+yr+@"-12-01','YYYY-MM-DD')) 
                            --THEN CASE WHEN c.ACTIVE=0 THEN NVL(a.ENDDT,a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE,'YYYY-MM-DD')) END ELSE TO_CHAR(LAST_DAY(TO_DATE('"+yr+@"-12-01','YYYY-MM-DD')),'YYYY-MM-DD') END as ENDDT
                            WHEN TO_DATE(CASE WHEN c.ACTIVE=0 THEN TO_CHAR((TO_DATE(NVL(a.ENDDT,a.DT),'YYYY-MM-DD')-1),'YYYY-MM-DD') ELSE NVL(TO_CHAR((TO_DATE(a.ENDDT,'YYYY-MM-DD')-1),'YYYY-MM-DD'), TO_CHAR(SYSDATE,'YYYY-MM-DD')) END,'YYYY-MM-DD')<LAST_DAY(TO_DATE('"+yr+@"-12-01','YYYY-MM-DD')) 
                            THEN CASE WHEN c.ACTIVE=0 THEN TO_CHAR((TO_DATE(NVL(a.ENDDT,a.DT),'YYYY-MM-DD')-1),'YYYY-MM-DD') ELSE NVL(TO_CHAR((TO_DATE(a.ENDDT,'YYYY-MM-DD')-1),'YYYY-MM-DD'), TO_CHAR(SYSDATE,'YYYY-MM-DD')) END ELSE TO_CHAR(LAST_DAY(TO_DATE('"+yr+ @"-12-01','YYYY-MM-DD')),'YYYY-MM-DD') END as ENDDT
                        FROM hrdbuser.ST_STBR a
                        INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID=b.ID AND b.ISACTIVE=1
                        INNER JOIN hrdbuser.STN_MOVE c ON a.MOVE_ID=c.ID
                        WHERE a.POS_ID!=2020102 AND c.ACTIVE=1
                        AND ((
                            TO_DATE('" + yr + @"-01-01','YYYY-MM-DD') 
                            BETWEEN TO_DATE(a.DT,'YYYY-MM-DD') AND TO_DATE(CASE WHEN c.ACTIVE=0 THEN NVL(a.ENDDT,a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE,'YYYY-MM-DD')) END,'YYYY-MM-DD')
                            OR 
                            LAST_DAY(TO_DATE('" + yr + @"-12-01','YYYY-MM-DD')) 
                            BETWEEN TO_DATE(a.DT,'YYYY-MM-DD') AND TO_DATE(CASE WHEN c.ACTIVE=0 THEN NVL(a.ENDDT,a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE,'YYYY-MM-DD')) END,'YYYY-MM-DD')
                          ) OR 
                            (
                              TO_DATE('" + yr + @"-01-01','YYYY-MM-DD')<TO_DATE(a.DT,'YYYY-MM-DD') AND LAST_DAY(TO_DATE('" + yr + @"-12-01','YYYY-MM-DD'))>TO_DATE(a.DT,'YYYY-MM-DD')
                            ))
                      ) a, (
                        SELECT DT
                        FROM(
                          SELECT(TO_DATE('" + yr+@"-01-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                          FROM DUAL
                          CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('"+yr+@"-12-01', 'yyyy-mm-dd')) + 1) - TO_DATE('"+yr+@"-01-01', 'yyyy-mm-dd')
                        )
                        WHERE DT BETWEEN TO_DATE('"+yr+@"-01-01', 'yyyy-mm-dd') AND SYSDATE AND MOD(TO_CHAR(DT, 'J'), 7) + 1 IN(1, 2, 3, 4, 5, 6, 7)
                      ) b
                    ) a
                    INNER JOIN hrdbuser.ST_STBR b ON a.ID=b.ID
                    INNER JOIN hrdbuser.ST_BRANCH c ON b.BRANCH_ID=c.ID AND c.ISACTIVE=1
                    WHERE a.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD') AND b.POS_ID!=2020102
                  ) a
                  LEFT JOIN(
                    SELECT TO_DATE(HOLDATE, 'YYYY-MM-DD') as DT FROM hrdbuser.ST_HOLIDAYISWORK WHERE TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'YYYY')) = "+yr+ @" AND TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'MM')) IN(1,2,3,4,5,6,7,8,9,10,11,12)
                  ) b ON a.DT = b.DT  
                ) a
                LEFT JOIN(
                  SELECT a.MONTH, a.INOUT as TP, b.ID as ST_ID, TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd') as DT, TO_CHAR(MIN(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY || ' ' || a.HOUR || ':' || a.MINUTE || ':' || a.SECOND, 'yyyy-mm-dd hh24:mi:ss')), 'hh24:mi:ss') as MINTM, TO_CHAR(MAX(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY || ' ' || a.HOUR || ':' || a.MINUTE || ':' || a.SECOND, 'yyyy-mm-dd hh24:mi:ss')), 'hh24:mi:ss') as MAXTM
                  FROM STN_TRCDLOG a
                  INNER JOIN hrdbuser.ST_STAFFS b ON a.ENO = b.FINGERID
                  INNER JOIN hrdbuser.ST_STBR c ON b.ID = c.STAFFS_ID
                  INNER JOIN hrdbuser.STN_MOVE d ON c.MOVE_ID = d.ID
                  INNER JOIN hrdbuser.ST_BRANCH f ON c.BRANCH_ID = f.ID AND f.ISACTIVE = 1
                  WHERE c.POS_ID!=2020102 AND a.INOUT = 0 AND a.YEAR = " + yr+@" AND a.MONTH IN(1,2,3,4,5,6,7,8,9,10,11,12) AND TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd') BETWEEN TO_DATE('"+yr+ @"-01-01', 'yyyy-mm-dd') AND SYSDATE AND MOD(TO_CHAR(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd'), 'J'), 7) + 1 IN(1, 2, 3, 4, 5, 6, 7)
                  GROUP BY a.MONTH, a.INOUT, b.ID, TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd')
                ) b ON a.ST_ID = b.ST_ID AND a.DT = b.DT  
              ) a
              LEFT JOIN(
                SELECT DT, STAFFS_ID, MAX(TP) as TP
                FROM(
                  SELECT b.DT, a.STAFFS_ID, 11 as TP
                  FROM hrdbuser.ST_CHULUUDAYF3 a,
                  (
                    SELECT(TO_DATE('" + yr + @"-01-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                    FROM DUAL
                    CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + @"-12-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + @"-01-01', 'yyyy-mm-dd')
                  ) b
                  WHERE
                    b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
                  UNION ALL
                  SELECT b.DT, a.STAFFS_ID, 12 as TP
                  FROM hrdbuser.ST_CHULUUDAYT2 a,
                  (
                    SELECT(TO_DATE('" + yr + @"-01-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                    FROM DUAL
                    CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + @"-12-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + @"-01-01', 'yyyy-mm-dd')
                  ) b
                  WHERE
                    a.ISRECEIVED = 1 AND
                    b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
                  UNION ALL
                  SELECT b.DT, a.STAFFS_ID, 13 as TP
                  FROM hrdbuser.ST_CHULUUSICK a,
                  (
                    SELECT(TO_DATE('" + yr + @"-01-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                    FROM DUAL
                    CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + @"-12-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + @"-01-01', 'yyyy-mm-dd')
                  ) b
                  WHERE
                    b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
                  UNION ALL
                  SELECT b.DT, a.STAFFS_ID, 21 as TP
                  FROM hrdbuser.ST_AMRALT a,
                  (
                    SELECT(TO_DATE('" + yr + @"-01-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                    FROM DUAL
                    CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + @"-12-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + @"-01-01', 'yyyy-mm-dd')
                  ) b
                  WHERE
                    a.TZISRECEIVED = 1 AND
                    b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
                  UNION ALL
                  SELECT b.DT, a.STAFFS_ID, 31 as TP
                  FROM hrdbuser.ST_TOMILOLT_STAFFS a
                  INNER JOIN hrdbuser.ST_TOMILOLT c ON a.TOMILOLT_ID = c.ID,
                  (
                    SELECT(TO_DATE('" + yr + @"-01-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                    FROM DUAL
                    CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + @"-12-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + @"-01-01', 'yyyy-mm-dd')
                  ) b
                  WHERE
                    b.DT BETWEEN TO_DATE(c.FROMDATE, 'YYYY-MM-DD') AND TO_DATE(c.TODATE, 'YYYY-MM-DD')
                )
                GROUP BY DT, STAFFS_ID
              ) b ON a.DT = b.DT AND a.ST_ID = b.STAFFS_ID
            ) a
            LEFT JOIN(
              SELECT TO_DATE('" + yr+ @"-' || HOLMONTH || '-' || HOLDAY, 'YYYY-MM-DD') as DT
              FROM hrdbuser.ST_HOLIDAYOFFICIAL
              WHERE HOLMONTH IN(1,2,3,4,5,6,7,8,9,10,11,12)
              UNION ALL
              SELECT TO_DATE(HOLDATE, 'YYYY-MM-DD') as DT
              FROM hrdbuser.ST_HOLIDAYUNOFFICIAL
              WHERE TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'YYYY')) = " + yr+ @" AND TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'MM')) IN(1,2,3,4,5,6,7,8,9,10,11,12)
            ) b ON a.DT = b.DT
            GROUP BY a.FATHER_ID, a.ST_ID, a.TP, a.DT, a.MINTM, a.MAXTM, CASE WHEN b.DT is null THEN a.ISWORK ELSE 0 END
          )
        )
        GROUP BY FATHER_ID, TO_NUMBER(TO_CHAR(DT,'MM'))
    ) a
    INNER JOIN hrdbuser.ST_BRANCH b ON a.GAZAR_ID=b.ID AND b.ISACTIVE=1
  )
  pivot(
    AVG(PER) ";
                strQry += "FOR MNTH IN (1 as \"Jan\",2 as \"Feb\",3 as \"Mar\",4 as \"Apr\",5 as \"May\",6 as \"Jun\",7 as \"Jul\",8 as \"Aug\",9 as \"Sep\",10 as \"Oct\",11 as \"Nov\",12 as \"Dec\") ) ORDER BY SORT";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string WorkingtimeTab3Datatable(string yr, string month, string month2, string gazar, string heltes, string stid)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strMonthList = "";
            for (int i = Int32.Parse(month); i <= Int32.Parse(month2); i++)
            {
                if (strMonthList == "") strMonthList += i.ToString();
                else strMonthList += "," + i.ToString();
            }
            if (gazar != "") gazar = " AND c.FATHER_ID=" + gazar;
            if (heltes != "") heltes = " AND c.ID=" + heltes;
            if (stid != "") stid = " AND b.STAFFS_ID=" + stid;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = "";
                strQry = @"SELECT ROWNUM as ROWNO, a.* 
FROM (
  SELECT 
    a.ST_ID, 
    CASE WHEN d.ID = d.FATHER_ID THEN d.INITNAME ELSE f.INITNAME || '-' || d.INITNAME END as NEGJ, 
    g.NAME as POS_NAME, 
    SUBSTR(h.LNAME, 0, 1) || '.' || SUBSTR(h.FNAME, 1, 1) || LOWER(SUBSTR(h.FNAME, 2)) as STAFFNAME, 
    a.WORKDAY, 
    a.CHOLOODAYSUM, 
    a.UWCHTEIDAYSUM, 
    a.AMRALTDAYSUM, 
    a.TOMILOLTDAYSUM, 
    ROUND((a.WORKDAY - (a.CHOLOODAYSUM + a.UWCHTEIDAYSUM + a.AMRALTDAYSUM + a.TOMILOLTDAYSUM + a.TASALSANDAYSUM + a.HOTSORSONDAYSUM + a.ERTDAYSUM)), 2) as WORKEDAY, 
    a.TASALSANDAYSUM, 
    ROUND(a.HOTSORSONMINUTESUM, 1) as HOTSORSONMINUTESUM, 
    ROUND(a.HOTSORSONDAYSUM,1) as HOTSORSONDAYSUM, 
    ROUND(a.ERTMINUTESUM, 1) as ERTMINUTESUM, 
    ROUND(a.OROIMINUTESUM, 1) as OROIMINUTESUM, 
    ROUND((a.WORKDAY - (a.TASALSANDAYSUM + a.HOTSORSONDAYSUM + a.ERTDAYSUM)), 2) as EVALWORKEDDAY, 
    ROUND(((a.WORKDAY - (a.TASALSANDAYSUM + a.HOTSORSONDAYSUM + a.ERTDAYSUM)) / a.WORKDAY) * 100, 2) as PER
  FROM(
    SELECT ST_ID,
      SUM(ISWORK) as WORKDAY,
      SUM(CHOLOODAY) as CHOLOODAYSUM,
      SUM(UWCHTEIDAY) as UWCHTEIDAYSUM,
      SUM(AMRALTDAY) as AMRALTDAYSUM,
      SUM(TOMILOLTDAY) as TOMILOLTDAYSUM,
      SUM(ISTASALSAN) as TASALSANDAYSUM,
      SUM(HOTSORSONMINUTE) as HOTSORSONMINUTESUM,
      SUM(HOTSORSONDAY) as HOTSORSONDAYSUM,
      SUM(ERTMINUTE) as ERTMINUTESUM,
      SUM(ERTDAY) as ERTDAYSUM,
      SUM(OROIMINUTE) as OROIMINUTESUM,
      SUM(OROIDAY) as OROIDAYSUM
    FROM(
      SELECT ST_ID, TP, DT, MINTM, MAXTM, ISWORK,
        CASE WHEN TP = 11 AND ISWORK = 1 OR TP = 12 THEN 1 ELSE 0 END as CHOLOODAY,
        CASE WHEN TP = 13 AND ISWORK = 1 THEN 1 ELSE 0 END as UWCHTEIDAY,
        CASE WHEN TP = 21 AND ISWORK = 1 THEN 1 ELSE 0 END as AMRALTDAY,
        CASE WHEN TP = 31 AND ISWORK = 1 THEN 1 ELSE 0 END as TOMILOLTDAY,
        CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM = MAXTM THEN 1 ELSE 0 END as ISTASALSAN,
        CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'hotsorson', 'minute') ELSE 0 END as HOTSORSONMINUTE,
        CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'hotsorson', 'day') ELSE 0 END as HOTSORSONDAY,
        CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'ert', 'minute') ELSE 0 END as ERTMINUTE,
        CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'ert', 'day') ELSE 0 END as ERTDAY,
        CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'oroi', 'minute') ELSE 0 END as OROIMINUTE,
        CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'oroi', 'day') ELSE 0 END as OROIDAY
      FROM(
        SELECT a.ST_ID, a.TP, a.DT, a.MINTM, a.MAXTM, CASE WHEN b.DT is null THEN a.ISWORK ELSE 0 END as ISWORK
        FROM(
          SELECT a.ST_ID, NVL(b.TP, 0) as TP, a.DT, a.MINTM, a.MAXTM, a.ISWORK
          FROM(
            SELECT a.ST_ID, a.DT, NVL(b.TP, 0) as TP, NVL(b.MINTM, '00:00:00') as MINTM, NVL(b.MAXTM, '00:00:00') as MAXTM, a.ISWORK
            FROM(
              SELECT a.STAFFS_ID as ST_ID, a.DT, CASE WHEN b.DT IS NULL THEN a.ISWORK ELSE 1 END as ISWORK
              FROM ( 
                SELECT a.ID, b.STAFFS_ID, c.FATHER_ID as GAZAR_ID, c.ID as HELTES_ID, a.DT, CASE WHEN(MOD(TO_CHAR(a.DT, 'J'), 7) + 1) = 6 OR(MOD(TO_CHAR(a.DT, 'J'), 7) + 1) = 7 THEN 0 ELSE 1 END as ISWORK
                FROM (
                  SELECT a.ID, a.BEGINDT, a.ENDDT, b.DT
                  FROM (
                    SELECT a.ID, 
                      CASE 
                        WHEN TO_DATE(a.DT,'YYYY-MM-DD')>TO_DATE('" + yr + "-" + month + @"-01','YYYY-MM-DD') 
                        THEN a.DT 
                        ELSE '" + yr + "-" + month + @"-01' 
                      END as BEGINDT, 
                      CASE 
                        --WHEN TO_DATE(CASE WHEN c.ACTIVE=0 THEN NVL(a.ENDDT,a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE,'YYYY-MM-DD')) END,'YYYY-MM-DD')<LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01','YYYY-MM-DD')) 
                        --THEN CASE WHEN c.ACTIVE=0 THEN NVL(a.ENDDT,a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE,'YYYY-MM-DD')) END ELSE TO_CHAR(LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01','YYYY-MM-DD')),'YYYY-MM-DD') END as ENDDT
                        WHEN TO_DATE(CASE WHEN c.ACTIVE=0 THEN TO_CHAR((TO_DATE(NVL(a.ENDDT,a.DT),'YYYY-MM-DD')-1),'YYYY-MM-DD') ELSE NVL(TO_CHAR((TO_DATE(a.ENDDT,'YYYY-MM-DD')-1),'YYYY-MM-DD'), TO_CHAR(SYSDATE,'YYYY-MM-DD')) END,'YYYY-MM-DD')<LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01','YYYY-MM-DD')) 
                        THEN CASE WHEN c.ACTIVE=0 THEN TO_CHAR((TO_DATE(NVL(a.ENDDT,a.DT),'YYYY-MM-DD')-1),'YYYY-MM-DD') ELSE NVL(TO_CHAR((TO_DATE(a.ENDDT,'YYYY-MM-DD')-1),'YYYY-MM-DD'), TO_CHAR(SYSDATE,'YYYY-MM-DD')) END ELSE TO_CHAR(LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01','YYYY-MM-DD')),'YYYY-MM-DD') END as ENDDT
                    FROM hrdbuser.ST_STBR a
                    INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID=b.ID AND b.ISACTIVE=1
                    INNER JOIN hrdbuser.STN_MOVE c ON a.MOVE_ID=c.ID
                    WHERE a.POS_ID!=2020102 AND c.ACTIVE=1
                    AND ((
                        TO_DATE('" + yr + "-" + month + @"-01','YYYY-MM-DD') 
                        BETWEEN TO_DATE(a.DT,'YYYY-MM-DD') AND TO_DATE(CASE WHEN c.ACTIVE=0 THEN NVL(a.ENDDT,a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE,'YYYY-MM-DD')) END,'YYYY-MM-DD')
                        OR 
                        LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01','YYYY-MM-DD')) 
                        BETWEEN TO_DATE(a.DT,'YYYY-MM-DD') AND TO_DATE(CASE WHEN c.ACTIVE=0 THEN NVL(a.ENDDT,a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE,'YYYY-MM-DD')) END,'YYYY-MM-DD')
                      ) OR 
                        (
                          TO_DATE('" + yr + "-" + month + @"-01','YYYY-MM-DD')<TO_DATE(a.DT,'YYYY-MM-DD') AND LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01','YYYY-MM-DD'))>TO_DATE(a.DT,'YYYY-MM-DD')
                        ))
                  ) a, (
                    SELECT DT
                    FROM(
                      SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                      FROM DUAL
                      CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                    )
                    WHERE DT BETWEEN TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') AND SYSDATE AND MOD(TO_CHAR(DT, 'J'), 7) + 1 IN(1, 2, 3, 4, 5, 6, 7)
                  ) b
                ) a
                INNER JOIN hrdbuser.ST_STBR b ON a.ID=b.ID
                INNER JOIN hrdbuser.ST_BRANCH c ON b.BRANCH_ID=c.ID AND c.ISACTIVE=1
                WHERE a.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD') AND b.POS_ID!=2020102" + gazar + heltes + stid + @"
              ) a
              LEFT JOIN(
                SELECT TO_DATE(HOLDATE, 'YYYY-MM-DD') as DT FROM hrdbuser.ST_HOLIDAYISWORK WHERE TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'YYYY')) = " + yr + @" AND TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'MM')) IN(" + strMonthList + @")
              ) b ON a.DT = b.DT  
            ) a
            LEFT JOIN(
              SELECT a.MONTH, a.INOUT as TP, b.ID as ST_ID, TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd') as DT, TO_CHAR(MIN(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY || ' ' || a.HOUR || ':' || a.MINUTE || ':' || a.SECOND, 'yyyy-mm-dd hh24:mi:ss')), 'hh24:mi:ss') as MINTM, TO_CHAR(MAX(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY || ' ' || a.HOUR || ':' || a.MINUTE || ':' || a.SECOND, 'yyyy-mm-dd hh24:mi:ss')), 'hh24:mi:ss') as MAXTM
              FROM STN_TRCDLOG a
              INNER JOIN hrdbuser.ST_STAFFS b ON a.ENO = b.FINGERID
              INNER JOIN hrdbuser.ST_STBR c ON b.ID = c.STAFFS_ID
              INNER JOIN hrdbuser.STN_MOVE d ON c.MOVE_ID = d.ID
              INNER JOIN hrdbuser.ST_BRANCH f ON c.BRANCH_ID = f.ID AND f.ISACTIVE = 1
              WHERE c.POS_ID!=2020102 AND a.INOUT = 0 AND a.YEAR = " + yr + @" AND a.MONTH IN(" + strMonthList + @") AND TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd') BETWEEN TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') AND SYSDATE AND MOD(TO_CHAR(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd'), 'J'), 7) + 1 IN(1, 2, 3, 4, 5, 6, 7)
              GROUP BY a.MONTH, a.INOUT, b.ID, TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd')
            ) b ON a.ST_ID = b.ST_ID AND a.DT = b.DT  
          ) a
          LEFT JOIN(
            SELECT DT, STAFFS_ID, MAX(TP) as TP
            FROM(
              SELECT b.DT, a.STAFFS_ID, 11 as TP
              FROM hrdbuser.ST_CHULUUDAYF3 a,
              (
                SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                FROM DUAL
                CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
              ) b
              WHERE
                b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
              UNION ALL
              SELECT b.DT, a.STAFFS_ID, 12 as TP
              FROM hrdbuser.ST_CHULUUDAYT2 a,
              (
                SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                FROM DUAL
                CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
              ) b
              WHERE
                a.ISRECEIVED = 1 AND
                b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
              UNION ALL
              SELECT b.DT, a.STAFFS_ID, 13 as TP
              FROM hrdbuser.ST_CHULUUSICK a,
              (
                SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                FROM DUAL
                CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
              ) b
              WHERE
                b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
              UNION ALL
              SELECT b.DT, a.STAFFS_ID, 21 as TP
              FROM hrdbuser.ST_AMRALT a,
              (
                SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                FROM DUAL
                CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
              ) b
              WHERE
                a.TZISRECEIVED = 1 AND
                b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
              UNION ALL
              SELECT b.DT, a.STAFFS_ID, 31 as TP
              FROM hrdbuser.ST_TOMILOLT_STAFFS a
              INNER JOIN hrdbuser.ST_TOMILOLT c ON a.TOMILOLT_ID = c.ID,
              (
                SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                FROM DUAL
                CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
              ) b
              WHERE
                b.DT BETWEEN TO_DATE(c.FROMDATE, 'YYYY-MM-DD') AND TO_DATE(c.TODATE, 'YYYY-MM-DD')
            )
            GROUP BY DT, STAFFS_ID
          ) b ON a.DT = b.DT AND a.ST_ID = b.STAFFS_ID
        ) a
        LEFT JOIN(
          SELECT TO_DATE('" + yr + @"-' || HOLMONTH || '-' || HOLDAY, 'YYYY-MM-DD') as DT
          FROM hrdbuser.ST_HOLIDAYOFFICIAL
          WHERE HOLMONTH IN(" + strMonthList + @")
          UNION ALL
          SELECT TO_DATE(HOLDATE, 'YYYY-MM-DD') as DT
          FROM hrdbuser.ST_HOLIDAYUNOFFICIAL
          WHERE TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'YYYY')) = " + yr + @" AND TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'MM')) IN(" + strMonthList + @")
        ) b ON a.DT = b.DT
        GROUP BY a.ST_ID, a.TP, a.DT, a.MINTM, a.MAXTM, CASE WHEN b.DT is null THEN a.ISWORK ELSE 0 END
      )
    )
    GROUP BY ST_ID
  ) a
  INNER JOIN hrdbuser.ST_STBR c ON a.ST_ID = c.STAFFS_ID AND c.ISACTIVE = 1
  INNER JOIN hrdbuser.ST_BRANCH d ON c.BRANCH_ID = d.ID AND d.ISACTIVE = 1
  INNER JOIN hrdbuser.ST_BRANCH f ON d.FATHER_ID = f.ID AND f.ISACTIVE = 1
  INNER JOIN hrdbuser.STN_POS g ON c.POS_ID = g.ID
  INNER JOIN hrdbuser.ST_STAFFS h ON a.ST_ID = h.ID
  WHERE a.WORKDAY>0
  ORDER BY f.SORT, d.SORT, g.SORT, a.ST_ID 
) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string WorkingtimeTab4Datatable(string yr, string month)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            //string yr1 = yr, month1 = (Int32.Parse(month) + 1).ToString();
            //if (month == "12")
            //{
            //    yr1 = (Int32.Parse(yr) + 1).ToString();
            //    month1 = "1";
            //}
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = "";
                strQry = @"SELECT ROWNUM as ROWNO, a.*
FROM (
    SELECT 
    b.NAME as BR_NAME, a.WORKDAY, ROUND(a.WORKDAY-(a.TASALSANDAYSUM + a.HOTSORSONDAYSUM + a.ERTDAYSUM),2) as EVALWORKEDDAY, ROUND(((a.WORKDAY - (a.TASALSANDAYSUM + a.HOTSORSONDAYSUM + a.ERTDAYSUM)) / a.WORKDAY) * 100, 2) as PER, ROUND((ROUND(((a.WORKDAY - (a.TASALSANDAYSUM + a.HOTSORSONDAYSUM + a.ERTDAYSUM)) / a.WORKDAY) * 100, 2) * 0.1),2) as PNT, b.SORT
    FROM (  
        SELECT FATHER_ID as GAZAR_ID,
          SUM(ISWORK) as WORKDAY,
          SUM(CHOLOODAY) as CHOLOODAYSUM,
          SUM(UWCHTEIDAY) as UWCHTEIDAYSUM,
          SUM(AMRALTDAY) as AMRALTDAYSUM,
          SUM(TOMILOLTDAY) as TOMILOLTDAYSUM,
          SUM(ISTASALSAN) as TASALSANDAYSUM,
          SUM(HOTSORSONMINUTE) as HOTSORSONMINUTESUM,
          SUM(HOTSORSONDAY) as HOTSORSONDAYSUM,
          SUM(ERTMINUTE) as ERTMINUTESUM,
          SUM(ERTDAY) as ERTDAYSUM,
          SUM(OROIMINUTE) as OROIMINUTESUM,
          SUM(OROIDAY) as OROIDAYSUM
        FROM(
          SELECT FATHER_ID, ST_ID, TP, DT, MINTM, MAXTM, ISWORK,
            CASE WHEN TP = 11 AND ISWORK = 1 OR TP = 12 THEN 1 ELSE 0 END as CHOLOODAY,
            CASE WHEN TP = 13 AND ISWORK = 1 THEN 1 ELSE 0 END as UWCHTEIDAY,
            CASE WHEN TP = 21 AND ISWORK = 1 THEN 1 ELSE 0 END as AMRALTDAY,
            CASE WHEN TP = 31 AND ISWORK = 1 THEN 1 ELSE 0 END as TOMILOLTDAY,
            CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM = MAXTM THEN 1 ELSE 0 END as ISTASALSAN,
            CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'hotsorson', 'minute') ELSE 0 END as HOTSORSONMINUTE,
            CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'hotsorson', 'day') ELSE 0 END as HOTSORSONDAY,
            CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'ert', 'minute') ELSE 0 END as ERTMINUTE,
            CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'ert', 'day') ELSE 0 END as ERTDAY,
            CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'oroi', 'minute') ELSE 0 END as OROIMINUTE,
            CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'oroi', 'day') ELSE 0 END as OROIDAY
          FROM(
            SELECT a.FATHER_ID, a.ST_ID, a.TP, a.DT, a.MINTM, a.MAXTM, CASE WHEN b.DT is null THEN a.ISWORK ELSE 0 END as ISWORK
            FROM(
              SELECT a.FATHER_ID, a.ST_ID, NVL(b.TP, 0) as TP, a.DT, a.MINTM, a.MAXTM, a.ISWORK
              FROM(
                SELECT a.FATHER_ID, a.ST_ID, a.DT, NVL(b.TP, 0) as TP, NVL(b.MINTM, '00:00:00') as MINTM, NVL(b.MAXTM, '00:00:00') as MAXTM, a.ISWORK
                FROM(
                  SELECT a.FATHER_ID, a.STAFFS_ID as ST_ID, a.DT, CASE WHEN b.DT IS NULL THEN a.ISWORK ELSE 1 END as ISWORK
                  FROM ( 
                    SELECT a.ID, c.FATHER_ID, b.STAFFS_ID, c.FATHER_ID as GAZAR_ID, c.ID as HELTES_ID, a.DT, CASE WHEN(MOD(TO_CHAR(a.DT, 'J'), 7) + 1) = 6 OR(MOD(TO_CHAR(a.DT, 'J'), 7) + 1) = 7 THEN 0 ELSE 1 END as ISWORK
                    FROM (
                      SELECT a.ID, a.BEGINDT, a.ENDDT, b.DT
                      FROM (
                        SELECT a.ID, 
                          CASE 
                            WHEN TO_DATE(a.DT,'YYYY-MM-DD')>TO_DATE('" + yr + "-" + month + @"-01','YYYY-MM-DD') 
                            THEN a.DT 
                            ELSE '" + yr + "-" + month + @"-01' 
                          END as BEGINDT, 
                          CASE 
                            --WHEN TO_DATE(CASE WHEN c.ACTIVE=0 THEN NVL(a.ENDDT,a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE,'YYYY-MM-DD')) END,'YYYY-MM-DD')<LAST_DAY(TO_DATE('"+yr+"-"+month+ @"-01','YYYY-MM-DD')) 
                            --THEN CASE WHEN c.ACTIVE=0 THEN NVL(a.ENDDT,a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE,'YYYY-MM-DD')) END ELSE TO_CHAR(LAST_DAY(TO_DATE('"+yr+"-"+month+ @"-01','YYYY-MM-DD')),'YYYY-MM-DD') END as ENDDT
                            WHEN TO_DATE(CASE WHEN c.ACTIVE=0 THEN TO_CHAR((TO_DATE(NVL(a.ENDDT,a.DT),'YYYY-MM-DD')-1),'YYYY-MM-DD') ELSE NVL(TO_CHAR((TO_DATE(a.ENDDT,'YYYY-MM-DD')-1),'YYYY-MM-DD'), TO_CHAR(SYSDATE,'YYYY-MM-DD')) END,'YYYY-MM-DD')<LAST_DAY(TO_DATE('"+yr+"-"+month+ @"-01','YYYY-MM-DD')) 
                            THEN CASE WHEN c.ACTIVE=0 THEN TO_CHAR((TO_DATE(NVL(a.ENDDT,a.DT),'YYYY-MM-DD')-1),'YYYY-MM-DD') ELSE NVL(TO_CHAR((TO_DATE(a.ENDDT,'YYYY-MM-DD')-1),'YYYY-MM-DD'), TO_CHAR(SYSDATE,'YYYY-MM-DD')) END ELSE TO_CHAR(LAST_DAY(TO_DATE('"+yr+"-"+month+ @"-01','YYYY-MM-DD')),'YYYY-MM-DD') END as ENDDT
                        FROM hrdbuser.ST_STBR a
                        INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID=b.ID AND b.ISACTIVE=1
                        INNER JOIN hrdbuser.STN_MOVE c ON a.MOVE_ID=c.ID
                        WHERE a.POS_ID!=2020102 AND c.ACTIVE=1
                        AND ((
                            TO_DATE('" + yr + "-" + month + @"-01','YYYY-MM-DD') 
                            BETWEEN TO_DATE(a.DT,'YYYY-MM-DD') AND TO_DATE(CASE WHEN c.ACTIVE=0 THEN NVL(a.ENDDT,a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE,'YYYY-MM-DD')) END,'YYYY-MM-DD')
                            OR 
                            LAST_DAY(TO_DATE('" + yr + "-" + month + @"-01','YYYY-MM-DD')) 
                            BETWEEN TO_DATE(a.DT,'YYYY-MM-DD') AND TO_DATE(CASE WHEN c.ACTIVE=0 THEN NVL(a.ENDDT,a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE,'YYYY-MM-DD')) END,'YYYY-MM-DD')
                          ) OR 
                            (
                              TO_DATE('" + yr + "-" + month + @"-01','YYYY-MM-DD')<TO_DATE(a.DT,'YYYY-MM-DD') AND LAST_DAY(TO_DATE('" + yr + "-" + month + @"-01','YYYY-MM-DD'))>TO_DATE(a.DT,'YYYY-MM-DD')
                            ))
                      ) a, (
                        SELECT DT
                        FROM(
                          SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                          FROM DUAL
                          CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('"+yr+"-"+month+ @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                        )
                        WHERE DT BETWEEN TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') AND SYSDATE AND MOD(TO_CHAR(DT, 'J'), 7) + 1 IN(1, 2, 3, 4, 5, 6, 7)
                      ) b
                    ) a
                    INNER JOIN hrdbuser.ST_STBR b ON a.ID=b.ID
                    INNER JOIN hrdbuser.ST_BRANCH c ON b.BRANCH_ID=c.ID AND c.ISACTIVE=1
                    WHERE a.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD') AND b.POS_ID!=2020102
                  ) a
                  LEFT JOIN(
                    SELECT TO_DATE(HOLDATE, 'YYYY-MM-DD') as DT FROM hrdbuser.ST_HOLIDAYISWORK WHERE TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'YYYY')) = " + yr + @" AND TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'MM')) IN(" + month + @")
                  ) b ON a.DT = b.DT  
                ) a
                LEFT JOIN(
                  SELECT a.MONTH, a.INOUT as TP, b.ID as ST_ID, TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd') as DT, TO_CHAR(MIN(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY || ' ' || a.HOUR || ':' || a.MINUTE || ':' || a.SECOND, 'yyyy-mm-dd hh24:mi:ss')), 'hh24:mi:ss') as MINTM, TO_CHAR(MAX(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY || ' ' || a.HOUR || ':' || a.MINUTE || ':' || a.SECOND, 'yyyy-mm-dd hh24:mi:ss')), 'hh24:mi:ss') as MAXTM
                  FROM STN_TRCDLOG a
                  INNER JOIN hrdbuser.ST_STAFFS b ON a.ENO = b.FINGERID
                  INNER JOIN hrdbuser.ST_STBR c ON b.ID = c.STAFFS_ID
                  INNER JOIN hrdbuser.STN_MOVE d ON c.MOVE_ID = d.ID
                  INNER JOIN hrdbuser.ST_BRANCH f ON c.BRANCH_ID = f.ID AND f.ISACTIVE = 1
                  WHERE c.POS_ID!=2020102 AND a.INOUT = 0 AND a.YEAR = " + yr + @" AND a.MONTH IN("+month+@") AND TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd') BETWEEN TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') AND SYSDATE AND MOD(TO_CHAR(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd'), 'J'), 7) + 1 IN(1, 2, 3, 4, 5, 6, 7)
                  GROUP BY a.MONTH, a.INOUT, b.ID, TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd')
                ) b ON a.ST_ID = b.ST_ID AND a.DT = b.DT  
              ) a
              LEFT JOIN(
                SELECT DT, STAFFS_ID, MAX(TP) as TP
                FROM(
                  SELECT b.DT, a.STAFFS_ID, 11 as TP
                  FROM hrdbuser.ST_CHULUUDAYF3 a,
                  (
                    SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                    FROM DUAL
                    CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                  ) b
                  WHERE
                    b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
                  UNION ALL
                  SELECT b.DT, a.STAFFS_ID, 12 as TP
                  FROM hrdbuser.ST_CHULUUDAYT2 a,
                  (
                    SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                    FROM DUAL
                    CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                  ) b
                  WHERE
                    a.ISRECEIVED = 1 AND
                    b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
                  UNION ALL
                  SELECT b.DT, a.STAFFS_ID, 13 as TP
                  FROM hrdbuser.ST_CHULUUSICK a,
                  (
                    SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                    FROM DUAL
                    CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                  ) b
                  WHERE
                    b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
                  UNION ALL
                  SELECT b.DT, a.STAFFS_ID, 21 as TP
                  FROM hrdbuser.ST_AMRALT a,
                  (
                    SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                    FROM DUAL
                    CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                  ) b
                  WHERE
                    a.TZISRECEIVED = 1 AND
                    b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
                  UNION ALL
                  SELECT b.DT, a.STAFFS_ID, 31 as TP
                  FROM hrdbuser.ST_TOMILOLT_STAFFS a
                  INNER JOIN hrdbuser.ST_TOMILOLT c ON a.TOMILOLT_ID = c.ID,
                  (
                    SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                    FROM DUAL
                    CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                  ) b
                  WHERE
                    b.DT BETWEEN TO_DATE(c.FROMDATE, 'YYYY-MM-DD') AND TO_DATE(c.TODATE, 'YYYY-MM-DD')
                )
                GROUP BY DT, STAFFS_ID
              ) b ON a.DT = b.DT AND a.ST_ID = b.STAFFS_ID
            ) a
            LEFT JOIN(
              SELECT TO_DATE('" + yr + @"-' || HOLMONTH || '-' || HOLDAY, 'YYYY-MM-DD') as DT
              FROM hrdbuser.ST_HOLIDAYOFFICIAL
              WHERE HOLMONTH IN(" + month + @")
              UNION ALL
              SELECT TO_DATE(HOLDATE, 'YYYY-MM-DD') as DT
              FROM hrdbuser.ST_HOLIDAYUNOFFICIAL
              WHERE TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'YYYY')) = " + yr + @" AND TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'MM')) IN(" + month + @")
            ) b ON a.DT = b.DT
            GROUP BY a.FATHER_ID, a.ST_ID, a.TP, a.DT, a.MINTM, a.MAXTM, CASE WHEN b.DT is null THEN a.ISWORK ELSE 0 END
          )
        )
        GROUP BY FATHER_ID
    ) a
    INNER JOIN hrdbuser.ST_BRANCH b ON a.GAZAR_ID=b.ID AND b.ISACTIVE=1
    ORDER BY b.SORT
) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string WorkingtimeTab4t2Datatable(string yr, string month, string month2, string gazar, string heltes, string stid)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strMonthList = "";
            for (int i = Int32.Parse(month); i <= Int32.Parse(month2); i++)
            {
                if (strMonthList == "") strMonthList += i.ToString();
                else strMonthList += "," + i.ToString();
            }
            if (gazar != "") gazar = " AND c.FATHER_ID=" + gazar;
            if (heltes != "") heltes = " AND c.ID=" + heltes;
            if (stid != "") stid = " AND b.STAFFS_ID=" + stid;
            string strTableVal = "";
            string strQry = "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strColor1 = "\"background:#fcf8e3;\"";
                strQry = @"SELECT a.ST_ID
        , CASE WHEN b.ID=b.FATHER_ID THEN b.INITNAME ELSE c.INITNAME||'-'||b.INITNAME END as NEGJ
        , d.NAME as POSNAME
        , SUBSTR(f.LNAME,0,1)||'.'||SUBSTR(f.FNAME,1,1)||LOWER(SUBSTR(f.FNAME,2)) as STNAME
        , a.TP
        , TO_CHAR(a.DT,'YYYY-MM-DD') as DT
        , a.MINTM
        , a.MAXTM
        , CASE WHEN a.ISWORK=0 THEN 'style="+strColor1+ @"' ELSE null END as ISWORK
      FROM(
        SELECT a.BRANCH_ID, a.POS_ID, a.ST_ID, a.TP, a.DT, a.MINTM, a.MAXTM, CASE WHEN b.DT is null THEN a.ISWORK ELSE 0 END as ISWORK
        FROM(
          SELECT a.BRANCH_ID, a.POS_ID, a.ST_ID, NVL(b.TP, 0) as TP, a.DT, a.MINTM, a.MAXTM, a.ISWORK
          FROM(
            SELECT a.BRANCH_ID, a.POS_ID, a.ST_ID, a.DT, NVL(b.TP, 0) as TP, NVL(b.MINTM, '00:00:00') as MINTM, NVL(b.MAXTM, '00:00:00') as MAXTM, a.ISWORK
            FROM(
              SELECT a.BRANCH_ID, a.POS_ID, a.STAFFS_ID as ST_ID, a.DT, CASE WHEN b.DT IS NULL THEN a.ISWORK ELSE 1 END as ISWORK
              FROM(
                SELECT a.ID, b.BRANCH_ID, b.POS_ID, b.STAFFS_ID, c.FATHER_ID as GAZAR_ID, c.ID as HELTES_ID, a.DT, CASE WHEN(MOD(TO_CHAR(a.DT, 'J'), 7) + 1) = 6 OR(MOD(TO_CHAR(a.DT, 'J'), 7) + 1) = 7 THEN 0 ELSE 1 END as ISWORK
                FROM(
                  SELECT a.ID, a.BEGINDT, a.ENDDT, b.DT
                  FROM(
                    SELECT a.ID,
                      CASE
                        WHEN TO_DATE(a.DT, 'YYYY-MM-DD') > TO_DATE('" + yr + "-" + month + @"-01', 'YYYY-MM-DD')
                        THEN a.DT
                        ELSE '" + yr + "-" + month + @"-01'
                      END as BEGINDT,
                      CASE
                        --WHEN TO_DATE(CASE WHEN c.ACTIVE = 0 THEN NVL(a.ENDDT, a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE, 'YYYY-MM-DD')) END, 'YYYY-MM-DD') < LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'YYYY-MM-DD'))
                        --THEN CASE WHEN c.ACTIVE = 0 THEN NVL(a.ENDDT, a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE, 'YYYY-MM-DD')) END ELSE TO_CHAR(LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'YYYY-MM-DD')), 'YYYY-MM-DD') END as ENDDT
                        WHEN TO_DATE(CASE WHEN c.ACTIVE = 0 THEN TO_CHAR((TO_DATE(NVL(a.ENDDT, a.DT), 'YYYY-MM-DD') - 1), 'YYYY-MM-DD') ELSE NVL(TO_CHAR((TO_DATE(a.ENDDT, 'YYYY-MM-DD') - 1), 'YYYY-MM-DD'), TO_CHAR(SYSDATE, 'YYYY-MM-DD')) END, 'YYYY-MM-DD') < LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'YYYY-MM-DD'))
                        THEN CASE WHEN c.ACTIVE = 0 THEN TO_CHAR((TO_DATE(NVL(a.ENDDT, a.DT), 'YYYY-MM-DD') - 1), 'YYYY-MM-DD') ELSE NVL(TO_CHAR((TO_DATE(a.ENDDT, 'YYYY-MM-DD') - 1), 'YYYY-MM-DD'), TO_CHAR(SYSDATE, 'YYYY-MM-DD')) END ELSE TO_CHAR(LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'YYYY-MM-DD')), 'YYYY-MM-DD') END as ENDDT
                    FROM hrdbuser.ST_STBR a
                    INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID = b.ID AND b.ISACTIVE = 1
                    INNER JOIN hrdbuser.STN_MOVE c ON a.MOVE_ID = c.ID
                    WHERE a.POS_ID != 2020102 AND c.ACTIVE=1
                    AND ((
                        TO_DATE('" + yr + "-" + month + @"-01','YYYY-MM-DD') 
                        BETWEEN TO_DATE(a.DT,'YYYY-MM-DD') AND TO_DATE(CASE WHEN c.ACTIVE=0 THEN NVL(a.ENDDT,a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE,'YYYY-MM-DD')) END,'YYYY-MM-DD')
                        OR 
                        LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01','YYYY-MM-DD')) 
                        BETWEEN TO_DATE(a.DT,'YYYY-MM-DD') AND TO_DATE(CASE WHEN c.ACTIVE=0 THEN NVL(a.ENDDT,a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE,'YYYY-MM-DD')) END,'YYYY-MM-DD')
                      ) OR 
                        (
                          TO_DATE('" + yr + "-" + month + @"-01','YYYY-MM-DD')<TO_DATE(a.DT,'YYYY-MM-DD') AND LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01','YYYY-MM-DD'))>TO_DATE(a.DT,'YYYY-MM-DD')
                        ))
                  ) a, (
                    SELECT DT
                    FROM(
                      SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                      FROM DUAL
                      CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                    )
                    WHERE DT BETWEEN TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') AND SYSDATE AND MOD(TO_CHAR(DT, 'J'), 7) + 1 IN(1, 2, 3, 4, 5, 6, 7)
                  ) b
                ) a
                INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.ID
                INNER JOIN hrdbuser.ST_BRANCH c ON b.BRANCH_ID = c.ID AND c.ISACTIVE = 1
                WHERE a.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD') AND b.POS_ID != 2020102" + gazar + heltes + stid + @"
              ) a
              LEFT JOIN(
                SELECT TO_DATE(HOLDATE, 'YYYY-MM-DD') as DT FROM hrdbuser.ST_HOLIDAYISWORK WHERE TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'YYYY')) = "+yr+ @" AND TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'MM')) IN(" + strMonthList + @")
              ) b ON a.DT = b.DT
            ) a
            LEFT JOIN(
              SELECT a.MONTH, a.INOUT as TP, b.ID as ST_ID, TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd') as DT, TO_CHAR(MIN(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY || ' ' || a.HOUR || ':' || a.MINUTE || ':' || a.SECOND, 'yyyy-mm-dd hh24:mi:ss')), 'hh24:mi:ss') as MINTM, TO_CHAR(MAX(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY || ' ' || a.HOUR || ':' || a.MINUTE || ':' || a.SECOND, 'yyyy-mm-dd hh24:mi:ss')), 'hh24:mi:ss') as MAXTM
              FROM STN_TRCDLOG a
              INNER JOIN hrdbuser.ST_STAFFS b ON a.ENO = b.FINGERID
              INNER JOIN hrdbuser.ST_STBR c ON b.ID = c.STAFFS_ID
              INNER JOIN hrdbuser.STN_MOVE d ON c.MOVE_ID = d.ID
              INNER JOIN hrdbuser.ST_BRANCH f ON c.BRANCH_ID = f.ID AND f.ISACTIVE = 1
              WHERE c.POS_ID != 2020102 AND a.INOUT = 0 AND a.YEAR = " + yr + @" AND a.MONTH IN(" + strMonthList + @") AND TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd') BETWEEN TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') AND SYSDATE AND MOD(TO_CHAR(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd'), 'J'), 7) + 1 IN(1, 2, 3, 4, 5, 6, 7)
              GROUP BY a.MONTH, a.INOUT, b.ID, TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd')
            ) b ON a.ST_ID = b.ST_ID AND a.DT = b.DT
          ) a
          LEFT JOIN(
            SELECT DT, STAFFS_ID, MAX(TP) as TP
            FROM(
              SELECT b.DT, a.STAFFS_ID, 11 as TP
              FROM hrdbuser.ST_CHULUUDAYF3 a,
              (
                SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                FROM DUAL
                CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
              ) b
              WHERE
                b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
              UNION ALL
              SELECT b.DT, a.STAFFS_ID, 12 as TP
              FROM hrdbuser.ST_CHULUUDAYT2 a,
              (
                SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                FROM DUAL
                CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
              ) b
              WHERE
                a.ISRECEIVED = 1 AND
                b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
              UNION ALL
              SELECT b.DT, a.STAFFS_ID, 13 as TP
              FROM hrdbuser.ST_CHULUUSICK a,
              (
                SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                FROM DUAL
                CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
              ) b
              WHERE
                b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
              UNION ALL
              SELECT b.DT, a.STAFFS_ID, 21 as TP
              FROM hrdbuser.ST_AMRALT a,
              (
                SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                FROM DUAL
                CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
              ) b
              WHERE
                a.TZISRECEIVED = 1 AND
                b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
              UNION ALL
              SELECT b.DT, a.STAFFS_ID, 31 as TP
              FROM hrdbuser.ST_TOMILOLT_STAFFS a
              INNER JOIN hrdbuser.ST_TOMILOLT c ON a.TOMILOLT_ID = c.ID,
              (
                SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                FROM DUAL
                CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
              ) b
              WHERE
                b.DT BETWEEN TO_DATE(c.FROMDATE, 'YYYY-MM-DD') AND TO_DATE(c.TODATE, 'YYYY-MM-DD')
            )
            GROUP BY DT, STAFFS_ID
          ) b ON a.DT = b.DT AND a.ST_ID = b.STAFFS_ID
        ) a
        LEFT JOIN(
          SELECT TO_DATE('" + yr + @"-' || HOLMONTH || '-' || HOLDAY, 'YYYY-MM-DD') as DT
          FROM hrdbuser.ST_HOLIDAYOFFICIAL
          WHERE HOLMONTH IN(" + strMonthList + @")
          UNION ALL
          SELECT TO_DATE(HOLDATE, 'YYYY-MM-DD') as DT
          FROM hrdbuser.ST_HOLIDAYUNOFFICIAL
          WHERE TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'YYYY')) = " + yr + @" AND TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'MM')) IN(" + strMonthList + @")
        ) b ON a.DT = b.DT
        GROUP BY a.BRANCH_ID, a.POS_ID, a.ST_ID, a.TP, a.DT, a.MINTM, a.MAXTM, CASE WHEN b.DT is null THEN a.ISWORK ELSE 0 END
      ) a
      INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID = b.ID AND b.ISACTIVE = 1
      INNER JOIN hrdbuser.ST_BRANCH c ON b.FATHER_ID = c.ID AND c.ISACTIVE = 1
      INNER JOIN hrdbuser.STN_POS d ON a.POS_ID = d.ID
      INNER JOIN hrdbuser.ST_STAFFS f ON a.ST_ID = f.ID
      ORDER BY c.SORT, b.SORT, d.SORT, a.ST_ID, a.DT";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                strTableVal += "<table style=\"border: 1px solid #000; border-collapse: collapse; font: 11pt arial, sans-serif; width: 100%;\">";
                strTableVal += "<thead style=\"background-color:C6D9F1;\">";
                strTableVal += "<tr>";
                strTableVal += "<th style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">Нэгж</th>";
                strTableVal += "<th style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">Нэр</th>";
                strTableVal += "<th style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">Албан тушаал</th>";
                strTableVal += "<th style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">Огноо</th>";
                strTableVal += "<th style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">Төлөв</th>";
                strTableVal += "<th style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">Ирсэн</th>";
                strTableVal += "<th style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">Явсан</th>";
                strTableVal += "<th style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">Хоцорсон<br>(минут)</th>";
                strTableVal += "<th style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">Эрт явсан<br>(минут)</th>";
                strTableVal += "</tr>";
                strTableVal += "</thead>";
                strTableVal += "<tbody>";
                string[] date = new string[3];
                string[] time1 = new string[3];
                string[] time2 = new string[3];
                if (ds.Tables[0].Rows.Count != 0)
                {
                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {
                        Array.Clear(date, 0, date.Length);
                        date = new string[3];
                        date = Convert.ToDateTime(dr["DT"]).ToString("yyyy-MM-dd").Split('-');

                        strTableVal += "<tr " + dr["ISWORK"].ToString() + ">";
                        if (dr["ISWORK"].ToString() == "style=\"background:#fcf8e3;\"")
                        {
                            strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">" + dr["NEGJ"].ToString() + "</td>";
                            strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">" + dr["STNAME"].ToString() + "</td>";
                            strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">" + dr["POSNAME"].ToString() + "</td>";
                            strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">" + Convert.ToDateTime(dr["DT"]).ToString("yyyy-MM-dd") + "</td>";
                            strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\"><span class=\"label bg-color-blueDark\">Амралтын өдөр</span></td>";
                            strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:right;\">" + dr["MINTM"].ToString().Replace("00:00:00", "--:--:--") + "</td>";
                            strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:right;\">" + dr["MAXTM"].ToString().Replace("00:00:00", "--:--:--") + "</td>";
                            strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:right;\">--:--:--</td>";
                            strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:right;\">--:--:--</td>";
                        }
                        else {
                            if (dr["TP"].ToString() == "0")
                            {
                                Array.Clear(time1, 0, time1.Length);
                                time1 = new string[3];
                                time1 = dr["MINTM"].ToString().Split(':');
                                Array.Clear(time2, 0, time2.Length);
                                time2 = new string[3];
                                time2 = dr["MAXTM"].ToString().Split(':');
                                DateTime come = new DateTime(Int32.Parse(date[0]), Int32.Parse(date[1]), Int32.Parse(date[2]), Int32.Parse(time1[0]), Int32.Parse(time1[1]), Int32.Parse(time1[2]));
                                DateTime go = new DateTime(Int32.Parse(date[0]), Int32.Parse(date[1]), Int32.Parse(date[2]), Int32.Parse(time2[0]), Int32.Parse(time2[1]), Int32.Parse(time2[2]));
                                DateTime late = new DateTime(Int32.Parse(date[0]), Int32.Parse(date[1]), Int32.Parse(date[2]), 08, 40, 00);
                                DateTime early = new DateTime(Int32.Parse(date[0]), Int32.Parse(date[1]), Int32.Parse(date[2]), 17, 30, 00);
                                if (dr["MINTM"].ToString() != dr["MAXTM"].ToString())
                                {
                                    var lateTimeSpanHour = TimeSpan.FromHours(Convert.ToDouble(come.Subtract(late).Hours));
                                    var earlyTimeSpanHour = TimeSpan.FromHours(Convert.ToDouble(early.Subtract(go).Hours));
                                    var lateTimeSpanMin = TimeSpan.FromMinutes(Convert.ToDouble(come.Subtract(late).Minutes));
                                    var earlyTimeSpanMin = TimeSpan.FromMinutes(Convert.ToDouble(early.Subtract(go).Minutes));
                                    var lateTimeSpanSec = TimeSpan.FromSeconds(Convert.ToDouble(come.Subtract(late).Seconds));
                                    var earlyTimeSpanSec = TimeSpan.FromSeconds(Convert.ToDouble(early.Subtract(go).Seconds));
                                    TimeSpan lateTimeSpan = lateTimeSpanHour + lateTimeSpanMin + lateTimeSpanSec;
                                    TimeSpan earlyTimeSpan = earlyTimeSpanHour + earlyTimeSpanMin + earlyTimeSpanSec;

                                    if (Convert.ToDouble(come.Subtract(late).Seconds) > 0)
                                    {
                                        if (Convert.ToDouble(come.Subtract(early).Seconds) > 0)
                                        {
                                            strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">" + dr["NEGJ"].ToString() + "</td>";
                                            strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">" + dr["STNAME"].ToString() + "</td>";
                                            strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">" + dr["POSNAME"].ToString() + "</td>";
                                            strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">" + Convert.ToDateTime(dr["DT"]).ToString("yyyy-MM-dd") + "</td>";
                                            strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\"><span class=\"label bg-color-yellow\">Хоцорсон</span></td>";
                                            strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:right;\">" + come.ToString("HH:mm:ss") + "</td>";
                                            strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:right;\">" + go.ToString("HH:mm:ss") + "</td>";
                                            strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:right;\">" + lateTimeSpan.ToString() + "</td>";
                                            strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:right;\">" + earlyTimeSpan.ToString() + "</td>";
                                        }
                                        else
                                        {
                                            strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">" + dr["NEGJ"].ToString() + "</td>";
                                            strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">" + dr["STNAME"].ToString() + "</td>";
                                            strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">" + dr["POSNAME"].ToString() + "</td>";
                                            strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">" + Convert.ToDateTime(dr["DT"]).ToString("yyyy-MM-dd") + "</td>";
                                            strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\"><span class=\"label bg-color-yellow\">Хоцорсон</span></td>";
                                            strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:right;\">" + come.ToString("HH:mm:ss") + "</td>";
                                            strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:right;\">" + go.ToString("HH:mm:ss") + "</td>";
                                            strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:right;\">" + lateTimeSpan.ToString() + "</td>";
                                            strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:right;\">--:--:--</td>";
                                        }
                                    }
                                    else
                                    {
                                        if (Convert.ToDouble(come.Subtract(early).Seconds) > 0)
                                        {
                                            strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">" + dr["NEGJ"].ToString() + "</td>";
                                            strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">" + dr["STNAME"].ToString() + "</td>";
                                            strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">" + dr["POSNAME"].ToString() + "</td>";
                                            strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">" + Convert.ToDateTime(dr["DT"]).ToString("yyyy-MM-dd") + "</td>";
                                            strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\"><span class=\"label bg-color-blueLight\">Цагтаа ирсэн</span></td>";
                                            strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:right;\">" + come.ToString("HH:mm:ss") + "</td>";
                                            strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:right;\">" + go.ToString("HH:mm:ss") + "</td>";
                                            strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:right;\">--:--:--</td>";
                                            strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:right;\">" + earlyTimeSpan.ToString() + "</td>";
                                        }
                                        else
                                        {
                                            strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">" + dr["NEGJ"].ToString() + "</td>";
                                            strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">" + dr["STNAME"].ToString() + "</td>";
                                            strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">" + dr["POSNAME"].ToString() + "</td>";
                                            strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">" + Convert.ToDateTime(dr["DT"]).ToString("yyyy-MM-dd") + "</td>";
                                            strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\"><span class=\"label bg-color-blueLight\">Цагтаа ирсэн</span></td>";
                                            strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:right;\">" + come.ToString("HH:mm:ss") + "</td>";
                                            strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:right;\">" + go.ToString("HH:mm:ss") + "</td>";
                                            strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:right;\">--:--:--</td>";
                                            strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:right;\">--:--:--</td>";
                                        }
                                    }
                                }
                                else
                                {
                                    strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">" + dr["NEGJ"].ToString() + "</td>";
                                    strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">" + dr["STNAME"].ToString() + "</td>";
                                    strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">" + dr["POSNAME"].ToString() + "</td>";
                                    strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">" + Convert.ToDateTime(dr["DT"]).ToString("yyyy-MM-dd") + "</td>";
                                    strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\"><span class=\"label bg-color-redLight\">Тасалсан</span></td>";
                                    strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:right;\">" + come.ToString("HH:mm:ss").Replace("00:00:00", "--:--:--") + "</td>";
                                    strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:right;\">--:--:--</td>";
                                    strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:right;\">--:--:--</td>";
                                    strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:right;\">--:--:--</td>";
                                }
                            }
                            else if (dr["TP"].ToString() == "13")
                            {
                                strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">" + dr["NEGJ"].ToString() + "</td>";
                                strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">" + dr["STNAME"].ToString() + "</td>";
                                strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">" + dr["POSNAME"].ToString() + "</td>";
                                strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">" + Convert.ToDateTime(dr["DT"]).ToString("yyyy-MM-dd") + "</td>";
                                strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\"><span class=\"label bg-color-pink\">Өвчтэй</span></td>";
                                strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:right;\">--:--:--</td>";
                                strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:right;\">--:--:--</td>";
                                strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:right;\">--:--:--</td>";
                                strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:right;\">--:--:--</td>";
                            }
                            else if (dr["TP"].ToString() == "21")
                            {
                                strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">" + dr["NEGJ"].ToString() + "</td>";
                                strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">" + dr["STNAME"].ToString() + "</td>";
                                strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">" + dr["POSNAME"].ToString() + "</td>";
                                strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">" + Convert.ToDateTime(dr["DT"]).ToString("yyyy-MM-dd") + "</td>";
                                strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\"><span class=\"label bg-color-greenDark\">Ээлжийн амралттай</span></td>";
                                strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:right;\">--:--:--</td>";
                                strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:right;\">--:--:--</td>";
                                strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:right;\">--:--:--</td>";
                                strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:right;\">--:--:--</td>";
                            }
                            else if (dr["TP"].ToString() == "11" || dr["TP"].ToString() == "12")
                            {
                                strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">" + dr["NEGJ"].ToString() + "</td>";
                                strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">" + dr["STNAME"].ToString() + "</td>";
                                strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">" + dr["POSNAME"].ToString() + "</td>";
                                strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">" + Convert.ToDateTime(dr["DT"]).ToString("yyyy-MM-dd") + "</td>";
                                strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\"><span class=\"label bg-color-orangeDark\">Чөлөөтэй</span></td>";
                                strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:right;\">--:--:--</td>";
                                strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:right;\">--:--:--</td>";
                                strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:right;\">--:--:--</td>";
                                strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:right;\">--:--:--</td>";
                            }
                            else if (dr["TP"].ToString() == "31")
                            {
                                strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">" + dr["NEGJ"].ToString() + "</td>";
                                strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">" + dr["STNAME"].ToString() + "</td>";
                                strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">" + dr["POSNAME"].ToString() + "</td>";
                                strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">" + Convert.ToDateTime(dr["DT"]).ToString("yyyy-MM-dd") + "</td>";
                                strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\"><span class=\"label bg-color-blue\">Албан томилолт</span></td>";
                                strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:right;\">--:--:--</td>";
                                strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:right;\">--:--:--</td>";
                                strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:right;\">--:--:--</td>";
                                strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:right;\">--:--:--</td>";
                            }
                            else if (dr["TP"].ToString() == "91")
                            {
                                strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">" + dr["NEGJ"].ToString() + "</td>";
                                strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">" + dr["STNAME"].ToString() + "</td>";
                                strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">" + dr["POSNAME"].ToString() + "</td>";
                                strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\">" + Convert.ToDateTime(dr["DT"]).ToString("yyyy-MM-dd") + "</td>";
                                strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:center;\"><span class=\"label bg-color-lighten\">Тэмдэглэлт өдөр</span></td>";
                                strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:right;\">--:--:--</td>";
                                strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:right;\">--:--:--</td>";
                                strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:right;\">--:--:--</td>";
                                strTableVal += "<td style=\"border: 1px solid #DDD; padding:5px; text-align:right;\">--:--:--</td>";
                            }
                        }
                        strTableVal += "</tr>";
                    }
                }
                strTableVal += "</tbody>";
                strTableVal += "</table>";
                return strTableVal;
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string WorkingtimeTab3Desc(string year, string month, string month2, string stid)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strMonthList = "";
            for (int i = Int32.Parse(month); i <= Int32.Parse(month2); i++)
            {
                if (strMonthList == "") strMonthList += i.ToString();
                else strMonthList += "," + i.ToString();
            }
            string[] date = new string[3];
            string[] time1 = new string[3];
            string[] time2 = new string[3];
            string strQry = @"SELECT  a.ST_ID, b.NEGJ, b.POSNAME, b.STNAME, a.TP, TO_CHAR(a.DT, 'YYYY-MM-DD') as DT, a.MINTM, a.MAXTM, a.ISWORK, 
      ROUND(IS_CHECK_TSAG(TO_DATE(TO_CHAR(a.DT,'YYYY-MM-DD')||' '||a.MINTM,'YYYY-MM-DD HH24:MI;SS'), TO_DATE(TO_CHAR(a.DT,'YYYY-MM-DD')||' '||a.MAXTM,'YYYY-MM-DD HH24:MI;SS'), 'hotsorson', 'minute'),1) as HOTSORSONMINUTE, 
      ROUND(IS_CHECK_TSAG(TO_DATE(TO_CHAR(a.DT,'YYYY-MM-DD')||' '||a.MINTM,'YYYY-MM-DD HH24:MI;SS'), TO_DATE(TO_CHAR(a.DT,'YYYY-MM-DD')||' '||a.MAXTM,'YYYY-MM-DD HH24:MI;SS'), 'ert', 'minute'),1) as ERTMINUTE
    FROM (
      SELECT a.ST_ID, a.TP, a.DT, a.MINTM, a.MAXTM, CASE WHEN b.DT is null THEN a.ISWORK ELSE 0 END as ISWORK
        FROM(
          SELECT a.ST_ID, NVL(b.TP, 0) as TP, a.DT, a.MINTM, a.MAXTM, a.ISWORK
          FROM(
            SELECT a.ST_ID, a.DT, NVL(b.TP, 0) as TP, NVL(b.MINTM, '00:00:00') as MINTM, NVL(b.MAXTM, '00:00:00') as MAXTM, a.ISWORK
            FROM(
              SELECT a.STAFFS_ID as ST_ID, a.DT, CASE WHEN b.DT IS NULL THEN a.ISWORK ELSE 1 END as ISWORK
              FROM ( 
                SELECT a.ID, b.STAFFS_ID, c.FATHER_ID as GAZAR_ID, c.ID as HELTES_ID, a.DT, CASE WHEN(MOD(TO_CHAR(a.DT, 'J'), 7) + 1) = 6 OR(MOD(TO_CHAR(a.DT, 'J'), 7) + 1) = 7 THEN 0 ELSE 1 END as ISWORK
                FROM (
                  SELECT a.ID, a.STAFFS_ID, a.BEGINDT, a.ENDDT, b.DT
                  FROM (
                    SELECT a.ID, a.STAFFS_ID, 
                      CASE 
                        WHEN TO_DATE(a.DT,'YYYY-MM-DD')>TO_DATE('" + year + "-" + month + @"-01','YYYY-MM-DD') 
                        THEN a.DT 
                        ELSE '" + year + "-" + month + @"-01' 
                      END as BEGINDT, 
                      CASE 
                        --WHEN TO_DATE(CASE WHEN c.ACTIVE=0 THEN NVL(a.ENDDT,a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE,'YYYY-MM-DD')) END,'YYYY-MM-DD')<LAST_DAY(TO_DATE('" + year + "-" + month2 + @"-01','YYYY-MM-DD')) 
                        --THEN CASE WHEN c.ACTIVE=0 THEN NVL(a.ENDDT,a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE,'YYYY-MM-DD')) END ELSE TO_CHAR(LAST_DAY(TO_DATE('" + year + "-" + month2 + @"-01','YYYY-MM-DD')),'YYYY-MM-DD') END as ENDDT
                        WHEN TO_DATE(CASE WHEN c.ACTIVE=0 THEN TO_CHAR((TO_DATE(NVL(a.ENDDT,a.DT),'YYYY-MM-DD')-1),'YYYY-MM-DD') ELSE NVL(TO_CHAR((TO_DATE(a.ENDDT,'YYYY-MM-DD')-1),'YYYY-MM-DD'), TO_CHAR(SYSDATE,'YYYY-MM-DD')) END,'YYYY-MM-DD')<LAST_DAY(TO_DATE('" + year + "-" + month2 + @"-01','YYYY-MM-DD')) 
                        THEN CASE WHEN c.ACTIVE=0 THEN TO_CHAR((TO_DATE(NVL(a.ENDDT,a.DT),'YYYY-MM-DD')-1),'YYYY-MM-DD') ELSE NVL(TO_CHAR((TO_DATE(a.ENDDT,'YYYY-MM-DD')-1),'YYYY-MM-DD'), TO_CHAR(SYSDATE,'YYYY-MM-DD')) END ELSE TO_CHAR(LAST_DAY(TO_DATE('" + year + "-" + month2 + @"-01','YYYY-MM-DD')),'YYYY-MM-DD') END as ENDDT
                    FROM hrdbuser.ST_STBR a
                    INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID=b.ID AND b.ISACTIVE=1
                    INNER JOIN hrdbuser.STN_MOVE c ON a.MOVE_ID=c.ID
                    WHERE a.POS_ID!=2020102 AND c.ACTIVE=1 AND a.STAFFS_ID=" + stid + @"
                    AND ((
                        TO_DATE('" + year + "-" + month + @"-01','YYYY-MM-DD') 
                        BETWEEN TO_DATE(a.DT,'YYYY-MM-DD') AND TO_DATE(CASE WHEN c.ACTIVE=0 THEN NVL(a.ENDDT,a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE,'YYYY-MM-DD')) END,'YYYY-MM-DD')
                        OR 
                        LAST_DAY(TO_DATE('" + year + "-" + month2 + @"-01','YYYY-MM-DD')) 
                        BETWEEN TO_DATE(a.DT,'YYYY-MM-DD') AND TO_DATE(CASE WHEN c.ACTIVE=0 THEN NVL(a.ENDDT,a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE,'YYYY-MM-DD')) END,'YYYY-MM-DD')
                      ) OR 
                        (
                          TO_DATE('" + year + "-" + month + @"-01','YYYY-MM-DD')<TO_DATE(a.DT,'YYYY-MM-DD') AND LAST_DAY(TO_DATE('" + year + "-" + month2 + @"-01','YYYY-MM-DD'))>TO_DATE(a.DT,'YYYY-MM-DD')
                        ))
                  ) a, (
                    SELECT DT
                    FROM(
                      SELECT(TO_DATE('" + year + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                      FROM DUAL
                      CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + year + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + year + "-" + month + @"-01', 'yyyy-mm-dd')
                    )
                    WHERE DT BETWEEN TO_DATE('" + year + "-" + month + @"-01', 'yyyy-mm-dd') AND SYSDATE AND MOD(TO_CHAR(DT, 'J'), 7) + 1 IN(1, 2, 3, 4, 5, 6, 7)
                  ) b
                ) a
                INNER JOIN hrdbuser.ST_STBR b ON a.ID=b.ID
                INNER JOIN hrdbuser.ST_BRANCH c ON b.BRANCH_ID=c.ID AND c.ISACTIVE=1
                WHERE a.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD') AND b.POS_ID!=2020102
              ) a
              LEFT JOIN(
                SELECT TO_DATE(HOLDATE, 'YYYY-MM-DD') as DT FROM hrdbuser.ST_HOLIDAYISWORK WHERE TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'YYYY')) = " + year + @" AND TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'MM')) IN(" + strMonthList + @")
              ) b ON a.DT = b.DT  
            ) a
            LEFT JOIN(
              SELECT a.MONTH, a.INOUT as TP, b.ID as ST_ID, TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd') as DT, TO_CHAR(MIN(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY || ' ' || a.HOUR || ':' || a.MINUTE || ':' || a.SECOND, 'yyyy-mm-dd hh24:mi:ss')), 'hh24:mi:ss') as MINTM, TO_CHAR(MAX(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY || ' ' || a.HOUR || ':' || a.MINUTE || ':' || a.SECOND, 'yyyy-mm-dd hh24:mi:ss')), 'hh24:mi:ss') as MAXTM
              FROM STN_TRCDLOG a
              INNER JOIN hrdbuser.ST_STAFFS b ON a.ENO = b.FINGERID
              INNER JOIN hrdbuser.ST_STBR c ON b.ID = c.STAFFS_ID
              INNER JOIN hrdbuser.STN_MOVE d ON c.MOVE_ID = d.ID
              INNER JOIN hrdbuser.ST_BRANCH f ON c.BRANCH_ID = f.ID AND f.ISACTIVE = 1
              WHERE c.POS_ID!=2020102 AND a.INOUT = 0 AND a.YEAR = " + year + @" AND a.MONTH IN(" + strMonthList + @") AND TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd') BETWEEN TO_DATE('" + year + "-" + month + @"-01', 'yyyy-mm-dd') AND SYSDATE AND MOD(TO_CHAR(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd'), 'J'), 7) + 1 IN(1, 2, 3, 4, 5, 6, 7)
              GROUP BY a.MONTH, a.INOUT, b.ID, TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd')
            ) b ON a.ST_ID = b.ST_ID AND a.DT = b.DT  
          ) a
          LEFT JOIN(
            SELECT DT, STAFFS_ID, MAX(TP) as TP
            FROM(
              SELECT b.DT, a.STAFFS_ID, 11 as TP
              FROM hrdbuser.ST_CHULUUDAYF3 a,
              (
                SELECT(TO_DATE('" + year + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                FROM DUAL
                CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + year + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + year + "-" + month + @"-01', 'yyyy-mm-dd')
              ) b
              WHERE
                b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
              UNION ALL
              SELECT b.DT, a.STAFFS_ID, 12 as TP
              FROM hrdbuser.ST_CHULUUDAYT2 a,
              (
                SELECT(TO_DATE('" + year + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                FROM DUAL
                CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + year + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + year + "-" + month + @"-01', 'yyyy-mm-dd')
              ) b
              WHERE
                a.ISRECEIVED = 1 AND
                b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
              UNION ALL
              SELECT b.DT, a.STAFFS_ID, 13 as TP
              FROM hrdbuser.ST_CHULUUSICK a,
              (
                SELECT(TO_DATE('" + year + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                FROM DUAL
                CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + year + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + year + "-" + month + @"-01', 'yyyy-mm-dd')
              ) b
              WHERE
                b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
              UNION ALL
              SELECT b.DT, a.STAFFS_ID, 21 as TP
              FROM hrdbuser.ST_AMRALT a,
              (
                SELECT(TO_DATE('" + year + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                FROM DUAL
                CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + year + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + year + "-" + month + @"-01', 'yyyy-mm-dd')
              ) b
              WHERE
                a.TZISRECEIVED = 1 AND
                b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
              UNION ALL
              SELECT b.DT, a.STAFFS_ID, 31 as TP
              FROM hrdbuser.ST_TOMILOLT_STAFFS a
              INNER JOIN hrdbuser.ST_TOMILOLT c ON a.TOMILOLT_ID = c.ID,
              (
                SELECT(TO_DATE('" + year + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                FROM DUAL
                CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + year + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + year + "-" + month + @"-01', 'yyyy-mm-dd')
              ) b
              WHERE
                b.DT BETWEEN TO_DATE(c.FROMDATE, 'YYYY-MM-DD') AND TO_DATE(c.TODATE, 'YYYY-MM-DD')
            )
            GROUP BY DT, STAFFS_ID
          ) b ON a.DT = b.DT AND a.ST_ID = b.STAFFS_ID
        ) a
        LEFT JOIN(
          SELECT TO_DATE('" + year + @"-' || HOLMONTH || '-' || HOLDAY, 'YYYY-MM-DD') as DT
          FROM hrdbuser.ST_HOLIDAYOFFICIAL
          WHERE HOLMONTH IN(" + strMonthList + @")
          UNION ALL
          SELECT TO_DATE(HOLDATE, 'YYYY-MM-DD') as DT
          FROM hrdbuser.ST_HOLIDAYUNOFFICIAL
          WHERE TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'YYYY')) = " + year + @" AND TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'MM')) IN(" + strMonthList + @")
        ) b ON a.DT = b.DT
        GROUP BY a.ST_ID, a.TP, a.DT, a.MINTM, a.MAXTM, CASE WHEN b.DT is null THEN a.ISWORK ELSE 0 END
      ORDER BY a.DT
    ) a
    LEFT JOIN (
      SELECT 
        a.ID, 
        CASE WHEN d.ID=d.FATHER_ID THEN d.INITNAME ELSE f.INITNAME||'-'||d.INITNAME END as NEGJ, 
        g.NAME as POSNAME, 
        SUBSTR(a.LNAME, 0, 1) || '.' || SUBSTR(a.FNAME, 1, 1) || LOWER(SUBSTR(a.FNAME, 2)) as STNAME, 
        d.SORT as NEGJSORT,
        g.SORT as POSSORT
      FROM hrdbuser.ST_STAFFS a 
      INNER JOIN hrdbuser.ST_STBR b ON a.ID=b.STAFFS_ID AND b.ISACTIVE=1 
      INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID=c.ID AND c.ACTIVE=1 
      INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID=d.ID 
      INNER JOIN hrdbuser.ST_BRANCH f ON d.FATHER_ID=f.ID 
      INNER JOIN hrdbuser.STN_POS g ON b.POS_ID=g.ID 
    ) b ON a.ST_ID=b.ID
    ORDER BY b.NEGJSORT, b.POSSORT";
            try
            {
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }




        //*****dashboard.aspx*****//
        public string DashboardCol2t1Datatable(string yr)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = @"SELECT * 
FROM ( 
  SELECT a.BR_ID, a.DOMAIN_ORG, a.SORT, a.MNTH, b.PERAVG
  FROM (
    SELECT a.BR_ID, a.DOMAIN_ORG, a.SORT, b.MNTH
    FROM (
      SELECT BR_ID, DOMAIN_ORG, SORT 
      FROM TBL_BRANCH 
      WHERE YR=" + yr + @" AND BR_TYPE1=3 AND BR_ID!=9911
    ) a 
    , (
      SELECT ROWNUM MNTH FROM DUAL
      CONNECT BY LEVEL<=12 
    ) b
  ) a
  LEFT JOIN (
    SELECT a.BR_ID
      , a.MNTH
      , ROUND((((NVL(SUM(a.EVAL100),0)*100)+ (NVL(SUM(a.EVAL90),0)*90)+ (NVL(SUM(a.EVAL80),0)*80)+ (NVL(SUM(a.EVAL70),0)*70)+ (NVL(SUM(a.EVAL50),0)*50)+ (NVL(SUM(a.EVAL30),0)*30)+ (NVL(SUM(a.EVAL10),0)*10)+ (NVL(SUM(a.EVAL0),0)*0))/CASE WHEN ((NVL(SUM(a.EVAL100),0)+NVL(SUM(a.EVAL90),0)+NVL(SUM(a.EVAL80),0)+NVL(SUM(a.EVAL70),0)+NVL(SUM(a.EVAL50),0)+NVL(SUM(a.EVAL30),0)+NVL(SUM(a.EVAL10),0)+NVL(SUM(a.EVAL0),0))*100)=0 THEN 1 ELSE ((NVL(SUM(a.EVAL100),0)+NVL(SUM(a.EVAL90),0)+NVL(SUM(a.EVAL80),0)+NVL(SUM(a.EVAL70),0)+NVL(SUM(a.EVAL50),0)+NVL(SUM(a.EVAL30),0)+NVL(SUM(a.EVAL10),0)+NVL(SUM(a.EVAL0),0))*100) END)*100,1) as PERAVG
    FROM ( 
      SELECT d.BR_ID
        , TO_NUMBER(TO_CHAR(a.STRT_DATE,'mm')) as MNTH
        , b.ID as PLANYR_ID
        , COUNT(a.ID) as PLANMNTH_CNT
        , CASE WHEN f.EVAL=100 THEN 1 END as EVAL100
        , CASE WHEN f.EVAL=90 THEN 1 END as EVAL90
        , CASE WHEN f.EVAL=80 THEN 1 END as EVAL80
        , CASE WHEN f.EVAL=70 THEN 1 END as EVAL70
        , CASE WHEN f.EVAL=50 THEN 1 END as EVAL50
        , CASE WHEN f.EVAL=30 THEN 1 END as EVAL30
        , CASE WHEN f.EVAL=10 THEN 1 END as EVAL10
        , CASE WHEN f.EVAL=0 THEN 1 END as EVAL0
        , CASE WHEN f.EVAL is null THEN 1 END as EVALNONE 
      FROM TBL_PLANMNTH a 
      INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID 
      INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
      INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID 
      LEFT JOIN TBL_PLANYR_EVAL f ON b.ID=f.PLANYR_ID AND f.TP='month' AND f.INTERVAL=TO_NUMBER(TO_CHAR(a.STRT_DATE,'mm')) 
      WHERE a.SUBMIT_D2=1 AND b.YR=" + yr+@"
      GROUP BY d.BR_ID, b.ID, f.EVAL, TO_NUMBER(TO_CHAR(a.STRT_DATE,'mm')) 
    ) a 
    GROUP BY a.BR_ID, a.MNTH
  ) b ON a.BR_ID=b.BR_ID AND a.MNTH=b.MNTH  
)
PIVOT(
  AVG(PERAVG)";
                strQry += "FOR MNTH IN (1 as \"Jan\",2 as \"Feb\",3 as \"Mar\",4 as \"Apr\",5 as \"May\",6 as \"Jun\",7 as \"Jul\",8 as \"Aug\",9 as \"Sep\",10 as \"Oct\",11 as \"Nov\",12 as \"Dec\") ) ORDER BY SORT";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        




        //*****implweek.aspx*****//
        public string ImplweekGetList(string yr)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string returnval = "";
                DateTime strtdt = DateTime.Now;
                GregorianCalendar cal = new GregorianCalendar(GregorianCalendarTypes.Localized);
                int week = cal.GetWeekOfYear(strtdt, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);
                int year = strtdt.Year;
                DayOfWeek day = DayOfWeek.Monday;
                DateTime startOfYear = new DateTime(year, 1, 1);
                int daysToFirstCorrectDay = (((int)day - (int)startOfYear.DayOfWeek) + 7) % 7;
                DateTime FirstDay = startOfYear.AddDays(7 * (week - 1) + daysToFirstCorrectDay);
                DateTime EndDay = startOfYear.AddDays(7 * (week - 1) + daysToFirstCorrectDay).AddDays(4);

                List<DateTime[]> weeks = new List<DateTime[]>();
                DateTime CurrentTime = System.DateTime.Now;
                DateTime beginingDate = new DateTime();
                DateTime CurrentDate = new DateTime(Convert.ToInt32(yr), 01, 01);
                string CurrentDay = CurrentDate.DayOfWeek.ToString();
                if (CurrentDay == DayOfWeek.Monday.ToString())
                {
                    beginingDate = new DateTime(Convert.ToInt32(yr), 01, 01);
                }
                else if (CurrentDay == DayOfWeek.Tuesday.ToString())
                {
                    beginingDate = new DateTime(Convert.ToInt32(yr) - 1, 12, 31);
                }
                else if (CurrentDay == DayOfWeek.Wednesday.ToString())
                {
                    beginingDate = new DateTime(Convert.ToInt32(yr) - 1, 12, 30);
                }
                else if (CurrentDay == DayOfWeek.Thursday.ToString())
                {
                    beginingDate = new DateTime(Convert.ToInt32(yr) - 1, 12, 29);
                }
                else if (CurrentDay == DayOfWeek.Friday.ToString())
                {
                    beginingDate = new DateTime(Convert.ToInt32(yr) - 1, 12, 28);
                }
                else if (CurrentDay == DayOfWeek.Saturday.ToString())
                {
                    beginingDate = new DateTime(Convert.ToInt32(yr), 01, 03);
                }
                else if (CurrentDay == DayOfWeek.Sunday.ToString())
                {
                    beginingDate = new DateTime(Convert.ToInt32(yr), 01, 02);
                }
                DateTime beginDate = beginingDate;
                DateTime endDate = new DateTime(Convert.ToInt32(yr) + 1, 01, 01);
                DateTime monday = DateTime.Today;
                DateTime friday = DateTime.Today;
                while (beginDate < endDate)
                {
                    if (beginDate.DayOfWeek == DayOfWeek.Monday)
                    {
                        monday = beginDate;
                    }
                    else if (beginDate.DayOfWeek == DayOfWeek.Friday)
                    {
                        friday = beginDate;
                    }
                    else if (beginDate.DayOfWeek == DayOfWeek.Saturday)
                    {
                        weeks.Add(new DateTime[] { monday, friday });
                    }
                    beginDate = beginDate.AddDays(1);
                }
                for (int x = 0; x < weeks.Count; x++)
                {
                    if (weeks[x][0].Date.ToString("yyyy-MM-dd") + " - " + weeks[x][1].Date.ToString("yyyy-MM-dd") == FirstDay.ToString("yyyy-MM-dd") + " - " + EndDay.ToString("yyyy-MM-dd"))
                    {
                        returnval += "<option selected=\"selected\">" + weeks[x][0].Date.ToString("yyyy-MM-dd") + " - " + weeks[x][1].Date.ToString("yyyy-MM-dd") + "</option>";
                    }
                    else
                    {
                        returnval += "<option>" + weeks[x][0].Date.ToString("yyyy-MM-dd") + " - " + weeks[x][1].Date.ToString("yyyy-MM-dd") + "</option>";
                    }
                }
                return returnval;
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string ImplweekImplDatatable(string tp, string gazarid, string heltesid, string stid, string begindate, string enddate) {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strQry = "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                if (tp == "gazar")
                {
                    strQry = "SELECT ID, NO, NAME, PLANMNTH_ID FROM TBL_IMPLWEEK WHERE TP='" + tp + "' AND GAZAR_ID=" + gazarid + " AND BEGINDATE='" + begindate + "' AND ENDDATE='" + enddate + "' ORDER BY NO";
                }
                else if (tp == "heltes")
                {
                    strQry = "SELECT ID, NO, NAME, PLANMNTH_ID FROM TBL_IMPLWEEK WHERE TP='" + tp + "' AND GAZAR_ID=" + gazarid + " AND HELTES_ID=" + heltesid + " AND BEGINDATE='" + begindate + "' AND ENDDATE='" + enddate + "' ORDER BY NO";
                }
                else if (tp == "staff")
                {
                    strQry = "SELECT ID, NO, NAME, PLANMNTH_ID FROM TBL_IMPLWEEK WHERE TP='" + tp + "' AND ST_ID=" + stid + " AND BEGINDATE='" + begindate + "' AND ENDDATE='" + enddate + "' ORDER BY NO";
                }
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string ImplweekPlanDatatable(string tp, string gazarid, string heltesid, string stid, string begindate, string enddate)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strQry = "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                if (tp == "gazar")
                {
                    strQry = "SELECT ID, NO, NAME FROM TBL_PLANWEEK WHERE TP='" + tp + "' AND GAZAR_ID=" + gazarid + " AND BEGINDATE='" + begindate + "' AND ENDDATE='" + enddate + "' ORDER BY NO";
                }
                else if (tp == "heltes")
                {
                    strQry = "SELECT ID, NO, NAME FROM TBL_PLANWEEK WHERE TP='" + tp + "' AND GAZAR_ID=" + gazarid + " AND HELTES_ID=" + heltesid + " AND BEGINDATE='" + begindate + "' AND ENDDATE='" + enddate + "' ORDER BY NO";
                }
                else if (tp == "staff")
                {
                    strQry = "SELECT ID, NO, NAME FROM TBL_PLANWEEK WHERE TP='" + tp + "' AND ST_ID=" + stid + " AND BEGINDATE='" + begindate + "' AND ENDDATE='" + enddate + "' ORDER BY NO";
                }
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string ImplweekImportImplDatatable(string yr, string tp, string gazarid, string heltesid, string begindate, string enddate)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = "";
                if (tp == "gazar")
                {
                    strQry = "SELECT a.ID, a.NO, a.NAME, b.DOMAIN_ORG as HELTES FROM TBL_IMPLWEEK a INNER JOIN TBL_BRANCH b ON a.HELTES_ID=b.BR_ID AND b.YR=" + yr + " WHERE a.TP='heltes' AND a.GAZAR_ID=" + gazarid + " AND a.BEGINDATE='" + begindate + "' AND a.ENDDATE='" + enddate + "' ORDER BY b.SORT, a.NO";
                }
                else if (tp == "heltes")
                {
                    strQry = @"SELECT a.ID, a.NO, a.NAME, SUBSTR(b.LNAME,0,1)||'.'||SUBSTR(b.FNAME,1,1)||LOWER(SUBSTR(b.FNAME,2))||' | '||d.NAME as STAFF 
FROM TBL_IMPLWEEK a 
INNER JOIN hrdbuser.ST_STAFFS b ON a.ST_ID=b.ID
INNER JOIN hrdbuser.ST_STBR c ON b.ID=c.STAFFS_ID AND c.ISACTIVE=1
INNER JOIN hrdbuser.STN_POS d ON c.POS_ID=d.ID 
WHERE a.TP='staff' AND a.GAZAR_ID=" + gazarid + " AND a.HELTES_ID=" + heltesid + " AND a.BEGINDATE='" + begindate + "' AND a.ENDDATE='" + enddate + @"' 
ORDER BY d.SORT, a.ST_ID, a.NO";
                }
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string ImplweekImportPlanDatatable(string yr, string tp, string gazarid, string heltesid, string begindate, string enddate)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = "";
                if (tp == "gazar")
                {
                    strQry = "SELECT a.ID, a.NO, a.NAME, b.DOMAIN_ORG as HELTES FROM TBL_PLANWEEK a INNER JOIN TBL_BRANCH b ON a.HELTES_ID=b.BR_ID AND b.YR=" + yr + " WHERE a.TP='heltes' AND a.GAZAR_ID=" + gazarid + " AND a.BEGINDATE='" + begindate + "' AND a.ENDDATE='" + enddate + "' ORDER BY b.SORT, a.NO";
                }
                else if (tp == "heltes")
                {
                    strQry = @"SELECT a.ID, a.NO, a.NAME, SUBSTR(b.LNAME,0,1)||'.'||SUBSTR(b.FNAME,1,1)||LOWER(SUBSTR(b.FNAME,2))||' | '||d.NAME as STAFF  
FROM TBL_PLANWEEK a 
INNER JOIN hrdbuser.ST_STAFFS b ON a.ST_ID=b.ID
INNER JOIN hrdbuser.ST_STBR c ON b.ID=c.STAFFS_ID AND c.ISACTIVE=1
INNER JOIN hrdbuser.STN_POS d ON c.POS_ID=d.ID
WHERE a.TP='staff' AND a.GAZAR_ID=" + gazarid + " AND a.HELTES_ID=" + heltesid + " AND a.BEGINDATE='" + begindate + "' AND a.ENDDATE='" + enddate + @"' 
ORDER BY d.SORT, a.ST_ID, a.NO";
                }
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string ImplweekTab3ReportImpl(string yr, string gazarid, string begindate, string enddate)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string qry = "";
            try
            {
                if (gazarid=="0") {
                    qry="SELECT a.HELTES_ID, b.BR_NAME, a.NO||'. '||a.NAME  as NAME FROM TBL_IMPLWEEK a INNER JOIN TBL_BRANCH b ON a.HELTES_ID=b.BR_ID AND b.YR=" + yr + " WHERE a.TP='heltes'  AND a.BEGINDATE='" + begindate + "' AND a.ENDDATE='" + enddate + "' ORDER BY b.SORT, a.HELTES_ID, a.NO";
                }
                else {
                    qry = "SELECT a.HELTES_ID, b.BR_NAME, a.NO||'. '||a.NAME  as NAME FROM TBL_IMPLWEEK a INNER JOIN TBL_BRANCH b ON a.HELTES_ID=b.BR_ID AND b.YR=" + yr + " WHERE a.TP='heltes' AND a.GAZAR_ID=" + gazarid + " AND a.BEGINDATE='" + begindate + "' AND a.ENDDATE='" + enddate + "' ORDER BY b.SORT, a.HELTES_ID, a.NO";

                }


                DataSet ds = myObj.OracleExecuteDataSet(qry);

                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string ImplweekTab3ReportPlan(string yr, string gazarid, string begindate, string enddate)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT a.HELTES_ID, b.BR_NAME, a.NO||'. '||a.NAME  as NAME FROM TBL_PLANWEEK a INNER JOIN TBL_BRANCH b ON a.HELTES_ID=b.BR_ID AND b.YR=" + yr + " WHERE a.TP='heltes' AND a.GAZAR_ID=" + gazarid + " AND a.BEGINDATE='" + begindate + "' AND a.ENDDATE='" + enddate + "' ORDER BY b.SORT, a.HELTES_ID, a.NO");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void IMPLWEEK_IMPORT_HELTES(string P_TP, string P_GAZAR_ID, string P_HELTES_ID, string P_BEGINDATE, string P_ENDDATE, string P_IMPLLIST)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[6], ParamValue = new string[6];
                ParamName[0] = "P_TP";
                ParamName[1] = "P_GAZAR_ID";
                ParamName[2] = "P_HELTES_ID";
                ParamName[3] = "P_BEGINDATE";
                ParamName[4] = "P_ENDDATE";
                ParamName[5] = "P_IMPLLIST";
                ParamValue[0] = P_TP;
                ParamValue[1] = P_GAZAR_ID;
                ParamValue[2] = P_HELTES_ID;
                ParamValue[3] = P_BEGINDATE;
                ParamValue[4] = P_ENDDATE;
                ParamValue[5] = P_IMPLLIST;
                myObj.SP_OracleExecuteNonQuery("IMPLWEEK_IMPORT_HELTES", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void IMPLWEEK_IMPORT_GAZAR(string P_TP, string P_GAZAR_ID, string P_BEGINDATE, string P_ENDDATE, string P_IMPLLIST)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[5], ParamValue = new string[5];
                ParamName[0] = "P_TP";
                ParamName[1] = "P_GAZAR_ID";
                ParamName[2] = "P_BEGINDATE";
                ParamName[3] = "P_ENDDATE";
                ParamName[4] = "P_IMPLLIST";
                ParamValue[0] = P_TP;
                ParamValue[1] = P_GAZAR_ID;
                ParamValue[2] = P_BEGINDATE;
                ParamValue[3] = P_ENDDATE;
                ParamValue[4] = P_IMPLLIST;
                myObj.SP_OracleExecuteNonQuery("IMPLWEEK_IMPORT_GAZAR", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void PLANWEEK_IMPORT_HELTES(string P_TP, string P_GAZAR_ID, string P_HELTES_ID, string P_BEGINDATE, string P_ENDDATE, string P_IMPLLIST)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[6], ParamValue = new string[6];
                ParamName[0] = "P_TP";
                ParamName[1] = "P_GAZAR_ID";
                ParamName[2] = "P_HELTES_ID";
                ParamName[3] = "P_BEGINDATE";
                ParamName[4] = "P_ENDDATE";
                ParamName[5] = "P_IMPLLIST";
                ParamValue[0] = P_TP;
                ParamValue[1] = P_GAZAR_ID;
                ParamValue[2] = P_HELTES_ID;
                ParamValue[3] = P_BEGINDATE;
                ParamValue[4] = P_ENDDATE;
                ParamValue[5] = P_IMPLLIST;
                myObj.SP_OracleExecuteNonQuery("PLANWEEK_IMPORT_HELTES", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void PLANWEEK_IMPORT_GAZAR(string P_TP, string P_GAZAR_ID, string P_BEGINDATE, string P_ENDDATE, string P_IMPLLIST)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[5], ParamValue = new string[5];
                ParamName[0] = "P_TP";
                ParamName[1] = "P_GAZAR_ID";
                ParamName[2] = "P_BEGINDATE";
                ParamName[3] = "P_ENDDATE";
                ParamName[4] = "P_IMPLLIST";
                ParamValue[0] = P_TP;
                ParamValue[1] = P_GAZAR_ID;
                ParamValue[2] = P_BEGINDATE;
                ParamValue[3] = P_ENDDATE;
                ParamValue[4] = P_IMPLLIST;
                myObj.SP_OracleExecuteNonQuery("PLANWEEK_IMPORT_GAZAR", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string ImplweekGetListInMonth(string yr)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string returnval = "";
                DateTime strtdt = DateTime.Now;
                GregorianCalendar cal = new GregorianCalendar(GregorianCalendarTypes.Localized);
                int week = cal.GetWeekOfYear(strtdt, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);
                int year = strtdt.Year;
                DayOfWeek day = DayOfWeek.Monday;
                DateTime startOfYear = new DateTime(year, 1, 1);
                int daysToFirstCorrectDay = (((int)day - (int)startOfYear.DayOfWeek) + 7) % 7;
                DateTime FirstDay = startOfYear.AddDays(7 * (week - 1) + daysToFirstCorrectDay);
                DateTime EndDay = startOfYear.AddDays(7 * (week - 1) + daysToFirstCorrectDay).AddDays(4);

                List<DateTime[]> weeks = new List<DateTime[]>();
                DateTime CurrentTime = System.DateTime.Now;
                DateTime beginingDate = new DateTime();
                DateTime CurrentDate = new DateTime(Convert.ToInt32(yr), 01, 01);
                string CurrentDay = CurrentDate.DayOfWeek.ToString();
                if (CurrentDay == DayOfWeek.Monday.ToString())
                {
                    beginingDate = new DateTime(Convert.ToInt32(yr), 01, 01);
                }
                else if (CurrentDay == DayOfWeek.Tuesday.ToString())
                {
                    beginingDate = new DateTime(Convert.ToInt32(yr) - 1, 12, 31);
                }
                else if (CurrentDay == DayOfWeek.Wednesday.ToString())
                {
                    beginingDate = new DateTime(Convert.ToInt32(yr) - 1, 12, 30);
                }
                else if (CurrentDay == DayOfWeek.Thursday.ToString())
                {
                    beginingDate = new DateTime(Convert.ToInt32(yr) - 1, 12, 29);
                }
                else if (CurrentDay == DayOfWeek.Friday.ToString())
                {
                    beginingDate = new DateTime(Convert.ToInt32(yr) - 1, 12, 28);
                }
                else if (CurrentDay == DayOfWeek.Saturday.ToString())
                {
                    beginingDate = new DateTime(Convert.ToInt32(yr), 01, 03);
                }
                else if (CurrentDay == DayOfWeek.Sunday.ToString())
                {
                    beginingDate = new DateTime(Convert.ToInt32(yr), 01, 02);
                }
                DateTime beginDate = beginingDate;
                DateTime endDate = new DateTime(Convert.ToInt32(yr) + 1, 01, 01);
                DateTime monday = DateTime.Today;
                DateTime friday = DateTime.Today;
                while (beginDate < endDate)
                {
                    if (beginDate.DayOfWeek == DayOfWeek.Monday)
                    {
                        monday = beginDate;
                    }
                    else if (beginDate.DayOfWeek == DayOfWeek.Friday)
                    {
                        friday = beginDate;
                    }
                    else if (beginDate.DayOfWeek == DayOfWeek.Saturday)
                    {
                        weeks.Add(new DateTime[] { monday, friday });
                    }
                    beginDate = beginDate.AddDays(1);
                }
                string strWeekList = "", strMonth = "";
                for (int x = 0; x < weeks.Count; x++)
                {
                    if (strMonth != Convert.ToInt32(weeks[x][0].Date.ToString("MM")).ToString() && strMonth!="") {
                        if(Convert.ToInt32(DateTime.Today.ToString("MM")).ToString() == strMonth) returnval += "<option selected value=\"" + strMonth + "\" data-value=\"" + strWeekList + "\">" + strMonth + "-р сар</option>";
                        else returnval += "<option value=\""+ strMonth + "\" data-value=\""+ strWeekList + "\">" + strMonth + "-р сар</option>";
                        strWeekList = "";
                    }
                    if(strWeekList != "") strWeekList += ",";
                    strWeekList += weeks[x][0].Date.ToString("yyyy-MM-dd") + " - " + weeks[x][1].Date.ToString("yyyy-MM-dd");
                    strMonth = Convert.ToInt32(weeks[x][0].Date.ToString("MM")).ToString();
                }
                return returnval;
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string ImplweekTab4Datatable(string yr, string gazarid, string heltesid, string weeklist)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strQry01 = "", strQry02 = "", strHead = "";
            string strGazarId2 = "", strHeltesId2 = "";
            string strMnth = Convert.ToInt32(weeklist.Split(',')[0].Split('-')[1]).ToString();
            if (gazarid != "")
            {
                strGazarId2 = " AND a.GAZAR_ID = " + gazarid;
                gazarid = " AND d.FATHER_ID = " + gazarid;
            }
            if (heltesid != "")
            {
                strHeltesId2 = " AND a.HELTES_ID = " + heltesid;
                heltesid = " AND b.BRANCH_ID = " + heltesid;
            }
            for (int i = 0; i < weeklist.Split(',').Length; i++) {
                if (strQry01 != "") strQry01 += " UNION ALL ";
                strQry01 += "SELECT '"+weeklist.Split(',')[i]+"' as DT FROM DUAL";

                if (strQry02 != "") strQry02 += ", ";
                strQry02 += "'"+ weeklist.Split(',')[i] + "' as \""+ weeklist.Split(',')[i] + "\"";

                strHead += "<th style=\"border: 1px solid #000; padding:5px; text-align:center;\">"+ weeklist.Split(',')[i] + "</th>";
            }
            string strQry = @"SELECT * 
FROM(
  SELECT a.STAFFS_ID, a.NEGJID, a.NEGJSORT, a.NEGJ, a.STAFFNAME, a.POSNAME, a.POSSORT, a.DT, CASE WHEN b.ST_ID is not null THEN 1 ELSE 0 END as ISCHECK
  FROM(
    SELECT a.STAFFS_ID, a.NEGJID, a.NEGJSORT, a.NEGJ, a.STAFFNAME, a.POSNAME, a.POSSORT, b.DT
    FROM(
      SELECT a.ID as STAFFS_ID
        , b.BRANCH_ID as NEGJID
        , d.SORT as NEGJSORT
        , CASE WHEN d.ID = d.FATHER_ID THEN d.INITNAME ELSE f.INITNAME || '-' || d.INITNAME END as NEGJ
        , SUBSTR(a.LNAME, 0, 1) || '.' || SUBSTR(a.FNAME, 1, 1) || LOWER(SUBSTR(a.FNAME, 2)) as STAFFNAME
        , g.NAME AS POSNAME
        , g.SORT as POSSORT
      FROM hrdbuser.ST_STAFFS a
      INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1
      INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1
      INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
      INNER JOIN hrdbuser.ST_BRANCH f ON d.FATHER_ID = f.ID AND f.ISACTIVE = 1
      LEFT JOIN hrdbuser.STN_POS g ON b.POS_ID = g.ID
      WHERE 1=1"+gazarid+heltesid+@"
    ) a,
    (
      "+ strQry01 + @"
    ) b
  ) a
  LEFT JOIN(
    SELECT a.ST_ID, a.BEGINDATE || ' - ' || a.ENDDATE as DT
    FROM TBL_IMPLWEEK a
    WHERE a.TP = 'staff' AND TO_NUMBER(TO_CHAR(TO_DATE(a.BEGINDATE, 'YYYY-MM-DD'), 'YYYY')) = "+yr+@" AND TO_NUMBER(TO_CHAR(TO_DATE(a.BEGINDATE, 'YYYY-MM-DD'), 'MM')) = "+ strMnth + strGazarId2+strHeltesId2+@"
  ) b ON a.STAFFS_ID = b.ST_ID AND a.DT = b.DT
)
PIVOT(
  SUM(ISCHECK)
  FOR DT IN("+ strQry02 + @")
)
ORDER BY NEGJSORT, POSSORT, STAFFS_ID";
            string strTableVal = "";
            strTableVal = "<table style=\"border: 1px solid #000; border-collapse: collapse; font: 11pt arial, sans-serif; width: 100%;\"><thead style=\"background-color:C6D9F1;\"><tr>";
            //strTableVal += "<th style=\"border: 1px solid #000; padding:5px; text-align:center; width:1%;\">#</th>";
            strTableVal += "<th style=\"border: 1px solid #000; padding:5px; text-align:center;\">Нэгж</th>";
            strTableVal += "<th style=\"border: 1px solid #000; padding:5px; text-align:center;\">Ажилтан</th>";
            strTableVal += "<th style=\"border: 1px solid #000; padding:5px; text-align:center;\">Албан тушаал</th>";
            strTableVal += strHead;
            strTableVal += "</tr></thead><tbody>";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                if (ds.Tables[0].Rows.Count != 0)
                {
                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {
                        strTableVal += "<tr>";
                        //strTableVal += "<td style=\"border: 1px solid #000; padding:5px; text-align:center;\">" + dr["ROWNO"].ToString() + "</td>";
                        strTableVal += "<td style=\"border: 1px solid #000; padding:5px;\">" + dr["NEGJ"].ToString() + "</td>";
                        strTableVal += "<td style=\"border: 1px solid #000; padding:5px;\">" + dr["STAFFNAME"].ToString() + "</td>";
                        strTableVal += "<td style=\"border: 1px solid #000; padding:5px;\">" + dr["POSNAME"].ToString() + "</td>";
                        for (int i = 0; i < weeklist.Split(',').Length; i++)
                        {
                            strTableVal += "<td style=\"border: 1px solid #000; padding:5px; text-align:center;\">" + dr[weeklist.Split(',')[i]].ToString() + "</td>";
                        }                            
                        strTableVal += "</tr>";
                    }
                }
                return strTableVal;
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }

        public string ImplweekPlanmnthList(string yr, string mnth, string gazar, string heltes, string stid)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (gazar != "") gazar = " AND f.BR_ID=" + gazar;
            if (heltes != "") heltes = " AND d.BR_ID=" + heltes;
            if (stid != "") stid = " AND g.USER_ID=" + stid;
            string strQry = "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                strQry = @"SELECT a.ID, f.NO||'.'||d.NO||'.'||c.NO||'.'||b.NO||'. '||b.NAME as NAME
FROM (
  SELECT a.ID
  FROM TBL_PLANMNTH a 
  INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
  INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID = c.ID
  INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID = d.FUNC_ACTION_ID 
  INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID = f.ID AND b.YR = f.YR 
  LEFT JOIN TBL_PLANMNTH_USER g ON a.ID = g.PLANMNTH_ID
  WHERE
    a.SUBMIT_D2=1 AND 
    TO_NUMBER(TO_CHAR(a.STRT_DATE,'YYYY'))=" + yr + @" AND 
    TO_NUMBER(TO_CHAR(a.STRT_DATE,'MM'))=" + mnth + gazar + heltes + heltes + stid + @"
  GROUP BY a.ID
) a
INNER JOIN TBL_PLANMNTH b ON a.ID=b.ID
INNER JOIN TBL_PLANYR c ON b.PLANYR_ID=c.ID
INNER JOIN TBL_FUNC_ACTION d ON c.FUNC_ACTION_ID = d.ID
INNER JOIN TBL_FUNC_STRAT f ON d.FUNC_STRAT_ID = f.ID AND c.YR = f.YR
ORDER BY f.NO, d.NO, c.NO, b.NO";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }



        //*****auditinternal.aspx*****//
        public string AuditinternalReportListDDL(string yr)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (yr != "") yr = " WHERE YR="+yr;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT ID, NO, NAME FROM TBL_AUDITINTERNAL_REPORT"+yr+" ORDER BY YR DESC, MNTH DESC");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AuditinternalReportListRecDDL(string yr)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (yr != "") yr = " WHERE b.YR=" + yr;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT a.AUDITINTERNAL_REPORT_ID, b.NO, b.NAME FROM ( SELECT AUDITINTERNAL_REPORT_ID FROM TBL_AUDITINTERNAL_RECOMMEND GROUP BY AUDITINTERNAL_REPORT_ID ) a INNER JOIN TBL_AUDITINTERNAL_REPORT b ON a.AUDITINTERNAL_REPORT_ID = b.ID"+yr+ " ORDER BY b.NO, b.NAME DESC");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AuditinternalGazarListForSelect2(string selectedList, string yr)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = "SELECT a.BR_ID, a.DOMAIN_ORG, CASE WHEN a.BR_TYPE1=3 THEN 'Дотоод нэгжүүд' WHEN a.BR_TYPE1=5 THEN 'Бусад' END as BR_TYPE1, a.BR_NAME, NVL2(b.BR_ID,' selected=\"selected\"',null) as ISSELECTED FROM ( SELECT BR_ID, DOMAIN_ORG, BR_TYPE1, BR_NAME FROM TBL_BRANCH WHERE (BR_TYPE1=5 OR BR_TYPE1=3) AND BR_ID!=9911 AND YR=" + yr + " ORDER BY BR_TYPE1 ) a LEFT JOIN ( SELECT TO_NUMBER(BR_ID) as BR_ID FROM ( select regexp_substr('" + selectedList + "','[^,]+', 1, level) AS BR_ID from dual connect by regexp_substr('" + selectedList + "', '[^,]+', 1, level) is not null ) a ) b ON a.BR_ID=b.BR_ID ORDER BY a.BR_TYPE1";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }




        //*****srvclient.aspx*****//
        public string SrvclientTab1Datatable(string yr, string mnth, string mnth2)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strMnths = "";
            for (int i = Convert.ToInt32(mnth); i <= Convert.ToInt32(mnth2); i++) {
                if (strMnths != "") strMnths += ",";
                strMnths += i.ToString();
            }
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = @"SELECT SORT, BR_NAME, TP1SRV1, TP1SRV0, TP2SRV1, TP2SRV2, TP2SRV3
  , PER
  , ROUND((PER*0.05),1) as PNT
  , CASE WHEN PER < 50 THEN 'bg-color-red' WHEN PER > 49 AND PER < 80 THEN 'bg-color-orange' WHEN PER>79 THEN 'bg-color-greenLight' END as PERCOLOR
FROM ( SELECT b.SORT,b.BR_NAME, SUM(a.TP1SRV1) as TP1SRV1, SUM(a.TP1SRV0) as TP1SRV0, SUM(a.TP2SRV1) as TP2SRV1, SUM(a.TP2SRV2) as TP2SRV2, SUM(a.TP2SRV3) as TP2SRV3, CASE WHEN (SUM(a.TP1SRV0)+SUM(a.TP1SRV1))=0 THEN 100 ELSE CASE WHEN SUM(a.TP1SRV1)=0 THEN 0 ELSE ROUND((SUM(a.TP1SRV1)/(SUM(a.TP1SRV0)+SUM(a.TP1SRV1)))*100,1) END END as PER FROM ( SELECT TO_NUMBER(BR_ID) as BR_ID, 0 as TP1SRV1, 0 as TP1SRV0, 0 as TP2SRV1, 0 as TP2SRV2, 0 as TP2SRV3 FROM TBL_BRANCH WHERE BR_TYPE1=3 AND BR_ID!=9911 AND YR=" + yr + " UNION ALL SELECT BR_ID, SUM(TP1SRV1) as TP1SRV1, SUM(TP1SRV0) as TP1SRV0, SUM(TP2SRV1) as TP2SRV1, SUM(TP2SRV2) as TP2SRV2, SUM(TP2SRV3) as TP2SRV3 FROM ( SELECT BR_ID, COUNT(1) as TP1SRV1, 0 as TP1SRV0, 0 as TP2SRV1, 0 as TP2SRV2, 0 as TP2SRV3 FROM hrdbuser.ST_SRV_CLIENT WHERE TO_NUMBER(TO_CHAR(DT,'YYYY'))=" + yr + " AND TO_NUMBER(TO_CHAR(DT,'MM')) IN (" + strMnths + ") AND TYPE=1 AND SRV=1 GROUP BY BR_ID UNION ALL SELECT BR_ID, 0 as TP1SRV1, COUNT(1) as TP1SRV0, 0 as TP2SRV1, 0 as TP2SRV2, 0 as TP2SRV3 FROM hrdbuser.ST_SRV_CLIENT WHERE TO_NUMBER(TO_CHAR(DT,'YYYY'))=" + yr + " AND TO_NUMBER(TO_CHAR(DT,'MM')) IN (" + strMnths + ") AND TYPE=1 AND SRV=0 GROUP BY BR_ID UNION ALL SELECT BR_ID, 0 as TP1SRV1, 0 as TP1SRV0, COUNT(1) as TP2SRV1, 0 as TP2SRV2, 0 as TP2SRV3 FROM hrdbuser.ST_SRV_CLIENT WHERE TO_NUMBER(TO_CHAR(DT,'YYYY'))=" + yr + " AND TO_NUMBER(TO_CHAR(DT,'MM')) IN (" + strMnths + ") AND TYPE=2 AND SRV=1 GROUP BY BR_ID UNION ALL SELECT BR_ID, 0 as TP1SRV1, 0 as TP1SRV0, 0 as TP2SRV1, COUNT(1) as TP2SRV2, 0 as TP2SRV3 FROM hrdbuser.ST_SRV_CLIENT WHERE TO_NUMBER(TO_CHAR(DT,'YYYY'))=" + yr + " AND TO_NUMBER(TO_CHAR(DT,'MM')) IN (" + strMnths + ") AND TYPE=2 AND SRV=2 GROUP BY BR_ID UNION ALL SELECT BR_ID, 0 as TP1SRV1, 0 as TP1SRV0, 0 as TP2SRV1, 0 as TP2SRV2, COUNT(1) as TP2SRV3 FROM hrdbuser.ST_SRV_CLIENT WHERE TO_NUMBER(TO_CHAR(DT,'YYYY'))=" + yr + " AND TO_NUMBER(TO_CHAR(DT,'MM')) IN (" + strMnths + ") AND TYPE=2 AND SRV=3 GROUP BY BR_ID ) GROUP BY BR_ID ) a INNER JOIN TBL_BRANCH b ON a.BR_ID=b.BR_ID AND b.YR=" + yr + @" GROUP BY b.SORT, b.BR_NAME 
)
ORDER BY SORT";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }




        //*****srv.aspx*****//
        public string SrvQuestionDatatable(string type, string isactive)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (isactive != "") isactive = " AND IS_ACTIVE=" + isactive;
            string strQry = "SELECT ROWNUM as ROWNO, a.* FROM (SELECT ID, NAME, CASE WHEN IS_ACTIVE=1 THEN ' checked=\"checked\"' ELSE null END as IS_ACTIVE FROM TBL_SRV_QUESTION WHERE SRV_TYPE_ID=" + type + isactive + " ORDER BY ID ) a";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string SrvAnswerDatatable(string type, string isactive)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (isactive != "") isactive = " AND IS_ACTIVE=" + isactive;
            string strQry = "SELECT ROWNUM as ROWNO, a.* FROM (SELECT ID, NAME, CASE WHEN IS_ACTIVE=1 THEN ' checked=\"checked\"' ELSE null END as IS_ACTIVE, PER FROM TBL_SRV_ANSWER WHERE SRV_TYPE_ID=" + type + isactive + " ORDER BY ID ) a";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string SrvTab1t2Datatable(string yr, string yrhf)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strQry = "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObjGetTableData.getCurrentInfo();
                string curYr = ds.Tables[0].Rows[0]["YEAR"].ToString();
                string curYrHf = ds.Tables[0].Rows[0]["YEARHALF"].ToString();
                if (yr == curYr && yrhf == curYrHf)
                {
                    strQry = @"SELECT 
  a.QID, 
  a.QNAME, 
  NVL(RTRIM(xmlagg (xmlelement (e, a.ST_ID || '~') ORDER BY c.SORT, a.ST_ID).extract('//text()'), '~'),'none') STIDLIST, 
  NVL(RTRIM(xmlagg (xmlelement (e, a.ST_NAME || '~') ORDER BY c.SORT, a.ST_ID).extract('//text()'), '~'),'none') STNAMELIST, 
  NVL(RTRIM(xmlagg (xmlelement (e, a.ANSWERIDLIST || '~') ORDER BY c.SORT, a.ST_ID).extract('//text()'), '~'),'none') as ANSWERIDLISTLIST, 
  NVL(RTRIM(xmlagg (xmlelement (e, ISCHECKLIST || '~') ORDER BY c.SORT, a.ST_ID).extract('//text()'), '~'),'none') ISCHECKLISTLIST, 
  1 as SRVTYPE 
FROM ( 
    SELECT QID, QNAME, ST_ID, ST_NAME, NVL(RTRIM(xmlagg (xmlelement (e, ANSWERID || ',') ORDER BY ANSWERPER DESC).extract('//text()'), ','),'none') ANSWERIDLIST, NVL(RTRIM(xmlagg (xmlelement (e, ISCHECK || ',') ORDER BY ANSWERPER DESC).extract('//text()'), ','),'none') ISCHECKLIST 
    FROM ( 
        SELECT a.QID, b.NAME as QNAME, a.ST_ID, (SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 0, 1) || LOWER(SUBSTR(c.FNAME, 2))) as ST_NAME, a.ANSWERID, a.ISCHECK, h.PER as ANSWERPER 
        FROM ( 
            SELECT QID, ST_ID, ANSWERID, SUM(ISCHECK) as ISCHECK 
            FROM ( 
                SELECT a.QID, a.ST_ID, b.ANSWERID, 0 as ISCHECK 
                FROM ( 
                    SELECT a.ID as QID, b.ST_ID 
                    FROM TBL_SRV_QUESTION a, ( 
                        SELECT a.ID as ST_ID, (SUBSTR(a.LNAME, 0, 1) || '.' || SUBSTR(a.FNAME, 0, 1) || LOWER(SUBSTR(a.FNAME, 2))) as ST_NAME 
                        FROM hrdbuser.ST_STAFFS a
                        INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1
                        INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1
                        INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
                        INNER JOIN hrdbuser.STN_POS g ON b.POS_ID = g.ID
                        WHERE b.POS_ID=2010201
                        ORDER BY g.SORT, a.ID 
                    ) b 
                    WHERE a.IS_ACTIVE=1 AND SRV_TYPE_ID=1 
                ) a, ( 
                    SELECT ID as ANSWERID 
                    FROM TBL_SRV_ANSWER 
                    WHERE SRV_TYPE_ID=1 AND IS_ACTIVE=1 
                    ORDER BY PER 
                ) b 
                UNION ALL 
                SELECT h.SRV_QUESTION_ID as QID, h.TRGT_ID as ST_ID, h.SRV_ANSWER_ID as ANSWERID, 1 as ISCHECK 
                FROM TBL_SRV h 
                INNER JOIN hrdbuser.ST_STAFFS a ON h.TRGT_ID=a.ID 
                INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1 
                INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1 
                INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
                WHERE h.YR="+yr+" AND h.YR_HF="+yrhf+@" AND h.SRV_TYPE_ID=1 
            ) 
            GROUP BY QID, ST_ID, ANSWERID 
        ) a 
        INNER JOIN TBL_SRV_QUESTION b ON a.QID=b.ID 
        INNER JOIN hrdbuser.ST_STAFFS c ON a.ST_ID=c.ID
        INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
        INNER JOIN hrdbuser.STN_POS g ON d.POS_ID = g.ID 
        INNER JOIN TBL_SRV_ANSWER h ON a.ANSWERID=h.ID
        ORDER BY a.QID, g.SORT, a.ST_ID, h.PER DESC
    ) 
    GROUP BY QID, QNAME, ST_ID, ST_NAME 
) a
INNER JOIN hrdbuser.ST_STBR b ON a.ST_ID=b.STAFFS_ID AND b.ISACTIVE = 1
INNER JOIN hrdbuser.STN_POS c ON b.POS_ID=c.ID
GROUP BY a.QID, a.QNAME";
                }
                else
                {
                    if (yr == curYr)
                    {
                        if (Int32.Parse(yrhf) > Int32.Parse(curYrHf))
                        {
                            strQry = @"SELECT 
  a.QID, 
  a.QNAME, 
  NVL(RTRIM(xmlagg (xmlelement (e, a.ST_ID || '~') ORDER BY c.SORT, a.ST_ID).extract('//text()'), '~'),'none') STIDLIST, 
  NVL(RTRIM(xmlagg (xmlelement (e, a.ST_NAME || '~') ORDER BY c.SORT, a.ST_ID).extract('//text()'), '~'),'none') STNAMELIST, 
  NVL(RTRIM(xmlagg (xmlelement (e, a.ANSWERIDLIST || '~') ORDER BY c.SORT, a.ST_ID).extract('//text()'), '~'),'none') as ANSWERIDLISTLIST, 
  NVL(RTRIM(xmlagg (xmlelement (e, ISCHECKLIST || '~') ORDER BY c.SORT, a.ST_ID).extract('//text()'), '~'),'none') ISCHECKLISTLIST, 
  1 as SRVTYPE 
FROM(
  SELECT QID, QNAME, ST_ID, ST_NAME, NVL(RTRIM(xmlagg(xmlelement(e, ANSWERID || ',') ORDER BY ANSWERPER DESC).extract('//text()'), ','), 'none') ANSWERIDLIST, NVL(RTRIM(xmlagg(xmlelement(e, ISCHECK || ',') ORDER BY ANSWERPER DESC).extract('//text()'), ','), 'none') ISCHECKLIST
  FROM(
    SELECT a.QID, b.NAME as QNAME, a.ST_ID, (SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 0, 1) || LOWER(SUBSTR(c.FNAME, 2))) as ST_NAME, a.ANSWERID, a.ISCHECK, h.PER as ANSWERPER
    FROM(
      SELECT QID, ST_ID, ANSWERID, SUM(ISCHECK) as ISCHECK
      FROM(
        SELECT a.QID, a.ST_ID, b.ANSWERID, 0 as ISCHECK
        FROM(
          SELECT a.ID as QID, b.ST_ID
          FROM TBL_SRV_QUESTION a,
          (
            SELECT a.ID as ST_ID, (SUBSTR(a.LNAME, 0, 1) || '.' || SUBSTR(a.FNAME, 0, 1) || LOWER(SUBSTR(a.FNAME, 2))) as ST_NAME
            FROM hrdbuser.ST_STAFFS a
            INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1
            INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1
            INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
            INNER JOIN hrdbuser.STN_POS g ON b.POS_ID = g.ID
            WHERE b.POS_ID = 2010201
            ORDER BY g.SORT, a.ID
          ) b
          WHERE a.IS_ACTIVE = 1 AND SRV_TYPE_ID = 1
        ) a, (
          SELECT ID as ANSWERID
          FROM TBL_SRV_ANSWER
          WHERE SRV_TYPE_ID = 1 AND IS_ACTIVE = 1
          ORDER BY PER
        ) b
      )
      GROUP BY QID, ST_ID, ANSWERID
    ) a
    INNER JOIN TBL_SRV_QUESTION b ON a.QID = b.ID
    INNER JOIN hrdbuser.ST_STAFFS c ON a.ST_ID = c.ID
    INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
    INNER JOIN hrdbuser.STN_POS g ON d.POS_ID = g.ID
    INNER JOIN TBL_SRV_ANSWER h ON a.ANSWERID=h.ID
    ORDER BY a.QID, g.SORT, a.ST_ID, h.PER DESC
  ) 
  GROUP BY QID, QNAME, ST_ID, ST_NAME
) a
INNER JOIN hrdbuser.ST_STBR b ON a.ST_ID=b.STAFFS_ID AND b.ISACTIVE = 1
INNER JOIN hrdbuser.STN_POS c ON b.POS_ID=c.ID
GROUP BY a.QID, a.QNAME";
                        }
                        else if (Int32.Parse(yrhf) < Int32.Parse(curYrHf))
                        {
                            strQry = @"SELECT 
  a.QID, 
  a.QNAME, 
  NVL(RTRIM(xmlagg (xmlelement (e, a.ST_ID || '~') ORDER BY c.SORT, a.ST_ID).extract('//text()'), '~'),'none') STIDLIST, 
  NVL(RTRIM(xmlagg (xmlelement (e, a.ST_NAME || '~') ORDER BY c.SORT, a.ST_ID).extract('//text()'), '~'),'none') STNAMELIST, 
  NVL(RTRIM(xmlagg (xmlelement (e, a.ANSWERIDLIST || '~') ORDER BY c.SORT, a.ST_ID).extract('//text()'), '~'),'none') as ANSWERIDLISTLIST, 
  NVL(RTRIM(xmlagg (xmlelement (e, ISCHECKLIST || '~') ORDER BY c.SORT, a.ST_ID).extract('//text()'), '~'),'none') ISCHECKLISTLIST, 
  1 as SRVTYPE 
FROM ( 
    SELECT QID, QNAME, ST_ID, ST_NAME, NVL(RTRIM(xmlagg (xmlelement (e, ANSWERID || ',') ORDER BY ANSWERPER DESC).extract('//text()'), ','),'none') ANSWERIDLIST, NVL(RTRIM(xmlagg (xmlelement (e, ISCHECK || ',') ORDER BY ANSWERPER DESC).extract('//text()'), ','),'none') ISCHECKLIST 
    FROM ( 
        SELECT a.QID, b.NAME as QNAME, a.ST_ID, (SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 0, 1) || LOWER(SUBSTR(c.FNAME, 2))) as ST_NAME, a.ANSWERID, a.ISCHECK, h.PER as ANSWERPER 
        FROM ( 
            SELECT QID, ST_ID, ANSWERID, SUM(ISCHECK) as ISCHECK 
            FROM ( 
                SELECT a.QID, a.ST_ID, b.ANSWERID, 0 as ISCHECK 
                FROM ( 
                    SELECT a.ID as QID, b.ST_ID 
                    FROM TBL_SRV_QUESTION a, ( 
                        SELECT a.ID as ST_ID, (SUBSTR(a.LNAME, 0, 1) || '.' || SUBSTR(a.FNAME, 0, 1) || LOWER(SUBSTR(a.FNAME, 2))) as ST_NAME 
                        FROM hrdbuser.ST_STAFFS a
                        INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1
                        INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1
                        INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
                        INNER JOIN hrdbuser.STN_POS g ON b.POS_ID = g.ID
                        WHERE b.POS_ID=2010201
                        ORDER BY g.SORT, a.ID 
                    ) b 
                    WHERE a.IS_ACTIVE=1 AND SRV_TYPE_ID=1 
                ) a, ( 
                    SELECT ID as ANSWERID 
                    FROM TBL_SRV_ANSWER 
                    WHERE SRV_TYPE_ID=1 AND IS_ACTIVE=1 
                    ORDER BY PER 
                ) b 
                UNION ALL 
                SELECT h.SRV_QUESTION_ID as QID, h.TRGT_ID as ST_ID, h.SRV_ANSWER_ID as ANSWERID, 1 as ISCHECK 
                FROM TBL_SRV h 
                INNER JOIN hrdbuser.ST_STAFFS a ON h.TRGT_ID=a.ID 
                INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1 
                INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1 
                INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
                WHERE h.YR=" + yr + " AND h.YR_HF=" + curYrHf + @" AND h.SRV_TYPE_ID=1 
            ) 
            GROUP BY QID, ST_ID, ANSWERID 
        ) a 
        INNER JOIN TBL_SRV_QUESTION b ON a.QID=b.ID 
        INNER JOIN hrdbuser.ST_STAFFS c ON a.ST_ID=c.ID
        INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
        INNER JOIN hrdbuser.STN_POS g ON d.POS_ID = g.ID 
        INNER JOIN TBL_SRV_ANSWER h ON a.ANSWERID=h.ID
        ORDER BY a.QID, g.SORT, a.ST_ID, h.PER DESC
    ) 
    GROUP BY QID, QNAME, ST_ID, ST_NAME 
) a
INNER JOIN hrdbuser.ST_STBR b ON a.ST_ID=b.STAFFS_ID AND b.ISACTIVE = 1
INNER JOIN hrdbuser.STN_POS c ON b.POS_ID=c.ID
GROUP BY a.QID, a.QNAME";
                        }
                    }
                    else if (Int32.Parse(yr) > Int32.Parse(curYr))
                    {
                        strQry = @"SELECT 
  a.QID, 
  a.QNAME, 
  NVL(RTRIM(xmlagg (xmlelement (e, a.ST_ID || '~') ORDER BY c.SORT, a.ST_ID).extract('//text()'), '~'),'none') STIDLIST, 
  NVL(RTRIM(xmlagg (xmlelement (e, a.ST_NAME || '~') ORDER BY c.SORT, a.ST_ID).extract('//text()'), '~'),'none') STNAMELIST, 
  NVL(RTRIM(xmlagg (xmlelement (e, a.ANSWERIDLIST || '~') ORDER BY c.SORT, a.ST_ID).extract('//text()'), '~'),'none') as ANSWERIDLISTLIST, 
  NVL(RTRIM(xmlagg (xmlelement (e, ISCHECKLIST || '~') ORDER BY c.SORT, a.ST_ID).extract('//text()'), '~'),'none') ISCHECKLISTLIST, 
  1 as SRVTYPE 
FROM(
  SELECT QID, QNAME, ST_ID, ST_NAME, NVL(RTRIM(xmlagg(xmlelement(e, ANSWERID || ',') ORDER BY ANSWERPER DESC).extract('//text()'), ','), 'none') ANSWERIDLIST, NVL(RTRIM(xmlagg(xmlelement(e, ISCHECK || ',') ORDER BY ANSWERPER DESC).extract('//text()'), ','), 'none') ISCHECKLIST
  FROM(
    SELECT a.QID, b.NAME as QNAME, a.ST_ID, (SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 0, 1) || LOWER(SUBSTR(c.FNAME, 2))) as ST_NAME, a.ANSWERID, a.ISCHECK, h.PER as ANSWERPER
    FROM(
      SELECT QID, ST_ID, ANSWERID, SUM(ISCHECK) as ISCHECK
      FROM(
        SELECT a.QID, a.ST_ID, b.ANSWERID, 0 as ISCHECK
        FROM(
          SELECT a.ID as QID, b.ST_ID
          FROM TBL_SRV_QUESTION a,
          (
            SELECT a.ID as ST_ID, (SUBSTR(a.LNAME, 0, 1) || '.' || SUBSTR(a.FNAME, 0, 1) || LOWER(SUBSTR(a.FNAME, 2))) as ST_NAME
            FROM hrdbuser.ST_STAFFS a
            INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1
            INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1
            INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
            INNER JOIN hrdbuser.STN_POS g ON b.POS_ID = g.ID
            WHERE b.POS_ID = 2010201
            ORDER BY g.SORT, a.ID
          ) b
          WHERE a.IS_ACTIVE = 1 AND SRV_TYPE_ID = 1
        ) a, (
          SELECT ID as ANSWERID
          FROM TBL_SRV_ANSWER
          WHERE SRV_TYPE_ID = 1 AND IS_ACTIVE = 1
          ORDER BY PER
        ) b
      )
      GROUP BY QID, ST_ID, ANSWERID
    ) a
    INNER JOIN TBL_SRV_QUESTION b ON a.QID = b.ID
    INNER JOIN hrdbuser.ST_STAFFS c ON a.ST_ID = c.ID
    INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
    INNER JOIN hrdbuser.STN_POS g ON d.POS_ID = g.ID
    INNER JOIN TBL_SRV_ANSWER h ON a.ANSWERID=h.ID
    ORDER BY a.QID, g.SORT, a.ST_ID, h.PER DESC
  ) 
  GROUP BY QID, QNAME, ST_ID, ST_NAME
) a
INNER JOIN hrdbuser.ST_STBR b ON a.ST_ID=b.STAFFS_ID AND b.ISACTIVE = 1
INNER JOIN hrdbuser.STN_POS c ON b.POS_ID=c.ID
GROUP BY a.QID, a.QNAME";
                    }
                    else if (Int32.Parse(yr) < Int32.Parse(curYr))
                    {
                        strQry = @"SELECT 
  a.QID, 
  a.QNAME, 
  NVL(RTRIM(xmlagg (xmlelement (e, a.ST_ID || '~') ORDER BY c.SORT, a.ST_ID).extract('//text()'), '~'),'none') STIDLIST, 
  NVL(RTRIM(xmlagg (xmlelement (e, a.ST_NAME || '~') ORDER BY c.SORT, a.ST_ID).extract('//text()'), '~'),'none') STNAMELIST, 
  NVL(RTRIM(xmlagg (xmlelement (e, a.ANSWERIDLIST || '~') ORDER BY c.SORT, a.ST_ID).extract('//text()'), '~'),'none') as ANSWERIDLISTLIST, 
  NVL(RTRIM(xmlagg (xmlelement (e, ISCHECKLIST || '~') ORDER BY c.SORT, a.ST_ID).extract('//text()'), '~'),'none') ISCHECKLISTLIST, 
  1 as SRVTYPE 
FROM ( 
    SELECT QID, QNAME, ST_ID, ST_NAME, NVL(RTRIM(xmlagg (xmlelement (e, ANSWERID || ',') ORDER BY ANSWERPER DESC).extract('//text()'), ','),'none') ANSWERIDLIST, NVL(RTRIM(xmlagg (xmlelement (e, ISCHECK || ',') ORDER BY ANSWERPER DESC).extract('//text()'), ','),'none') ISCHECKLIST 
    FROM ( 
        SELECT a.QID, b.NAME as QNAME, a.ST_ID, (SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 0, 1) || LOWER(SUBSTR(c.FNAME, 2))) as ST_NAME, a.ANSWERID, a.ISCHECK, h.PER as ANSWERPER 
        FROM ( 
            SELECT QID, ST_ID, ANSWERID, SUM(ISCHECK) as ISCHECK 
            FROM ( 
                SELECT a.QID, a.ST_ID, b.ANSWERID, 0 as ISCHECK 
                FROM ( 
                    SELECT a.ID as QID, b.ST_ID 
                    FROM TBL_SRV_QUESTION a, ( 
                        SELECT a.ID as ST_ID, (SUBSTR(a.LNAME, 0, 1) || '.' || SUBSTR(a.FNAME, 0, 1) || LOWER(SUBSTR(a.FNAME, 2))) as ST_NAME 
                        FROM hrdbuser.ST_STAFFS a
                        INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1
                        INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1
                        INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
                        INNER JOIN hrdbuser.STN_POS g ON b.POS_ID = g.ID
                        WHERE b.POS_ID=2010201
                        ORDER BY g.SORT, a.ID 
                    ) b 
                    WHERE a.IS_ACTIVE=1 AND SRV_TYPE_ID=1 
                ) a, ( 
                    SELECT ID as ANSWERID 
                    FROM TBL_SRV_ANSWER 
                    WHERE SRV_TYPE_ID=1 AND IS_ACTIVE=1 
                    ORDER BY PER 
                ) b 
                UNION ALL 
                SELECT h.SRV_QUESTION_ID as QID, h.TRGT_ID as ST_ID, h.SRV_ANSWER_ID as ANSWERID, 1 as ISCHECK 
                FROM TBL_SRV h 
                INNER JOIN hrdbuser.ST_STAFFS a ON h.TRGT_ID=a.ID 
                INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1 
                INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1 
                INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
                WHERE h.YR=" + yr + " AND h.YR_HF=" + curYrHf + @" AND h.SRV_TYPE_ID=1 
            ) 
            GROUP BY QID, ST_ID, ANSWERID 
        ) a 
        INNER JOIN TBL_SRV_QUESTION b ON a.QID=b.ID 
        INNER JOIN hrdbuser.ST_STAFFS c ON a.ST_ID=c.ID
        INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
        INNER JOIN hrdbuser.STN_POS g ON d.POS_ID = g.ID 
        INNER JOIN TBL_SRV_ANSWER h ON a.ANSWERID=h.ID
        ORDER BY a.QID, g.SORT, a.ST_ID, h.PER DESC
    ) 
    GROUP BY QID, QNAME, ST_ID, ST_NAME 
) a
INNER JOIN hrdbuser.ST_STBR b ON a.ST_ID=b.STAFFS_ID AND b.ISACTIVE = 1
INNER JOIN hrdbuser.STN_POS c ON b.POS_ID=c.ID
GROUP BY a.QID, a.QNAME";
                    }
                }
                ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void SRV_INSUPT(string P_STAFFEVALLIST, string P_QUESTION_ID, string P_SRV_TYPE_ID, string P_YR, string P_YR_HF, string P_QRTR, string P_STAFFID)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[7], ParamValue = new string[7];
                ParamName[0] = "P_STAFFEVALLIST";
                ParamName[1] = "P_QUESTION_ID";
                ParamName[2] = "P_SRV_TYPE_ID";
                ParamName[3] = "P_YR";
                ParamName[4] = "P_YR_HF";
                ParamName[5] = "P_QRTR";
                ParamName[6] = "P_STAFFID";
                ParamValue[0] = P_STAFFEVALLIST;
                ParamValue[1] = P_QUESTION_ID;
                ParamValue[2] = P_SRV_TYPE_ID;
                ParamValue[3] = P_YR;
                ParamValue[4] = P_YR_HF;
                ParamValue[5] = P_QRTR;
                ParamValue[6] = P_STAFFID;
                myObj.SP_OracleExecuteNonQuery("SRV_INSUPT", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string SrvTab1t3Datatable(string yr, string yrhf, string brid)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strQry = "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                if (brid != "") brid = " AND f.FATHER_ID=" + brid;
                strQry = @"SELECT ROWNUM as ROWNO, a.BR_NAME, a.STNAME, a.QUESTION_NAME, a.PER, a.POINT, CASE WHEN a.PER < 50 THEN 'bg-color-red' WHEN a.PER > 49 AND a.PER < 80 THEN 'bg-color-orange' WHEN a.PER>79 THEN 'bg-color-greenLight' END as PERCOLOR
FROM ( 
    SELECT g.SORT, g.NAME as BR_NAME, (SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 0, 1) || LOWER(SUBSTR(c.FNAME, 2))) as STNAME, h.NAME as QUESTION_NAME, ROUND(SUM(b.PER)/COUNT(b.PER),1) as PER, ROUND((ROUND(SUM(b.PER)/COUNT(b.PER),1)/100)*4,1) as POINT
    FROM TBL_SRV a
    INNER JOIN TBL_SRV_ANSWER b ON a.SRV_ANSWER_ID=b.ID
    INNER JOIN hrdbuser.ST_STAFFS c ON a.TRGT_ID=c.ID
    INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
    INNER JOIN hrdbuser.ST_BRANCH f ON d.BRANCH_ID = f.ID AND f.ISACTIVE = 1
    INNER JOIN hrdbuser.ST_BRANCH g ON f.FATHER_ID = g.ID AND g.ISACTIVE = 1
    INNER JOIN TBL_SRV_QUESTION h ON a.SRV_QUESTION_ID=h.ID
    WHERE a.SRV_TYPE_ID=1 AND a.YR=" + yr + " AND a.YR_HF=" + yrhf + brid + @" 
    GROUP BY g.SORT, g.NAME, (SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 0, 1) || LOWER(SUBSTR(c.FNAME, 2))), h.NAME
    ORDER BY g.SORT, h.NAME
) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string SrvTab2t2Datatable(string yr, string yrhf, string gazarid)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strQry = "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObjGetTableData.getCurrentInfo();
                string curYr = ds.Tables[0].Rows[0]["YEAR"].ToString();
                string curYrHf = ds.Tables[0].Rows[0]["YEARHALF"].ToString();
                if (yr == curYr && yrhf == curYrHf)
                {
                    strQry = @"SELECT 
  a.QID, 
  a.QNAME, 
  NVL(RTRIM(xmlagg (xmlelement (e, a.ST_ID || '~') ORDER BY c.SORT, a.ST_ID).extract('//text()'), '~'),'none') STIDLIST, 
  NVL(RTRIM(xmlagg (xmlelement (e, a.ST_NAME || '~') ORDER BY c.SORT, a.ST_ID).extract('//text()'), '~'),'none') STNAMELIST, 
  NVL(RTRIM(xmlagg (xmlelement (e, a.ANSWERIDLIST || '~') ORDER BY c.SORT, a.ST_ID).extract('//text()'), '~'),'none') as ANSWERIDLISTLIST, 
  NVL(RTRIM(xmlagg (xmlelement (e, ISCHECKLIST || '~') ORDER BY c.SORT, a.ST_ID).extract('//text()'), '~'),'none') ISCHECKLISTLIST, 
  2 as SRVTYPE 
FROM ( 
    SELECT QID, QNAME, ST_ID, ST_NAME, NVL(RTRIM(xmlagg (xmlelement (e, ANSWERID || ',') ORDER BY ANSWERPER DESC).extract('//text()'), ','),'none') ANSWERIDLIST, NVL(RTRIM(xmlagg (xmlelement (e, ISCHECK || ',') ORDER BY ANSWERPER DESC).extract('//text()'), ','),'none') ISCHECKLIST 
    FROM ( 
        SELECT a.QID, b.NAME as QNAME, a.ST_ID, (SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 0, 1) || LOWER(SUBSTR(c.FNAME, 2))) as ST_NAME, a.ANSWERID, a.ISCHECK, h.PER as ANSWERPER 
        FROM ( 
            SELECT QID, ST_ID, ANSWERID, SUM(ISCHECK) as ISCHECK 
            FROM ( 
                SELECT a.QID, a.ST_ID, b.ANSWERID, 0 as ISCHECK 
                FROM ( 
                    SELECT a.ID as QID, b.ST_ID 
                    FROM TBL_SRV_QUESTION a, ( 
                        SELECT a.ID as ST_ID, (SUBSTR(a.LNAME, 0, 1) || '.' || SUBSTR(a.FNAME, 0, 1) || LOWER(SUBSTR(a.FNAME, 2))) as ST_NAME 
                        FROM hrdbuser.ST_STAFFS a
                        INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1
                        INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1
                        INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
                        INNER JOIN hrdbuser.STN_POS g ON b.POS_ID = g.ID
                        WHERE b.POS_ID=2010301 AND d.FATHER_ID=" + gazarid + @"
                        ORDER BY g.SORT, a.ID 
                    ) b 
                    WHERE a.IS_ACTIVE=1 AND SRV_TYPE_ID=2 
                ) a, ( 
                    SELECT ID as ANSWERID 
                    FROM TBL_SRV_ANSWER 
                    WHERE SRV_TYPE_ID=2 AND IS_ACTIVE=1 
                    ORDER BY PER 
                ) b 
                UNION ALL 
                SELECT h.SRV_QUESTION_ID as QID, h.TRGT_ID as ST_ID, h.SRV_ANSWER_ID as ANSWERID, 1 as ISCHECK 
                FROM TBL_SRV h 
                INNER JOIN hrdbuser.ST_STAFFS a ON h.TRGT_ID=a.ID 
                INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1 
                INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1 
                INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
                WHERE h.YR=" + yr + " AND h.YR_HF=" + yrhf + @" AND h.SRV_TYPE_ID=2 AND d.FATHER_ID=" + gazarid + @" 
            ) 
            GROUP BY QID, ST_ID, ANSWERID 
        ) a 
        INNER JOIN TBL_SRV_QUESTION b ON a.QID=b.ID 
        INNER JOIN hrdbuser.ST_STAFFS c ON a.ST_ID=c.ID
        INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
        INNER JOIN hrdbuser.STN_POS g ON d.POS_ID = g.ID 
        INNER JOIN TBL_SRV_ANSWER h ON a.ANSWERID=h.ID
        ORDER BY a.QID, g.SORT, a.ST_ID, h.PER DESC
    ) 
    GROUP BY QID, QNAME, ST_ID, ST_NAME 
) a
INNER JOIN hrdbuser.ST_STBR b ON a.ST_ID=b.STAFFS_ID AND b.ISACTIVE = 1
INNER JOIN hrdbuser.STN_POS c ON b.POS_ID=c.ID
GROUP BY a.QID, a.QNAME";

//                    strQry = @"SELECT QID, QNAME, NVL(RTRIM(xmlagg (xmlelement (e, ST_ID || '~') ORDER BY ST_ID).extract('//text()'), '~'),'none') STIDLIST, NVL(RTRIM(xmlagg (xmlelement (e, ST_NAME || '~') ORDER BY ST_ID).extract('//text()'), '~'),'none') STNAMELIST, NVL(RTRIM(xmlagg (xmlelement (e, ANSWERIDLIST || '~') ORDER BY ST_ID).extract('//text()'), '~'),'none') as ANSWERIDLISTLIST, NVL(RTRIM(xmlagg (xmlelement (e, ISCHECKLIST || '~') ORDER BY ST_ID).extract('//text()'), '~'),'none') ISCHECKLISTLIST, 2 as SRVTYPE 
//FROM ( 
//    SELECT QID, QNAME, ST_ID, ST_NAME, NVL(RTRIM(xmlagg (xmlelement (e, ANSWERID || ',') ORDER BY ANSWERID).extract('//text()'), ','),'none') ANSWERIDLIST, NVL(RTRIM(xmlagg (xmlelement (e, ISCHECK || ',') ORDER BY ANSWERID).extract('//text()'), ','),'none') ISCHECKLIST 
//    FROM ( 
//        SELECT a.QID, b.NAME as QNAME, a.ST_ID, (SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 0, 1) || LOWER(SUBSTR(c.FNAME, 2))) as ST_NAME, a.ANSWERID, a.ISCHECK 
//        FROM ( 
//            SELECT QID, ST_ID, ANSWERID, SUM(ISCHECK) as ISCHECK 
//            FROM ( 
//                SELECT a.QID, a.ST_ID, b.ANSWERID, 0 as ISCHECK 
//                FROM ( 
//                    SELECT a.ID as QID, b.ST_ID 
//                    FROM TBL_SRV_QUESTION a, ( 
//                        SELECT a.ID as ST_ID, (SUBSTR(a.LNAME, 0, 1) || '.' || SUBSTR(a.FNAME, 0, 1) || LOWER(SUBSTR(a.FNAME, 2))) as ST_NAME 
//                        FROM hrdbuser.ST_STAFFS a
//                        INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1
//                        INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1
//                        INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
//                        INNER JOIN hrdbuser.STN_POS g ON b.POS_ID = g.ID
//                        WHERE b.POS_ID=2010301 AND d.FATHER_ID=" + gazarid + @"
//                        ORDER BY g.SORT, a.ID 
//                    ) b 
//                    WHERE a.IS_ACTIVE=1 AND SRV_TYPE_ID=2 
//                ) a, ( 
//                    SELECT ID as ANSWERID 
//                    FROM TBL_SRV_ANSWER 
//                    WHERE SRV_TYPE_ID=2 AND IS_ACTIVE=1 
//                    ORDER BY PER 
//                ) b 
//                UNION ALL 
//                SELECT h.SRV_QUESTION_ID as QID, h.TRGT_ID as ST_ID, h.SRV_ANSWER_ID as ANSWERID, 1 as ISCHECK 
//                FROM TBL_SRV h 
//                INNER JOIN hrdbuser.ST_STAFFS a ON h.TRGT_ID=a.ID 
//                INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1 
//                INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1 
//                INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
//                WHERE h.YR=" + yr + " AND h.YR_HF=" + yrhf + @" AND h.SRV_TYPE_ID=2 AND d.FATHER_ID=" + gazarid + @" 
//            ) 
//            GROUP BY QID, ST_ID, ANSWERID 
//        ) a 
//        INNER JOIN TBL_SRV_QUESTION b ON a.QID=b.ID 
//        INNER JOIN hrdbuser.ST_STAFFS c ON a.ST_ID=c.ID
//        INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
//        INNER JOIN hrdbuser.STN_POS g ON d.POS_ID = g.ID 
//        ORDER BY a.QID, g.SORT, a.ST_ID, a.ANSWERID 
//    ) 
//    GROUP BY QID, QNAME, ST_ID, ST_NAME 
//) 
//GROUP BY QID, QNAME";
                }
                else
                {
                    if (yr == curYr)
                    {
                        if (Int32.Parse(yrhf) > Int32.Parse(curYrHf))
                        {
                            strQry = @"SELECT 
  a.QID, 
  a.QNAME, 
  NVL(RTRIM(xmlagg (xmlelement (e, a.ST_ID || '~') ORDER BY c.SORT, a.ST_ID).extract('//text()'), '~'),'none') STIDLIST, 
  NVL(RTRIM(xmlagg (xmlelement (e, a.ST_NAME || '~') ORDER BY c.SORT, a.ST_ID).extract('//text()'), '~'),'none') STNAMELIST, 
  NVL(RTRIM(xmlagg (xmlelement (e, a.ANSWERIDLIST || '~') ORDER BY c.SORT, a.ST_ID).extract('//text()'), '~'),'none') as ANSWERIDLISTLIST, 
  NVL(RTRIM(xmlagg (xmlelement (e, ISCHECKLIST || '~') ORDER BY c.SORT, a.ST_ID).extract('//text()'), '~'),'none') ISCHECKLISTLIST, 
  2 as SRVTYPE 
FROM(
  SELECT QID, QNAME, ST_ID, ST_NAME, NVL(RTRIM(xmlagg(xmlelement(e, ANSWERID || ',') ORDER BY ANSWERPER DESC).extract('//text()'), ','), 'none') ANSWERIDLIST, NVL(RTRIM(xmlagg(xmlelement(e, ISCHECK || ',') ORDER BY ANSWERPER DESC).extract('//text()'), ','), 'none') ISCHECKLIST
  FROM(
    SELECT a.QID, b.NAME as QNAME, a.ST_ID, (SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 0, 1) || LOWER(SUBSTR(c.FNAME, 2))) as ST_NAME, a.ANSWERID, a.ISCHECK, h.PER as ANSWERPER
    FROM(
      SELECT QID, ST_ID, ANSWERID, SUM(ISCHECK) as ISCHECK
      FROM(
        SELECT a.QID, a.ST_ID, b.ANSWERID, 0 as ISCHECK
        FROM(
          SELECT a.ID as QID, b.ST_ID
          FROM TBL_SRV_QUESTION a,
          (
            SELECT a.ID as ST_ID, (SUBSTR(a.LNAME, 0, 1) || '.' || SUBSTR(a.FNAME, 0, 1) || LOWER(SUBSTR(a.FNAME, 2))) as ST_NAME
            FROM hrdbuser.ST_STAFFS a
            INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1
            INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1
            INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
            INNER JOIN hrdbuser.STN_POS g ON b.POS_ID = g.ID
            WHERE b.POS_ID = 2010301 AND d.FATHER_ID=" + gazarid + @"
            ORDER BY g.SORT, a.ID
          ) b
          WHERE a.IS_ACTIVE = 1 AND SRV_TYPE_ID = 2
        ) a, (
          SELECT ID as ANSWERID
          FROM TBL_SRV_ANSWER
          WHERE SRV_TYPE_ID = 2 AND IS_ACTIVE = 1
          ORDER BY PER
        ) b
      )
      GROUP BY QID, ST_ID, ANSWERID
    ) a
    INNER JOIN TBL_SRV_QUESTION b ON a.QID = b.ID
    INNER JOIN hrdbuser.ST_STAFFS c ON a.ST_ID = c.ID
    INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
    INNER JOIN hrdbuser.STN_POS g ON d.POS_ID = g.ID
    INNER JOIN TBL_SRV_ANSWER h ON a.ANSWERID=h.ID
    ORDER BY a.QID, g.SORT, a.ST_ID, h.PER DESC
  ) 
  GROUP BY QID, QNAME, ST_ID, ST_NAME
) a
INNER JOIN hrdbuser.ST_STBR b ON a.ST_ID=b.STAFFS_ID AND b.ISACTIVE = 1
INNER JOIN hrdbuser.STN_POS c ON b.POS_ID=c.ID
GROUP BY a.QID, a.QNAME";

//                            strQry = @"SELECT QID, QNAME, NVL(RTRIM(xmlagg (xmlelement (e, ST_ID || '~') ORDER BY ST_ID).extract('//text()'), '~'),'none') STIDLIST, NVL(RTRIM(xmlagg (xmlelement (e, ST_NAME || '~') ORDER BY ST_ID).extract('//text()'), '~'),'none') STNAMELIST, NVL(RTRIM(xmlagg (xmlelement (e, ANSWERIDLIST || '~') ORDER BY ST_ID).extract('//text()'), '~'),'none') as ANSWERIDLISTLIST, NVL(RTRIM(xmlagg (xmlelement (e, ISCHECKLIST || '~') ORDER BY ST_ID).extract('//text()'), '~'),'none') ISCHECKLISTLIST, 2 as SRVTYPE 
//FROM(
//  SELECT QID, QNAME, ST_ID, ST_NAME, NVL(RTRIM(xmlagg(xmlelement(e, ANSWERID || ',') ORDER BY ANSWERID).extract('//text()'), ','), 'none') ANSWERIDLIST, NVL(RTRIM(xmlagg(xmlelement(e, ISCHECK || ',') ORDER BY ANSWERID).extract('//text()'), ','), 'none') ISCHECKLIST
//  FROM(
//    SELECT a.QID, b.NAME as QNAME, a.ST_ID, (SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 0, 1) || LOWER(SUBSTR(c.FNAME, 2))) as ST_NAME, a.ANSWERID, a.ISCHECK
//    FROM(
//      SELECT QID, ST_ID, ANSWERID, SUM(ISCHECK) as ISCHECK
//      FROM(
//        SELECT a.QID, a.ST_ID, b.ANSWERID, 0 as ISCHECK
//        FROM(
//          SELECT a.ID as QID, b.ST_ID
//          FROM TBL_SRV_QUESTION a,
//          (
//            SELECT a.ID as ST_ID, (SUBSTR(a.LNAME, 0, 1) || '.' || SUBSTR(a.FNAME, 0, 1) || LOWER(SUBSTR(a.FNAME, 2))) as ST_NAME
//            FROM hrdbuser.ST_STAFFS a
//            INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1
//            INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1
//            INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
//            INNER JOIN hrdbuser.STN_POS g ON b.POS_ID = g.ID
//            WHERE b.POS_ID = 2010301 AND d.FATHER_ID=" + gazarid + @"
//            ORDER BY g.SORT, a.ID
//          ) b
//          WHERE a.IS_ACTIVE = 1 AND SRV_TYPE_ID = 2
//        ) a, (
//          SELECT ID as ANSWERID
//          FROM TBL_SRV_ANSWER
//          WHERE SRV_TYPE_ID = 2 AND IS_ACTIVE = 1
//          ORDER BY PER
//        ) b
//      )
//      GROUP BY QID, ST_ID, ANSWERID
//    ) a
//    INNER JOIN TBL_SRV_QUESTION b ON a.QID = b.ID
//    INNER JOIN hrdbuser.ST_STAFFS c ON a.ST_ID = c.ID
//    INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
//    INNER JOIN hrdbuser.STN_POS g ON d.POS_ID = g.ID
//    ORDER BY a.QID, g.SORT, a.ST_ID, a.ANSWERID
//  ) 
//  GROUP BY QID, QNAME, ST_ID, ST_NAME
//) 
//GROUP BY QID, QNAME";
                        }
                        else if (Int32.Parse(yrhf) < Int32.Parse(curYrHf))
                        {
                            strQry = @"SELECT 
  a.QID, 
  a.QNAME, 
  NVL(RTRIM(xmlagg (xmlelement (e, a.ST_ID || '~') ORDER BY c.SORT, a.ST_ID).extract('//text()'), '~'),'none') STIDLIST, 
  NVL(RTRIM(xmlagg (xmlelement (e, a.ST_NAME || '~') ORDER BY c.SORT, a.ST_ID).extract('//text()'), '~'),'none') STNAMELIST, 
  NVL(RTRIM(xmlagg (xmlelement (e, a.ANSWERIDLIST || '~') ORDER BY c.SORT, a.ST_ID).extract('//text()'), '~'),'none') as ANSWERIDLISTLIST, 
  NVL(RTRIM(xmlagg (xmlelement (e, ISCHECKLIST || '~') ORDER BY c.SORT, a.ST_ID).extract('//text()'), '~'),'none') ISCHECKLISTLIST, 
  2 as SRVTYPE 
FROM ( 
    SELECT QID, QNAME, ST_ID, ST_NAME, NVL(RTRIM(xmlagg (xmlelement (e, ANSWERID || ',') ORDER BY ANSWERPER DESC).extract('//text()'), ','),'none') ANSWERIDLIST, NVL(RTRIM(xmlagg (xmlelement (e, ISCHECK || ',') ORDER BY ANSWERPER DESC).extract('//text()'), ','),'none') ISCHECKLIST 
    FROM ( 
        SELECT a.QID, b.NAME as QNAME, a.ST_ID, (SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 0, 1) || LOWER(SUBSTR(c.FNAME, 2))) as ST_NAME, a.ANSWERID, a.ISCHECK, h.PER as ANSWERPER 
        FROM ( 
            SELECT QID, ST_ID, ANSWERID, SUM(ISCHECK) as ISCHECK 
            FROM ( 
                SELECT a.QID, a.ST_ID, b.ANSWERID, 0 as ISCHECK 
                FROM ( 
                    SELECT a.ID as QID, b.ST_ID 
                    FROM TBL_SRV_QUESTION a, ( 
                        SELECT a.ID as ST_ID, (SUBSTR(a.LNAME, 0, 1) || '.' || SUBSTR(a.FNAME, 0, 1) || LOWER(SUBSTR(a.FNAME, 2))) as ST_NAME 
                        FROM hrdbuser.ST_STAFFS a
                        INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1
                        INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1
                        INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
                        INNER JOIN hrdbuser.STN_POS g ON b.POS_ID = g.ID
                        WHERE b.POS_ID=2010301 AND d.FATHER_ID=" + gazarid + @"
                        ORDER BY g.SORT, a.ID 
                    ) b 
                    WHERE a.IS_ACTIVE=1 AND SRV_TYPE_ID=2 
                ) a, ( 
                    SELECT ID as ANSWERID 
                    FROM TBL_SRV_ANSWER 
                    WHERE SRV_TYPE_ID=2 AND IS_ACTIVE=1 
                    ORDER BY PER 
                ) b 
                UNION ALL 
                SELECT h.SRV_QUESTION_ID as QID, h.TRGT_ID as ST_ID, h.SRV_ANSWER_ID as ANSWERID, 1 as ISCHECK 
                FROM TBL_SRV h 
                INNER JOIN hrdbuser.ST_STAFFS a ON h.TRGT_ID=a.ID 
                INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1 
                INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1 
                INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
                WHERE h.YR=" + yr + " AND h.YR_HF=" + yrhf + @" AND h.SRV_TYPE_ID=2 AND d.FATHER_ID=" + gazarid + @" 
            ) 
            GROUP BY QID, ST_ID, ANSWERID 
        ) a 
        INNER JOIN TBL_SRV_QUESTION b ON a.QID=b.ID 
        INNER JOIN hrdbuser.ST_STAFFS c ON a.ST_ID=c.ID
        INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
        INNER JOIN hrdbuser.STN_POS g ON d.POS_ID = g.ID 
        INNER JOIN TBL_SRV_ANSWER h ON a.ANSWERID=h.ID
        ORDER BY a.QID, g.SORT, a.ST_ID, h.PER DESC
    ) 
    GROUP BY QID, QNAME, ST_ID, ST_NAME 
) a
INNER JOIN hrdbuser.ST_STBR b ON a.ST_ID=b.STAFFS_ID AND b.ISACTIVE = 1
INNER JOIN hrdbuser.STN_POS c ON b.POS_ID=c.ID
GROUP BY a.QID, a.QNAME";
                        }
                    }
                    else if (Int32.Parse(yr) > Int32.Parse(curYr))
                    {
                        strQry = @"SELECT 
  a.QID, 
  a.QNAME, 
  NVL(RTRIM(xmlagg (xmlelement (e, a.ST_ID || '~') ORDER BY c.SORT, a.ST_ID).extract('//text()'), '~'),'none') STIDLIST, 
  NVL(RTRIM(xmlagg (xmlelement (e, a.ST_NAME || '~') ORDER BY c.SORT, a.ST_ID).extract('//text()'), '~'),'none') STNAMELIST, 
  NVL(RTRIM(xmlagg (xmlelement (e, a.ANSWERIDLIST || '~') ORDER BY c.SORT, a.ST_ID).extract('//text()'), '~'),'none') as ANSWERIDLISTLIST, 
  NVL(RTRIM(xmlagg (xmlelement (e, ISCHECKLIST || '~') ORDER BY c.SORT, a.ST_ID).extract('//text()'), '~'),'none') ISCHECKLISTLIST, 
  2 as SRVTYPE 
FROM(
  SELECT QID, QNAME, ST_ID, ST_NAME, NVL(RTRIM(xmlagg(xmlelement(e, ANSWERID || ',') ORDER BY ANSWERPER DESC).extract('//text()'), ','), 'none') ANSWERIDLIST, NVL(RTRIM(xmlagg(xmlelement(e, ISCHECK || ',') ORDER BY ANSWERPER DESC).extract('//text()'), ','), 'none') ISCHECKLIST
  FROM(
    SELECT a.QID, b.NAME as QNAME, a.ST_ID, (SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 0, 1) || LOWER(SUBSTR(c.FNAME, 2))) as ST_NAME, a.ANSWERID, a.ISCHECK, h.PER as ANSWERPER
    FROM(
      SELECT QID, ST_ID, ANSWERID, SUM(ISCHECK) as ISCHECK
      FROM(
        SELECT a.QID, a.ST_ID, b.ANSWERID, 0 as ISCHECK
        FROM(
          SELECT a.ID as QID, b.ST_ID
          FROM TBL_SRV_QUESTION a,
          (
            SELECT a.ID as ST_ID, (SUBSTR(a.LNAME, 0, 1) || '.' || SUBSTR(a.FNAME, 0, 1) || LOWER(SUBSTR(a.FNAME, 2))) as ST_NAME
            FROM hrdbuser.ST_STAFFS a
            INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1
            INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1
            INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
            INNER JOIN hrdbuser.STN_POS g ON b.POS_ID = g.ID
            WHERE b.POS_ID = 2010301 AND d.FATHER_ID=" + gazarid + @"
            ORDER BY g.SORT, a.ID
          ) b
          WHERE a.IS_ACTIVE = 1 AND SRV_TYPE_ID = 2
        ) a, (
          SELECT ID as ANSWERID
          FROM TBL_SRV_ANSWER
          WHERE SRV_TYPE_ID = 2 AND IS_ACTIVE = 1
          ORDER BY PER
        ) b
      )
      GROUP BY QID, ST_ID, ANSWERID
    ) a
    INNER JOIN TBL_SRV_QUESTION b ON a.QID = b.ID
    INNER JOIN hrdbuser.ST_STAFFS c ON a.ST_ID = c.ID
    INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
    INNER JOIN hrdbuser.STN_POS g ON d.POS_ID = g.ID
    INNER JOIN TBL_SRV_ANSWER h ON a.ANSWERID=h.ID
    ORDER BY a.QID, g.SORT, a.ST_ID, h.PER DESC
  ) 
  GROUP BY QID, QNAME, ST_ID, ST_NAME
) a
INNER JOIN hrdbuser.ST_STBR b ON a.ST_ID=b.STAFFS_ID AND b.ISACTIVE = 1
INNER JOIN hrdbuser.STN_POS c ON b.POS_ID=c.ID
GROUP BY a.QID, a.QNAME";
                    }
                    else if (Int32.Parse(yr) < Int32.Parse(curYr))
                    {
                        strQry = @"SELECT 
  a.QID, 
  a.QNAME, 
  NVL(RTRIM(xmlagg (xmlelement (e, a.ST_ID || '~') ORDER BY c.SORT, a.ST_ID).extract('//text()'), '~'),'none') STIDLIST, 
  NVL(RTRIM(xmlagg (xmlelement (e, a.ST_NAME || '~') ORDER BY c.SORT, a.ST_ID).extract('//text()'), '~'),'none') STNAMELIST, 
  NVL(RTRIM(xmlagg (xmlelement (e, a.ANSWERIDLIST || '~') ORDER BY c.SORT, a.ST_ID).extract('//text()'), '~'),'none') as ANSWERIDLISTLIST, 
  NVL(RTRIM(xmlagg (xmlelement (e, ISCHECKLIST || '~') ORDER BY c.SORT, a.ST_ID).extract('//text()'), '~'),'none') ISCHECKLISTLIST, 
  2 as SRVTYPE 
FROM ( 
    SELECT QID, QNAME, ST_ID, ST_NAME, NVL(RTRIM(xmlagg (xmlelement (e, ANSWERID || ',') ORDER BY ANSWERPER DESC).extract('//text()'), ','),'none') ANSWERIDLIST, NVL(RTRIM(xmlagg (xmlelement (e, ISCHECK || ',') ORDER BY ANSWERPER DESC).extract('//text()'), ','),'none') ISCHECKLIST 
    FROM ( 
        SELECT a.QID, b.NAME as QNAME, a.ST_ID, (SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 0, 1) || LOWER(SUBSTR(c.FNAME, 2))) as ST_NAME, a.ANSWERID, a.ISCHECK, h.PER as ANSWERPER 
        FROM ( 
            SELECT QID, ST_ID, ANSWERID, SUM(ISCHECK) as ISCHECK 
            FROM ( 
                SELECT a.QID, a.ST_ID, b.ANSWERID, 0 as ISCHECK 
                FROM ( 
                    SELECT a.ID as QID, b.ST_ID 
                    FROM TBL_SRV_QUESTION a, ( 
                        SELECT a.ID as ST_ID, (SUBSTR(a.LNAME, 0, 1) || '.' || SUBSTR(a.FNAME, 0, 1) || LOWER(SUBSTR(a.FNAME, 2))) as ST_NAME 
                        FROM hrdbuser.ST_STAFFS a
                        INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1
                        INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1
                        INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
                        INNER JOIN hrdbuser.STN_POS g ON b.POS_ID = g.ID
                        WHERE b.POS_ID=2010301 AND d.FATHER_ID=" + gazarid + @"
                        ORDER BY g.SORT, a.ID 
                    ) b 
                    WHERE a.IS_ACTIVE=1 AND SRV_TYPE_ID=2 
                ) a, ( 
                    SELECT ID as ANSWERID 
                    FROM TBL_SRV_ANSWER 
                    WHERE SRV_TYPE_ID=2 AND IS_ACTIVE=1 
                    ORDER BY PER 
                ) b 
                UNION ALL 
                SELECT h.SRV_QUESTION_ID as QID, h.TRGT_ID as ST_ID, h.SRV_ANSWER_ID as ANSWERID, 1 as ISCHECK 
                FROM TBL_SRV h 
                INNER JOIN hrdbuser.ST_STAFFS a ON h.TRGT_ID=a.ID 
                INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1 
                INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1 
                INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
                WHERE h.YR=" + yr + " AND h.YR_HF=" + yrhf + @" AND h.SRV_TYPE_ID=2 AND d.FATHER_ID=" + gazarid + @" 
            ) 
            GROUP BY QID, ST_ID, ANSWERID 
        ) a 
        INNER JOIN TBL_SRV_QUESTION b ON a.QID=b.ID 
        INNER JOIN hrdbuser.ST_STAFFS c ON a.ST_ID=c.ID
        INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
        INNER JOIN hrdbuser.STN_POS g ON d.POS_ID = g.ID 
        INNER JOIN TBL_SRV_ANSWER h ON a.ANSWERID=h.ID
        ORDER BY a.QID, g.SORT, a.ST_ID, h.PER DESC
    ) 
    GROUP BY QID, QNAME, ST_ID, ST_NAME 
) a
INNER JOIN hrdbuser.ST_STBR b ON a.ST_ID=b.STAFFS_ID AND b.ISACTIVE = 1
INNER JOIN hrdbuser.STN_POS c ON b.POS_ID=c.ID
GROUP BY a.QID, a.QNAME";
                    }
                }
                ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string SrvTab2t3Datatable(string yr, string yrhf, string gazarid, string heltesid)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strQry = "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                if (heltesid != "") heltesid = " AND f.ID=" + heltesid;
                strQry = @"SELECT ROWNUM as ROWNO, a.BR_NAME, a.STNAME, a.QUESTION_NAME, a.PER, a.POINT, CASE WHEN a.PER < 50 THEN 'bg-color-red' WHEN a.PER > 49 AND a.PER < 80 THEN 'bg-color-orange' WHEN a.PER>79 THEN 'bg-color-greenLight' END as PERCOLOR
FROM ( 
    SELECT g.SORT, g.NAME as BR_NAME, (SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 0, 1) || LOWER(SUBSTR(c.FNAME, 2))) as STNAME, h.NAME as QUESTION_NAME, ROUND(SUM(b.PER)/COUNT(b.PER),1) as PER, ROUND((ROUND(SUM(b.PER)/COUNT(b.PER),1)/100)*4,1) as POINT
    FROM TBL_SRV a
    INNER JOIN TBL_SRV_ANSWER b ON a.SRV_ANSWER_ID=b.ID
    INNER JOIN hrdbuser.ST_STAFFS c ON a.TRGT_ID=c.ID
    INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
    INNER JOIN hrdbuser.ST_BRANCH f ON d.BRANCH_ID = f.ID AND f.ISACTIVE = 1
    INNER JOIN hrdbuser.ST_BRANCH g ON f.FATHER_ID = g.ID AND g.ISACTIVE = 1
    INNER JOIN TBL_SRV_QUESTION h ON a.SRV_QUESTION_ID=h.ID
    WHERE a.SRV_TYPE_ID=2 AND a.YR=" + yr + " AND a.YR_HF=" + yrhf + " AND f.FATHER_ID=" + gazarid+heltesid+ @" 
    GROUP BY g.SORT, g.NAME, (SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 0, 1) || LOWER(SUBSTR(c.FNAME, 2))), h.NAME
    ORDER BY g.SORT, h.NAME
) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string SrvTab3t2Datatable(string yr, string yrhf, string gazarid, string heltesid, string st_id)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strQry = "";
            //string strGazarId = "", strHeltesId = "";
            //if (gazarid != "") strGazarId = " AND d.FATHER_ID=" + gazarid;
            //if (heltesid != "") strHeltesId = " AND d.ID=" + heltesid;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObjGetTableData.getCurrentInfo();
                string curYr = ds.Tables[0].Rows[0]["YEAR"].ToString();
                string curYrHf = ds.Tables[0].Rows[0]["YEARHALF"].ToString();
                //                if (yr == curYr && yrhf == curYrHf)
                //                {
                //    //                strQry = @"SELECT QID, QNAME, NVL(RTRIM(xmlagg (xmlelement (e, ST_ID || '~') ORDER BY ST_ID).extract('//text()'), '~'),'none') STIDLIST, NVL(RTRIM(xmlagg (xmlelement (e, ST_NAME || '~') ORDER BY ST_ID).extract('//text()'), '~'),'none') STNAMELIST, NVL(RTRIM(xmlagg (xmlelement (e, ANSWERIDLIST || '~') ORDER BY ST_ID).extract('//text()'), '~'),'none') as ANSWERIDLISTLIST, NVL(RTRIM(xmlagg (xmlelement (e, ISCHECKLIST || '~') ORDER BY ST_ID).extract('//text()'), '~'),'none') ISCHECKLISTLIST, 3 as SRVTYPE FROM ( SELECT QID, QNAME, ST_ID, ST_NAME, NVL(RTRIM(xmlagg (xmlelement (e, ANSWERID || ',') ORDER BY ANSWERID).extract('//text()'), ','),'none') ANSWERIDLIST, NVL(RTRIM(xmlagg (xmlelement (e, ISCHECK || ',') ORDER BY ANSWERID).extract('//text()'), ','),'none') ISCHECKLIST FROM ( SELECT a.QID, b.NAME as QNAME, a.ST_ID, (SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 0, 1) || LOWER(SUBSTR(c.FNAME, 2))) as ST_NAME, a.ANSWERID, a.ISCHECK FROM ( SELECT QID, ST_ID, ANSWERID, SUM(ISCHECK) as ISCHECK FROM ( SELECT a.QID, a.ST_ID, b.ANSWERID, 0 as ISCHECK FROM ( SELECT a.ID as QID, b.ST_ID FROM TBL_SRV_QUESTION a, ( SELECT a.ID as ST_ID, (SUBSTR(a.LNAME, 0, 1) || '.' || SUBSTR(a.FNAME, 0, 1) || LOWER(SUBSTR(a.FNAME, 2))) as ST_NAME 
                //    //        FROM hrdbuser.ST_STAFFS a
                //    //        INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1
                //    //        INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1
                //    //        INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
                //    //        INNER JOIN hrdbuser.STN_POS g ON b.POS_ID = g.ID
                //    //        WHERE a.ID != " + st_id + gazarid + heltesid + @"
                //    //        ORDER BY g.SORT, a.ID ) b WHERE a.IS_ACTIVE=1 AND SRV_TYPE_ID=3 ) a, ( SELECT ID as ANSWERID FROM TBL_SRV_ANSWER WHERE SRV_TYPE_ID=3 AND IS_ACTIVE=1 ORDER BY PER ) b UNION ALL SELECT h.SRV_QUESTION_ID as QID, h.TRGT_ID as ST_ID, h.SRV_ANSWER_ID as ANSWERID, 1 as ISCHECK 
                //    //    FROM TBL_SRV h 
                //    //    INNER JOIN hrdbuser.ST_STAFFS a ON h.TRGT_ID=a.ID 
                //    //    INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1 
                //    //    INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1 
                //    //    INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
                //    //    WHERE h.YR=" + yr + " AND h.YR_HF=" + yrhf + " AND h.SRV_TYPE_ID=3" + gazarid + heltesid + " AND h.MODIFY_STAFFID=" + st_id + " AND h.TRGT_ID!=" + st_id + @" ) GROUP BY QID, ST_ID, ANSWERID ) a INNER JOIN TBL_SRV_QUESTION b ON a.QID=b.ID INNER JOIN hrdbuser.ST_STAFFS c ON a.ST_ID=c.ID
                //    //INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
                //    //INNER JOIN hrdbuser.STN_POS g ON d.POS_ID = g.ID ORDER BY a.QID, g.SORT, a.ST_ID, a.ANSWERID ) GROUP BY QID, QNAME, ST_ID, ST_NAME ) GROUP BY QID, QNAME";
                //                    strQry = @"SELECT 
                //  QID, 
                //  QNAME, 
                //  NVL(RTRIM(xmlagg (xmlelement (e, ST_ID || '~') ORDER BY POSSORT, ST_ID).extract('//text()'), '~'),'none') STIDLIST, 
                //  NVL(RTRIM(xmlagg (xmlelement (e, ST_NAME || '~') ORDER BY POSSORT, ST_ID).extract('//text()'), '~'),'none') STNAMELIST, 
                //  NVL(RTRIM(xmlagg (xmlelement (e, ANSWERIDLIST || '~') ORDER BY POSSORT, ST_ID).extract('//text()'), '~'),'none') as ANSWERIDLISTLIST, 
                //  NVL(RTRIM(xmlagg (xmlelement (e, ISCHECKLIST || '~') ORDER BY POSSORT, ST_ID).extract('//text()'), '~'),'none') ISCHECKLISTLIST, 
                //  3 as SRVTYPE 
                //FROM ( 
                //  SELECT 
                //    QID, 
                //    QNAME, 
                //    ST_ID, 
                //    ST_NAME, 
                //    NVL(RTRIM(xmlagg (xmlelement (e, ANSWERID || ',') ORDER BY ANSWERID).extract('//text()'), ','),'none') ANSWERIDLIST, 
                //    NVL(RTRIM(xmlagg (xmlelement (e, ISCHECK || ',') ORDER BY ANSWERID).extract('//text()'), ','),'none') ISCHECKLIST, 
                //    POSSORT
                //  FROM ( 
                //    SELECT 
                //      a.QID, 
                //      b.NAME as QNAME, 
                //      a.ST_ID, 
                //      (SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 0, 1) || LOWER(SUBSTR(c.FNAME, 2))) as ST_NAME, 
                //      a.ANSWERID, 
                //      a.ISCHECK,
                //      g.SORT as POSSORT
                //    FROM ( 
                //      SELECT QID, ST_ID, ANSWERID, SUM(ISCHECK) as ISCHECK 
                //      FROM ( 
                //        SELECT a.QID, a.ST_ID, b.ANSWERID, 0 as ISCHECK 
                //        FROM ( 
                //          SELECT a.ID as QID, b.ST_ID 
                //          FROM TBL_SRV_QUESTION a, ( 
                //            SELECT ST_ID
                //            FROM (
                //              SELECT a.ID as ST_ID
                //              FROM hrdbuser.ST_STAFFS a
                //              INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1
                //              INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1
                //              INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
                //              INNER JOIN hrdbuser.STN_POS g ON b.POS_ID = g.ID
                //              WHERE a.ID != "+st_id+" AND d.ID="+gazarid+ @"
                //              GROUP BY a.ID
                //              UNION ALL
                //              SELECT a.ID as ST_ID
                //              FROM hrdbuser.ST_STAFFS a
                //              INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1
                //              INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1
                //              INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
                //              INNER JOIN hrdbuser.STN_POS g ON b.POS_ID = g.ID
                //              WHERE a.ID != " + st_id + " AND d.FATHER_ID=" + gazarid + @" AND d.ID=" + heltesid + @"
                //              GROUP BY a.ID 
                //            )
                //            GROUP BY ST_ID
                //          ) b 
                //          WHERE a.IS_ACTIVE=1 AND SRV_TYPE_ID=3 
                //        ) a, ( 
                //          SELECT ID as ANSWERID 
                //          FROM TBL_SRV_ANSWER 
                //          WHERE SRV_TYPE_ID=3 AND IS_ACTIVE=1
                //          ORDER BY PER 
                //        ) b 
                //        UNION ALL 
                //        SELECT h.SRV_QUESTION_ID as QID, h.TRGT_ID as ST_ID, h.SRV_ANSWER_ID as ANSWERID, 1 as ISCHECK 
                //        FROM TBL_SRV h 
                //        INNER JOIN hrdbuser.ST_STAFFS a ON h.TRGT_ID=a.ID 
                //        INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1 
                //        INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1 
                //        INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
                //        WHERE h.YR="+yr+" AND h.YR_HF="+yrhf+ " AND h.SRV_TYPE_ID=3 AND d.FATHER_ID=" + gazarid + @" AND d.ID=" + heltesid + @" AND h.MODIFY_STAFFID=" + st_id + " AND h.TRGT_ID!=" + st_id + @" 
                //      ) 
                //      GROUP BY QID, ST_ID, ANSWERID 
                //    ) a 
                //    INNER JOIN TBL_SRV_QUESTION b ON a.QID=b.ID 
                //    INNER JOIN hrdbuser.ST_STAFFS c ON a.ST_ID=c.ID
                //    INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
                //    INNER JOIN hrdbuser.STN_POS g ON d.POS_ID = g.ID 
                //    ORDER BY a.QID, g.SORT, a.ST_ID, a.ANSWERID 
                //  ) 
                //  GROUP BY QID, QNAME, ST_ID, ST_NAME, POSSORT 
                //) 
                //GROUP BY QID, QNAME";
                //                }
                //                else
                //                {
                //                    if (yr == curYr)
                //                    {
                //                        if (Int32.Parse(yrhf) > Int32.Parse(curYrHf))
                //                        {
                //                    strQry = @"SELECT QID, QNAME, NVL(RTRIM(xmlagg (xmlelement (e, ST_ID || '~') ORDER BY ST_ID).extract('//text()'), '~'),'none') STIDLIST, NVL(RTRIM(xmlagg (xmlelement (e, ST_NAME || '~') ORDER BY ST_ID).extract('//text()'), '~'),'none') STNAMELIST, NVL(RTRIM(xmlagg (xmlelement (e, ANSWERIDLIST || '~') ORDER BY ST_ID).extract('//text()'), '~'),'none') as ANSWERIDLISTLIST, NVL(RTRIM(xmlagg (xmlelement (e, ISCHECKLIST || '~') ORDER BY ST_ID).extract('//text()'), '~'),'none') ISCHECKLISTLIST, 3 as SRVTYPE FROM ( SELECT QID, QNAME, ST_ID, ST_NAME, NVL(RTRIM(xmlagg (xmlelement (e, ANSWERID || ',') ORDER BY ANSWERID).extract('//text()'), ','),'none') ANSWERIDLIST, NVL(RTRIM(xmlagg (xmlelement (e, ISCHECK || ',') ORDER BY ANSWERID).extract('//text()'), ','),'none') ISCHECKLIST FROM ( SELECT a.QID, b.NAME as QNAME, a.ST_ID, (SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 0, 1) || LOWER(SUBSTR(c.FNAME, 2))) as ST_NAME, a.ANSWERID, a.ISCHECK FROM ( SELECT QID, ST_ID, ANSWERID, SUM(ISCHECK) as ISCHECK FROM ( SELECT a.QID, a.ST_ID, b.ANSWERID, 0 as ISCHECK FROM ( SELECT a.ID as QID, b.ST_ID FROM TBL_SRV_QUESTION a, ( SELECT a.ID as QID, b.ST_ID FROM TBL_SRV_QUESTION a, ( SELECT a.ID as ST_ID, (SUBSTR(a.LNAME, 0, 1) || '.' || SUBSTR(a.FNAME, 0, 1) || LOWER(SUBSTR(a.FNAME, 2))) as ST_NAME 
                //            FROM hrdbuser.ST_STAFFS a
                //            INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1
                //            INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1
                //            INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
                //            INNER JOIN hrdbuser.STN_POS g ON b.POS_ID = g.ID
                //            WHERE a.ID != " + st_id + gazarid + heltesid + @"
                //            ORDER BY g.SORT, a.ID ) b WHERE a.IS_ACTIVE=1 AND SRV_TYPE_ID=3 ) a, ( SELECT ID as ANSWERID FROM TBL_SRV_ANSWER WHERE SRV_TYPE_ID=3 AND IS_ACTIVE=1 ORDER BY PER ) b ) GROUP BY QID, ST_ID, ANSWERID ) a INNER JOIN TBL_SRV_QUESTION b ON a.QID=b.ID INNER JOIN hrdbuser.ST_STAFFS c ON a.ST_ID=c.ID
                //    INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
                //    INNER JOIN hrdbuser.STN_POS g ON d.POS_ID = g.ID
                //    ORDER BY a.QID, g.SORT, a.ST_ID, a.ANSWERID ) GROUP BY QID, QNAME, ST_ID, ST_NAME ) GROUP BY QID, QNAME";
                //                        }
                //                        else if (Int32.Parse(yrhf) < Int32.Parse(curYrHf))
                //                        {
                //                            strQry = @"SELECT QID, QNAME, NVL(RTRIM(xmlagg (xmlelement (e, ST_ID || '~') ORDER BY ST_ID).extract('//text()'), '~'),'none') STIDLIST, NVL(RTRIM(xmlagg (xmlelement (e, ST_NAME || '~') ORDER BY ST_ID).extract('//text()'), '~'),'none') STNAMELIST, NVL(RTRIM(xmlagg (xmlelement (e, ANSWERIDLIST || '~') ORDER BY ST_ID).extract('//text()'), '~'),'none') as ANSWERIDLISTLIST, NVL(RTRIM(xmlagg (xmlelement (e, ISCHECKLIST || '~') ORDER BY ST_ID).extract('//text()'), '~'),'none') ISCHECKLISTLIST, 3 as SRVTYPE FROM ( SELECT QID, QNAME, ST_ID, ST_NAME, NVL(RTRIM(xmlagg (xmlelement (e, ANSWERID || ',') ORDER BY ANSWERID).extract('//text()'), ','),'none') ANSWERIDLIST, NVL(RTRIM(xmlagg (xmlelement (e, ISCHECK || ',') ORDER BY ANSWERID).extract('//text()'), ','),'none') ISCHECKLIST FROM ( SELECT a.QID, b.NAME as QNAME, a.ST_ID, (SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 0, 1) || LOWER(SUBSTR(c.FNAME, 2))) as ST_NAME, a.ANSWERID, a.ISCHECK FROM ( SELECT QID, ST_ID, ANSWERID, SUM(ISCHECK) as ISCHECK FROM ( SELECT a.QID, a.ST_ID, b.ANSWERID, 0 as ISCHECK FROM ( SELECT a.ID as QID, b.ST_ID FROM TBL_SRV_QUESTION a, ( SELECT a.ID as QID, b.ST_ID FROM TBL_SRV_QUESTION a, ( SELECT a.ID as ST_ID, (SUBSTR(a.LNAME, 0, 1) || '.' || SUBSTR(a.FNAME, 0, 1) || LOWER(SUBSTR(a.FNAME, 2))) as ST_NAME 
                //            FROM hrdbuser.ST_STAFFS a
                //            INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1
                //            INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1
                //            INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
                //            INNER JOIN hrdbuser.STN_POS g ON b.POS_ID = g.ID
                //            WHERE a.ID != " + st_id + gazarid + heltesid + @"
                //            ORDER BY g.SORT, a.ID ) b WHERE a.IS_ACTIVE=1 AND SRV_TYPE_ID=3 ) a, ( SELECT ID as ANSWERID FROM TBL_SRV_ANSWER WHERE SRV_TYPE_ID=3 AND IS_ACTIVE=1 ORDER BY PER ) b UNION ALL SELECT h.SRV_QUESTION_ID as QID, h.TRGT_ID as ST_ID, h.SRV_ANSWER_ID as ANSWERID, 1 as ISCHECK 
                //        FROM TBL_SRV h 
                //        INNER JOIN hrdbuser.ST_STAFFS a ON h.TRGT_ID=a.ID 
                //        INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1 
                //        INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1 
                //        INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
                //        WHERE h.YR=" + yr + " AND h.YR_HF=" + yrhf + " AND h.SRV_TYPE_ID=3" + gazarid + heltesid + " AND h.MODIFY_STAFFID=" + st_id + " AND h.TRGT_ID!=" + st_id + @" ) GROUP BY QID, ST_ID, ANSWERID ) a INNER JOIN TBL_SRV_QUESTION b ON a.QID=b.ID INNER JOIN hrdbuser.ST_STAFFS c ON a.ST_ID=c.ID
                //    INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
                //    INNER JOIN hrdbuser.STN_POS g ON d.POS_ID = g.ID
                //    ORDER BY a.QID, g.SORT, a.ST_ID, a.ANSWERID ) GROUP BY QID, QNAME, ST_ID, ST_NAME ) GROUP BY QID, QNAME";
                //                        }
                //                    }
                //                    else if (Int32.Parse(yr) > Int32.Parse(curYr))
                //                    {
                //                        strQry = @"SELECT QID, QNAME, NVL(RTRIM(xmlagg (xmlelement (e, ST_ID || '~') ORDER BY ST_ID).extract('//text()'), '~'),'none') STIDLIST, NVL(RTRIM(xmlagg (xmlelement (e, ST_NAME || '~') ORDER BY ST_ID).extract('//text()'), '~'),'none') STNAMELIST, NVL(RTRIM(xmlagg (xmlelement (e, ANSWERIDLIST || '~') ORDER BY ST_ID).extract('//text()'), '~'),'none') as ANSWERIDLISTLIST, NVL(RTRIM(xmlagg (xmlelement (e, ISCHECKLIST || '~') ORDER BY ST_ID).extract('//text()'), '~'),'none') ISCHECKLISTLIST, 3 as SRVTYPE FROM ( SELECT QID, QNAME, ST_ID, ST_NAME, NVL(RTRIM(xmlagg (xmlelement (e, ANSWERID || ',') ORDER BY ANSWERID).extract('//text()'), ','),'none') ANSWERIDLIST, NVL(RTRIM(xmlagg (xmlelement (e, ISCHECK || ',') ORDER BY ANSWERID).extract('//text()'), ','),'none') ISCHECKLIST FROM ( SELECT a.QID, b.NAME as QNAME, a.ST_ID, (SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 0, 1) || LOWER(SUBSTR(c.FNAME, 2))) as ST_NAME, a.ANSWERID, a.ISCHECK FROM ( SELECT QID, ST_ID, ANSWERID, SUM(ISCHECK) as ISCHECK FROM ( SELECT a.QID, a.ST_ID, b.ANSWERID, 0 as ISCHECK FROM ( SELECT a.ID as QID, b.ST_ID FROM TBL_SRV_QUESTION a, ( SELECT a.ID as QID, b.ST_ID FROM TBL_SRV_QUESTION a, ( SELECT a.ID as ST_ID, (SUBSTR(a.LNAME, 0, 1) || '.' || SUBSTR(a.FNAME, 0, 1) || LOWER(SUBSTR(a.FNAME, 2))) as ST_NAME 
                //            FROM hrdbuser.ST_STAFFS a
                //            INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1
                //            INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1
                //            INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
                //            INNER JOIN hrdbuser.STN_POS g ON b.POS_ID = g.ID
                //            WHERE a.ID != " + st_id + gazarid + heltesid + @"
                //            ORDER BY g.SORT, a.ID ) b WHERE a.IS_ACTIVE=1 AND SRV_TYPE_ID=3 ) a, ( SELECT ID as ANSWERID FROM TBL_SRV_ANSWER WHERE SRV_TYPE_ID=3 AND IS_ACTIVE=1 ORDER BY PER ) b ) GROUP BY QID, ST_ID, ANSWERID ) a INNER JOIN TBL_SRV_QUESTION b ON a.QID=b.ID INNER JOIN hrdbuser.ST_STAFFS c ON a.ST_ID=c.ID
                //    INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
                //    INNER JOIN hrdbuser.STN_POS g ON d.POS_ID = g.ID
                //    ORDER BY a.QID, g.SORT, a.ST_ID, a.ANSWERID ) GROUP BY QID, QNAME, ST_ID, ST_NAME ) GROUP BY QID, QNAME";
                //                    }
                //                    else if (Int32.Parse(yr) < Int32.Parse(curYr))
                //                    {
                //                        strQry = @"SELECT QID, QNAME, NVL(RTRIM(xmlagg (xmlelement (e, ST_ID || '~') ORDER BY ST_ID).extract('//text()'), '~'),'none') STIDLIST, NVL(RTRIM(xmlagg (xmlelement (e, ST_NAME || '~') ORDER BY ST_ID).extract('//text()'), '~'),'none') STNAMELIST, NVL(RTRIM(xmlagg (xmlelement (e, ANSWERIDLIST || '~') ORDER BY ST_ID).extract('//text()'), '~'),'none') as ANSWERIDLISTLIST, NVL(RTRIM(xmlagg (xmlelement (e, ISCHECKLIST || '~') ORDER BY ST_ID).extract('//text()'), '~'),'none') ISCHECKLISTLIST, 3 as SRVTYPE FROM ( SELECT QID, QNAME, ST_ID, ST_NAME, NVL(RTRIM(xmlagg (xmlelement (e, ANSWERID || ',') ORDER BY ANSWERID).extract('//text()'), ','),'none') ANSWERIDLIST, NVL(RTRIM(xmlagg (xmlelement (e, ISCHECK || ',') ORDER BY ANSWERID).extract('//text()'), ','),'none') ISCHECKLIST FROM ( SELECT a.QID, b.NAME as QNAME, a.ST_ID, (SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 0, 1) || LOWER(SUBSTR(c.FNAME, 2))) as ST_NAME, a.ANSWERID, a.ISCHECK FROM ( SELECT QID, ST_ID, ANSWERID, SUM(ISCHECK) as ISCHECK FROM ( SELECT a.QID, a.ST_ID, b.ANSWERID, 0 as ISCHECK FROM ( SELECT a.ID as QID, b.ST_ID FROM TBL_SRV_QUESTION a, ( SELECT a.ID as QID, b.ST_ID FROM TBL_SRV_QUESTION a, ( SELECT a.ID as ST_ID, (SUBSTR(a.LNAME, 0, 1) || '.' || SUBSTR(a.FNAME, 0, 1) || LOWER(SUBSTR(a.FNAME, 2))) as ST_NAME 
                //            FROM hrdbuser.ST_STAFFS a
                //            INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1
                //            INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1
                //            INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
                //            INNER JOIN hrdbuser.STN_POS g ON b.POS_ID = g.ID
                //            WHERE a.ID != " + st_id + gazarid + heltesid + @"
                //            ORDER BY g.SORT, a.ID ) b WHERE a.IS_ACTIVE=1 AND SRV_TYPE_ID=3 ) a, ( SELECT ID as ANSWERID FROM TBL_SRV_ANSWER WHERE SRV_TYPE_ID=3 AND IS_ACTIVE=1 ORDER BY PER ) b UNION ALL SELECT h.SRV_QUESTION_ID as QID, h.TRGT_ID as ST_ID, h.SRV_ANSWER_ID as ANSWERID, 1 as ISCHECK 
                //        FROM TBL_SRV h 
                //        INNER JOIN hrdbuser.ST_STAFFS a ON h.TRGT_ID=a.ID 
                //        INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1 
                //        INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1 
                //        INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
                //        WHERE h.YR=" + yr + " AND h.YR_HF=" + yrhf + " AND h.SRV_TYPE_ID=3" + gazarid + heltesid + " AND h.MODIFY_STAFFID=" + st_id + " AND h.TRGT_ID!=" + st_id + @" ) GROUP BY QID, ST_ID, ANSWERID ) a INNER JOIN TBL_SRV_QUESTION b ON a.QID=b.ID INNER JOIN hrdbuser.ST_STAFFS c ON a.ST_ID=c.ID
                //    INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
                //    INNER JOIN hrdbuser.STN_POS g ON d.POS_ID = g.ID
                //    ORDER BY a.QID, g.SORT, a.ST_ID, a.ANSWERID ) GROUP BY QID, QNAME, ST_ID, ST_NAME ) GROUP BY QID, QNAME";
                //                    }
                //                }
                strQry = @"SELECT 
  QID, 
  QNAME, 
  NVL(RTRIM(xmlagg (xmlelement (e, ST_ID || '~') ORDER BY POSSORT, ST_ID).extract('//text()'), '~'),'none') STIDLIST, 
  NVL(RTRIM(xmlagg (xmlelement (e, ST_NAME || '~') ORDER BY POSSORT, ST_ID).extract('//text()'), '~'),'none') STNAMELIST, 
  NVL(RTRIM(xmlagg (xmlelement (e, ANSWERIDLIST || '~') ORDER BY POSSORT, ST_ID).extract('//text()'), '~'),'none') as ANSWERIDLISTLIST, 
  NVL(RTRIM(xmlagg (xmlelement (e, ISCHECKLIST || '~') ORDER BY POSSORT, ST_ID).extract('//text()'), '~'),'none') ISCHECKLISTLIST, 
  3 as SRVTYPE 
FROM ( 
  SELECT 
    QID, 
    QNAME, 
    ST_ID, 
    ST_NAME, 
    NVL(RTRIM(xmlagg (xmlelement (e, ANSWERID || ',') ORDER BY ANSWERPER DESC).extract('//text()'), ','),'none') ANSWERIDLIST, 
    NVL(RTRIM(xmlagg (xmlelement (e, ISCHECK || ',') ORDER BY ANSWERPER DESC).extract('//text()'), ','),'none') ISCHECKLIST, 
    POSSORT
  FROM ( 
    SELECT 
      a.QID, 
      b.NAME as QNAME, 
      a.ST_ID, 
      (SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 0, 1) || LOWER(SUBSTR(c.FNAME, 2))) as ST_NAME, 
      a.ANSWERID, 
      a.ISCHECK,
      g.SORT as POSSORT, h.PER as ANSWERPER
    FROM ( 
      SELECT QID, ST_ID, ANSWERID, SUM(ISCHECK) as ISCHECK 
      FROM ( 
        SELECT a.QID, a.ST_ID, b.ANSWERID, 0 as ISCHECK 
        FROM ( 
          SELECT a.ID as QID, b.ST_ID 
          FROM TBL_SRV_QUESTION a, ( 
            SELECT ST_ID
            FROM (
              SELECT a.ID as ST_ID
              FROM hrdbuser.ST_STAFFS a
              INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1
              INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1
              INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
              INNER JOIN hrdbuser.STN_POS g ON b.POS_ID = g.ID
              WHERE a.ID != " + st_id + " AND d.ID=" + gazarid + @"
              GROUP BY a.ID
              UNION ALL
              SELECT a.ID as ST_ID
              FROM hrdbuser.ST_STAFFS a
              INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1
              INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1
              INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
              INNER JOIN hrdbuser.STN_POS g ON b.POS_ID = g.ID
              WHERE a.ID != " + st_id + " AND d.FATHER_ID=" + gazarid + @" AND d.ID=" + heltesid + @"
              GROUP BY a.ID 
            )
            GROUP BY ST_ID
          ) b 
          WHERE a.IS_ACTIVE=1 AND SRV_TYPE_ID=3 
        ) a, ( 
          SELECT ID as ANSWERID 
          FROM TBL_SRV_ANSWER 
          WHERE SRV_TYPE_ID=3 AND IS_ACTIVE=1
          ORDER BY PER 
        ) b 
        UNION ALL 
        SELECT h.SRV_QUESTION_ID as QID, h.TRGT_ID as ST_ID, h.SRV_ANSWER_ID as ANSWERID, 1 as ISCHECK 
        FROM TBL_SRV h 
        INNER JOIN hrdbuser.ST_STAFFS a ON h.TRGT_ID=a.ID 
        INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1 
        INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1 
        INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
        WHERE h.YR=" + yr + " AND h.YR_HF=" + yrhf + " AND h.SRV_TYPE_ID=3 AND d.FATHER_ID=" + gazarid + @" AND d.ID=" + heltesid + @" AND h.MODIFY_STAFFID=" + st_id + " AND h.TRGT_ID!=" + st_id + @" 
        UNION ALL 
        SELECT h.SRV_QUESTION_ID as QID, h.TRGT_ID as ST_ID, h.SRV_ANSWER_ID as ANSWERID, 1 as ISCHECK 
        FROM TBL_SRV h 
        INNER JOIN hrdbuser.ST_STAFFS a ON h.TRGT_ID=a.ID 
        INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1 
        INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1 
        INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
        WHERE h.YR=" + yr + " AND h.YR_HF=" + yrhf + " AND h.SRV_TYPE_ID=3 AND d.FATHER_ID=" + gazarid + @" AND h.MODIFY_STAFFID=" + st_id + " AND h.TRGT_ID!=" + st_id + @" 
      ) 
      GROUP BY QID, ST_ID, ANSWERID 
    ) a 
    INNER JOIN TBL_SRV_QUESTION b ON a.QID=b.ID 
    INNER JOIN hrdbuser.ST_STAFFS c ON a.ST_ID=c.ID
    INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
    INNER JOIN hrdbuser.STN_POS g ON d.POS_ID = g.ID
    INNER JOIN TBL_SRV_ANSWER h ON a.ANSWERID=h.ID 
    ORDER BY a.QID, g.SORT, a.ST_ID, h.PER DESC 
  ) 
  GROUP BY QID, QNAME, ST_ID, ST_NAME, POSSORT 
) 
GROUP BY QID, QNAME";
                ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string SrvTab3t3Datatable(string yr, string yrhf, string gazarid, string heltesid, string staffid)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strQry = "";
            if (gazarid != "") gazarid = " AND f.FATHER_ID=" + gazarid;
            if (heltesid != "") heltesid = " AND f.ID=" + heltesid;
            if (staffid != "") staffid = " AND c.ID=" + staffid;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                //                strQry = @"SELECT ROWNUM as ROWNO, a.* 
                //FROM ( 
                //  SELECT GAZARID, GAZAR, HELTESID, HELTES, ST_NAME, AVGPER, GAZARCNT, HELTESCNT, UGSUNSTAFFCNT, CASE WHEN AVGPER < 50 THEN 'bg-color-red' WHEN AVGPER > 49 AND AVGPER < 80 THEN 'bg-color-orange' WHEN AVGPER>79 THEN 'bg-color-greenLight' END as PERCOLOR
                //  FROM (
                //    SELECT g.ID as GAZARID, g.NAME as GAZAR, f.ID as HELTESID, f.NAME as HELTES, (SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 0, 1) || LOWER(SUBSTR(c.FNAME, 2))) as ST_NAME
                //      , ROUND(AVG(b.PER),1) as AVGPER, h.CNT as GAZARCNT, i.CNT as HELTESCNT, j.UGSUNSTAFFCNT, g.SORT as GAZARSORT, f.SORT as HELTESSORT
                //    FROM TBL_SRV a 
                //    INNER JOIN TBL_SRV_ANSWER b ON a.SRV_ANSWER_ID=b.ID 
                //    INNER JOIN hrdbuser.ST_STAFFS c ON a.TRGT_ID=c.ID
                //    INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
                //    INNER JOIN hrdbuser.ST_BRANCH f ON d.BRANCH_ID = f.ID AND f.ISACTIVE = 1
                //    INNER JOIN hrdbuser.ST_BRANCH g ON f.FATHER_ID = g.ID AND g.ISACTIVE = 1
                //    INNER JOIN ( 
                //      SELECT GAZARID, COUNT(1) as CNT 
                //      FROM ( 
                //        SELECT g.ID as GAZARID, g.NAME as GAZARNAME, f.ID as HELTESID, f.NAME as HELTESNAME, (SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 0, 1) || LOWER(SUBSTR(c.FNAME, 2))) as ST_NAME, ROUND(AVG(b.PER),1) as AVGPER
                //        FROM TBL_SRV a
                //        INNER JOIN TBL_SRV_ANSWER b ON a.SRV_ANSWER_ID=b.ID
                //        INNER JOIN hrdbuser.ST_STAFFS c ON a.TRGT_ID=c.ID
                //        INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
                //        INNER JOIN hrdbuser.ST_BRANCH f ON d.BRANCH_ID = f.ID AND f.ISACTIVE = 1
                //        INNER JOIN hrdbuser.ST_BRANCH g ON f.FATHER_ID = g.ID AND g.ISACTIVE = 1
                //        WHERE a.SRV_TYPE_ID=3 AND a.YR=" + yr + " AND a.YR_HF=" + yrhf + gazarid + heltesid + staffid + @" 
                //        GROUP BY g.ID, g.NAME, f.ID, f.NAME, (SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 0, 1) || LOWER(SUBSTR(c.FNAME, 2)))
                //      ) 
                //      GROUP BY GAZARID 
                //    ) h ON f.FATHER_ID=h.GAZARID 
                //    INNER JOIN ( 
                //      SELECT HELTESID, COUNT(1) as CNT 
                //      FROM ( 
                //        SELECT g.ID as GAZARID, g.NAME as GAZARNAME, f.ID as HELTESID, f.NAME as HELTESNAME, (SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 0, 1) || LOWER(SUBSTR(c.FNAME, 2))) as ST_NAME, ROUND(AVG(b.PER),1) as AVGPER
                //        FROM TBL_SRV a
                //        INNER JOIN TBL_SRV_ANSWER b ON a.SRV_ANSWER_ID=b.ID
                //        INNER JOIN hrdbuser.ST_STAFFS c ON a.TRGT_ID=c.ID
                //        INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
                //        INNER JOIN hrdbuser.ST_BRANCH f ON d.BRANCH_ID = f.ID AND f.ISACTIVE = 1
                //        INNER JOIN hrdbuser.ST_BRANCH g ON f.FATHER_ID = g.ID AND g.ISACTIVE = 1
                //        WHERE a.SRV_TYPE_ID=3 AND a.YR=" + yr + " AND a.YR_HF=" + yrhf + gazarid + heltesid + staffid + @"
                //        GROUP BY g.ID, g.NAME, f.ID, f.NAME, (SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 0, 1) || LOWER(SUBSTR(c.FNAME, 2)))
                //      ) 
                //      GROUP BY HELTESID 
                //    ) i ON f.ID=i.HELTESID 
                //    INNER JOIN ( 
                //      SELECT a.TRGT_ID, COUNT(a.MODIFY_STAFFID) as UGSUNSTAFFCNT 
                //      FROM ( 
                //        SELECT a.TRGT_ID, a.MODIFY_STAFFID
                //        FROM TBL_SRV a
                //        INNER JOIN TBL_SRV_ANSWER b ON a.SRV_ANSWER_ID=b.ID
                //        INNER JOIN hrdbuser.ST_STAFFS c ON a.TRGT_ID=c.ID
                //        INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
                //        INNER JOIN hrdbuser.ST_BRANCH f ON d.BRANCH_ID = f.ID AND f.ISACTIVE = 1
                //        INNER JOIN hrdbuser.ST_BRANCH g ON f.FATHER_ID = g.ID AND g.ISACTIVE = 1
                //        WHERE a.SRV_TYPE_ID=3 AND a.YR=" + yr + " AND a.YR_HF=" + yrhf + gazarid + heltesid + staffid + @"
                //        GROUP BY a.TRGT_ID, a.MODIFY_STAFFID
                //      ) a 
                //      GROUP BY a.TRGT_ID 
                //    ) j ON a.TRGT_ID=j.TRGT_ID 
                //    WHERE a.SRV_TYPE_ID=3 AND a.YR=" + yr + " AND a.YR_HF=" + yrhf + gazarid + heltesid + staffid + @" 
                //    GROUP BY g.ID, g.NAME, f.ID, f.NAME, (SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 0, 1) || LOWER(SUBSTR(c.FNAME, 2))), h.CNT, i.CNT, j.UGSUNSTAFFCNT, g.SORT, f.SORT
                //  )
                //  ORDER BY GAZARSORT, HELTESSORT, AVGPER DESC
                //) a";
                strQry = @"SELECT ROWNUM as ROWNO, a.* 
FROM ( 
  SELECT GAZARID, HELTESID, NEGJ, ST_NAME, AVGPER, CASE WHEN AVGPER < 50 THEN 'bg-color-red' WHEN AVGPER > 49 AND AVGPER < 80 THEN 'bg-color-orange' WHEN AVGPER>79 THEN 'bg-color-greenLight' END as PERCOLOR, QUESTION_NAME
  FROM (
    SELECT 
      g.ID as GAZARID, 
      f.ID as HELTESID, 
      CASE WHEN f.ID=f.FATHER_ID THEN g.INITNAME ELSE g.INITNAME||'-'||f.INITNAME END AS NEGJ, 
      (SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 0, 1) || LOWER(SUBSTR(c.FNAME, 2))) as ST_NAME, 
      ROUND(AVG(b.PER),1) as AVGPER, 
      g.SORT as GAZARSORT, 
      f.SORT as HELTESSORT, 
      h.NAME as QUESTION_NAME,
      i.SORT as POSSORT,
      a.TRGT_ID
    FROM TBL_SRV a 
    INNER JOIN TBL_SRV_ANSWER b ON a.SRV_ANSWER_ID=b.ID 
    INNER JOIN hrdbuser.ST_STAFFS c ON a.TRGT_ID=c.ID
    INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
    INNER JOIN hrdbuser.ST_BRANCH f ON d.BRANCH_ID = f.ID AND f.ISACTIVE = 1
    INNER JOIN hrdbuser.ST_BRANCH g ON f.FATHER_ID = g.ID AND g.ISACTIVE = 1
    INNER JOIN TBL_SRV_QUESTION h ON a.SRV_QUESTION_ID=h.ID
    INNER JOIN hrdbuser.STN_POS i ON d.POS_ID=i.ID
    WHERE a.SRV_TYPE_ID=3 AND a.YR=" + yr + " AND a.YR_HF=" + yrhf + gazarid + heltesid + staffid + @" 
    GROUP BY g.ID, f.ID, CASE WHEN f.ID=f.FATHER_ID THEN g.INITNAME ELSE g.INITNAME||'-'||f.INITNAME END, (SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 0, 1) || LOWER(SUBSTR(c.FNAME, 2))), g.SORT, f.SORT, h.NAME, i.SORT, a.TRGT_ID
  )
  ORDER BY GAZARSORT, HELTESSORT, POSSORT, TRGT_ID, AVGPER DESC
) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string SrvTab3t4Datatable(string yr, string yrhf, string gazarid, string heltesid)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strQry = "";
            if (gazarid != "") gazarid = " AND f.FATHER_ID=" + gazarid;
            if (heltesid != "") heltesid = " AND f.ID=" + heltesid;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                strQry = @"SELECT ROWNUM as ROWNO, a.* 
FROM ( 
  SELECT GAZARID, GAZAR, HELTESID, HELTES, ST_NAME, AVGPER, GAZARCNT, HELTESCNT, UGSUNSTAFFCNT, CASE WHEN AVGPER < 50 THEN 'bg-color-red' WHEN AVGPER > 49 AND AVGPER < 80 THEN 'bg-color-orange' WHEN AVGPER>79 THEN 'bg-color-greenLight' END as PERCOLOR
  FROM (
    SELECT g.ID as GAZARID, g.NAME as GAZAR, f.ID as HELTESID, f.NAME as HELTES, (SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 0, 1) || LOWER(SUBSTR(c.FNAME, 2))) as ST_NAME
      , ROUND(AVG(b.PER),1) as AVGPER, h.CNT as GAZARCNT, i.CNT as HELTESCNT, j.UGSUNSTAFFCNT, g.SORT as GAZARSORT, f.SORT as HELTESSORT
    FROM TBL_SRV a 
    INNER JOIN TBL_SRV_ANSWER b ON a.SRV_ANSWER_ID=b.ID 
    INNER JOIN hrdbuser.ST_STAFFS c ON a.TRGT_ID=c.ID
    INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
    INNER JOIN hrdbuser.ST_BRANCH f ON d.BRANCH_ID = f.ID AND f.ISACTIVE = 1
    INNER JOIN hrdbuser.ST_BRANCH g ON f.FATHER_ID = g.ID AND g.ISACTIVE = 1
    INNER JOIN ( 
      SELECT GAZARID, COUNT(1) as CNT 
      FROM ( 
        SELECT g.ID as GAZARID, g.NAME as GAZARNAME, f.ID as HELTESID, f.NAME as HELTESNAME, (SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 0, 1) || LOWER(SUBSTR(c.FNAME, 2))) as ST_NAME, ROUND(AVG(b.PER),1) as AVGPER
        FROM TBL_SRV a
        INNER JOIN TBL_SRV_ANSWER b ON a.SRV_ANSWER_ID=b.ID
        INNER JOIN hrdbuser.ST_STAFFS c ON a.TRGT_ID=c.ID
        INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
        INNER JOIN hrdbuser.ST_BRANCH f ON d.BRANCH_ID = f.ID AND f.ISACTIVE = 1
        INNER JOIN hrdbuser.ST_BRANCH g ON f.FATHER_ID = g.ID AND g.ISACTIVE = 1
        WHERE a.SRV_TYPE_ID=3 AND a.YR=" + yr + " AND a.YR_HF=" + yrhf + gazarid + heltesid + @" 
        GROUP BY g.ID, g.NAME, f.ID, f.NAME, (SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 0, 1) || LOWER(SUBSTR(c.FNAME, 2)))
      ) 
      GROUP BY GAZARID 
    ) h ON f.FATHER_ID=h.GAZARID 
    INNER JOIN ( 
      SELECT HELTESID, COUNT(1) as CNT 
      FROM ( 
        SELECT g.ID as GAZARID, g.NAME as GAZARNAME, f.ID as HELTESID, f.NAME as HELTESNAME, (SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 0, 1) || LOWER(SUBSTR(c.FNAME, 2))) as ST_NAME, ROUND(AVG(b.PER),1) as AVGPER
        FROM TBL_SRV a
        INNER JOIN TBL_SRV_ANSWER b ON a.SRV_ANSWER_ID=b.ID
        INNER JOIN hrdbuser.ST_STAFFS c ON a.TRGT_ID=c.ID
        INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
        INNER JOIN hrdbuser.ST_BRANCH f ON d.BRANCH_ID = f.ID AND f.ISACTIVE = 1
        INNER JOIN hrdbuser.ST_BRANCH g ON f.FATHER_ID = g.ID AND g.ISACTIVE = 1
        WHERE a.SRV_TYPE_ID=3 AND a.YR=" + yr + " AND a.YR_HF=" + yrhf + gazarid + heltesid + @"
        GROUP BY g.ID, g.NAME, f.ID, f.NAME, (SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 0, 1) || LOWER(SUBSTR(c.FNAME, 2)))
      ) 
      GROUP BY HELTESID 
    ) i ON f.ID=i.HELTESID 
    INNER JOIN ( 
      SELECT a.TRGT_ID, COUNT(a.MODIFY_STAFFID) as UGSUNSTAFFCNT 
      FROM ( 
        SELECT a.TRGT_ID, a.MODIFY_STAFFID
        FROM TBL_SRV a
        INNER JOIN TBL_SRV_ANSWER b ON a.SRV_ANSWER_ID=b.ID
        INNER JOIN hrdbuser.ST_STAFFS c ON a.TRGT_ID=c.ID
        INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
        INNER JOIN hrdbuser.ST_BRANCH f ON d.BRANCH_ID = f.ID AND f.ISACTIVE = 1
        INNER JOIN hrdbuser.ST_BRANCH g ON f.FATHER_ID = g.ID AND g.ISACTIVE = 1
        WHERE a.SRV_TYPE_ID=3 AND a.YR=" + yr + " AND a.YR_HF=" + yrhf + gazarid + heltesid + @"
        GROUP BY a.TRGT_ID, a.MODIFY_STAFFID
      ) a 
      GROUP BY a.TRGT_ID 
    ) j ON a.TRGT_ID=j.TRGT_ID 
    WHERE a.SRV_TYPE_ID=3 AND a.YR=" + yr + " AND a.YR_HF=" + yrhf + gazarid + heltesid + @" 
    GROUP BY g.ID, g.NAME, f.ID, f.NAME, (SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 0, 1) || LOWER(SUBSTR(c.FNAME, 2))), h.CNT, i.CNT, j.UGSUNSTAFFCNT, g.SORT, f.SORT
  )
  ORDER BY GAZARSORT, HELTESSORT, AVGPER DESC
) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string SrvTab4t2Datatable(string yr, string yrhf, string gazarid, string st_id)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strQry = "";
            if (gazarid != "") gazarid = " AND d.FATHER_ID=" + gazarid;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObjGetTableData.getCurrentInfo();
                string curYr = ds.Tables[0].Rows[0]["YEAR"].ToString();
                string curYrHf = ds.Tables[0].Rows[0]["YEARHALF"].ToString();
                if (yr == curYr && yrhf == curYrHf)
                {
                    strQry = @"SELECT QID, QNAME, NVL(RTRIM(xmlagg (xmlelement (e, ST_ID || '~') ORDER BY ST_ID).extract('//text()'), '~'),'none') STIDLIST, NVL(RTRIM(xmlagg (xmlelement (e, ST_NAME || '~') ORDER BY ST_ID).extract('//text()'), '~'),'none') STNAMELIST, NVL(RTRIM(xmlagg (xmlelement (e, ANSWERIDLIST || '~') ORDER BY ST_ID).extract('//text()'), '~'),'none') as ANSWERIDLISTLIST, NVL(RTRIM(xmlagg (xmlelement (e, ISCHECKLIST || '~') ORDER BY ST_ID).extract('//text()'), '~'),'none') ISCHECKLISTLIST, 4 as SRVTYPE 
FROM ( 
    SELECT QID, QNAME, ST_ID, ST_NAME, NVL(RTRIM(xmlagg (xmlelement (e, ANSWERID || ',') ORDER BY ANSWERID).extract('//text()'), ','),'none') ANSWERIDLIST, NVL(RTRIM(xmlagg (xmlelement (e, ISCHECK || ',') ORDER BY ANSWERID).extract('//text()'), ','),'none') ISCHECKLIST 
    FROM ( 
        SELECT a.QID, b.NAME as QNAME, a.ST_ID, (SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 0, 1) || LOWER(SUBSTR(c.FNAME, 2))) as ST_NAME, a.ANSWERID, a.ISCHECK 
        FROM ( 
            SELECT QID, ST_ID, ANSWERID, SUM(ISCHECK) as ISCHECK 
            FROM ( 
                SELECT a.QID, a.ST_ID, b.ANSWERID, 0 as ISCHECK 
                FROM ( 
                    SELECT a.ID as QID, b.ST_ID 
                    FROM TBL_SRV_QUESTION a, ( 
                        SELECT a.ID as ST_ID, (SUBSTR(a.LNAME, 0, 1) || '.' || SUBSTR(a.FNAME, 0, 1) || LOWER(SUBSTR(a.FNAME, 2))) as ST_NAME 
                        FROM hrdbuser.ST_STAFFS a
                        INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1
                        INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1
                        INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
                        INNER JOIN hrdbuser.STN_POS g ON b.POS_ID = g.ID
                        WHERE (b.POS_ID=2010301 OR b.POS_ID=2010201) AND a.ID=" + st_id + gazarid + @"
                        ORDER BY g.SORT, a.ID 
                    ) b 
                    WHERE a.IS_ACTIVE=1 AND SRV_TYPE_ID=4 
                ) a, ( 
                    SELECT ID as ANSWERID 
                    FROM TBL_SRV_ANSWER 
                    WHERE SRV_TYPE_ID=4 AND IS_ACTIVE=1 
                    ORDER BY PER 
                ) b 
                UNION ALL 
                SELECT h.SRV_QUESTION_ID as QID, h.TRGT_ID as ST_ID, h.SRV_ANSWER_ID as ANSWERID, 1 as ISCHECK 
                FROM TBL_SRV h 
                INNER JOIN hrdbuser.ST_STAFFS a ON h.TRGT_ID=a.ID 
                INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1 
                INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1 
                INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
                WHERE h.YR=" + yr + " AND h.YR_HF=" + yrhf + " AND h.SRV_TYPE_ID=4"+gazarid+ @" AND h.MODIFY_STAFFID="+st_id+ " AND h.TRGT_ID="+st_id+@"
            ) 
            GROUP BY QID, ST_ID, ANSWERID 
        ) a 
        INNER JOIN TBL_SRV_QUESTION b ON a.QID=b.ID 
        INNER JOIN hrdbuser.ST_STAFFS c ON a.ST_ID=c.ID
        INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
        INNER JOIN hrdbuser.STN_POS g ON d.POS_ID = g.ID 
        ORDER BY a.QID, g.SORT, a.ST_ID, a.ANSWERID 
    ) 
    GROUP BY QID, QNAME, ST_ID, ST_NAME 
) 
GROUP BY QID, QNAME";
                }
                else
                {
                    if (yr == curYr)
                    {
                        if (Int32.Parse(yrhf) > Int32.Parse(curYrHf))
                        {
                            strQry = @"SELECT QID, QNAME, NVL(RTRIM(xmlagg (xmlelement (e, ST_ID || '~') ORDER BY ST_ID).extract('//text()'), '~'),'none') STIDLIST, NVL(RTRIM(xmlagg (xmlelement (e, ST_NAME || '~') ORDER BY ST_ID).extract('//text()'), '~'),'none') STNAMELIST, NVL(RTRIM(xmlagg (xmlelement (e, ANSWERIDLIST || '~') ORDER BY ST_ID).extract('//text()'), '~'),'none') as ANSWERIDLISTLIST, NVL(RTRIM(xmlagg (xmlelement (e, ISCHECKLIST || '~') ORDER BY ST_ID).extract('//text()'), '~'),'none') ISCHECKLISTLIST, 4 as SRVTYPE 
FROM ( 
    SELECT QID, QNAME, ST_ID, ST_NAME, NVL(RTRIM(xmlagg (xmlelement (e, ANSWERID || ',') ORDER BY ANSWERID).extract('//text()'), ','),'none') ANSWERIDLIST, NVL(RTRIM(xmlagg (xmlelement (e, ISCHECK || ',') ORDER BY ANSWERID).extract('//text()'), ','),'none') ISCHECKLIST 
    FROM ( 
        SELECT a.QID, b.NAME as QNAME, a.ST_ID, (SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 0, 1) || LOWER(SUBSTR(c.FNAME, 2))) as ST_NAME, a.ANSWERID, a.ISCHECK 
        FROM ( 
            SELECT QID, ST_ID, ANSWERID, SUM(ISCHECK) as ISCHECK 
            FROM ( 
                SELECT a.QID, a.ST_ID, b.ANSWERID, 0 as ISCHECK 
                FROM ( 
                    SELECT a.ID as QID, b.ST_ID 
                    FROM TBL_SRV_QUESTION a, ( 
                        SELECT a.ID as ST_ID, (SUBSTR(a.LNAME, 0, 1) || '.' || SUBSTR(a.FNAME, 0, 1) || LOWER(SUBSTR(a.FNAME, 2))) as ST_NAME 
                        FROM hrdbuser.ST_STAFFS a
                        INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1
                        INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1
                        INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
                        INNER JOIN hrdbuser.STN_POS g ON b.POS_ID = g.ID
                        WHERE (b.POS_ID=2010301 OR b.POS_ID=2010201) AND a.ID=" + st_id + gazarid + @"
                        ORDER BY g.SORT, a.ID 
                    ) b 
                    WHERE a.IS_ACTIVE=1 AND SRV_TYPE_ID=4 
                ) a, ( 
                    SELECT ID as ANSWERID 
                    FROM TBL_SRV_ANSWER 
                    WHERE SRV_TYPE_ID=4 AND IS_ACTIVE=1 
                    ORDER BY PER 
                ) b 
            ) 
            GROUP BY QID, ST_ID, ANSWERID 
        ) a 
        INNER JOIN TBL_SRV_QUESTION b ON a.QID=b.ID 
        INNER JOIN hrdbuser.ST_STAFFS c ON a.ST_ID=c.ID
        INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
        INNER JOIN hrdbuser.STN_POS g ON d.POS_ID = g.ID 
        ORDER BY a.QID, g.SORT, a.ST_ID, a.ANSWERID 
    ) 
    GROUP BY QID, QNAME, ST_ID, ST_NAME 
) 
GROUP BY QID, QNAME";
                        }
                        else if (Int32.Parse(yrhf) < Int32.Parse(curYrHf))
                        {
                            strQry = @"SELECT QID, QNAME, NVL(RTRIM(xmlagg (xmlelement (e, ST_ID || '~') ORDER BY ST_ID).extract('//text()'), '~'),'none') STIDLIST, NVL(RTRIM(xmlagg (xmlelement (e, ST_NAME || '~') ORDER BY ST_ID).extract('//text()'), '~'),'none') STNAMELIST, NVL(RTRIM(xmlagg (xmlelement (e, ANSWERIDLIST || '~') ORDER BY ST_ID).extract('//text()'), '~'),'none') as ANSWERIDLISTLIST, NVL(RTRIM(xmlagg (xmlelement (e, ISCHECKLIST || '~') ORDER BY ST_ID).extract('//text()'), '~'),'none') ISCHECKLISTLIST, 4 as SRVTYPE 
FROM ( 
    SELECT QID, QNAME, ST_ID, ST_NAME, NVL(RTRIM(xmlagg (xmlelement (e, ANSWERID || ',') ORDER BY ANSWERID).extract('//text()'), ','),'none') ANSWERIDLIST, NVL(RTRIM(xmlagg (xmlelement (e, ISCHECK || ',') ORDER BY ANSWERID).extract('//text()'), ','),'none') ISCHECKLIST 
    FROM ( 
        SELECT a.QID, b.NAME as QNAME, a.ST_ID, (SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 0, 1) || LOWER(SUBSTR(c.FNAME, 2))) as ST_NAME, a.ANSWERID, a.ISCHECK 
        FROM ( 
            SELECT QID, ST_ID, ANSWERID, SUM(ISCHECK) as ISCHECK 
            FROM ( 
                SELECT a.QID, a.ST_ID, b.ANSWERID, 0 as ISCHECK 
                FROM ( 
                    SELECT a.ID as QID, b.ST_ID 
                    FROM TBL_SRV_QUESTION a, ( 
                        SELECT a.ID as ST_ID, (SUBSTR(a.LNAME, 0, 1) || '.' || SUBSTR(a.FNAME, 0, 1) || LOWER(SUBSTR(a.FNAME, 2))) as ST_NAME 
                        FROM hrdbuser.ST_STAFFS a
                        INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1
                        INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1
                        INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
                        INNER JOIN hrdbuser.STN_POS g ON b.POS_ID = g.ID
                        WHERE (b.POS_ID=2010301 OR b.POS_ID=2010201) AND a.ID=" + st_id + gazarid + @"
                        ORDER BY g.SORT, a.ID 
                    ) b 
                    WHERE a.IS_ACTIVE=1 AND SRV_TYPE_ID=4 
                ) a, ( 
                    SELECT ID as ANSWERID 
                    FROM TBL_SRV_ANSWER 
                    WHERE SRV_TYPE_ID=4 AND IS_ACTIVE=1 
                    ORDER BY PER 
                ) b 
                UNION ALL 
                SELECT h.SRV_QUESTION_ID as QID, h.TRGT_ID as ST_ID, h.SRV_ANSWER_ID as ANSWERID, 1 as ISCHECK 
                FROM TBL_SRV h 
                INNER JOIN hrdbuser.ST_STAFFS a ON h.TRGT_ID=a.ID 
                INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1 
                INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1 
                INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
                WHERE h.YR=" + yr + " AND h.YR_HF=" + yrhf + " AND h.SRV_TYPE_ID=4" + gazarid + @" AND h.MODIFY_STAFFID=" + st_id + " AND h.TRGT_ID=" + st_id + @"
            ) 
            GROUP BY QID, ST_ID, ANSWERID 
        ) a 
        INNER JOIN TBL_SRV_QUESTION b ON a.QID=b.ID 
        INNER JOIN hrdbuser.ST_STAFFS c ON a.ST_ID=c.ID
        INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
        INNER JOIN hrdbuser.STN_POS g ON d.POS_ID = g.ID 
        ORDER BY a.QID, g.SORT, a.ST_ID, a.ANSWERID 
    ) 
    GROUP BY QID, QNAME, ST_ID, ST_NAME 
) 
GROUP BY QID, QNAME";
                        }
                    }
                    else if (Int32.Parse(yr) > Int32.Parse(curYr))
                    {
                        strQry = @"SELECT QID, QNAME, NVL(RTRIM(xmlagg (xmlelement (e, ST_ID || '~') ORDER BY ST_ID).extract('//text()'), '~'),'none') STIDLIST, NVL(RTRIM(xmlagg (xmlelement (e, ST_NAME || '~') ORDER BY ST_ID).extract('//text()'), '~'),'none') STNAMELIST, NVL(RTRIM(xmlagg (xmlelement (e, ANSWERIDLIST || '~') ORDER BY ST_ID).extract('//text()'), '~'),'none') as ANSWERIDLISTLIST, NVL(RTRIM(xmlagg (xmlelement (e, ISCHECKLIST || '~') ORDER BY ST_ID).extract('//text()'), '~'),'none') ISCHECKLISTLIST, 4 as SRVTYPE 
FROM ( 
    SELECT QID, QNAME, ST_ID, ST_NAME, NVL(RTRIM(xmlagg (xmlelement (e, ANSWERID || ',') ORDER BY ANSWERID).extract('//text()'), ','),'none') ANSWERIDLIST, NVL(RTRIM(xmlagg (xmlelement (e, ISCHECK || ',') ORDER BY ANSWERID).extract('//text()'), ','),'none') ISCHECKLIST 
    FROM ( 
        SELECT a.QID, b.NAME as QNAME, a.ST_ID, (SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 0, 1) || LOWER(SUBSTR(c.FNAME, 2))) as ST_NAME, a.ANSWERID, a.ISCHECK 
        FROM ( 
            SELECT QID, ST_ID, ANSWERID, SUM(ISCHECK) as ISCHECK 
            FROM ( 
                SELECT a.QID, a.ST_ID, b.ANSWERID, 0 as ISCHECK 
                FROM ( 
                    SELECT a.ID as QID, b.ST_ID 
                    FROM TBL_SRV_QUESTION a, ( 
                        SELECT a.ID as ST_ID, (SUBSTR(a.LNAME, 0, 1) || '.' || SUBSTR(a.FNAME, 0, 1) || LOWER(SUBSTR(a.FNAME, 2))) as ST_NAME 
                        FROM hrdbuser.ST_STAFFS a
                        INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1
                        INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1
                        INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
                        INNER JOIN hrdbuser.STN_POS g ON b.POS_ID = g.ID
                        WHERE (b.POS_ID=2010301 OR b.POS_ID=2010201) AND a.ID=" + st_id + gazarid + @"
                        ORDER BY g.SORT, a.ID 
                    ) b 
                    WHERE a.IS_ACTIVE=1 AND SRV_TYPE_ID=4 
                ) a, ( 
                    SELECT ID as ANSWERID 
                    FROM TBL_SRV_ANSWER 
                    WHERE SRV_TYPE_ID=4 AND IS_ACTIVE=1 
                    ORDER BY PER 
                ) b 
            ) 
            GROUP BY QID, ST_ID, ANSWERID 
        ) a 
        INNER JOIN TBL_SRV_QUESTION b ON a.QID=b.ID 
        INNER JOIN hrdbuser.ST_STAFFS c ON a.ST_ID=c.ID
        INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
        INNER JOIN hrdbuser.STN_POS g ON d.POS_ID = g.ID 
        ORDER BY a.QID, g.SORT, a.ST_ID, a.ANSWERID 
    ) 
    GROUP BY QID, QNAME, ST_ID, ST_NAME 
) 
GROUP BY QID, QNAME";
                    }
                    else if (Int32.Parse(yr) < Int32.Parse(curYr))
                    {
                        strQry = @"SELECT QID, QNAME, NVL(RTRIM(xmlagg (xmlelement (e, ST_ID || '~') ORDER BY ST_ID).extract('//text()'), '~'),'none') STIDLIST, NVL(RTRIM(xmlagg (xmlelement (e, ST_NAME || '~') ORDER BY ST_ID).extract('//text()'), '~'),'none') STNAMELIST, NVL(RTRIM(xmlagg (xmlelement (e, ANSWERIDLIST || '~') ORDER BY ST_ID).extract('//text()'), '~'),'none') as ANSWERIDLISTLIST, NVL(RTRIM(xmlagg (xmlelement (e, ISCHECKLIST || '~') ORDER BY ST_ID).extract('//text()'), '~'),'none') ISCHECKLISTLIST, 4 as SRVTYPE 
FROM ( 
    SELECT QID, QNAME, ST_ID, ST_NAME, NVL(RTRIM(xmlagg (xmlelement (e, ANSWERID || ',') ORDER BY ANSWERID).extract('//text()'), ','),'none') ANSWERIDLIST, NVL(RTRIM(xmlagg (xmlelement (e, ISCHECK || ',') ORDER BY ANSWERID).extract('//text()'), ','),'none') ISCHECKLIST 
    FROM ( 
        SELECT a.QID, b.NAME as QNAME, a.ST_ID, (SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 0, 1) || LOWER(SUBSTR(c.FNAME, 2))) as ST_NAME, a.ANSWERID, a.ISCHECK 
        FROM ( 
            SELECT QID, ST_ID, ANSWERID, SUM(ISCHECK) as ISCHECK 
            FROM ( 
                SELECT a.QID, a.ST_ID, b.ANSWERID, 0 as ISCHECK 
                FROM ( 
                    SELECT a.ID as QID, b.ST_ID 
                    FROM TBL_SRV_QUESTION a, ( 
                        SELECT a.ID as ST_ID, (SUBSTR(a.LNAME, 0, 1) || '.' || SUBSTR(a.FNAME, 0, 1) || LOWER(SUBSTR(a.FNAME, 2))) as ST_NAME 
                        FROM hrdbuser.ST_STAFFS a
                        INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1
                        INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1
                        INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
                        INNER JOIN hrdbuser.STN_POS g ON b.POS_ID = g.ID
                        WHERE (b.POS_ID=2010301 OR b.POS_ID=2010201) AND a.ID=" + st_id + gazarid + @"
                        ORDER BY g.SORT, a.ID 
                    ) b 
                    WHERE a.IS_ACTIVE=1 AND SRV_TYPE_ID=4 
                ) a, ( 
                    SELECT ID as ANSWERID 
                    FROM TBL_SRV_ANSWER 
                    WHERE SRV_TYPE_ID=4 AND IS_ACTIVE=1 
                    ORDER BY PER 
                ) b 
                UNION ALL 
                SELECT h.SRV_QUESTION_ID as QID, h.TRGT_ID as ST_ID, h.SRV_ANSWER_ID as ANSWERID, 1 as ISCHECK 
                FROM TBL_SRV h 
                INNER JOIN hrdbuser.ST_STAFFS a ON h.TRGT_ID=a.ID 
                INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1 
                INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1 
                INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
                WHERE h.YR=" + yr + " AND h.YR_HF=" + yrhf + " AND h.SRV_TYPE_ID=4" + gazarid + @" AND h.MODIFY_STAFFID=" + st_id + " AND h.TRGT_ID=" + st_id + @"
            ) 
            GROUP BY QID, ST_ID, ANSWERID 
        ) a 
        INNER JOIN TBL_SRV_QUESTION b ON a.QID=b.ID 
        INNER JOIN hrdbuser.ST_STAFFS c ON a.ST_ID=c.ID
        INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
        INNER JOIN hrdbuser.STN_POS g ON d.POS_ID = g.ID 
        ORDER BY a.QID, g.SORT, a.ST_ID, a.ANSWERID 
    ) 
    GROUP BY QID, QNAME, ST_ID, ST_NAME 
) 
GROUP BY QID, QNAME";
                    }
                }
                ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string SrvTab4t3Datatable(string yr, string yrhf, string gazarid, string heltesid)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strQry = "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                if (gazarid != "") gazarid = " AND f.ID=" + gazarid;
                if (heltesid != "") heltesid = " AND f.FATHER_ID=" + heltesid;
                strQry = @"SELECT ROWNUM as ROWNO, a.* 
FROM ( 
  SELECT g.ID as GAZARID, g.NAME as GAZARNAME, f.ID as HELTESID, f.NAME as HELTESNAME, (SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 0, 1) || LOWER(SUBSTR(c.FNAME, 2))) as ST_NAME, ROUND(AVG(b.PER),1) as AVGPER, CASE WHEN ROUND(AVG(b.PER),1) < 50 THEN 'bg-color-red' WHEN ROUND(AVG(b.PER),1) > 49 AND ROUND(AVG(b.PER),1) < 80 THEN 'bg-color-orange' WHEN ROUND(AVG(b.PER),1)>79 THEN 'bg-color-greenLight' END as PERCOLOR, g.SORT as GAZARSORT, f.SORT as HELTESSORT
    , h.CNT as GAZARCNT, i.CNT as HELTESCNT 
  FROM TBL_SRV a 
  INNER JOIN TBL_SRV_ANSWER b ON a.SRV_ANSWER_ID=b.ID 
  INNER JOIN hrdbuser.ST_STAFFS c ON a.TRGT_ID=c.ID
  INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
  INNER JOIN hrdbuser.ST_BRANCH f ON d.BRANCH_ID = f.ID AND f.ISACTIVE = 1
  INNER JOIN hrdbuser.ST_BRANCH g ON f.FATHER_ID = g.ID AND g.ISACTIVE = 1 
  INNER JOIN ( 
    SELECT GAZARID, COUNT(1) as CNT 
    FROM ( 
      SELECT g.ID as GAZARID, g.NAME as GAZARNAME, f.ID as HELTESID, f.NAME as HELTESNAME, (SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 0, 1) || LOWER(SUBSTR(c.FNAME, 2))) as ST_NAME, ROUND(AVG(b.PER),1) as AVGPER 
      FROM TBL_SRV a 
      INNER JOIN TBL_SRV_ANSWER b ON a.SRV_ANSWER_ID=b.ID 
      INNER JOIN hrdbuser.ST_STAFFS c ON a.TRGT_ID=c.ID
      INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
      INNER JOIN hrdbuser.ST_BRANCH f ON d.BRANCH_ID = f.ID AND f.ISACTIVE = 1
      INNER JOIN hrdbuser.ST_BRANCH g ON f.FATHER_ID = g.ID AND g.ISACTIVE = 1
      WHERE a.SRV_TYPE_ID=4 AND a.YR=" + yr + " AND a.YR_HF=" + yrhf + gazarid + heltesid + @" 
      GROUP BY g.ID, g.NAME, f.ID, f.NAME, c.LNAME, c.FNAME
    ) 
    GROUP BY GAZARID
  ) h ON g.ID = h.GAZARID
  INNER JOIN (
    SELECT HELTESID, COUNT(1) as CNT
    FROM(
      SELECT g.ID as GAZARID, g.NAME as GAZARNAME, f.ID as HELTESID, f.NAME as HELTESNAME, (SUBSTR(c.LNAME, 0, 1) || '.' || SUBSTR(c.FNAME, 0, 1) || LOWER(SUBSTR(c.FNAME, 2))) as ST_NAME, ROUND(AVG(b.PER), 1) as AVGPER
      FROM TBL_SRV a
      INNER JOIN TBL_SRV_ANSWER b ON a.SRV_ANSWER_ID = b.ID
      INNER JOIN hrdbuser.ST_STAFFS c ON a.TRGT_ID = c.ID
      INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
      INNER JOIN hrdbuser.ST_BRANCH f ON d.BRANCH_ID = f.ID AND f.ISACTIVE = 1
      INNER JOIN hrdbuser.ST_BRANCH g ON f.FATHER_ID = g.ID AND g.ISACTIVE = 1
      WHERE a.SRV_TYPE_ID = 4 AND a.YR = " + yr + " AND a.YR_HF = " + yrhf + gazarid + heltesid + @"
      GROUP BY g.ID, g.NAME, f.ID, f.NAME, c.LNAME, c.FNAME
    )
    GROUP BY HELTESID
  ) i ON f.ID = i.HELTESID
  WHERE a.SRV_TYPE_ID = 4 AND a.YR = " + yr + " AND a.YR_HF = " + yrhf + gazarid + heltesid + @"
  GROUP BY g.ID, g.NAME, f.ID, f.NAME, c.LNAME, c.FNAME, h.CNT, i.CNT, g.SORT, f.SORT
  ORDER BY g.SORT, f.SORT
) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void srvSendMail(string tp, string body)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strReturnVal = "";
            MailMessage mail = new MailMessage();
            string strSubject = "";
            string strDUsers = "";
            string strAhref = "";
            try
            {
                if (tp == "1")
                {
                    strAhref = "Яамны удирдлага газрын дарга нарыг үнэлэх холбоос: <a href=\"https://lm.mof.gov.mn/#pg/srv.aspx?t=bosstohead\">lm.mof.gov.mn »</a>";
                    strSubject = "Яамны удирдлага газрын дарга нарыг үнэлэх үнэлгээ оруулна уу";
                    strDUsers = myObj.OracleExecuteScalar(@"SELECT RTRIM(xmlagg(xmlelement(e, a.DOMAIN_USER || ',') ).extract('//text()'), ',') as DUSERS
    FROM hrdbuser.ST_STAFFS a 
    INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1
    INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1
    WHERE b.POS_ID IN (10106, 10205)").ToString();
                    for (int i = 0; i < strDUsers.Split(',').Length; i++)
                    {
                        SearchResultCollection results = null;
                        using (DirectoryEntry DEConnection = new DirectoryEntry("LDAP://mof.local"))
                        {
                            DirectorySearcher mySearcher = new DirectorySearcher(DEConnection);
                            mySearcher.Filter = "((SAMAccountName=" + strDUsers.Split(',')[i] + "))";
                            results = mySearcher.FindAll();
                            foreach (SearchResult searchResult in results)
                            {
                                Console.WriteLine("Search properties for {0}", searchResult.Path);
                                foreach (string propertyKey in searchResult.Properties.PropertyNames)
                                {
                                    ResultPropertyValueCollection valueCollection = searchResult.Properties[propertyKey];
                                    foreach (Object propertyValue in valueCollection)
                                    {
                                        if (propertyKey == "mail")
                                        {
                                            if (strReturnVal == "") strReturnVal += propertyValue.ToString();
                                            else strReturnVal += "," + propertyValue.ToString();
                                            mail.To.Add(propertyValue.ToString());
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else if (tp == "2")
                {
                    strAhref = "Газрын дарга нар хэлтсийн дарга нарыг үнэлэх холбоос: <a href=\"https://lm.mof.gov.mn/#pg/srv.aspx?t=headtosubhead\">lm.mof.gov.mn »</a>";
                    strSubject = "Газрын дарга нар хэлтсийн дарга нарыг үнэлэх үнэлгээ оруулна уу";
                    strDUsers = myObj.OracleExecuteScalar(@"SELECT RTRIM(xmlagg(xmlelement(e, a.DOMAIN_USER || ',') ).extract('//text()'), ',') as DUSERS
    FROM hrdbuser.ST_STAFFS a 
    INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1
    INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1
    WHERE b.POS_ID IN (2010201)").ToString();
                    for (int i = 0; i < strDUsers.Split(',').Length; i++)
                    {
                        SearchResultCollection results = null;
                        using (DirectoryEntry DEConnection = new DirectoryEntry("LDAP://mof.local"))
                        {
                            DirectorySearcher mySearcher = new DirectorySearcher(DEConnection);
                            mySearcher.Filter = "((SAMAccountName=" + strDUsers.Split(',')[i] + "))";
                            results = mySearcher.FindAll();
                            foreach (SearchResult searchResult in results)
                            {
                                Console.WriteLine("Search properties for {0}", searchResult.Path);
                                foreach (string propertyKey in searchResult.Properties.PropertyNames)
                                {
                                    ResultPropertyValueCollection valueCollection = searchResult.Properties[propertyKey];
                                    foreach (Object propertyValue in valueCollection)
                                    {
                                        if (propertyKey == "mail")
                                        {
                                            if (strReturnVal == "") strReturnVal += propertyValue.ToString();
                                            else strReturnVal += "," + propertyValue.ToString();
                                            mail.To.Add(propertyValue.ToString());
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else if (tp == "3")
                {
                    strAhref = "Хамт олны үнэлгээ холбоос: <a href=\"https://lm.mof.gov.mn/#pg/srv.aspx?t=stafftostaff\">lm.mof.gov.mn »</a>";
                    strSubject = "Хамт олны үнэлгээ оруулна уу";
                    mail.To.Add("all@mof.gov.mn");
                    //mail.To.Add("gundsamba_g@mof.gov.mn");
                }



                mail.From = new MailAddress("lmonitoring@mof.gov.mn");
                mail.Subject = strSubject;
                mail.Body = "<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta name=\"viewport\" content=\"width=device-width\"><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><title>" + strSubject + "</title><style></style></head><body style=\"font-family: \"Open Sans\",Arial,Helvetica,Sans-Serif!important;\"><table style=\"width: 100%;background-color: #ebebeb;\"><tbody><tr><td style=\"display: block !important;max-width: 600px !important;margin: 0 auto !important;clear: both !important;\"><div style=\"padding: 15px!important;max-width: 600px!important;margin: 0 auto;!importantdisplay: block!important;\"><table><tbody><tr><td align=\"left\" style=\"width: 35px;\"><img src=\"https://lm.mof.gov.mn/img/LM-icon.png\" height=\"30\" width=\"30\"></td><td align=\"left\"><h6 style=\"margin: 0 !important;font-weight: 900;font-size: 14px;text-transform: uppercase;color: #444;\">ЦАХИМ ХЯНАЛТ-ШИНЖИЛГЭЭ, ҮНЭЛГЭЭ</h6></td></tr></tbody></table></div></td></tr></tbody></table><table style=\"width: 100%;\"><tbody><tr><td style=\"display: block !important;max-width: 600px !important;margin: 0 auto !important;clear: both !important;background-color: #FFFFFF;\"><div style=\"padding: 15px;max-width: 600px;margin: 0 auto;display: block;\"><table><tbody><tr><td><h4>" + strSubject + "</h4><p>" + body + "</p><p style=\"padding: 15px;background-color: #ecf8ff;margin-bottom: 15px;\">" + strAhref + "</p><table width=\"100%\" style=\"background-color: #ebebeb;\"><tbody><tr><td><table align=\"left\" style=\"width: 300px;float: left;\"><tbody><tr><td><h5>Холбоо барих:</h5><p>Утас: <strong>51 264335</strong><br>Имэйл: <strong><a href=\"emailto:lmonitoring@mof.gov.mn\">lmonitoring@mof.gov.mn</a></strong></p></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></div></td></tr></tbody></table></body></html>";
                mail.IsBodyHtml = true;
                SmtpClient SmtpServer = new SmtpClient();
                SmtpServer.Host = "mail.mof.gov.mn";
                SmtpServer.Port = 25;
                SmtpServer.UseDefaultCredentials = false;
                SmtpServer.Credentials = new System.Net.NetworkCredential("lmonitoring@mof.gov.mn", "m0f@dmin2o14*");
                SmtpServer.EnableSsl = false;
                SmtpServer.Send(mail);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string SrvAnswerList(string type)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strQry = "SELECT RTRIM(xmlagg (xmlelement (e, NAME || ',') ORDER BY PER DESC).extract('//text()'), ', ') as NAMELIST, RTRIM(xmlagg (xmlelement (e, PER || ',') ORDER BY PER DESC).extract('//text()'), ', ') as PERLIST FROM TBL_SRV_ANSWER WHERE SRV_TYPE_ID="+ type + @" AND IS_ACTIVE=1";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }


        //*****login.html*****//
        public void CheckLogin(string username, string pass)
        {
            OracleConnection con = new OracleConnection(ConfigurationManager.ConnectionStrings["CMCDBBTConn"].ConnectionString);
            OracleCommand cmd;
            OracleDataAdapter adapter = new OracleDataAdapter();
            DataSet ds = null;
            try
            {
                DirectoryEntry dirEntry = null;
                int countEntry = 0;
                string stid = "";
                dirEntry = new DirectoryEntry("LDAP://mof.local", username, pass, AuthenticationTypes.Secure);
                countEntry = dirEntry.Properties.Count;

                if (con.State == ConnectionState.Closed) con.Open();
                cmd = new OracleCommand();
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = "SELECT a.ID FROM hrdbuser.ST_STAFFS a INNER JOIN hrdbuser.ST_STBR b ON a.ID=b.STAFFS_ID AND b.ISACTIVE=1 INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID=c.ID WHERE c.ACTIVE=1 AND a.DOMAIN_USER='" + username + "'";
                cmd.Connection = con;
                adapter.SelectCommand = cmd;
                ds = new DataSet();
                adapter.Fill(ds);
                if (ds.Tables[0].Rows.Count == 0) throw new cs.LMException("Нэвтрэх нэр бүртгэлгүй эсвэл идэвхгүй байна. ТЗУГ-д хандана уу!");
                else stid = ds.Tables[0].Rows[0][0].ToString();

                cmd = new OracleCommand();
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = "SELECT COUNT(1) FROM TBL_USER_ROLE WHERE USER_ID=" + stid;
                cmd.Connection = con;
                if (cmd.ExecuteScalar().ToString() == "0") throw new cs.LMException("Уг системд эрх аваагүй хэрэглэгч байна");

                HttpContext.Current.Session["LM_IsUser"] = "YEAS";
                HttpContext.Current.Session["LM_UserDomain"] = username;
                HttpContext.Current.Session["LM_UserID"] = stid;
            }
            catch (DirectoryServicesCOMException ex)
            {
                if (ex.ErrorCode.Equals(-2147023570))
                {
                    throw new cs.LMException("Нэвтрэх нэр эсвэл нууц үг буруу байна");
                }
                else
                {
                    throw new cs.LMException("Домайнтай холбогдож чадсангүй");
                }
            }
            catch (cs.LMException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw new cs.LMException("Нэвтрэлт амжилтгүй боллоо.", ex);
            }
            finally
            {
                con.Close();
                con.Dispose();
            }
        }

        //*****policytype.aspx*****//
        public string PolicytypeDatatable()
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT ID, NAME, BEGINYR, ENDYR, CASE WHEN BEGINYR=ENDYR THEN CAST(BEGINYR as varchar2(4)) ELSE CAST(BEGINYR as varchar2(4))||CAST('-' as varchar2(1))||CAST(ENDYR as varchar2(4)) END AS YRNAME, CASE WHEN ISACTIVE = 0 THEN ENDYR ELSE(SELECT YR FROM TBL_SYSSET WHERE ACTIVE = 1) END as YR, CASE WHEN ISACTIVE = 0 THEN 'bg-color-blueLight' ELSE null END as ISDISABLED1, CASE WHEN ISACTIVE = 0 THEN 'disabled' ELSE null END as ISDISABLED2, CASE WHEN ISACTIVE=1 THEN 'bg-color-greenLight' ELSE 'bg-color-blueLight' END as ISDISABLED3 FROM TBL_POLICYTYPE ORDER BY CASE WHEN ISACTIVE = 0 THEN ENDYR ELSE(SELECT YR FROM TBL_SYSSET WHERE ACTIVE = 1) END DESC, ISACTIVE DESC");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }

        //*****policy.aspx*****//
        public string PolicyTab2BodlogoListDDL(string policytypeid)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT ID, NO||'. '||NAME||' | '||BEGINYR||'-'||ENDYR as POLICYBODLOGO FROM TBL_POLICYBODLOGO WHERE POLICYTYPE_ID=" + policytypeid + " ORDER BY NO");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string PolicyTab3ZoriltListDDL(string policybodlogoid)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT ID, NO||'. '||NAME as POLICYZORILT FROM TBL_POLICYZORILT WHERE POLICYBODLOGO_ID=" + policybodlogoid + " ORDER BY NO");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string PolicyTab1Datatable(string policytypeid)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT ID, NO, NAME, BEGINYR, ENDYR FROM TBL_POLICYBODLOGO WHERE POLICYTYPE_ID=" + policytypeid + " ORDER BY NO");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string PolicyTab2Datatable(string policytypeid, string bodlogoid)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (bodlogoid != "") bodlogoid = " AND a.POLICYBODLOGO_ID=" + bodlogoid;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT ROWNUM as ROWNO, a.* FROM ( SELECT a.ID, a.POLICYBODLOGO_ID, b.NO||'. '||b.NAME||' | '||b.BEGINYR||'-'||b.ENDYR as POLICYBODLOGO, a.NO, a.NAME FROM TBL_POLICYZORILT a INNER JOIN TBL_POLICYBODLOGO b ON a.POLICYBODLOGO_ID=b.ID WHERE b.POLICYTYPE_ID=" + policytypeid + bodlogoid + " ORDER BY b.NO, a.NO ) a");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string PolicyTab3Datatable(string policytypeid, string bodlogoid, string zoriltid, string isteam, string gazar)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (bodlogoid != "") bodlogoid = " AND b.POLICYBODLOGO_ID=" + bodlogoid;
            if (zoriltid != "") zoriltid = " AND a.POLICYZORILT_ID=" + zoriltid;
            if (isteam != "") isteam = " AND a.ISTEAM=" + isteam;
            if (gazar != "") gazar = " AND d.BR_ID=" + gazar;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = "SELECT ROWNUM as ROWNO, a.* FROM ( SELECT a.POLICYPLAN_ID, b.NO as POLICYPLAN_NO, b.NAME as POLICYPLAN_NAME, d.NO||'.'||c.NO||'.'||b.NO||'. '||b.NAME as POLICYPLAN, c.POLICYBODLOGO_ID, b.POLICYZORILT_ID, b.RESULT, b.CRITERIA, a.BRLISTID, a.BRLISTNAME, b.ISTEAM, b.BEGINYR, b.ENDYR, b.WHONAME, CASE WHEN b.ISCLOSED=0 THEN 'checked=\"checked\"' ELSE null END as ISCLOSED FROM ( SELECT a.POLICYPLAN_ID, RTRIM(xmlagg (xmlelement (e, f.BR_ID || ',') ORDER BY g.SORT).extract('//text()'), ',') as BRLISTID, RTRIM(xmlagg (xmlelement (e, g.DOMAIN_ORG || ',') ORDER BY g.SORT).extract('//text()'), ',') as BRLISTNAME FROM( SELECT a.ID as POLICYPLAN_ID FROM TBL_POLICYPLAN a INNER JOIN TBL_POLICYZORILT b ON a.POLICYZORILT_ID = b.ID INNER JOIN TBL_POLICYBODLOGO c ON b.POLICYBODLOGO_ID = c.ID LEFT JOIN TBL_POLICYPLAN_BR d ON a.ID = d.POLICYPLAN_ID LEFT JOIN TBL_BRANCH f ON d.BR_ID = f.BR_ID AND d.YR = f.YR WHERE c.POLICYTYPE_ID = " + policytypeid + bodlogoid + zoriltid + isteam + gazar + " GROUP BY a.ID ) a INNER JOIN TBL_POLICYPLAN b ON a.POLICYPLAN_ID = b.ID INNER JOIN TBL_POLICYZORILT c ON b.POLICYZORILT_ID = c.ID INNER JOIN TBL_POLICYBODLOGO d ON c.POLICYBODLOGO_ID = d.ID LEFT JOIN TBL_POLICYPLAN_BR f ON a.POLICYPLAN_ID = f.POLICYPLAN_ID LEFT JOIN TBL_BRANCH g ON f.BR_ID = g.BR_ID AND f.YR = g.YR GROUP BY a.POLICYPLAN_ID ) a INNER JOIN TBL_POLICYPLAN b ON a.POLICYPLAN_ID=b.ID INNER JOIN TBL_POLICYZORILT c ON b.POLICYZORILT_ID=c.ID INNER JOIN TBL_POLICYBODLOGO d ON c.POLICYBODLOGO_ID=d.ID ORDER BY d.NO, c.NO, b.NO ) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void POLICYPLAN_INSERT(string P_POLICYZORILT_ID, string P_NO, string P_NAME, string P_RESULT, string P_CRITERIA, string P_ISTEAM, string P_BEGINYR, string P_ENDYR, string P_WHONAME, string P_BRLIST, string P_STAFFID)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[11], ParamValue = new string[11];
                ParamName[0] = "P_POLICYZORILT_ID";
                ParamName[1] = "P_NO";
                ParamName[2] = "P_NAME";
                ParamName[3] = "P_RESULT";
                ParamName[4] = "P_CRITERIA";
                ParamName[5] = "P_ISTEAM";
                ParamName[6] = "P_BEGINYR";
                ParamName[7] = "P_ENDYR";
                ParamName[8] = "P_WHONAME";
                ParamName[9] = "P_BRLIST";
                ParamName[10] = "P_STAFFID";
                ParamValue[0] = P_POLICYZORILT_ID;
                ParamValue[1] = P_NO;
                ParamValue[2] = P_NAME;
                ParamValue[3] = P_RESULT;
                ParamValue[4] = P_CRITERIA;
                ParamValue[5] = P_ISTEAM;
                ParamValue[6] = P_BEGINYR;
                ParamValue[7] = P_ENDYR;
                ParamValue[8] = P_WHONAME;
                ParamValue[9] = P_BRLIST;
                ParamValue[10] = P_STAFFID;
                myObj.SP_OracleExecuteNonQuery("POLICYPLAN_INSERT", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void POLICYPLAN_UPDATE(string P_ID, string P_POLICYZORILT_ID, string P_NO, string P_NAME, string P_RESULT, string P_CRITERIA, string P_ISTEAM, string P_BEGINYR, string P_ENDYR, string P_WHONAME, string P_BRLIST, string P_STAFFID)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[12], ParamValue = new string[12];
                ParamName[0] = "P_ID";
                ParamName[1] = "P_POLICYZORILT_ID";
                ParamName[2] = "P_NO";
                ParamName[3] = "P_NAME";
                ParamName[4] = "P_RESULT";
                ParamName[5] = "P_CRITERIA";
                ParamName[6] = "P_ISTEAM";
                ParamName[7] = "P_BEGINYR";
                ParamName[8] = "P_ENDYR";
                ParamName[9] = "P_WHONAME";
                ParamName[10] = "P_BRLIST";
                ParamName[11] = "P_STAFFID";
                ParamValue[0] = P_ID;
                ParamValue[1] = P_POLICYZORILT_ID;
                ParamValue[2] = P_NO;
                ParamValue[3] = P_NAME;
                ParamValue[4] = P_RESULT;
                ParamValue[5] = P_CRITERIA;
                ParamValue[6] = P_ISTEAM;
                ParamValue[7] = P_BEGINYR;
                ParamValue[8] = P_ENDYR;
                ParamValue[9] = P_WHONAME;
                ParamValue[10] = P_BRLIST;
                ParamValue[11] = P_STAFFID;
                myObj.SP_OracleExecuteNonQuery("POLICYPLAN_UPDATE", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void POLICYPLAN_DELETE(string P_ID)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[1], ParamValue = new string[1];
                ParamName[0] = "P_ID";
                ParamValue[0] = P_ID;
                myObj.SP_OracleExecuteNonQuery("POLICYPLAN_DELETE", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string PolicyTab4Datatable(string policytypeid, string yr, string yrhf, string bodlogoid, string zoriltid, string isteam, string gazar)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (bodlogoid != "") bodlogoid = " AND b.POLICYBODLOGO_ID=" + bodlogoid;
            if (zoriltid != "") zoriltid = " AND a.POLICYZORILT_ID=" + zoriltid;
            if (isteam != "") isteam = " AND a.ISTEAM=" + isteam;
            if (gazar != "") gazar = " AND d.BR_ID=" + gazar;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = "SELECT ROWNUM as ROWNO, a.* FROM ( SELECT a.POLICYPLAN_ID, d.NO || '.' || c.NO || '.' || b.NO || '. ' || b.NAME as POLICYPLAN, c.POLICYBODLOGO_ID, b.POLICYZORILT_ID, b.RESULT, b.CRITERIA, a.BRLISTID, a.BRLISTNAME, b.ISTEAM, b.BEGINYR, b.ENDYR, b.WHONAME, NVL2(f.IMPL, 'glyphicon-check txt-color-green', 'glyphicon-edit txt-color-red') as ISIMPL, f.IMPL, f.EVAL, f.FILENAME, b.ISCLOSED FROM( SELECT a.POLICYPLAN_ID, RTRIM(xmlagg(xmlelement(e, f.BR_ID || ',') ORDER BY g.SORT).extract('//text()'), ',') as BRLISTID, RTRIM(xmlagg(xmlelement(e, g.DOMAIN_ORG || ',') ORDER BY g.SORT).extract('//text()'), ',') as BRLISTNAME FROM( SELECT a.ID as POLICYPLAN_ID FROM TBL_POLICYPLAN a INNER JOIN TBL_POLICYZORILT b ON a.POLICYZORILT_ID = b.ID INNER JOIN TBL_POLICYBODLOGO c ON b.POLICYBODLOGO_ID = c.ID LEFT JOIN TBL_POLICYPLAN_BR d ON a.ID = d.POLICYPLAN_ID LEFT JOIN TBL_BRANCH f ON d.BR_ID = f.BR_ID AND d.YR = f.YR WHERE a.ISCLOSED = 0 AND c.BEGINYR<=" + yr + " AND c.ENDYR>=" + yr + " AND c.POLICYTYPE_ID = " + policytypeid + bodlogoid + zoriltid + isteam + gazar + " GROUP BY a.ID ) a INNER JOIN TBL_POLICYPLAN b ON a.POLICYPLAN_ID = b.ID INNER JOIN TBL_POLICYZORILT c ON b.POLICYZORILT_ID = c.ID INNER JOIN TBL_POLICYBODLOGO d ON c.POLICYBODLOGO_ID = d.ID LEFT JOIN TBL_POLICYPLAN_BR f ON a.POLICYPLAN_ID = f.POLICYPLAN_ID LEFT JOIN TBL_BRANCH g ON f.BR_ID = g.BR_ID AND f.YR = g.YR GROUP BY a.POLICYPLAN_ID ) a INNER JOIN TBL_POLICYPLAN b ON a.POLICYPLAN_ID = b.ID INNER JOIN TBL_POLICYZORILT c ON b.POLICYZORILT_ID = c.ID INNER JOIN TBL_POLICYBODLOGO d ON c.POLICYBODLOGO_ID = d.ID LEFT JOIN TBL_POLICYPLAN_IMPL f ON a.POLICYPLAN_ID = f.POLICYPLAN_ID AND f.YR = " + yr + " AND f.YRHF = " + yrhf + " ORDER BY d.NO, c.NO, b.NO ) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string PolicyTab5Datatable(string policytypeid, string yr, string yrhf, string bodlogoid, string zoriltid, string isteam, string gazar)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strPrevYear = "", strPrevYrhf = "";
            if (bodlogoid != "") bodlogoid = " AND b.POLICYBODLOGO_ID=" + bodlogoid;
            if (zoriltid != "") zoriltid = " AND a.POLICYZORILT_ID=" + zoriltid;
            if (isteam != "") isteam = " AND a.ISTEAM=" + isteam;
            if (gazar != "") gazar = " AND d.BR_ID=" + gazar;
            if (yrhf == "1")
            {
                strPrevYear = (Convert.ToInt32(yr) - 1).ToString();
                strPrevYrhf = "2";
            }
            else if (yrhf == "2")
            {
                strPrevYrhf = "1";
                strPrevYear = yr;
            }
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = "SELECT ROWNUM as ROWNO, a.* FROM ( SELECT a.POLICYPLAN_ID, d.NO || '.' || c.NO || '.' || b.NO || '. ' || b.NAME as POLICYPLAN, c.POLICYBODLOGO_ID, b.POLICYZORILT_ID, b.RESULT, b.CRITERIA, a.BRLISTID, a.BRLISTNAME, b.ISTEAM, b.BEGINYR, b.ENDYR, b.WHONAME, NVL2(f.IMPL, 'glyphicon-check txt-color-green', 'glyphicon-edit txt-color-red') as ISIMPL, f.IMPL, f.EVAL, f.FILENAME, b.ISCLOSED, NVL(TO_CHAR(g.EVAL),'-') as PREVEVAL FROM( SELECT a.POLICYPLAN_ID, RTRIM(xmlagg(xmlelement(e, f.BR_ID || ',') ORDER BY g.SORT).extract('//text()'), ',') as BRLISTID, RTRIM(xmlagg(xmlelement(e, g.DOMAIN_ORG || ',') ORDER BY g.SORT).extract('//text()'), ',') as BRLISTNAME FROM( SELECT a.ID as POLICYPLAN_ID FROM TBL_POLICYPLAN a INNER JOIN TBL_POLICYZORILT b ON a.POLICYZORILT_ID = b.ID INNER JOIN TBL_POLICYBODLOGO c ON b.POLICYBODLOGO_ID = c.ID LEFT JOIN TBL_POLICYPLAN_BR d ON a.ID = d.POLICYPLAN_ID LEFT JOIN TBL_BRANCH f ON d.BR_ID = f.BR_ID AND d.YR = f.YR LEFT JOIN TBL_POLICYPLAN_IMPL g ON a.ID = g.POLICYPLAN_ID AND g.YR = " + yr + " AND g.YRHF = " + yrhf + " WHERE (a.ISCLOSED = 0 OR g.EVAL IS NOT NULL) AND c.BEGINYR<=" + yr + " AND c.ENDYR>=" + yr + " AND c.POLICYTYPE_ID = " + policytypeid + bodlogoid + zoriltid + isteam + gazar + " GROUP BY a.ID ) a INNER JOIN TBL_POLICYPLAN b ON a.POLICYPLAN_ID = b.ID INNER JOIN TBL_POLICYZORILT c ON b.POLICYZORILT_ID = c.ID INNER JOIN TBL_POLICYBODLOGO d ON c.POLICYBODLOGO_ID = d.ID LEFT JOIN TBL_POLICYPLAN_BR f ON a.POLICYPLAN_ID = f.POLICYPLAN_ID LEFT JOIN TBL_BRANCH g ON f.BR_ID = g.BR_ID AND f.YR = g.YR GROUP BY a.POLICYPLAN_ID ) a INNER JOIN TBL_POLICYPLAN b ON a.POLICYPLAN_ID = b.ID INNER JOIN TBL_POLICYZORILT c ON b.POLICYZORILT_ID = c.ID INNER JOIN TBL_POLICYBODLOGO d ON c.POLICYBODLOGO_ID = d.ID LEFT JOIN TBL_POLICYPLAN_IMPL f ON a.POLICYPLAN_ID = f.POLICYPLAN_ID AND f.YR = " + yr + " AND f.YRHF = " + yrhf + " LEFT JOIN TBL_POLICYPLAN_IMPL g ON a.POLICYPLAN_ID = g.POLICYPLAN_ID AND g.YR = " + strPrevYear + " AND g.YRHF = " + strPrevYrhf + " ORDER BY d.NO, c.NO, b.NO ) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string PolicyTab6t1Datatable(string policytypeid, string yr, string yrhf, string isteam, string isimpl)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (isteam != "") isteam = " AND a.ISTEAM=" + isteam;
            if (isimpl != "")
            {
                if (isimpl == "1") isimpl = " WHERE f.IMPL is not null";
                else if (isimpl == "0") isimpl = " WHERE f.IMPL is null";
            }
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = "SELECT ROWNUM as ROWNO, a.* FROM ( SELECT a.POLICYPLAN_ID, d.NO||'. '||d.NAME as POLICYBODLOGO, c.NO||'. '||c.NAME as POLICYZORILT, b.NO||'. '||b.NAME as POLICYPLAN, c.POLICYBODLOGO_ID, b.POLICYZORILT_ID, b.RESULT, b.CRITERIA, a.BRLISTID, a.BRLISTNAME, b.ISTEAM, b.BEGINYR, b.ENDYR, b.WHONAME, NVL2(f.IMPL,'green','red') as ISIMPL, f.IMPL, f.EVAL, f.FILENAME FROM ( SELECT a.ID as POLICYPLAN_ID, RTRIM(xmlagg (xmlelement (e, d.BR_ID || ',') ORDER BY f.SORT).extract('//text()'), ',') as BRLISTID, RTRIM(xmlagg (xmlelement (e, f.DOMAIN_ORG || ',') ORDER BY f.SORT).extract('//text()'), ',') as BRLISTNAME FROM TBL_POLICYPLAN a  INNER JOIN TBL_POLICYZORILT b ON a.POLICYZORILT_ID=b.ID INNER JOIN TBL_POLICYBODLOGO c ON b.POLICYBODLOGO_ID=c.ID LEFT JOIN TBL_POLICYPLAN_BR d ON a.ID=d.POLICYPLAN_ID LEFT JOIN TBL_BRANCH f ON d.BR_ID=f.BR_ID AND d.YR=f.YR LEFT JOIN TBL_POLICYPLAN_IMPL g ON a.ID = g.POLICYPLAN_ID AND g.YR = " + yr + " AND g.YRHF = " + yrhf + " WHERE (a.ISCLOSED = 0 OR g.EVAL IS NOT NULL) AND c.POLICYTYPE_ID=" + policytypeid + isteam + " GROUP BY a.ID ) a INNER JOIN TBL_POLICYPLAN b ON a.POLICYPLAN_ID=b.ID INNER JOIN TBL_POLICYZORILT c ON b.POLICYZORILT_ID=c.ID INNER JOIN TBL_POLICYBODLOGO d ON c.POLICYBODLOGO_ID=d.ID LEFT JOIN TBL_POLICYPLAN_IMPL f ON a.POLICYPLAN_ID=f.POLICYPLAN_ID AND f.YR=" + yr + " AND f.YRHF=" + yrhf + isimpl + " WHERE d.BEGINYR<=" + yr + " AND d.ENDYR>=" + yr + " ORDER BY d.NO, c.NO, b.NO ) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string PolicyTab6t2Datatable(string policytypeid, string yr, string yrhf, string isteam, string isimpl)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (isteam != "") isteam = " AND a.ISTEAM=" + isteam;
            if (isimpl != "")
            {
                if (isimpl == "1") isimpl = " WHERE f.IMPL is not null";
                else if (isimpl == "0") isimpl = " WHERE f.IMPL is null";
            }
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = "SELECT ROWNUM as ROWNO, a.* FROM ( SELECT a.POLICYPLAN_ID, d.NO||'. '||d.NAME as POLICYBODLOGO, c.NO||'. '||c.NAME as POLICYZORILT, b.NO||'. '||b.NAME as POLICYPLAN, c.POLICYBODLOGO_ID, b.POLICYZORILT_ID, b.RESULT, b.CRITERIA, a.BRLISTID, a.BRLISTNAME, b.ISTEAM, b.BEGINYR, b.ENDYR, b.WHONAME, NVL2(f.IMPL,'green','red') as ISIMPL, f.IMPL, f.EVAL, f.FILENAME FROM ( SELECT a.ID as POLICYPLAN_ID, RTRIM(xmlagg (xmlelement (e, d.BR_ID || ',') ORDER BY f.SORT).extract('//text()'), ',') as BRLISTID, RTRIM(xmlagg (xmlelement (e, f.DOMAIN_ORG || ',') ORDER BY f.SORT).extract('//text()'), ',') as BRLISTNAME FROM TBL_POLICYPLAN a  INNER JOIN TBL_POLICYZORILT b ON a.POLICYZORILT_ID=b.ID INNER JOIN TBL_POLICYBODLOGO c ON b.POLICYBODLOGO_ID=c.ID LEFT JOIN TBL_POLICYPLAN_BR d ON a.ID=d.POLICYPLAN_ID LEFT JOIN TBL_BRANCH f ON d.BR_ID=f.BR_ID AND d.YR=f.YR LEFT JOIN TBL_POLICYPLAN_IMPL g ON a.ID = g.POLICYPLAN_ID AND g.YR = " + yr + " AND g.YRHF = " + yrhf + " WHERE (a.ISCLOSED = 0 OR g.EVAL IS NOT NULL) AND c.POLICYTYPE_ID=" + policytypeid + isteam + " GROUP BY a.ID ) a INNER JOIN TBL_POLICYPLAN b ON a.POLICYPLAN_ID=b.ID INNER JOIN TBL_POLICYZORILT c ON b.POLICYZORILT_ID=c.ID INNER JOIN TBL_POLICYBODLOGO d ON c.POLICYBODLOGO_ID=d.ID INNER JOIN TBL_POLICYPLAN_IMPL f ON a.POLICYPLAN_ID=f.POLICYPLAN_ID AND f.YR=" + yr + " AND f.YRHF=" + yrhf + " AND f.EVAL<=70" + isimpl + " WHERE d.BEGINYR<=" + yr + " AND d.ENDYR>=" + yr + " ORDER BY d.NO, c.NO, b.NO ) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string PolicyTab6t3Datatable(string policytypeid, string isteam, string isimpl)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (isteam != "") isteam = " AND a.ISTEAM=" + isteam;
            if (isimpl != "")
            {
                if (isimpl == "1") isimpl = " WHERE f.IMPL is not null";
                else if (isimpl == "0") isimpl = " WHERE f.IMPL is null";
            }
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = "SELECT ROWNUM as ROWNO, a.* FROM( SELECT a.POLICYPLAN_ID, d.NO || '. ' || d.NAME as POLICYBODLOGO, c.NO || '. ' || c.NAME as POLICYZORILT, b.NO || '. ' || b.NAME as POLICYPLAN, c.POLICYBODLOGO_ID, b.POLICYZORILT_ID, b.RESULT, b.CRITERIA, a.BRLISTNAME, b.ISTEAM, b.BEGINYR, b.ENDYR, b.WHONAME, CASE WHEN f.POLICYPLAN_ID IS NOT NULL THEN f.BEGINYR || '/' || CASE WHEN f.BEGINYRHF = 1 THEN 'Эхний хагас жил' ELSE 'Сүүлийн хагас жил' END || ' - ' || f.ENDYR || '/' || CASE WHEN f.ENDYRHF = 1 THEN 'Эхний хагас жил' ELSE 'Сүүлийн хагас жил' END ELSE null END as IMPLDATE, f.IMPL, g.EVAL FROM( SELECT a.ID as POLICYPLAN_ID, RTRIM(xmlagg(xmlelement(e, f.DOMAIN_ORG || ',') ORDER BY f.SORT).extract('//text()'), ',') as BRLISTNAME FROM TBL_POLICYPLAN a INNER JOIN TBL_POLICYZORILT b ON a.POLICYZORILT_ID = b.ID INNER JOIN TBL_POLICYBODLOGO c ON b.POLICYBODLOGO_ID = c.ID LEFT JOIN TBL_POLICYPLAN_BR d ON a.ID = d.POLICYPLAN_ID LEFT JOIN TBL_BRANCH f ON d.BR_ID = f.BR_ID AND d.YR = f.YR WHERE a.ISCLOSED = 0 AND c.POLICYTYPE_ID = " + policytypeid + isteam + " GROUP BY a.ID ) a INNER JOIN TBL_POLICYPLAN b ON a.POLICYPLAN_ID = b.ID INNER JOIN TBL_POLICYZORILT c ON b.POLICYZORILT_ID = c.ID INNER JOIN TBL_POLICYBODLOGO d ON c.POLICYBODLOGO_ID = d.ID LEFT JOIN TBL_POLICYPLAN_IMPLNEGDSEN f ON a.POLICYPLAN_ID = f.POLICYPLAN_ID LEFT JOIN ( SELECT a.POLICYPLAN_ID, a.EVAL FROM TBL_POLICYPLAN_IMPL a INNER JOIN( SELECT a.POLICYPLAN_ID, MAX(a.YR) as MAXYR, MAX(a.YRHF) as MAXYRHF FROM TBL_POLICYPLAN_IMPL a INNER JOIN TBL_POLICYPLAN b ON a.POLICYPLAN_ID = b.ID INNER JOIN TBL_POLICYZORILT c ON b.POLICYZORILT_ID = c.ID INNER JOIN TBL_POLICYBODLOGO d ON c.POLICYBODLOGO_ID = d.ID WHERE d.POLICYTYPE_ID = " + policytypeid + " AND a.EVAL IS NOT NULL GROUP BY a.POLICYPLAN_ID ) b ON a.POLICYPLAN_ID = b.POLICYPLAN_ID AND a.YR = b.MAXYR AND a.YRHF = b.MAXYRHF ) g ON a.POLICYPLAN_ID = g.POLICYPLAN_ID" + isimpl + " ORDER BY d.NO, c.NO, b.NO ) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string PolicyTab6t4Datatable(string policytypeid, string isteam, string isimpl)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (isteam != "") isteam = " AND a.ISTEAM=" + isteam;
            if (isimpl != "")
            {
                if (isimpl == "1") isimpl = " WHERE f.IMPL is not null";
                else if (isimpl == "0") isimpl = " WHERE f.IMPL is null";
            }
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = "SELECT ROWNUM as ROWNO, a.* FROM( SELECT a.POLICYPLAN_ID, d.NO || '. ' || d.NAME as POLICYBODLOGO, c.NO || '. ' || c.NAME as POLICYZORILT, b.NO || '. ' || b.NAME as POLICYPLAN, c.POLICYBODLOGO_ID, b.POLICYZORILT_ID, b.RESULT, b.CRITERIA, a.BRLISTNAME, b.ISTEAM, b.BEGINYR, b.ENDYR, b.WHONAME, CASE WHEN f.POLICYPLAN_ID IS NOT NULL THEN f.BEGINYR || '/' || CASE WHEN f.BEGINYRHF = 1 THEN 'Эхний хагас жил' ELSE 'Сүүлийн хагас жил' END || ' - ' || f.ENDYR || '/' || CASE WHEN f.ENDYRHF = 1 THEN 'Эхний хагас жил' ELSE 'Сүүлийн хагас жил' END ELSE null END as IMPLDATE, f.IMPL, g.EVAL FROM( SELECT a.ID as POLICYPLAN_ID, RTRIM(xmlagg(xmlelement(e, f.DOMAIN_ORG || ',') ORDER BY f.SORT).extract('//text()'), ',') as BRLISTNAME FROM TBL_POLICYPLAN a INNER JOIN TBL_POLICYZORILT b ON a.POLICYZORILT_ID = b.ID INNER JOIN TBL_POLICYBODLOGO c ON b.POLICYBODLOGO_ID = c.ID LEFT JOIN TBL_POLICYPLAN_BR d ON a.ID = d.POLICYPLAN_ID LEFT JOIN TBL_BRANCH f ON d.BR_ID = f.BR_ID AND d.YR = f.YR WHERE a.ISCLOSED = 0 AND c.POLICYTYPE_ID = " + policytypeid + isteam + " GROUP BY a.ID ) a INNER JOIN TBL_POLICYPLAN b ON a.POLICYPLAN_ID = b.ID INNER JOIN TBL_POLICYZORILT c ON b.POLICYZORILT_ID = c.ID INNER JOIN TBL_POLICYBODLOGO d ON c.POLICYBODLOGO_ID = d.ID LEFT JOIN TBL_POLICYPLAN_IMPLNEGDSEN f ON a.POLICYPLAN_ID = f.POLICYPLAN_ID INNER JOIN( SELECT a.POLICYPLAN_ID, a.EVAL FROM TBL_POLICYPLAN_IMPL a INNER JOIN( SELECT a.POLICYPLAN_ID, MAX(a.YR) as MAXYR, MAX(a.YRHF) as MAXYRHF FROM TBL_POLICYPLAN_IMPL a INNER JOIN TBL_POLICYPLAN b ON a.POLICYPLAN_ID = b.ID INNER JOIN TBL_POLICYZORILT c ON b.POLICYZORILT_ID = c.ID INNER JOIN TBL_POLICYBODLOGO d ON c.POLICYBODLOGO_ID = d.ID WHERE d.POLICYTYPE_ID = " + policytypeid + " AND a.EVAL IS NOT NULL GROUP BY a.POLICYPLAN_ID ) b ON a.POLICYPLAN_ID = b.POLICYPLAN_ID AND a.YR = b.MAXYR AND a.YRHF = b.MAXYRHF ) g ON a.POLICYPLAN_ID = g.POLICYPLAN_ID AND g.EVAL<=70" + isimpl + " ORDER BY d.NO, c.NO, b.NO ) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string PolicyTab7t1Datatable(string policytypeid, string yr, string yrhf, string isteam)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (isteam != "") isteam = " AND a.ISTEAM=" + isteam;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = "SELECT b.BR_NAME, COUNT(a.POLICYPLAN_ID) as POLICYPLAN_CNT, NVL(TO_CHAR(SUM(a.EVAL100)),'-') as EVAL100, NVL(TO_CHAR(SUM(a.EVAL90)),'-') as EVAL90, NVL(TO_CHAR(SUM(a.EVAL80)),'-') as EVAL80, NVL(TO_CHAR(SUM(a.EVAL70)),'-') as EVAL70, NVL(TO_CHAR(SUM(a.EVAL50)),'-') as EVAL50, NVL(TO_CHAR(SUM(a.EVAL30)),'-') as EVAL30, NVL(TO_CHAR(SUM(a.EVAL10)),'-') as EVAL10, NVL(TO_CHAR(SUM(a.EVAL0)),'-') as EVAL0, NVL(TO_CHAR(SUM(a.EVALNONE)),'-') as EVALNONE, ROUND((((NVL(SUM(a.EVAL100),0)*100)+ (NVL(SUM(a.EVAL90),0)*90)+ (NVL(SUM(a.EVAL80),0)*80)+ (NVL(SUM(a.EVAL70),0)*70)+ (NVL(SUM(a.EVAL50),0)*50)+ (NVL(SUM(a.EVAL30),0)*30)+ (NVL(SUM(a.EVAL10),0)*10)+ (NVL(SUM(a.EVAL0),0)*0))/CASE WHEN ((NVL(SUM(a.EVAL100),0)+NVL(SUM(a.EVAL90),0)+NVL(SUM(a.EVAL80),0)+NVL(SUM(a.EVAL70),0)+NVL(SUM(a.EVAL50),0)+NVL(SUM(a.EVAL30),0)+NVL(SUM(a.EVAL10),0)+NVL(SUM(a.EVAL0),0))*100)=0 THEN 1 ELSE ((NVL(SUM(a.EVAL100),0)+NVL(SUM(a.EVAL90),0)+NVL(SUM(a.EVAL80),0)+NVL(SUM(a.EVAL70),0)+NVL(SUM(a.EVAL50),0)+NVL(SUM(a.EVAL30),0)+NVL(SUM(a.EVAL10),0)+NVL(SUM(a.EVAL0),0))*100) END)*100,1) as PERAVG, b.SORT FROM ( SELECT d.BR_ID, a.ID as POLICYPLAN_ID, CASE WHEN f.EVAL=100 THEN 1 END as EVAL100, CASE WHEN f.EVAL=90 THEN 1 END as EVAL90, CASE WHEN f.EVAL=80 THEN 1 END as EVAL80, CASE WHEN f.EVAL=70 THEN 1 END as EVAL70, CASE WHEN f.EVAL=50 THEN 1 END as EVAL50, CASE WHEN f.EVAL=30 THEN 1 END as EVAL30, CASE WHEN f.EVAL=10 THEN 1 END as EVAL10, CASE WHEN f.EVAL=0 THEN 1 END as EVAL0, CASE WHEN f.EVAL is null THEN 1 END as EVALNONE FROM TBL_POLICYPLAN a INNER JOIN TBL_POLICYZORILT b ON a.POLICYZORILT_ID=b.ID INNER JOIN TBL_POLICYBODLOGO c ON b.POLICYBODLOGO_ID=c.ID INNER JOIN TBL_POLICYPLAN_BR d ON a.ID=d.POLICYPLAN_ID LEFT JOIN TBL_POLICYPLAN_IMPL f ON a.ID=f.POLICYPLAN_ID AND f.YR=" + yr + " AND f.YRHF=" + yrhf + " LEFT JOIN TBL_POLICYPLAN_IMPL g ON a.ID = g.POLICYPLAN_ID AND g.YR = " + yr + " AND g.YRHF = " + yrhf + " WHERE (a.ISCLOSED = 0 OR g.EVAL IS NOT NULL) AND c.POLICYTYPE_ID=" + policytypeid + isteam + " ) a INNER JOIN TBL_BRANCH b ON a.BR_ID=b.BR_ID AND b.YR=" + yr + " GROUP BY b.BR_NAME, b.SORT ORDER BY b.SORT";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string PolicyTab7t2Datatable(string policytypeid, string yr, string yrhf, string isteam)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (isteam != "") isteam = " AND a.ISTEAM=" + isteam;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = "SELECT b.NAME, COUNT(a.POLICYPLAN_ID) as POLICYPLAN_CNT, NVL(TO_CHAR(SUM(a.EVAL100)),'-') as EVAL100, NVL(TO_CHAR(SUM(a.EVAL90)),'-') as EVAL90, NVL(TO_CHAR(SUM(a.EVAL80)),'-') as EVAL80, NVL(TO_CHAR(SUM(a.EVAL70)),'-') as EVAL70, NVL(TO_CHAR(SUM(a.EVAL50)),'-') as EVAL50, NVL(TO_CHAR(SUM(a.EVAL30)),'-') as EVAL30, NVL(TO_CHAR(SUM(a.EVAL10)),'-') as EVAL10, NVL(TO_CHAR(SUM(a.EVAL0)),'-') as EVAL0, NVL(TO_CHAR(SUM(a.EVALNONE)),'-') as EVALNONE, ROUND((((NVL(SUM(a.EVAL100),0)*100)+ (NVL(SUM(a.EVAL90),0)*90)+ (NVL(SUM(a.EVAL80),0)*80)+ (NVL(SUM(a.EVAL70),0)*70)+ (NVL(SUM(a.EVAL50),0)*50)+ (NVL(SUM(a.EVAL30),0)*30)+ (NVL(SUM(a.EVAL10),0)*10)+ (NVL(SUM(a.EVAL0),0)*0))/CASE WHEN ((NVL(SUM(a.EVAL100),0)+NVL(SUM(a.EVAL90),0)+NVL(SUM(a.EVAL80),0)+NVL(SUM(a.EVAL70),0)+NVL(SUM(a.EVAL50),0)+NVL(SUM(a.EVAL30),0)+NVL(SUM(a.EVAL10),0)+NVL(SUM(a.EVAL0),0))*100)=0 THEN 1 ELSE ((NVL(SUM(a.EVAL100),0)+NVL(SUM(a.EVAL90),0)+NVL(SUM(a.EVAL80),0)+NVL(SUM(a.EVAL70),0)+NVL(SUM(a.EVAL50),0)+NVL(SUM(a.EVAL30),0)+NVL(SUM(a.EVAL10),0)+NVL(SUM(a.EVAL0),0))*100) END)*100,1) as PERAVG FROM ( SELECT c.ID as POLICYBODLOGO_ID, a.ID as POLICYPLAN_ID, CASE WHEN f.EVAL=100 THEN 1 END as EVAL100, CASE WHEN f.EVAL=90 THEN 1 END as EVAL90, CASE WHEN f.EVAL=80 THEN 1 END as EVAL80, CASE WHEN f.EVAL=70 THEN 1 END as EVAL70, CASE WHEN f.EVAL=50 THEN 1 END as EVAL50, CASE WHEN f.EVAL=30 THEN 1 END as EVAL30, CASE WHEN f.EVAL=10 THEN 1 END as EVAL10, CASE WHEN f.EVAL=0 THEN 1 END as EVAL0, CASE WHEN f.EVAL is null THEN 1 END as EVALNONE FROM TBL_POLICYPLAN a INNER JOIN TBL_POLICYZORILT b ON a.POLICYZORILT_ID=b.ID INNER JOIN TBL_POLICYBODLOGO c ON b.POLICYBODLOGO_ID=c.ID LEFT JOIN TBL_POLICYPLAN_IMPL f ON a.ID=f.POLICYPLAN_ID AND f.YR=" + yr + " AND f.YRHF=" + yrhf + " LEFT JOIN TBL_POLICYPLAN_IMPL g ON a.ID = g.POLICYPLAN_ID AND g.YR = " + yr + " AND g.YRHF = " + yrhf + " WHERE (a.ISCLOSED = 0 OR g.EVAL IS NOT NULL) AND c.POLICYTYPE_ID=" + policytypeid + isteam + " ) a INNER JOIN TBL_POLICYBODLOGO b ON a.POLICYBODLOGO_ID=b.ID GROUP BY b.NAME ";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string PolicyTab8Datatable(string policytypeid, string bodlogoid, string zoriltid, string isteam)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (bodlogoid != "") bodlogoid = " AND b.POLICYBODLOGO_ID=" + bodlogoid;
            if (zoriltid != "") zoriltid = " AND a.POLICYZORILT_ID=" + zoriltid;
            if (isteam != "") isteam = " AND a.ISTEAM=" + bodlogoid;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = "SELECT ROWNUM as ROWNO, a.* FROM ( SELECT a.POLICYPLAN_ID, d.NO||'.'||c.NO||'.'||b.NO||'. '||b.NAME as POLICYPLAN, c.POLICYBODLOGO_ID, b.POLICYZORILT_ID, b.RESULT, b.CRITERIA, a.BRLISTID, a.BRLISTNAME, b.ISTEAM, b.BEGINYR, b.ENDYR, b.WHONAME, NVL2(f.IMPL,'glyphicon-check txt-color-green','glyphicon-edit txt-color-red') as ISIMPL, f.FILENAME, f.IMPL, g.YRHFLIST, b.ISCLOSED FROM ( SELECT a.ID as POLICYPLAN_ID, RTRIM(xmlagg (xmlelement (e, d.BR_ID || ',') ORDER BY f.SORT).extract('//text()'), ',') as BRLISTID, RTRIM(xmlagg (xmlelement (e, f.DOMAIN_ORG || ',') ORDER BY f.SORT).extract('//text()'), ',') as BRLISTNAME FROM TBL_POLICYPLAN a  INNER JOIN TBL_POLICYZORILT b ON a.POLICYZORILT_ID=b.ID INNER JOIN TBL_POLICYBODLOGO c ON b.POLICYBODLOGO_ID=c.ID LEFT JOIN TBL_POLICYPLAN_BR d ON a.ID=d.POLICYPLAN_ID LEFT JOIN TBL_BRANCH f ON d.BR_ID=f.BR_ID AND d.YR=f.YR WHERE c.POLICYTYPE_ID=" + policytypeid + bodlogoid + zoriltid + isteam + @" GROUP BY a.ID ) a INNER JOIN TBL_POLICYPLAN b ON a.POLICYPLAN_ID=b.ID INNER JOIN TBL_POLICYZORILT c ON b.POLICYZORILT_ID=c.ID INNER JOIN TBL_POLICYBODLOGO d ON c.POLICYBODLOGO_ID=d.ID LEFT JOIN TBL_POLICYPLAN_IMPLNEGDSEN f ON a.POLICYPLAN_ID=f.POLICYPLAN_ID LEFT JOIN (
    SELECT a.ID, NVL(RTRIM(xmlagg(xmlelement(e, b.YR || '-' || b.YRHF || ', ') ORDER BY b.YR, b.YRHF).extract('//text()'), ', '), 'none') YRHFLIST
       FROM TBL_POLICYPLAN_IMPLNEGDSEN a
    INNER JOIN TBL_POLPLAN_IMPLNEGDSEN_YRHF b ON a.ID = b.POLICYPLAN_IMPLNEGDSEN_ID
    GROUP BY a.ID
  ) g ON f.ID = g.ID ORDER BY d.NO, c.NO, b.NO ) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string PolicyTab9Datatable(string policytypeid)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT ROWNUM as ROWNO, a.* FROM ( SELECT ID, YR, YRHF, CASE WHEN YRHF=1 THEN 'Эхний хагас жил' ELSE 'Сүүлийн хагас жил' END AS YRHF_NAME, FILENAME FROM TBL_POLICYPLAN_FILEARCHIVE WHERE POLICYTYPE_ID=" + policytypeid + " ORDER BY YR, YRHF ) a");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string PolicyTab6t7Datatable(string yr, string yrhf)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = @"SELECT ROWNUM AS ROWNO, a.*
FROM (
    SELECT a.BR_ID, a.DOMAIN_ORG, a.SORT, 
      CASE WHEN NVL(b.CNTPLAN,0)=0 THEN '-' ELSE TO_CHAR(NVL(b.CNTPLAN,0)) END as CNTPLAN, 
      CASE WHEN NVL(b.IMPL1,0)=0 THEN '-' ELSE TO_CHAR(NVL(b.IMPL1,0)) END as IMPL1, 
      CASE WHEN NVL(b.IMPL0,0)=0 THEN '-' ELSE TO_CHAR(NVL(b.IMPL0,0)) END as IMPL0, 
      CASE WHEN NVL(c.WORK_CNT,0)=0 THEN '-' ELSE TO_CHAR(NVL(c.WORK_CNT,0)) END as WORK_CNT, 
      CASE WHEN NVL(d.PLANMNTH_ID,0)=0 THEN '-' ELSE TO_CHAR(NVL(d.PLANMNTH_ID,0)) END as PLANMNTH_ID
    FROM TBL_BRANCH a
    LEFT JOIN (
      SELECT BR_ID, COUNT(ID) as CNTPLAN, SUM(IMPL1)  as IMPL1, SUM(IMPL0)  as IMPL0
      FROM (
        SELECT b.BR_ID, a.ID, CASE WHEN c.IMPL is not null THEN 1 ELSE 0 END as IMPL1, CASE WHEN c.IMPL is null THEN 1 ELSE 0 END as IMPL0
        FROM TBL_POLICYPLAN a
        INNER JOIN TBL_POLICYPLAN_BR b ON a.ID=b.POLICYPLAN_ID 
        LEFT JOIN TBL_POLICYPLAN_IMPL c ON a.ID=c.POLICYPLAN_ID AND c.YR=" + yr+ @" AND c.YRHF="+yrhf+@"
        WHERE a.ISCLOSED=0 AND " + yr + @" BETWEEN a.BEGINYR AND a.ENDYR
      ) 
      GROUP BY BR_ID 
    ) b ON a.BR_ID=b.BR_ID
    LEFT JOIN (
      SELECT BR_ID, COUNT(WORK_ID) as WORK_CNT
      FROM (
        SELECT d.BR_ID, a.WORK_ID
        FROM TBL_PLANYR_WORK a
        INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID AND b.SUBMIT_D2=1
        INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
        INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID 
        WHERE b.YR=" + yr + @"
        GROUP BY d.BR_ID, a.WORK_ID
      )
      GROUP BY BR_ID
    ) c ON a.BR_ID=c.BR_ID
    LEFT JOIN (
      SELECT d.BR_ID, f.ID as PLANMNTH_ID
      FROM TBL_PLANYR_WORK a
      INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID AND b.SUBMIT_D2=1
      INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
      INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID 
      INNER JOIN TBL_PLANMNTH f ON a.PLANYR_ID=f.PLANYR_ID AND f.SUBMIT_D2=1
      WHERE b.YR=" + yr + @"
      GROUP BY d.BR_ID, f.ID
    ) d ON a.BR_ID=d.BR_ID
    WHERE a.BR_TYPE1=3 AND a.BR_ID NOT IN (9911,9903) AND a.YR=" + yr + @"
    ORDER BY a.SORT
) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }


        //*****agreement.aspx*****//
        public string AgreementTab1t1(string yr, string st_id, string isme)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (isme == "1") isme = " AND b.ST_ID=" + st_id;
            else isme = "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string stposid = myObj.OracleExecuteScalar("SELECT POS_ID FROM hrdbuser.ST_STBR WHERE ISACTIVE=1 AND STAFFS_ID=" + st_id).ToString();
                string strqry = "";
                if (stposid == "2010201") {
                    //strqry = "SELECT a.PLANYR_ID, d.NO as STRAT_NO, c.NO as ACTION_NO, b.NO as PLANYR_NO, b.NAME as PLANYR_NAME, REPLACE(NVL(b.BUDGET, 'Жилдээ'),'1,2,3,4,5,6,7,8,9,10,11,12','Сар бүр') as HUGATSAA, NVL2(f.PLANYR_ID,' class=\"success\"',null) as ISCHECK, CASE WHEN f.YRHF1=1 THEN ' checked=\"checked\"' ELSE null END as YRHF1, CASE WHEN f.YRHF2=1 THEN ' checked=\"checked\"' ELSE null END as YRHF2, NVL2(g.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null) as YRHF1ISIMPLEVAL, NVL2(h.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null) as YRHF2ISIMPLEVAL, NVL2(i.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null) as ISIMPLEVAL, CASE WHEN f.ISSPECIAL=1 THEN null ELSE CASE WHEN f.PLANYR_ID is not null THEN ' checked=\"checked\"' ELSE null END END as D1ISCHECKED, CASE WHEN f.ISSPECIAL=1 THEN ' checked=\"checked\"' ELSE null END as D2ISCHECKED, a.STNAMELIST FROM ( SELECT a.PLANYR_ID, NVL(RTRIM(xmlagg (xmlelement (e, (SUBSTR(d.LNAME, 0, 1) || '.' || SUBSTR(d.FNAME, 0, 1) || LOWER(SUBSTR(d.FNAME, 2))) || ', ') ORDER BY ST_ID).extract('//text()'), ', '),'none') STNAMELIST FROM ( SELECT PLANYR_ID FROM ( SELECT a.ID as PLANYR_ID FROM TBL_PLANYR a INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID" + isme + " INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID WHERE a.YR=" + yr + " AND a.IS_PLANED=1 AND a.SUBMIT_D2=1 AND f.BR_ID=(SELECT b.FATHER_ID FROM hrdbuser.ST_STBR a INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID=b.ID WHERE a.ISACTIVE=1 AND a.STAFFS_ID=" + st_id + ") GROUP BY a.ID UNION ALL SELECT PLANYR_ID FROM TBL_AGREEMENT_MAIN WHERE ST_ID = " + st_id + " AND YR = " + yr + " ) GROUP BY PLANYR_ID ) a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID = b.ID INNER JOIN TBL_PLANYR_USER c ON b.ID = c.PLANYR_ID INNER JOIN hrdbuser.ST_STAFFS d ON c.ST_ID = d.ID GROUP BY a.PLANYR_ID ) a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID LEFT JOIN TBL_AGREEMENT_MAIN f ON a.PLANYR_ID=f.PLANYR_ID AND f.ST_ID=" + st_id + " LEFT JOIN TBL_AGREEMENT_MAIN_IMPL g ON f.ID=g.AGREEMENT_MAIN_ID AND g.YRHF=1 AND (g.PER1 is not null OR g.IMPL is not null) LEFT JOIN TBL_AGREEMENT_MAIN_IMPL h ON f.ID=h.AGREEMENT_MAIN_ID AND h.YRHF=2 AND (h.PER1 is not null OR h.IMPL is not null) LEFT JOIN TBL_AGREEMENT_MAIN_IMPL i ON f.ID=i.AGREEMENT_MAIN_ID AND (i.PER1 is not null OR i.IMPL is not null) GROUP BY a.PLANYR_ID, d.NO, c.NO, b.NO, b.NAME, REPLACE(NVL(b.BUDGET, 'Жилдээ'),'1,2,3,4,5,6,7,8,9,10,11,12','Сар бүр'), NVL2(f.PLANYR_ID,' class=\"success\"',null), CASE WHEN f.YRHF1=1 THEN ' checked=\"checked\"' ELSE null END, CASE WHEN f.YRHF2=1 THEN ' checked=\"checked\"' ELSE null END, NVL2(g.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null), NVL2(h.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null), NVL2(i.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null), CASE WHEN f.ISSPECIAL=1 THEN null ELSE CASE WHEN f.PLANYR_ID is not null THEN ' checked=\"checked\"' ELSE null END END, CASE WHEN f.ISSPECIAL=1 THEN ' checked=\"checked\"' ELSE null END, a.STNAMELIST ORDER BY d.NO, c.NO, b.NO";
                    //if (isme != "") strqry = "SELECT a.PLANYR_ID, d.NO as STRAT_NO, c.NO as ACTION_NO, b.NO as PLANYR_NO, b.NAME as PLANYR_NAME, REPLACE(NVL(b.BUDGET, 'Жилдээ'),'1,2,3,4,5,6,7,8,9,10,11,12','Сар бүр') as HUGATSAA, ' class=\"success\"' as ISCHECK, CASE WHEN f.YRHF1 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,1,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,2,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,3,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,4,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,5,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,6,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF1=1 THEN ' checked=\"checked\"' ELSE null END END as YRHF1, CASE WHEN f.YRHF2 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,7,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,8,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,9,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,10,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,11,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,12,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF2=1 THEN ' checked=\"checked\"' ELSE null END END as YRHF2, CASE WHEN c.IS_LOCAL=1 THEN ' disabled=\"disabled\"' ELSE NVL2(i.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null) END as ISIMPLEVAL, CASE WHEN c.IS_LOCAL=1 THEN null WHEN f.ISSPECIAL=1 THEN null ELSE ' checked=\"checked\"' END as D1ISCHECKED, CASE WHEN c.IS_LOCAL=1 THEN null WHEN f.ISSPECIAL=1 THEN ' checked=\"checked\"' ELSE null END as D2ISCHECKED, CASE WHEN c.IS_LOCAL=1 THEN ' checked=\"checked\"' ELSE NULL END AS D3ISCHECKED, a.STNAMELIST FROM ( SELECT a.PLANYR_ID, NVL(RTRIM(xmlagg (xmlelement (e, (SUBSTR(d.LNAME, 0, 1) || '.' || SUBSTR(d.FNAME, 0, 1) || LOWER(SUBSTR(d.FNAME, 2))) || ', ') ORDER BY ST_ID).extract('//text()'), ', '),'none') STNAMELIST FROM ( SELECT PLANYR_ID FROM ( SELECT a.ID as PLANYR_ID FROM TBL_PLANYR a INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID AND b.ST_ID=" + st_id + " INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID WHERE a.YR=" + yr + " AND a.IS_PLANED=1 AND a.SUBMIT_D2=1 AND f.BR_ID=(SELECT b.FATHER_ID FROM hrdbuser.ST_STBR a INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID=b.ID WHERE a.ISACTIVE=1 AND a.STAFFS_ID=" + st_id + ") GROUP BY a.ID UNION ALL SELECT PLANYR_ID FROM TBL_AGREEMENT_MAIN WHERE ST_ID = " + st_id + " AND YR = " + yr + " ) GROUP BY PLANYR_ID ) a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID = b.ID INNER JOIN TBL_PLANYR_USER c ON b.ID = c.PLANYR_ID INNER JOIN hrdbuser.ST_STAFFS d ON c.ST_ID = d.ID GROUP BY a.PLANYR_ID ) a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID LEFT JOIN TBL_AGREEMENT_MAIN f ON a.PLANYR_ID=f.PLANYR_ID AND f.ST_ID=" + st_id + " LEFT JOIN TBL_AGREEMENT_MAIN_IMPL g ON f.ID=g.AGREEMENT_MAIN_ID AND g.YRHF=1 AND (g.PER1 is not null OR g.IMPL is not null) LEFT JOIN TBL_AGREEMENT_MAIN_IMPL h ON f.ID=h.AGREEMENT_MAIN_ID AND h.YRHF=2 AND (h.PER1 is not null OR h.IMPL is not null) LEFT JOIN TBL_AGREEMENT_MAIN_IMPL i ON f.ID=i.AGREEMENT_MAIN_ID AND (i.PER1 is not null OR i.IMPL is not null) GROUP BY a.PLANYR_ID, d.NO, c.NO, b.NO, b.NAME, REPLACE(NVL(b.BUDGET, 'Жилдээ'),'1,2,3,4,5,6,7,8,9,10,11,12','Сар бүр'), ' class=\"success\"', CASE WHEN f.YRHF1 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,1,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,2,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,3,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,4,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,5,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,6,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF1=1 THEN ' checked=\"checked\"' ELSE null END END, CASE WHEN f.YRHF2 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,7,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,8,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,9,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,10,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,11,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,12,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF2=1 THEN ' checked=\"checked\"' ELSE null END END, CASE WHEN c.IS_LOCAL=1 THEN ' disabled=\"disabled\"' ELSE NVL2(i.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null) END, CASE WHEN c.IS_LOCAL = 1 THEN null WHEN f.ISSPECIAL = 1 THEN null ELSE ' checked=\"checked\"' END, CASE WHEN c.IS_LOCAL = 1 THEN null WHEN f.ISSPECIAL = 1 THEN ' checked=\"checked\"' ELSE null END, CASE WHEN c.IS_LOCAL = 1 THEN ' checked=\"checked\"' ELSE NULL END, a.STNAMELIST ORDER BY d.NO, c.NO, b.NO";
                    //else strqry = "SELECT a.PLANYR_ID, d.NO as STRAT_NO, c.NO as ACTION_NO, b.NO as PLANYR_NO, b.NAME as PLANYR_NAME, REPLACE(NVL(b.BUDGET, 'Жилдээ'),'1,2,3,4,5,6,7,8,9,10,11,12','Сар бүр') as HUGATSAA, NVL2(j.PLANYR_ID,' class=\"success\"',null) as ISCHECK, CASE WHEN f.YRHF1 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,1,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,2,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,3,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,4,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,5,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,6,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF1=1 THEN ' checked=\"checked\"' ELSE null END END as YRHF1, CASE WHEN f.YRHF2 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,7,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,8,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,9,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,10,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,11,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,12,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF2=1 THEN ' checked=\"checked\"' ELSE null END END as YRHF2, CASE WHEN c.IS_LOCAL=1 THEN ' disabled=\"disabled\"' ELSE NVL2(i.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null) END as ISIMPLEVAL, CASE WHEN c.IS_LOCAL=1 THEN null WHEN f.ISSPECIAL=1 THEN null WHEN j.PLANYR_ID IS NOT NULL THEN ' checked=\"checked\"' ELSE null END as D1ISCHECKED, CASE WHEN c.IS_LOCAL=1 THEN null WHEN f.ISSPECIAL=1 THEN ' checked=\"checked\"' ELSE null END as D2ISCHECKED, CASE WHEN c.IS_LOCAL=1 THEN ' checked=\"checked\"' ELSE NULL END AS D3ISCHECKED, a.STNAMELIST FROM ( SELECT a.PLANYR_ID, NVL(RTRIM(xmlagg (xmlelement (e, (SUBSTR(d.LNAME, 0, 1) || '.' || SUBSTR(d.FNAME, 0, 1) || LOWER(SUBSTR(d.FNAME, 2))) || ', ') ORDER BY ST_ID).extract('//text()'), ', '),'none') STNAMELIST FROM ( SELECT PLANYR_ID FROM ( SELECT a.ID as PLANYR_ID FROM TBL_PLANYR a INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID WHERE a.YR=" + yr + " AND a.IS_PLANED=1 AND a.SUBMIT_D2=1 AND f.BR_ID=(SELECT b.FATHER_ID FROM hrdbuser.ST_STBR a INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID=b.ID WHERE a.ISACTIVE=1 AND a.STAFFS_ID=" + st_id + ") GROUP BY a.ID UNION ALL SELECT PLANYR_ID FROM TBL_AGREEMENT_MAIN WHERE ST_ID = " + st_id + " AND YR = " + yr + " ) GROUP BY PLANYR_ID ) a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID = b.ID INNER JOIN TBL_PLANYR_USER c ON b.ID = c.PLANYR_ID INNER JOIN hrdbuser.ST_STAFFS d ON c.ST_ID = d.ID GROUP BY a.PLANYR_ID ) a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID LEFT JOIN TBL_AGREEMENT_MAIN f ON a.PLANYR_ID=f.PLANYR_ID AND f.ST_ID=" + st_id + " LEFT JOIN TBL_AGREEMENT_MAIN_IMPL g ON f.ID=g.AGREEMENT_MAIN_ID AND g.YRHF=1 AND (g.PER1 is not null OR g.IMPL is not null) LEFT JOIN TBL_AGREEMENT_MAIN_IMPL h ON f.ID=h.AGREEMENT_MAIN_ID AND h.YRHF=2 AND (h.PER1 is not null OR h.IMPL is not null) LEFT JOIN TBL_AGREEMENT_MAIN_IMPL i ON f.ID=i.AGREEMENT_MAIN_ID AND (i.PER1 is not null OR i.IMPL is not null) LEFT JOIN ( SELECT PLANYR_ID FROM( SELECT a.ID as PLANYR_ID FROM TBL_PLANYR a INNER JOIN TBL_PLANYR_USER b ON a.ID = b.PLANYR_ID AND b.ST_ID=" + st_id + " INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID = c.ID INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID = d.FUNC_ACTION_ID INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID = f.ID WHERE a.YR = " + yr + " AND a.IS_PLANED=1 AND a.SUBMIT_D2 = 1 AND f.BR_ID = (SELECT b.FATHER_ID FROM hrdbuser.ST_STBR a INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID = b.ID WHERE a.ISACTIVE = 1 AND a.STAFFS_ID = " + st_id + ") GROUP BY a.ID UNION ALL SELECT PLANYR_ID FROM TBL_AGREEMENT_MAIN WHERE ST_ID = " + st_id + " AND YR = " + yr + " ) GROUP BY PLANYR_ID ) j ON a.PLANYR_ID = j.PLANYR_ID GROUP BY a.PLANYR_ID, d.NO, c.NO, b.NO, b.NAME, REPLACE(NVL(b.BUDGET, 'Жилдээ'),'1,2,3,4,5,6,7,8,9,10,11,12','Сар бүр'), NVL2(j.PLANYR_ID,' class=\"success\"',null), CASE WHEN f.YRHF1 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,1,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,2,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,3,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,4,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,5,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,6,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF1=1 THEN ' checked=\"checked\"' ELSE null END END, CASE WHEN f.YRHF2 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,7,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,8,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,9,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,10,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,11,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,12,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF2=1 THEN ' checked=\"checked\"' ELSE null END END, CASE WHEN c.IS_LOCAL=1 THEN ' disabled=\"disabled\"' ELSE NVL2(i.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null) END, CASE WHEN c.IS_LOCAL=1 THEN null WHEN f.ISSPECIAL=1 THEN null WHEN j.PLANYR_ID IS NOT NULL THEN ' checked=\"checked\"' ELSE null END, CASE WHEN c.IS_LOCAL = 1 THEN null WHEN f.ISSPECIAL = 1 THEN ' checked=\"checked\"' ELSE null END, CASE WHEN c.IS_LOCAL = 1 THEN ' checked=\"checked\"' ELSE NULL END, a.STNAMELIST ORDER BY d.NO, c.NO, b.NO";
                    strqry = "SELECT a.PLANYR_ID, d.NO as STRAT_NO, c.NO as ACTION_NO, b.NO as PLANYR_NO, b.NAME as PLANYR_NAME, REPLACE(NVL(b.BUDGET, 'Жилдээ'),'1,2,3,4,5,6,7,8,9,10,11,12','Сар бүр') as HUGATSAA, ' class=\"success\"' as ISCHECK, CASE WHEN f.YRHF1 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,1,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,2,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,3,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,4,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,5,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,6,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF1=1 THEN ' checked=\"checked\"' ELSE null END END as YRHF1, CASE WHEN f.YRHF2 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,7,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,8,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,9,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,10,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,11,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,12,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF2=1 THEN ' checked=\"checked\"' ELSE null END END as YRHF2, CASE WHEN c.IS_LOCAL=1 THEN ' disabled=\"disabled\"' ELSE NVL2(i.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null) END as ISIMPLEVAL, CASE WHEN c.IS_LOCAL=1 THEN null WHEN f.ISSPECIAL=1 THEN null ELSE ' checked=\"checked\"' END as D1ISCHECKED, CASE WHEN c.IS_LOCAL=1 THEN null WHEN f.ISSPECIAL=1 THEN ' checked=\"checked\"' ELSE null END as D2ISCHECKED, CASE WHEN c.IS_LOCAL=1 THEN ' checked=\"checked\"' ELSE NULL END AS D3ISCHECKED, a.STNAMELIST FROM ( SELECT a.PLANYR_ID, NVL(RTRIM(xmlagg (xmlelement (e, (SUBSTR(d.LNAME, 0, 1) || '.' || SUBSTR(d.FNAME, 0, 1) || LOWER(SUBSTR(d.FNAME, 2))) || ', ') ORDER BY ST_ID).extract('//text()'), ', '),'none') STNAMELIST FROM ( SELECT PLANYR_ID FROM ( SELECT a.ID as PLANYR_ID FROM TBL_PLANYR a INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID AND b.ST_ID=" + st_id + " INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID WHERE a.YR=" + yr + " AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1 AND f.BR_ID=(SELECT b.FATHER_ID FROM hrdbuser.ST_STBR a INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID=b.ID WHERE a.ISACTIVE=1 AND a.STAFFS_ID=" + st_id + ") GROUP BY a.ID UNION ALL SELECT PLANYR_ID FROM TBL_AGREEMENT_MAIN WHERE ST_ID = " + st_id + " AND YR = " + yr + " ) GROUP BY PLANYR_ID ) a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID = b.ID INNER JOIN TBL_PLANYR_USER c ON b.ID = c.PLANYR_ID INNER JOIN hrdbuser.ST_STAFFS d ON c.ST_ID = d.ID GROUP BY a.PLANYR_ID ) a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID LEFT JOIN TBL_AGREEMENT_MAIN f ON a.PLANYR_ID=f.PLANYR_ID AND f.ST_ID=" + st_id + " LEFT JOIN TBL_AGREEMENT_MAIN_IMPL g ON f.ID=g.AGREEMENT_MAIN_ID AND g.YRHF=1 AND (g.PER1 is not null OR g.IMPL is not null) LEFT JOIN TBL_AGREEMENT_MAIN_IMPL h ON f.ID=h.AGREEMENT_MAIN_ID AND h.YRHF=2 AND (h.PER1 is not null OR h.IMPL is not null) LEFT JOIN TBL_AGREEMENT_MAIN_IMPL i ON f.ID=i.AGREEMENT_MAIN_ID AND (i.PER1 is not null OR i.IMPL is not null) GROUP BY a.PLANYR_ID, d.NO, c.NO, b.NO, b.NAME, REPLACE(NVL(b.BUDGET, 'Жилдээ'),'1,2,3,4,5,6,7,8,9,10,11,12','Сар бүр'), ' class=\"success\"', CASE WHEN f.YRHF1 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,1,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,2,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,3,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,4,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,5,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,6,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF1=1 THEN ' checked=\"checked\"' ELSE null END END, CASE WHEN f.YRHF2 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,7,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,8,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,9,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,10,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,11,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,12,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF2=1 THEN ' checked=\"checked\"' ELSE null END END, CASE WHEN c.IS_LOCAL=1 THEN ' disabled=\"disabled\"' ELSE NVL2(i.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null) END, CASE WHEN c.IS_LOCAL = 1 THEN null WHEN f.ISSPECIAL = 1 THEN null ELSE ' checked=\"checked\"' END, CASE WHEN c.IS_LOCAL = 1 THEN null WHEN f.ISSPECIAL = 1 THEN ' checked=\"checked\"' ELSE null END, CASE WHEN c.IS_LOCAL = 1 THEN ' checked=\"checked\"' ELSE NULL END, a.STNAMELIST ORDER BY d.NO, c.NO, b.NO";
                }
                else if (stposid == "2010301") {
                    //strqry = "SELECT a.PLANYR_ID, d.NO as STRAT_NO, c.NO as ACTION_NO, b.NO as PLANYR_NO, b.NAME as PLANYR_NAME, REPLACE(NVL(b.BUDGET, 'Жилдээ'),'1,2,3,4,5,6,7,8,9,10,11,12','Сар бүр') as HUGATSAA, NVL2(f.PLANYR_ID,' class=\"success\"',null) as ISCHECK, CASE WHEN f.YRHF1=1 THEN ' checked=\"checked\"' ELSE null END as YRHF1, CASE WHEN f.YRHF2=1 THEN ' checked=\"checked\"' ELSE null END as YRHF2, NVL2(g.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null) as YRHF1ISIMPLEVAL, NVL2(h.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null) as YRHF2ISIMPLEVAL, NVL2(i.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null) as ISIMPLEVAL, CASE WHEN f.ISSPECIAL=1 THEN null ELSE CASE WHEN f.PLANYR_ID is not null THEN ' checked=\"checked\"' ELSE null END END as D1ISCHECKED, CASE WHEN f.ISSPECIAL=1 THEN ' checked=\"checked\"' ELSE null END as D2ISCHECKED, a.STNAMELIST FROM ( SELECT a.PLANYR_ID, NVL(RTRIM(xmlagg (xmlelement (e, (SUBSTR(d.LNAME, 0, 1) || '.' || SUBSTR(d.FNAME, 0, 1) || LOWER(SUBSTR(d.FNAME, 2))) || ', ') ORDER BY ST_ID).extract('//text()'), ', '),'none') STNAMELIST FROM ( SELECT PLANYR_ID FROM ( SELECT a.ID as PLANYR_ID FROM TBL_PLANYR a INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID" + isme + " INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID WHERE a.YR=" + yr + " AND a.IS_PLANED=1 AND a.SUBMIT_D2=1 AND f.BR_ID=(SELECT b.FATHER_ID FROM hrdbuser.ST_STBR a INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID=b.ID WHERE a.ISACTIVE=1 AND a.STAFFS_ID=" + st_id + ") GROUP BY a.ID UNION ALL SELECT PLANYR_ID FROM TBL_AGREEMENT_MAIN WHERE ST_ID = " + st_id + " AND YR = " + yr + " ) GROUP BY PLANYR_ID ) a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID = b.ID INNER JOIN TBL_PLANYR_USER c ON b.ID = c.PLANYR_ID INNER JOIN hrdbuser.ST_STAFFS d ON c.ST_ID = d.ID GROUP BY a.PLANYR_ID ) a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID LEFT JOIN TBL_AGREEMENT_MAIN f ON a.PLANYR_ID=f.PLANYR_ID AND f.ST_ID=" + st_id + " LEFT JOIN TBL_AGREEMENT_MAIN_IMPL g ON f.ID=g.AGREEMENT_MAIN_ID AND g.YRHF=1 AND (g.PER1 is not null OR g.IMPL is not null) LEFT JOIN TBL_AGREEMENT_MAIN_IMPL h ON f.ID=h.AGREEMENT_MAIN_ID AND h.YRHF=2 AND (h.PER1 is not null OR h.IMPL is not null) LEFT JOIN TBL_AGREEMENT_MAIN_IMPL i ON f.ID=i.AGREEMENT_MAIN_ID AND (i.PER1 is not null OR i.IMPL is not null) GROUP BY a.PLANYR_ID, d.NO, c.NO, b.NO, b.NAME, REPLACE(NVL(b.BUDGET, 'Жилдээ'),'1,2,3,4,5,6,7,8,9,10,11,12','Сар бүр'), NVL2(f.PLANYR_ID,' class=\"success\"',null), CASE WHEN f.YRHF1=1 THEN ' checked=\"checked\"' ELSE null END, CASE WHEN f.YRHF2=1 THEN ' checked=\"checked\"' ELSE null END, NVL2(g.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null), NVL2(h.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null), NVL2(i.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null), CASE WHEN f.ISSPECIAL=1 THEN null ELSE CASE WHEN f.PLANYR_ID is not null THEN ' checked=\"checked\"' ELSE null END END, CASE WHEN f.ISSPECIAL=1 THEN ' checked=\"checked\"' ELSE null END, a.STNAMELIST";
                    //if (isme != "") strqry = "SELECT a.PLANYR_ID, d.NO as STRAT_NO, c.NO as ACTION_NO, b.NO as PLANYR_NO, b.NAME as PLANYR_NAME, REPLACE(NVL(b.BUDGET, 'Жилдээ'),'1,2,3,4,5,6,7,8,9,10,11,12','Сар бүр') as HUGATSAA, ' class=\"success\"' as ISCHECK, CASE WHEN f.YRHF1 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,1,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,2,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,3,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,4,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,5,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,6,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF1=1 THEN ' checked=\"checked\"' ELSE null END END as YRHF1, CASE WHEN f.YRHF2 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,7,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,8,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,9,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,10,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,11,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,12,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF2=1 THEN ' checked=\"checked\"' ELSE null END END as YRHF2, CASE WHEN c.IS_LOCAL=1 THEN ' disabled=\"disabled\"' ELSE NVL2(i.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null) END as ISIMPLEVAL, CASE WHEN c.IS_LOCAL=1 THEN null WHEN f.ISSPECIAL=1 THEN null ELSE ' checked=\"checked\"' END as D1ISCHECKED, CASE WHEN c.IS_LOCAL=1 THEN null WHEN f.ISSPECIAL=1 THEN ' checked=\"checked\"' ELSE null END as D2ISCHECKED, CASE WHEN c.IS_LOCAL=1 THEN ' checked=\"checked\"' ELSE NULL END AS D3ISCHECKED, a.STNAMELIST FROM ( SELECT a.PLANYR_ID, NVL(RTRIM(xmlagg (xmlelement (e, (SUBSTR(d.LNAME, 0, 1) || '.' || SUBSTR(d.FNAME, 0, 1) || LOWER(SUBSTR(d.FNAME, 2))) || ', ') ORDER BY ST_ID).extract('//text()'), ', '),'none') STNAMELIST FROM ( SELECT PLANYR_ID FROM ( SELECT a.ID as PLANYR_ID FROM TBL_PLANYR a INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID AND b.ST_ID=" + st_id + " INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID WHERE a.YR=" + yr + " AND a.IS_PLANED=1 AND a.SUBMIT_D2=1 AND f.BR_ID=(SELECT b.FATHER_ID FROM hrdbuser.ST_STBR a INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID=b.ID WHERE a.ISACTIVE=1 AND a.STAFFS_ID=" + st_id + ") GROUP BY a.ID UNION ALL SELECT PLANYR_ID FROM TBL_AGREEMENT_MAIN WHERE ST_ID = " + st_id + " AND YR = " + yr + " ) GROUP BY PLANYR_ID ) a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID = b.ID INNER JOIN TBL_PLANYR_USER c ON b.ID = c.PLANYR_ID INNER JOIN hrdbuser.ST_STAFFS d ON c.ST_ID = d.ID GROUP BY a.PLANYR_ID ) a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID LEFT JOIN TBL_AGREEMENT_MAIN f ON a.PLANYR_ID=f.PLANYR_ID AND f.ST_ID=" + st_id + " LEFT JOIN TBL_AGREEMENT_MAIN_IMPL g ON f.ID=g.AGREEMENT_MAIN_ID AND g.YRHF=1 AND (g.PER1 is not null OR g.IMPL is not null) LEFT JOIN TBL_AGREEMENT_MAIN_IMPL h ON f.ID=h.AGREEMENT_MAIN_ID AND h.YRHF=2 AND (h.PER1 is not null OR h.IMPL is not null) LEFT JOIN TBL_AGREEMENT_MAIN_IMPL i ON f.ID=i.AGREEMENT_MAIN_ID AND (i.PER1 is not null OR i.IMPL is not null) GROUP BY a.PLANYR_ID, d.NO, c.NO, b.NO, b.NAME, REPLACE(NVL(b.BUDGET, 'Жилдээ'),'1,2,3,4,5,6,7,8,9,10,11,12','Сар бүр'), ' class=\"success\"', CASE WHEN f.YRHF1 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,1,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,2,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,3,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,4,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,5,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,6,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF1=1 THEN ' checked=\"checked\"' ELSE null END END, CASE WHEN f.YRHF2 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,7,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,8,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,9,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,10,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,11,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,12,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF2=1 THEN ' checked=\"checked\"' ELSE null END END, CASE WHEN c.IS_LOCAL=1 THEN ' disabled=\"disabled\"' ELSE NVL2(i.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null) END, CASE WHEN c.IS_LOCAL = 1 THEN null WHEN f.ISSPECIAL = 1 THEN null ELSE ' checked=\"checked\"' END, CASE WHEN c.IS_LOCAL = 1 THEN null WHEN f.ISSPECIAL = 1 THEN ' checked=\"checked\"' ELSE null END, CASE WHEN c.IS_LOCAL = 1 THEN ' checked=\"checked\"' ELSE NULL END, a.STNAMELIST ORDER BY d.NO, c.NO, b.NO";
                    //else strqry = "SELECT a.PLANYR_ID, d.NO as STRAT_NO, c.NO as ACTION_NO, b.NO as PLANYR_NO, b.NAME as PLANYR_NAME, REPLACE(NVL(b.BUDGET, 'Жилдээ'),'1,2,3,4,5,6,7,8,9,10,11,12','Сар бүр') as HUGATSAA, NVL2(j.PLANYR_ID,' class=\"success\"',null) as ISCHECK, CASE WHEN f.YRHF1 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,1,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,2,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,3,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,4,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,5,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,6,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF1=1 THEN ' checked=\"checked\"' ELSE null END END as YRHF1, CASE WHEN f.YRHF2 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,7,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,8,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,9,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,10,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,11,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,12,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF2=1 THEN ' checked=\"checked\"' ELSE null END END as YRHF2, CASE WHEN c.IS_LOCAL=1 THEN ' disabled=\"disabled\"' ELSE NVL2(i.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null) END as ISIMPLEVAL, CASE WHEN c.IS_LOCAL=1 THEN null WHEN f.ISSPECIAL=1 THEN null WHEN j.PLANYR_ID IS NOT NULL THEN ' checked=\"checked\"' ELSE null END as D1ISCHECKED, CASE WHEN c.IS_LOCAL=1 THEN null WHEN f.ISSPECIAL=1 THEN ' checked=\"checked\"' ELSE null END as D2ISCHECKED, CASE WHEN c.IS_LOCAL=1 THEN ' checked=\"checked\"' ELSE NULL END AS D3ISCHECKED, a.STNAMELIST FROM ( SELECT a.PLANYR_ID, NVL(RTRIM(xmlagg (xmlelement (e, (SUBSTR(d.LNAME, 0, 1) || '.' || SUBSTR(d.FNAME, 0, 1) || LOWER(SUBSTR(d.FNAME, 2))) || ', ') ORDER BY ST_ID).extract('//text()'), ', '),'none') STNAMELIST FROM ( SELECT PLANYR_ID FROM ( SELECT a.ID as PLANYR_ID FROM TBL_PLANYR a INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID WHERE a.YR=" + yr + " AND a.IS_PLANED=1 AND a.SUBMIT_D2=1 AND f.BR_ID=(SELECT b.FATHER_ID FROM hrdbuser.ST_STBR a INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID=b.ID WHERE a.ISACTIVE=1 AND a.STAFFS_ID=" + st_id + ") GROUP BY a.ID UNION ALL SELECT PLANYR_ID FROM TBL_AGREEMENT_MAIN WHERE ST_ID = " + st_id + " AND YR = " + yr + " ) GROUP BY PLANYR_ID ) a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID = b.ID INNER JOIN TBL_PLANYR_USER c ON b.ID = c.PLANYR_ID INNER JOIN hrdbuser.ST_STAFFS d ON c.ST_ID = d.ID GROUP BY a.PLANYR_ID ) a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID LEFT JOIN TBL_AGREEMENT_MAIN f ON a.PLANYR_ID=f.PLANYR_ID AND f.ST_ID=" + st_id + " LEFT JOIN TBL_AGREEMENT_MAIN_IMPL g ON f.ID=g.AGREEMENT_MAIN_ID AND g.YRHF=1 AND (g.PER1 is not null OR g.IMPL is not null) LEFT JOIN TBL_AGREEMENT_MAIN_IMPL h ON f.ID=h.AGREEMENT_MAIN_ID AND h.YRHF=2 AND (h.PER1 is not null OR h.IMPL is not null) LEFT JOIN TBL_AGREEMENT_MAIN_IMPL i ON f.ID=i.AGREEMENT_MAIN_ID AND (i.PER1 is not null OR i.IMPL is not null) LEFT JOIN ( SELECT PLANYR_ID FROM( SELECT a.ID as PLANYR_ID FROM TBL_PLANYR a INNER JOIN TBL_PLANYR_USER b ON a.ID = b.PLANYR_ID AND b.ST_ID=" + st_id + " INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID = c.ID INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID = d.FUNC_ACTION_ID INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID = f.ID WHERE a.YR = " + yr + " AND a.IS_PLANED=1 AND a.SUBMIT_D2 = 1 AND f.BR_ID = (SELECT b.FATHER_ID FROM hrdbuser.ST_STBR a INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID = b.ID WHERE a.ISACTIVE = 1 AND a.STAFFS_ID = " + st_id + ") GROUP BY a.ID UNION ALL SELECT PLANYR_ID FROM TBL_AGREEMENT_MAIN WHERE ST_ID = " + st_id + " AND YR = " + yr + " ) GROUP BY PLANYR_ID ) j ON a.PLANYR_ID = j.PLANYR_ID GROUP BY a.PLANYR_ID, d.NO, c.NO, b.NO, b.NAME, REPLACE(NVL(b.BUDGET, 'Жилдээ'),'1,2,3,4,5,6,7,8,9,10,11,12','Сар бүр'), NVL2(j.PLANYR_ID,' class=\"success\"',null), CASE WHEN f.YRHF1 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,1,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,2,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,3,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,4,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,5,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,6,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF1=1 THEN ' checked=\"checked\"' ELSE null END END, CASE WHEN f.YRHF2 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,7,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,8,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,9,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,10,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,11,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,12,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF2=1 THEN ' checked=\"checked\"' ELSE null END END, CASE WHEN c.IS_LOCAL=1 THEN ' disabled=\"disabled\"' ELSE NVL2(i.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null) END, CASE WHEN c.IS_LOCAL=1 THEN null WHEN f.ISSPECIAL=1 THEN null WHEN j.PLANYR_ID IS NOT NULL THEN ' checked=\"checked\"' ELSE null END, CASE WHEN c.IS_LOCAL = 1 THEN null WHEN f.ISSPECIAL = 1 THEN ' checked=\"checked\"' ELSE null END, CASE WHEN c.IS_LOCAL = 1 THEN ' checked=\"checked\"' ELSE NULL END, a.STNAMELIST ORDER BY d.NO, c.NO, b.NO";
                    if (isme != "") strqry = "SELECT a.PLANYR_ID, d.NO as STRAT_NO, c.NO as ACTION_NO, b.NO as PLANYR_NO, b.NAME as PLANYR_NAME, REPLACE(NVL(b.BUDGET, 'Жилдээ'),'1,2,3,4,5,6,7,8,9,10,11,12','Сар бүр') as HUGATSAA, ' class=\"success\"' as ISCHECK, CASE WHEN f.YRHF1 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,1,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,2,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,3,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,4,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,5,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,6,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF1=1 THEN ' checked=\"checked\"' ELSE null END END as YRHF1, CASE WHEN f.YRHF2 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,7,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,8,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,9,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,10,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,11,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,12,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF2=1 THEN ' checked=\"checked\"' ELSE null END END as YRHF2, CASE WHEN c.IS_LOCAL=1 THEN ' disabled=\"disabled\"' ELSE NVL2(i.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null) END as ISIMPLEVAL, CASE WHEN c.IS_LOCAL=1 THEN null WHEN f.ISSPECIAL=1 THEN null ELSE ' checked=\"checked\"' END as D1ISCHECKED, CASE WHEN c.IS_LOCAL=1 THEN null WHEN f.ISSPECIAL=1 THEN ' checked=\"checked\"' ELSE null END as D2ISCHECKED, CASE WHEN c.IS_LOCAL=1 THEN ' checked=\"checked\"' ELSE NULL END AS D3ISCHECKED, a.STNAMELIST FROM ( SELECT a.PLANYR_ID, NVL(RTRIM(xmlagg (xmlelement (e, (SUBSTR(d.LNAME, 0, 1) || '.' || SUBSTR(d.FNAME, 0, 1) || LOWER(SUBSTR(d.FNAME, 2))) || ', ') ORDER BY ST_ID).extract('//text()'), ', '),'none') STNAMELIST FROM ( SELECT PLANYR_ID FROM ( SELECT a.ID as PLANYR_ID FROM TBL_PLANYR a INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID WHERE a.YR=" + yr + " AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1 AND d.BR_ID=(SELECT a.BRANCH_ID FROM hrdbuser.ST_STBR a INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID=b.ID WHERE a.ISACTIVE=1 AND a.STAFFS_ID=" + st_id + ") GROUP BY a.ID UNION ALL SELECT PLANYR_ID FROM TBL_AGREEMENT_MAIN WHERE ST_ID = " + st_id + " AND YR = " + yr + " ) GROUP BY PLANYR_ID ) a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID = b.ID INNER JOIN TBL_PLANYR_USER c ON b.ID = c.PLANYR_ID INNER JOIN hrdbuser.ST_STAFFS d ON c.ST_ID = d.ID GROUP BY a.PLANYR_ID ) a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID LEFT JOIN TBL_AGREEMENT_MAIN f ON a.PLANYR_ID=f.PLANYR_ID AND f.ST_ID=" + st_id + " LEFT JOIN TBL_AGREEMENT_MAIN_IMPL g ON f.ID=g.AGREEMENT_MAIN_ID AND g.YRHF=1 AND (g.PER1 is not null OR g.IMPL is not null) LEFT JOIN TBL_AGREEMENT_MAIN_IMPL h ON f.ID=h.AGREEMENT_MAIN_ID AND h.YRHF=2 AND (h.PER1 is not null OR h.IMPL is not null) LEFT JOIN TBL_AGREEMENT_MAIN_IMPL i ON f.ID=i.AGREEMENT_MAIN_ID AND (i.PER1 is not null OR i.IMPL is not null) GROUP BY a.PLANYR_ID, d.NO, c.NO, b.NO, b.NAME, REPLACE(NVL(b.BUDGET, 'Жилдээ'),'1,2,3,4,5,6,7,8,9,10,11,12','Сар бүр'), ' class=\"success\"', CASE WHEN f.YRHF1 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,1,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,2,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,3,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,4,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,5,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,6,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF1=1 THEN ' checked=\"checked\"' ELSE null END END, CASE WHEN f.YRHF2 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,7,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,8,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,9,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,10,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,11,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,12,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF2=1 THEN ' checked=\"checked\"' ELSE null END END, CASE WHEN c.IS_LOCAL=1 THEN ' disabled=\"disabled\"' ELSE NVL2(i.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null) END, CASE WHEN c.IS_LOCAL = 1 THEN null WHEN f.ISSPECIAL = 1 THEN null ELSE ' checked=\"checked\"' END, CASE WHEN c.IS_LOCAL = 1 THEN null WHEN f.ISSPECIAL = 1 THEN ' checked=\"checked\"' ELSE null END, CASE WHEN c.IS_LOCAL = 1 THEN ' checked=\"checked\"' ELSE NULL END, a.STNAMELIST ORDER BY d.NO, c.NO, b.NO";
                    else strqry = "SELECT a.PLANYR_ID, d.NO as STRAT_NO, c.NO as ACTION_NO, b.NO as PLANYR_NO, b.NAME as PLANYR_NAME, REPLACE(NVL(b.BUDGET, 'Жилдээ'),'1,2,3,4,5,6,7,8,9,10,11,12','Сар бүр') as HUGATSAA, NVL2(j.PLANYR_ID,' class=\"success\"',null) as ISCHECK, CASE WHEN f.YRHF1 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,1,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,2,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,3,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,4,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,5,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,6,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF1=1 THEN ' checked=\"checked\"' ELSE null END END as YRHF1, CASE WHEN f.YRHF2 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,7,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,8,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,9,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,10,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,11,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,12,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF2=1 THEN ' checked=\"checked\"' ELSE null END END as YRHF2, CASE WHEN c.IS_LOCAL=1 THEN ' disabled=\"disabled\"' ELSE NVL2(i.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null) END as ISIMPLEVAL, CASE WHEN c.IS_LOCAL=1 THEN null WHEN f.ISSPECIAL=1 THEN null WHEN j.PLANYR_ID IS NOT NULL THEN ' checked=\"checked\"' ELSE null END as D1ISCHECKED, CASE WHEN c.IS_LOCAL=1 THEN null WHEN f.ISSPECIAL=1 THEN ' checked=\"checked\"' ELSE null END as D2ISCHECKED, CASE WHEN c.IS_LOCAL=1 THEN ' checked=\"checked\"' ELSE NULL END AS D3ISCHECKED, a.STNAMELIST FROM ( SELECT a.PLANYR_ID, NVL(RTRIM(xmlagg (xmlelement (e, (SUBSTR(d.LNAME, 0, 1) || '.' || SUBSTR(d.FNAME, 0, 1) || LOWER(SUBSTR(d.FNAME, 2))) || ', ') ORDER BY ST_ID).extract('//text()'), ', '),'none') STNAMELIST FROM ( SELECT PLANYR_ID FROM ( SELECT a.ID as PLANYR_ID FROM TBL_PLANYR a INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID WHERE a.YR=" + yr + " AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1 AND f.BR_ID=(SELECT b.FATHER_ID FROM hrdbuser.ST_STBR a INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID=b.ID WHERE a.ISACTIVE=1 AND a.STAFFS_ID=" + st_id + ") GROUP BY a.ID UNION ALL SELECT PLANYR_ID FROM TBL_AGREEMENT_MAIN WHERE ST_ID = " + st_id + " AND YR = " + yr + " ) GROUP BY PLANYR_ID ) a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID = b.ID INNER JOIN TBL_PLANYR_USER c ON b.ID = c.PLANYR_ID INNER JOIN hrdbuser.ST_STAFFS d ON c.ST_ID = d.ID GROUP BY a.PLANYR_ID ) a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID LEFT JOIN TBL_AGREEMENT_MAIN f ON a.PLANYR_ID=f.PLANYR_ID AND f.ST_ID=" + st_id + " LEFT JOIN TBL_AGREEMENT_MAIN_IMPL g ON f.ID=g.AGREEMENT_MAIN_ID AND g.YRHF=1 AND (g.PER1 is not null OR g.IMPL is not null) LEFT JOIN TBL_AGREEMENT_MAIN_IMPL h ON f.ID=h.AGREEMENT_MAIN_ID AND h.YRHF=2 AND (h.PER1 is not null OR h.IMPL is not null) LEFT JOIN TBL_AGREEMENT_MAIN_IMPL i ON f.ID=i.AGREEMENT_MAIN_ID AND (i.PER1 is not null OR i.IMPL is not null) LEFT JOIN ( SELECT PLANYR_ID FROM( SELECT a.ID as PLANYR_ID FROM TBL_PLANYR a INNER JOIN TBL_PLANYR_USER b ON a.ID = b.PLANYR_ID AND b.ST_ID=" + st_id + " INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID = c.ID INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID = d.FUNC_ACTION_ID INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID = f.ID WHERE a.YR = " + yr + " AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2 = 1 AND f.BR_ID = (SELECT b.FATHER_ID FROM hrdbuser.ST_STBR a INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID = b.ID WHERE a.ISACTIVE = 1 AND a.STAFFS_ID = " + st_id + ") GROUP BY a.ID UNION ALL SELECT PLANYR_ID FROM TBL_AGREEMENT_MAIN WHERE ST_ID = " + st_id + " AND YR = " + yr + " ) GROUP BY PLANYR_ID ) j ON a.PLANYR_ID = j.PLANYR_ID GROUP BY a.PLANYR_ID, d.NO, c.NO, b.NO, b.NAME, REPLACE(NVL(b.BUDGET, 'Жилдээ'),'1,2,3,4,5,6,7,8,9,10,11,12','Сар бүр'), NVL2(j.PLANYR_ID,' class=\"success\"',null), CASE WHEN f.YRHF1 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,1,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,2,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,3,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,4,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,5,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,6,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF1=1 THEN ' checked=\"checked\"' ELSE null END END, CASE WHEN f.YRHF2 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,7,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,8,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,9,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,10,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,11,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,12,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF2=1 THEN ' checked=\"checked\"' ELSE null END END, CASE WHEN c.IS_LOCAL=1 THEN ' disabled=\"disabled\"' ELSE NVL2(i.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null) END, CASE WHEN c.IS_LOCAL=1 THEN null WHEN f.ISSPECIAL=1 THEN null WHEN j.PLANYR_ID IS NOT NULL THEN ' checked=\"checked\"' ELSE null END, CASE WHEN c.IS_LOCAL = 1 THEN null WHEN f.ISSPECIAL = 1 THEN ' checked=\"checked\"' ELSE null END, CASE WHEN c.IS_LOCAL = 1 THEN ' checked=\"checked\"' ELSE NULL END, a.STNAMELIST ORDER BY d.NO, c.NO, b.NO";
                }
                else if (stposid == "1043") {
                    //strqry = "SELECT a.PLANYR_ID, d.NO as STRAT_NO, c.NO as ACTION_NO, b.NO as PLANYR_NO, b.NAME as PLANYR_NAME, REPLACE(NVL(b.BUDGET, 'Жилдээ'),'1,2,3,4,5,6,7,8,9,10,11,12','Сар бүр') as HUGATSAA, NVL2(f.PLANYR_ID,' class=\"success\"',null) as ISCHECK, CASE WHEN f.YRHF1=1 THEN ' checked=\"checked\"' ELSE null END as YRHF1, CASE WHEN f.YRHF2=1 THEN ' checked=\"checked\"' ELSE null END as YRHF2, NVL2(g.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null) as YRHF1ISIMPLEVAL, NVL2(h.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null) as YRHF2ISIMPLEVAL, NVL2(i.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null) as ISIMPLEVAL, CASE WHEN f.ISSPECIAL=1 THEN null ELSE CASE WHEN f.PLANYR_ID is not null THEN ' checked=\"checked\"' ELSE null END END as D1ISCHECKED, CASE WHEN f.ISSPECIAL=1 THEN ' checked=\"checked\"' ELSE null END as D2ISCHECKED, a.STNAMELIST FROM ( SELECT a.PLANYR_ID, NVL(RTRIM(xmlagg (xmlelement (e, (SUBSTR(d.LNAME, 0, 1) || '.' || SUBSTR(d.FNAME, 0, 1) || LOWER(SUBSTR(d.FNAME, 2))) || ', ') ORDER BY ST_ID).extract('//text()'), ', '),'none') STNAMELIST FROM ( SELECT PLANYR_ID FROM ( SELECT a.ID as PLANYR_ID FROM TBL_PLANYR a INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID" + isme + " INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID WHERE a.YR=" + yr + " AND a.IS_PLANED=1 AND a.SUBMIT_D2=1 AND f.BR_ID=9915 GROUP BY a.ID UNION ALL SELECT PLANYR_ID FROM TBL_AGREEMENT_MAIN WHERE ST_ID = " + st_id + " AND YR = " + yr + " ) GROUP BY PLANYR_ID ) a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID = b.ID INNER JOIN TBL_PLANYR_USER c ON b.ID = c.PLANYR_ID INNER JOIN hrdbuser.ST_STAFFS d ON c.ST_ID = d.ID GROUP BY a.PLANYR_ID ) a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID LEFT JOIN TBL_AGREEMENT_MAIN f ON a.PLANYR_ID=f.PLANYR_ID AND f.ST_ID=" + st_id + " LEFT JOIN TBL_AGREEMENT_MAIN_IMPL g ON f.ID=g.AGREEMENT_MAIN_ID AND g.YRHF=1 AND (g.PER1 is not null OR g.IMPL is not null) LEFT JOIN TBL_AGREEMENT_MAIN_IMPL h ON f.ID=h.AGREEMENT_MAIN_ID AND h.YRHF=2 AND (h.PER1 is not null OR h.IMPL is not null) LEFT JOIN TBL_AGREEMENT_MAIN_IMPL i ON f.ID=i.AGREEMENT_MAIN_ID AND (i.PER1 is not null OR i.IMPL is not null) GROUP BY a.PLANYR_ID, d.NO, c.NO, b.NO, b.NAME, REPLACE(NVL(b.BUDGET, 'Жилдээ'),'1,2,3,4,5,6,7,8,9,10,11,12','Сар бүр'), NVL2(f.PLANYR_ID,' class=\"success\"',null), CASE WHEN f.YRHF1=1 THEN ' checked=\"checked\"' ELSE null END, CASE WHEN f.YRHF2=1 THEN ' checked=\"checked\"' ELSE null END, NVL2(g.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null), NVL2(h.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null), NVL2(i.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null), CASE WHEN f.ISSPECIAL=1 THEN null ELSE CASE WHEN f.PLANYR_ID is not null THEN ' checked=\"checked\"' ELSE null END END, CASE WHEN f.ISSPECIAL=1 THEN ' checked=\"checked\"' ELSE null END, a.STNAMELIST";
                    if (isme != "") strqry = "SELECT a.PLANYR_ID, d.NO as STRAT_NO, c.NO as ACTION_NO, b.NO as PLANYR_NO, b.NAME as PLANYR_NAME, REPLACE(NVL(b.BUDGET, 'Жилдээ'),'1,2,3,4,5,6,7,8,9,10,11,12','Сар бүр') as HUGATSAA, ' class=\"success\"' as ISCHECK, CASE WHEN f.YRHF1 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,1,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,2,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,3,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,4,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,5,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,6,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF1=1 THEN ' checked=\"checked\"' ELSE null END END as YRHF1, CASE WHEN f.YRHF2 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,7,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,8,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,9,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,10,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,11,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,12,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF2=1 THEN ' checked=\"checked\"' ELSE null END END as YRHF2, CASE WHEN c.IS_LOCAL=1 THEN ' disabled=\"disabled\"' ELSE NVL2(i.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null) END as ISIMPLEVAL, CASE WHEN c.IS_LOCAL=1 THEN null WHEN f.ISSPECIAL=1 THEN null ELSE ' checked=\"checked\"' END as D1ISCHECKED, CASE WHEN c.IS_LOCAL=1 THEN null WHEN f.ISSPECIAL=1 THEN ' checked=\"checked\"' ELSE null END as D2ISCHECKED, CASE WHEN c.IS_LOCAL=1 THEN ' checked=\"checked\"' ELSE NULL END AS D3ISCHECKED, a.STNAMELIST FROM ( SELECT a.PLANYR_ID, NVL(RTRIM(xmlagg (xmlelement (e, (SUBSTR(d.LNAME, 0, 1) || '.' || SUBSTR(d.FNAME, 0, 1) || LOWER(SUBSTR(d.FNAME, 2))) || ', ') ORDER BY ST_ID).extract('//text()'), ', '),'none') STNAMELIST FROM ( SELECT PLANYR_ID FROM ( SELECT a.ID as PLANYR_ID FROM TBL_PLANYR a INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID AND b.ST_ID=" + st_id + " INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID WHERE a.YR=" + yr + " AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1 AND f.BR_ID=9915 GROUP BY a.ID UNION ALL SELECT PLANYR_ID FROM TBL_AGREEMENT_MAIN WHERE ST_ID = " + st_id + " AND YR = " + yr + " ) GROUP BY PLANYR_ID ) a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID = b.ID INNER JOIN TBL_PLANYR_USER c ON b.ID = c.PLANYR_ID INNER JOIN hrdbuser.ST_STAFFS d ON c.ST_ID = d.ID GROUP BY a.PLANYR_ID ) a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID LEFT JOIN TBL_AGREEMENT_MAIN f ON a.PLANYR_ID=f.PLANYR_ID AND f.ST_ID=" + st_id + " LEFT JOIN TBL_AGREEMENT_MAIN_IMPL g ON f.ID=g.AGREEMENT_MAIN_ID AND g.YRHF=1 AND (g.PER1 is not null OR g.IMPL is not null) LEFT JOIN TBL_AGREEMENT_MAIN_IMPL h ON f.ID=h.AGREEMENT_MAIN_ID AND h.YRHF=2 AND (h.PER1 is not null OR h.IMPL is not null) LEFT JOIN TBL_AGREEMENT_MAIN_IMPL i ON f.ID=i.AGREEMENT_MAIN_ID AND (i.PER1 is not null OR i.IMPL is not null) GROUP BY a.PLANYR_ID, d.NO, c.NO, b.NO, b.NAME, REPLACE(NVL(b.BUDGET, 'Жилдээ'),'1,2,3,4,5,6,7,8,9,10,11,12','Сар бүр'), ' class=\"success\"', CASE WHEN f.YRHF1 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,1,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,2,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,3,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,4,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,5,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,6,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF1=1 THEN ' checked=\"checked\"' ELSE null END END, CASE WHEN f.YRHF2 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,7,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,8,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,9,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,10,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,11,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,12,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF2=1 THEN ' checked=\"checked\"' ELSE null END END, CASE WHEN c.IS_LOCAL=1 THEN ' disabled=\"disabled\"' ELSE NVL2(i.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null) END, CASE WHEN c.IS_LOCAL = 1 THEN null WHEN f.ISSPECIAL = 1 THEN null ELSE ' checked=\"checked\"' END, CASE WHEN c.IS_LOCAL = 1 THEN null WHEN f.ISSPECIAL = 1 THEN ' checked=\"checked\"' ELSE null END, CASE WHEN c.IS_LOCAL = 1 THEN ' checked=\"checked\"' ELSE NULL END, a.STNAMELIST ORDER BY d.NO, c.NO, b.NO";
                    else strqry = "SELECT a.PLANYR_ID, d.NO as STRAT_NO, c.NO as ACTION_NO, b.NO as PLANYR_NO, b.NAME as PLANYR_NAME, REPLACE(NVL(b.BUDGET, 'Жилдээ'),'1,2,3,4,5,6,7,8,9,10,11,12','Сар бүр') as HUGATSAA, NVL2(j.PLANYR_ID,' class=\"success\"',null) as ISCHECK, CASE WHEN f.YRHF1 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,1,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,2,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,3,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,4,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,5,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,6,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF1=1 THEN ' checked=\"checked\"' ELSE null END END as YRHF1, CASE WHEN f.YRHF2 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,7,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,8,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,9,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,10,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,11,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,12,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF2=1 THEN ' checked=\"checked\"' ELSE null END END as YRHF2, CASE WHEN c.IS_LOCAL=1 THEN ' disabled=\"disabled\"' ELSE NVL2(i.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null) END as ISIMPLEVAL, CASE WHEN c.IS_LOCAL=1 THEN null WHEN f.ISSPECIAL=1 THEN null WHEN j.PLANYR_ID IS NOT NULL THEN ' checked=\"checked\"' ELSE null END as D1ISCHECKED, CASE WHEN c.IS_LOCAL=1 THEN null WHEN f.ISSPECIAL=1 THEN ' checked=\"checked\"' ELSE null END as D2ISCHECKED, CASE WHEN c.IS_LOCAL=1 THEN ' checked=\"checked\"' ELSE NULL END AS D3ISCHECKED, a.STNAMELIST FROM ( SELECT a.PLANYR_ID, NVL(RTRIM(xmlagg (xmlelement (e, (SUBSTR(d.LNAME, 0, 1) || '.' || SUBSTR(d.FNAME, 0, 1) || LOWER(SUBSTR(d.FNAME, 2))) || ', ') ORDER BY ST_ID).extract('//text()'), ', '),'none') STNAMELIST FROM ( SELECT PLANYR_ID FROM ( SELECT a.ID as PLANYR_ID FROM TBL_PLANYR a INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID WHERE a.YR=" + yr + " AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1 AND f.BR_ID=9915 GROUP BY a.ID UNION ALL SELECT PLANYR_ID FROM TBL_AGREEMENT_MAIN WHERE ST_ID = " + st_id + " AND YR = " + yr + " ) GROUP BY PLANYR_ID ) a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID = b.ID INNER JOIN TBL_PLANYR_USER c ON b.ID = c.PLANYR_ID INNER JOIN hrdbuser.ST_STAFFS d ON c.ST_ID = d.ID GROUP BY a.PLANYR_ID ) a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID LEFT JOIN TBL_AGREEMENT_MAIN f ON a.PLANYR_ID=f.PLANYR_ID AND f.ST_ID=" + st_id + " LEFT JOIN TBL_AGREEMENT_MAIN_IMPL g ON f.ID=g.AGREEMENT_MAIN_ID AND g.YRHF=1 AND (g.PER1 is not null OR g.IMPL is not null) LEFT JOIN TBL_AGREEMENT_MAIN_IMPL h ON f.ID=h.AGREEMENT_MAIN_ID AND h.YRHF=2 AND (h.PER1 is not null OR h.IMPL is not null) LEFT JOIN TBL_AGREEMENT_MAIN_IMPL i ON f.ID=i.AGREEMENT_MAIN_ID AND (i.PER1 is not null OR i.IMPL is not null) LEFT JOIN ( SELECT PLANYR_ID FROM( SELECT a.ID as PLANYR_ID FROM TBL_PLANYR a INNER JOIN TBL_PLANYR_USER b ON a.ID = b.PLANYR_ID AND b.ST_ID=" + st_id + " INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID = c.ID INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID = d.FUNC_ACTION_ID INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID = f.ID WHERE a.YR = " + yr + " AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2 = 1 AND f.BR_ID = (SELECT b.FATHER_ID FROM hrdbuser.ST_STBR a INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID = b.ID WHERE a.ISACTIVE = 1 AND a.STAFFS_ID = " + st_id + ") GROUP BY a.ID UNION ALL SELECT PLANYR_ID FROM TBL_AGREEMENT_MAIN WHERE ST_ID = " + st_id + " AND YR = " + yr + " ) GROUP BY PLANYR_ID ) j ON a.PLANYR_ID = j.PLANYR_ID GROUP BY a.PLANYR_ID, d.NO, c.NO, b.NO, b.NAME, REPLACE(NVL(b.BUDGET, 'Жилдээ'),'1,2,3,4,5,6,7,8,9,10,11,12','Сар бүр'), NVL2(j.PLANYR_ID,' class=\"success\"',null), CASE WHEN f.YRHF1 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,1,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,2,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,3,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,4,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,5,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,6,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF1=1 THEN ' checked=\"checked\"' ELSE null END END, CASE WHEN f.YRHF2 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,7,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,8,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,9,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,10,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,11,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,12,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF2=1 THEN ' checked=\"checked\"' ELSE null END END, CASE WHEN c.IS_LOCAL=1 THEN ' disabled=\"disabled\"' ELSE NVL2(i.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null) END, CASE WHEN c.IS_LOCAL=1 THEN null WHEN f.ISSPECIAL=1 THEN null WHEN j.PLANYR_ID IS NOT NULL THEN ' checked=\"checked\"' ELSE null END, CASE WHEN c.IS_LOCAL = 1 THEN null WHEN f.ISSPECIAL = 1 THEN ' checked=\"checked\"' ELSE null END, CASE WHEN c.IS_LOCAL = 1 THEN ' checked=\"checked\"' ELSE NULL END, a.STNAMELIST ORDER BY d.NO, c.NO, b.NO";
                }
                else if (stposid == "2040202") {
                    //strqry = "SELECT a.PLANYR_ID, d.NO as STRAT_NO, c.NO as ACTION_NO, b.NO as PLANYR_NO, b.NAME as PLANYR_NAME, REPLACE(NVL(b.BUDGET, 'Жилдээ'),'1,2,3,4,5,6,7,8,9,10,11,12','Сар бүр') as HUGATSAA, NVL2(f.PLANYR_ID,' class=\"success\"',null) as ISCHECK, CASE WHEN f.YRHF1=1 THEN ' checked=\"checked\"' ELSE null END as YRHF1, CASE WHEN f.YRHF2=1 THEN ' checked=\"checked\"' ELSE null END as YRHF2, NVL2(g.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null) as YRHF1ISIMPLEVAL, NVL2(h.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null) as YRHF2ISIMPLEVAL, NVL2(i.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null) as ISIMPLEVAL, CASE WHEN f.ISSPECIAL=1 THEN null ELSE CASE WHEN f.PLANYR_ID is not null THEN ' checked=\"checked\"' ELSE null END END as D1ISCHECKED, CASE WHEN f.ISSPECIAL=1 THEN ' checked=\"checked\"' ELSE null END as D2ISCHECKED, a.STNAMELIST FROM ( SELECT a.PLANYR_ID, NVL(RTRIM(xmlagg (xmlelement (e, (SUBSTR(d.LNAME, 0, 1) || '.' || SUBSTR(d.FNAME, 0, 1) || LOWER(SUBSTR(d.FNAME, 2))) || ', ') ORDER BY ST_ID).extract('//text()'), ', '),'none') STNAMELIST FROM ( SELECT PLANYR_ID FROM ( SELECT a.ID as PLANYR_ID FROM TBL_PLANYR a INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID" + isme + " INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID WHERE a.YR=" + yr + " AND a.IS_PLANED=1 AND a.SUBMIT_D2=1 AND f.BR_ID=9915 GROUP BY a.ID UNION ALL SELECT PLANYR_ID FROM TBL_AGREEMENT_MAIN WHERE ST_ID = " + st_id + " AND YR = " + yr + " ) GROUP BY PLANYR_ID ) a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID = b.ID INNER JOIN TBL_PLANYR_USER c ON b.ID = c.PLANYR_ID INNER JOIN hrdbuser.ST_STAFFS d ON c.ST_ID = d.ID GROUP BY a.PLANYR_ID ) a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID LEFT JOIN TBL_AGREEMENT_MAIN f ON a.PLANYR_ID=f.PLANYR_ID AND f.ST_ID=" + st_id + " LEFT JOIN TBL_AGREEMENT_MAIN_IMPL g ON f.ID=g.AGREEMENT_MAIN_ID AND g.YRHF=1 AND (g.PER1 is not null OR g.IMPL is not null) LEFT JOIN TBL_AGREEMENT_MAIN_IMPL h ON f.ID=h.AGREEMENT_MAIN_ID AND h.YRHF=2 AND (h.PER1 is not null OR h.IMPL is not null) LEFT JOIN TBL_AGREEMENT_MAIN_IMPL i ON f.ID=i.AGREEMENT_MAIN_ID AND (i.PER1 is not null OR i.IMPL is not null) GROUP BY a.PLANYR_ID, d.NO, c.NO, b.NO, b.NAME, REPLACE(NVL(b.BUDGET, 'Жилдээ'),'1,2,3,4,5,6,7,8,9,10,11,12','Сар бүр'), NVL2(f.PLANYR_ID,' class=\"success\"',null), CASE WHEN f.YRHF1=1 THEN ' checked=\"checked\"' ELSE null END, CASE WHEN f.YRHF2=1 THEN ' checked=\"checked\"' ELSE null END, NVL2(g.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null), NVL2(h.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null), NVL2(i.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null), CASE WHEN f.ISSPECIAL=1 THEN null ELSE CASE WHEN f.PLANYR_ID is not null THEN ' checked=\"checked\"' ELSE null END END, CASE WHEN f.ISSPECIAL=1 THEN ' checked=\"checked\"' ELSE null END, a.STNAMELIST";
                    if (isme != "") strqry = "SELECT a.PLANYR_ID, d.NO as STRAT_NO, c.NO as ACTION_NO, b.NO as PLANYR_NO, b.NAME as PLANYR_NAME, REPLACE(NVL(b.BUDGET, 'Жилдээ'),'1,2,3,4,5,6,7,8,9,10,11,12','Сар бүр') as HUGATSAA, ' class=\"success\"' as ISCHECK, CASE WHEN f.YRHF1 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,1,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,2,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,3,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,4,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,5,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,6,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF1=1 THEN ' checked=\"checked\"' ELSE null END END as YRHF1, CASE WHEN f.YRHF2 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,7,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,8,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,9,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,10,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,11,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,12,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF2=1 THEN ' checked=\"checked\"' ELSE null END END as YRHF2, CASE WHEN c.IS_LOCAL=1 THEN ' disabled=\"disabled\"' ELSE NVL2(i.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null) END as ISIMPLEVAL, CASE WHEN c.IS_LOCAL=1 THEN null WHEN f.ISSPECIAL=1 THEN null ELSE ' checked=\"checked\"' END as D1ISCHECKED, CASE WHEN c.IS_LOCAL=1 THEN null WHEN f.ISSPECIAL=1 THEN ' checked=\"checked\"' ELSE null END as D2ISCHECKED, CASE WHEN c.IS_LOCAL=1 THEN ' checked=\"checked\"' ELSE NULL END AS D3ISCHECKED, a.STNAMELIST FROM ( SELECT a.PLANYR_ID, NVL(RTRIM(xmlagg (xmlelement (e, (SUBSTR(d.LNAME, 0, 1) || '.' || SUBSTR(d.FNAME, 0, 1) || LOWER(SUBSTR(d.FNAME, 2))) || ', ') ORDER BY ST_ID).extract('//text()'), ', '),'none') STNAMELIST FROM ( SELECT PLANYR_ID FROM ( SELECT a.ID as PLANYR_ID FROM TBL_PLANYR a INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID AND b.ST_ID=" + st_id + " INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID WHERE a.YR=" + yr + " AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1 AND f.BR_ID=9915 GROUP BY a.ID UNION ALL SELECT PLANYR_ID FROM TBL_AGREEMENT_MAIN WHERE ST_ID = " + st_id + " AND YR = " + yr + " ) GROUP BY PLANYR_ID ) a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID = b.ID INNER JOIN TBL_PLANYR_USER c ON b.ID = c.PLANYR_ID INNER JOIN hrdbuser.ST_STAFFS d ON c.ST_ID = d.ID GROUP BY a.PLANYR_ID ) a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID LEFT JOIN TBL_AGREEMENT_MAIN f ON a.PLANYR_ID=f.PLANYR_ID AND f.ST_ID=" + st_id + " LEFT JOIN TBL_AGREEMENT_MAIN_IMPL g ON f.ID=g.AGREEMENT_MAIN_ID AND g.YRHF=1 AND (g.PER1 is not null OR g.IMPL is not null) LEFT JOIN TBL_AGREEMENT_MAIN_IMPL h ON f.ID=h.AGREEMENT_MAIN_ID AND h.YRHF=2 AND (h.PER1 is not null OR h.IMPL is not null) LEFT JOIN TBL_AGREEMENT_MAIN_IMPL i ON f.ID=i.AGREEMENT_MAIN_ID AND (i.PER1 is not null OR i.IMPL is not null) GROUP BY a.PLANYR_ID, d.NO, c.NO, b.NO, b.NAME, REPLACE(NVL(b.BUDGET, 'Жилдээ'),'1,2,3,4,5,6,7,8,9,10,11,12','Сар бүр'), ' class=\"success\"', CASE WHEN f.YRHF1 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,1,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,2,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,3,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,4,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,5,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,6,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF1=1 THEN ' checked=\"checked\"' ELSE null END END, CASE WHEN f.YRHF2 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,7,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,8,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,9,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,10,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,11,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,12,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF2=1 THEN ' checked=\"checked\"' ELSE null END END, CASE WHEN c.IS_LOCAL=1 THEN ' disabled=\"disabled\"' ELSE NVL2(i.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null) END, CASE WHEN c.IS_LOCAL = 1 THEN null WHEN f.ISSPECIAL = 1 THEN null ELSE ' checked=\"checked\"' END, CASE WHEN c.IS_LOCAL = 1 THEN null WHEN f.ISSPECIAL = 1 THEN ' checked=\"checked\"' ELSE null END, CASE WHEN c.IS_LOCAL = 1 THEN ' checked=\"checked\"' ELSE NULL END, a.STNAMELIST ORDER BY d.NO, c.NO, b.NO";
                    else strqry = "SELECT a.PLANYR_ID, d.NO as STRAT_NO, c.NO as ACTION_NO, b.NO as PLANYR_NO, b.NAME as PLANYR_NAME, REPLACE(NVL(b.BUDGET, 'Жилдээ'),'1,2,3,4,5,6,7,8,9,10,11,12','Сар бүр') as HUGATSAA, NVL2(j.PLANYR_ID,' class=\"success\"',null) as ISCHECK, CASE WHEN f.YRHF1 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,1,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,2,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,3,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,4,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,5,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,6,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF1=1 THEN ' checked=\"checked\"' ELSE null END END as YRHF1, CASE WHEN f.YRHF2 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,7,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,8,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,9,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,10,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,11,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,12,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF2=1 THEN ' checked=\"checked\"' ELSE null END END as YRHF2, CASE WHEN c.IS_LOCAL=1 THEN ' disabled=\"disabled\"' ELSE NVL2(i.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null) END as ISIMPLEVAL, CASE WHEN c.IS_LOCAL=1 THEN null WHEN f.ISSPECIAL=1 THEN null WHEN j.PLANYR_ID IS NOT NULL THEN ' checked=\"checked\"' ELSE null END as D1ISCHECKED, CASE WHEN c.IS_LOCAL=1 THEN null WHEN f.ISSPECIAL=1 THEN ' checked=\"checked\"' ELSE null END as D2ISCHECKED, CASE WHEN c.IS_LOCAL=1 THEN ' checked=\"checked\"' ELSE NULL END AS D3ISCHECKED, a.STNAMELIST FROM ( SELECT a.PLANYR_ID, NVL(RTRIM(xmlagg (xmlelement (e, (SUBSTR(d.LNAME, 0, 1) || '.' || SUBSTR(d.FNAME, 0, 1) || LOWER(SUBSTR(d.FNAME, 2))) || ', ') ORDER BY ST_ID).extract('//text()'), ', '),'none') STNAMELIST FROM ( SELECT PLANYR_ID FROM ( SELECT a.ID as PLANYR_ID FROM TBL_PLANYR a INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID WHERE a.YR=" + yr + " AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1 AND f.BR_ID=9915 GROUP BY a.ID UNION ALL SELECT PLANYR_ID FROM TBL_AGREEMENT_MAIN WHERE ST_ID = " + st_id + " AND YR = " + yr + " ) GROUP BY PLANYR_ID ) a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID = b.ID INNER JOIN TBL_PLANYR_USER c ON b.ID = c.PLANYR_ID INNER JOIN hrdbuser.ST_STAFFS d ON c.ST_ID = d.ID GROUP BY a.PLANYR_ID ) a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID LEFT JOIN TBL_AGREEMENT_MAIN f ON a.PLANYR_ID=f.PLANYR_ID AND f.ST_ID=" + st_id + " LEFT JOIN TBL_AGREEMENT_MAIN_IMPL g ON f.ID=g.AGREEMENT_MAIN_ID AND g.YRHF=1 AND (g.PER1 is not null OR g.IMPL is not null) LEFT JOIN TBL_AGREEMENT_MAIN_IMPL h ON f.ID=h.AGREEMENT_MAIN_ID AND h.YRHF=2 AND (h.PER1 is not null OR h.IMPL is not null) LEFT JOIN TBL_AGREEMENT_MAIN_IMPL i ON f.ID=i.AGREEMENT_MAIN_ID AND (i.PER1 is not null OR i.IMPL is not null) LEFT JOIN ( SELECT PLANYR_ID FROM( SELECT a.ID as PLANYR_ID FROM TBL_PLANYR a INNER JOIN TBL_PLANYR_USER b ON a.ID = b.PLANYR_ID AND b.ST_ID=" + st_id + " INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID = c.ID INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID = d.FUNC_ACTION_ID INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID = f.ID WHERE a.YR = " + yr + " AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2 = 1 AND f.BR_ID = (SELECT b.FATHER_ID FROM hrdbuser.ST_STBR a INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID = b.ID WHERE a.ISACTIVE = 1 AND a.STAFFS_ID = " + st_id + ") GROUP BY a.ID UNION ALL SELECT PLANYR_ID FROM TBL_AGREEMENT_MAIN WHERE ST_ID = " + st_id + " AND YR = " + yr + " ) GROUP BY PLANYR_ID ) j ON a.PLANYR_ID = j.PLANYR_ID GROUP BY a.PLANYR_ID, d.NO, c.NO, b.NO, b.NAME, REPLACE(NVL(b.BUDGET, 'Жилдээ'),'1,2,3,4,5,6,7,8,9,10,11,12','Сар бүр'), NVL2(j.PLANYR_ID,' class=\"success\"',null), CASE WHEN f.YRHF1 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,1,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,2,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,3,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,4,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,5,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,6,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF1=1 THEN ' checked=\"checked\"' ELSE null END END, CASE WHEN f.YRHF2 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,7,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,8,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,9,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,10,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,11,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,12,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF2=1 THEN ' checked=\"checked\"' ELSE null END END, CASE WHEN c.IS_LOCAL=1 THEN ' disabled=\"disabled\"' ELSE NVL2(i.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null) END, CASE WHEN c.IS_LOCAL=1 THEN null WHEN f.ISSPECIAL=1 THEN null WHEN j.PLANYR_ID IS NOT NULL THEN ' checked=\"checked\"' ELSE null END, CASE WHEN c.IS_LOCAL = 1 THEN null WHEN f.ISSPECIAL = 1 THEN ' checked=\"checked\"' ELSE null END, CASE WHEN c.IS_LOCAL = 1 THEN ' checked=\"checked\"' ELSE NULL END, a.STNAMELIST ORDER BY d.NO, c.NO, b.NO";
                }
                else {
                    //strqry = "SELECT a.PLANYR_ID, d.NO as STRAT_NO, c.NO as ACTION_NO, b.NO as PLANYR_NO, b.NAME as PLANYR_NAME, REPLACE(NVL(b.BUDGET, 'Жилдээ'),'1,2,3,4,5,6,7,8,9,10,11,12','Сар бүр') as HUGATSAA, NVL2(f.PLANYR_ID,' class=\"success\"',null) as ISCHECK, CASE WHEN f.YRHF1=1 THEN ' checked=\"checked\"' ELSE null END as YRHF1, CASE WHEN f.YRHF2=1 THEN ' checked=\"checked\"' ELSE null END as YRHF2, NVL2(g.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null) as YRHF1ISIMPLEVAL, NVL2(h.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null) as YRHF2ISIMPLEVAL, NVL2(i.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null) as ISIMPLEVAL, CASE WHEN f.ISSPECIAL=1 THEN null ELSE CASE WHEN f.PLANYR_ID is not null THEN ' checked=\"checked\"' ELSE null END END as D1ISCHECKED, CASE WHEN f.ISSPECIAL=1 THEN ' checked=\"checked\"' ELSE null END as D2ISCHECKED, a.STNAMELIST FROM ( SELECT a.PLANYR_ID, NVL(RTRIM(xmlagg (xmlelement (e, (SUBSTR(d.LNAME, 0, 1) || '.' || SUBSTR(d.FNAME, 0, 1) || LOWER(SUBSTR(d.FNAME, 2))) || ', ') ORDER BY ST_ID).extract('//text()'), ', '),'none') STNAMELIST FROM ( SELECT PLANYR_ID FROM ( SELECT a.ID as PLANYR_ID FROM TBL_PLANYR a INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID" + isme + " INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID WHERE a.YR=" + yr + " AND a.IS_PLANED=1 AND a.SUBMIT_D2=1 AND f.BR_ID=(SELECT b.FATHER_ID FROM hrdbuser.ST_STBR a INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID=b.ID WHERE a.ISACTIVE=1 AND a.STAFFS_ID=" + st_id + ") GROUP BY a.ID UNION ALL SELECT PLANYR_ID FROM TBL_AGREEMENT_MAIN WHERE ST_ID = " + st_id + " AND YR = " + yr + " ) GROUP BY PLANYR_ID ) a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID = b.ID INNER JOIN TBL_PLANYR_USER c ON b.ID = c.PLANYR_ID INNER JOIN hrdbuser.ST_STAFFS d ON c.ST_ID = d.ID GROUP BY a.PLANYR_ID ) a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID LEFT JOIN TBL_AGREEMENT_MAIN f ON a.PLANYR_ID=f.PLANYR_ID AND f.ST_ID=" + st_id + " LEFT JOIN TBL_AGREEMENT_MAIN_IMPL g ON f.ID=g.AGREEMENT_MAIN_ID AND g.YRHF=1 AND (g.PER1 is not null OR g.IMPL is not null) LEFT JOIN TBL_AGREEMENT_MAIN_IMPL h ON f.ID=h.AGREEMENT_MAIN_ID AND h.YRHF=2 AND (h.PER1 is not null OR h.IMPL is not null) LEFT JOIN TBL_AGREEMENT_MAIN_IMPL i ON f.ID=i.AGREEMENT_MAIN_ID AND (i.PER1 is not null OR i.IMPL is not null) GROUP BY a.PLANYR_ID, d.NO, c.NO, b.NO, b.NAME, REPLACE(NVL(b.BUDGET, 'Жилдээ'),'1,2,3,4,5,6,7,8,9,10,11,12','Сар бүр'), NVL2(f.PLANYR_ID,' class=\"success\"',null), CASE WHEN f.YRHF1=1 THEN ' checked=\"checked\"' ELSE null END, CASE WHEN f.YRHF2=1 THEN ' checked=\"checked\"' ELSE null END, NVL2(g.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null), NVL2(h.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null), NVL2(i.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null), CASE WHEN f.ISSPECIAL=1 THEN null ELSE CASE WHEN f.PLANYR_ID is not null THEN ' checked=\"checked\"' ELSE null END END, CASE WHEN f.ISSPECIAL=1 THEN ' checked=\"checked\"' ELSE null END, a.STNAMELIST";
                    if (isme != "") strqry = "SELECT a.PLANYR_ID, d.NO as STRAT_NO, c.NO as ACTION_NO, b.NO as PLANYR_NO, b.NAME as PLANYR_NAME, REPLACE(NVL(b.BUDGET, 'Жилдээ'),'1,2,3,4,5,6,7,8,9,10,11,12','Сар бүр') as HUGATSAA, ' class=\"success\"' as ISCHECK, CASE WHEN f.YRHF1 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,1,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,2,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,3,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,4,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,5,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,6,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF1=1 THEN ' checked=\"checked\"' ELSE null END END as YRHF1, CASE WHEN f.YRHF2 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,7,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,8,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,9,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,10,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,11,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,12,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF2=1 THEN ' checked=\"checked\"' ELSE null END END as YRHF2, CASE WHEN c.IS_LOCAL=1 THEN ' disabled=\"disabled\"' ELSE NVL2(i.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null) END as ISIMPLEVAL, CASE WHEN c.IS_LOCAL=1 THEN null WHEN f.ISSPECIAL=1 THEN null ELSE ' checked=\"checked\"' END as D1ISCHECKED, CASE WHEN c.IS_LOCAL=1 THEN null WHEN f.ISSPECIAL=1 THEN ' checked=\"checked\"' ELSE null END as D2ISCHECKED, CASE WHEN c.IS_LOCAL=1 THEN ' checked=\"checked\"' ELSE NULL END AS D3ISCHECKED, a.STNAMELIST FROM ( SELECT a.PLANYR_ID, NVL(RTRIM(xmlagg (xmlelement (e, (SUBSTR(d.LNAME, 0, 1) || '.' || SUBSTR(d.FNAME, 0, 1) || LOWER(SUBSTR(d.FNAME, 2))) || ', ') ORDER BY ST_ID).extract('//text()'), ', '),'none') STNAMELIST FROM ( SELECT PLANYR_ID FROM ( SELECT a.ID as PLANYR_ID FROM TBL_PLANYR a INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID AND b.ST_ID=" + st_id + " INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID WHERE a.YR=" + yr + " AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1 AND f.BR_ID=(SELECT b.FATHER_ID FROM hrdbuser.ST_STBR a INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID=b.ID WHERE a.ISACTIVE=1 AND a.STAFFS_ID=" + st_id + ") GROUP BY a.ID UNION ALL SELECT PLANYR_ID FROM TBL_AGREEMENT_MAIN WHERE ST_ID = " + st_id + " AND YR = " + yr + " ) GROUP BY PLANYR_ID ) a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID = b.ID INNER JOIN TBL_PLANYR_USER c ON b.ID = c.PLANYR_ID INNER JOIN hrdbuser.ST_STAFFS d ON c.ST_ID = d.ID GROUP BY a.PLANYR_ID ) a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID LEFT JOIN TBL_AGREEMENT_MAIN f ON a.PLANYR_ID=f.PLANYR_ID AND f.ST_ID=" + st_id + " LEFT JOIN TBL_AGREEMENT_MAIN_IMPL g ON f.ID=g.AGREEMENT_MAIN_ID AND g.YRHF=1 AND (g.PER1 is not null OR g.IMPL is not null) LEFT JOIN TBL_AGREEMENT_MAIN_IMPL h ON f.ID=h.AGREEMENT_MAIN_ID AND h.YRHF=2 AND (h.PER1 is not null OR h.IMPL is not null) LEFT JOIN TBL_AGREEMENT_MAIN_IMPL i ON f.ID=i.AGREEMENT_MAIN_ID AND (i.PER1 is not null OR i.IMPL is not null) GROUP BY a.PLANYR_ID, d.NO, c.NO, b.NO, b.NAME, REPLACE(NVL(b.BUDGET, 'Жилдээ'),'1,2,3,4,5,6,7,8,9,10,11,12','Сар бүр'), ' class=\"success\"', CASE WHEN f.YRHF1 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,1,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,2,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,3,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,4,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,5,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,6,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF1=1 THEN ' checked=\"checked\"' ELSE null END END, CASE WHEN f.YRHF2 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,7,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,8,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,9,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,10,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,11,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,12,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF2=1 THEN ' checked=\"checked\"' ELSE null END END, CASE WHEN c.IS_LOCAL=1 THEN ' disabled=\"disabled\"' ELSE NVL2(i.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null) END, CASE WHEN c.IS_LOCAL = 1 THEN null WHEN f.ISSPECIAL = 1 THEN null ELSE ' checked=\"checked\"' END, CASE WHEN c.IS_LOCAL = 1 THEN null WHEN f.ISSPECIAL = 1 THEN ' checked=\"checked\"' ELSE null END, CASE WHEN c.IS_LOCAL = 1 THEN ' checked=\"checked\"' ELSE NULL END, a.STNAMELIST ORDER BY d.NO, c.NO, b.NO";
                    else strqry = "SELECT a.PLANYR_ID, d.NO as STRAT_NO, c.NO as ACTION_NO, b.NO as PLANYR_NO, b.NAME as PLANYR_NAME, REPLACE(NVL(b.BUDGET, 'Жилдээ'),'1,2,3,4,5,6,7,8,9,10,11,12','Сар бүр') as HUGATSAA, NVL2(j.PLANYR_ID,' class=\"success\"',null) as ISCHECK, CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,1,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,2,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,3,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,4,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,5,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,6,%' THEN ' checked=\"checked\"' ELSE null END as YRHF1, CASE WHEN f.YRHF2 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,7,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,8,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,9,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,10,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,11,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,12,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF2=1 THEN ' checked=\"checked\"' ELSE null END END as YRHF2, CASE WHEN c.IS_LOCAL=1 THEN ' disabled=\"disabled\"' ELSE NVL2(i.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null) END as ISIMPLEVAL, CASE WHEN c.IS_LOCAL=1 THEN null WHEN f.ISSPECIAL=1 THEN null WHEN j.PLANYR_ID IS NOT NULL THEN ' checked=\"checked\"' ELSE null END as D1ISCHECKED, CASE WHEN c.IS_LOCAL=1 THEN null WHEN f.ISSPECIAL=1 THEN ' checked=\"checked\"' ELSE null END as D2ISCHECKED, CASE WHEN c.IS_LOCAL=1 THEN ' checked=\"checked\"' ELSE NULL END AS D3ISCHECKED, a.STNAMELIST FROM ( SELECT a.PLANYR_ID, NVL(RTRIM(xmlagg (xmlelement (e, (SUBSTR(d.LNAME, 0, 1) || '.' || SUBSTR(d.FNAME, 0, 1) || LOWER(SUBSTR(d.FNAME, 2))) || ', ') ORDER BY ST_ID).extract('//text()'), ', '),'none') STNAMELIST FROM ( SELECT PLANYR_ID FROM ( SELECT a.ID as PLANYR_ID FROM TBL_PLANYR a INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID WHERE a.YR=" + yr + " AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1 AND f.BR_ID=(SELECT b.FATHER_ID FROM hrdbuser.ST_STBR a INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID=b.ID WHERE a.ISACTIVE=1 AND a.STAFFS_ID=" + st_id + ") GROUP BY a.ID UNION ALL SELECT PLANYR_ID FROM TBL_AGREEMENT_MAIN WHERE ST_ID = " + st_id + " AND YR = " + yr + " ) GROUP BY PLANYR_ID ) a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID = b.ID INNER JOIN TBL_PLANYR_USER c ON b.ID = c.PLANYR_ID INNER JOIN hrdbuser.ST_STAFFS d ON c.ST_ID = d.ID GROUP BY a.PLANYR_ID ) a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID LEFT JOIN TBL_AGREEMENT_MAIN f ON a.PLANYR_ID=f.PLANYR_ID AND f.ST_ID=" + st_id + " LEFT JOIN TBL_AGREEMENT_MAIN_IMPL g ON f.ID=g.AGREEMENT_MAIN_ID AND g.YRHF=1 AND (g.PER1 is not null OR g.IMPL is not null) LEFT JOIN TBL_AGREEMENT_MAIN_IMPL h ON f.ID=h.AGREEMENT_MAIN_ID AND h.YRHF=2 AND (h.PER1 is not null OR h.IMPL is not null) LEFT JOIN TBL_AGREEMENT_MAIN_IMPL i ON f.ID=i.AGREEMENT_MAIN_ID AND (i.PER1 is not null OR i.IMPL is not null) LEFT JOIN ( SELECT PLANYR_ID FROM( SELECT a.ID as PLANYR_ID FROM TBL_PLANYR a INNER JOIN TBL_PLANYR_USER b ON a.ID = b.PLANYR_ID AND b.ST_ID="+st_id+" INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID = c.ID INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID = d.FUNC_ACTION_ID INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID = f.ID WHERE a.YR = " + yr+ " AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2 = 1 AND f.BR_ID = (SELECT b.FATHER_ID FROM hrdbuser.ST_STBR a INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID = b.ID WHERE a.ISACTIVE = 1 AND a.STAFFS_ID = " + st_id+") GROUP BY a.ID UNION ALL SELECT PLANYR_ID FROM TBL_AGREEMENT_MAIN WHERE ST_ID = "+st_id+" AND YR = "+yr+ " ) GROUP BY PLANYR_ID ) j ON a.PLANYR_ID = j.PLANYR_ID GROUP BY a.PLANYR_ID, d.NO, c.NO, b.NO, b.NAME, REPLACE(NVL(b.BUDGET, 'Жилдээ'),'1,2,3,4,5,6,7,8,9,10,11,12','Сар бүр'), NVL2(j.PLANYR_ID,' class=\"success\"',null), CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,1,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,2,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,3,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,4,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,5,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,6,%' THEN ' checked=\"checked\"' ELSE null END, CASE WHEN f.YRHF2 IS NULL THEN CASE WHEN b.BUDGET IS NULL THEN ' checked=\"checked\"' WHEN b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,7,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,8,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,9,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,10,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,11,%' THEN ' checked=\"checked\"' WHEN ','||b.BUDGET||',' LIKE '%,12,%' THEN ' checked=\"checked\"' ELSE null END ELSE CASE WHEN f.YRHF2=1 THEN ' checked=\"checked\"' ELSE null END END, CASE WHEN c.IS_LOCAL=1 THEN ' disabled=\"disabled\"' ELSE NVL2(i.AGREEMENT_MAIN_ID,' disabled=\"disabled\"',null) END, CASE WHEN c.IS_LOCAL=1 THEN null WHEN f.ISSPECIAL=1 THEN null WHEN j.PLANYR_ID IS NOT NULL THEN ' checked=\"checked\"' ELSE null END, CASE WHEN c.IS_LOCAL = 1 THEN null WHEN f.ISSPECIAL = 1 THEN ' checked=\"checked\"' ELSE null END, CASE WHEN c.IS_LOCAL = 1 THEN ' checked=\"checked\"' ELSE NULL END, a.STNAMELIST ORDER BY d.NO, c.NO, b.NO";
                }                           
                DataSet ds = myObj.OracleExecuteDataSet(strqry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void AGREEMENT_MAIN_INSUPT(string P_YR, string P_ST_ID, string P_PLANYR_ID, string P_ISSPECIAL, string P_YRHF1, string P_YRHF2)
        {
            GetTableData myObjGetTableData = new GetTableData();
            ModifyDB myObj = new ModifyDB();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[6], ParamValue = new string[6];
                ParamName[0] = "P_YR";
                ParamName[1] = "P_ST_ID";
                ParamName[2] = "P_PLANYR_ID";
                ParamName[3] = "P_ISSPECIAL";
                ParamName[4] = "P_YRHF1";
                ParamName[5] = "P_YRHF2";
                ParamValue[0] = P_YR;
                ParamValue[1] = P_ST_ID;
                ParamValue[2] = P_PLANYR_ID;
                ParamValue[3] = P_ISSPECIAL;
                ParamValue[4] = P_YRHF1;
                ParamValue[5] = P_YRHF2;
                myObj.SP_OracleExecuteNonQuery("AGREEMENT_MAIN_INSUPT", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AgreementTab1t2(string yr, string st_id)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT a.ID, a.D1, a.D2, a.D3, CASE WHEN a.YRHF1=1 THEN '&#x2713;' ELSE null END as YRHF1, CASE WHEN a.YRHF2=1 THEN '&#x2713;' ELSE null END as YRHF2, CASE WHEN g.AGREEMENT_SKILL_ID is not null THEN ' data-disabled=\"disabled\"' ELSE null END as YRHF1ISIMPLEVAL, CASE WHEN h.AGREEMENT_SKILL_ID is not null THEN ' data-disabled=\"disabled\"' ELSE null END as YRHF2ISIMPLEVAL, CASE WHEN i.AGREEMENT_SKILL_ID is not null THEN ' data-disabled=\"disabled\"' ELSE null END as ISIMPLEVAL FROM TBL_AGREEMENT_SKILL a LEFT JOIN TBL_AGREEMENT_SKILL_IMPL g ON a.ID=g.AGREEMENT_SKILL_ID AND g.YRHF=1 AND (g.PER1 is not null OR g.IMPL is not null) LEFT JOIN TBL_AGREEMENT_SKILL_IMPL h ON a.ID=h.AGREEMENT_SKILL_ID AND h.YRHF=2 AND (h.PER1 is not null OR h.IMPL is not null) LEFT JOIN TBL_AGREEMENT_SKILL_IMPL i ON a.ID=i.AGREEMENT_SKILL_ID AND (i.PER1 is not null OR i.IMPL is not null) WHERE a.YR=" + yr + " AND a.ST_ID=" + st_id + " GROUP BY a.ID, a.D1, a.D2, a.D3, CASE WHEN a.YRHF1 = 1 THEN '&#x2713;' ELSE null END, CASE WHEN a.YRHF2 = 1 THEN '&#x2713;' ELSE null END, CASE WHEN g.AGREEMENT_SKILL_ID is not null THEN ' data-disabled=\"disabled\"' ELSE null END, CASE WHEN h.AGREEMENT_SKILL_ID is not null THEN ' data-disabled=\"disabled\"' ELSE null END, CASE WHEN i.AGREEMENT_SKILL_ID is not null THEN ' data-disabled=\"disabled\"' ELSE null END");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AgreementTab1t2Head(string yr, string st_id, string tp)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet(@"SELECT a.ID, a.NAME, NVL(b.AVGPNT,0) as AVGPNT
FROM TBL_SRV_QUESTION a
LEFT JOIN (
  SELECT a.SRV_QUESTION_ID, NVL(ROUND(ROUND(AVG(b.PER), 3) * 0.2, 3), 0) as AVGPNT
  FROM TBL_SRV a
  INNER JOIN TBL_SRV_ANSWER b ON a.SRV_ANSWER_ID = b.ID
  INNER JOIN hrdbuser.ST_STAFFS c ON a.TRGT_ID = c.ID
  INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
  INNER JOIN hrdbuser.ST_BRANCH f ON d.BRANCH_ID = f.ID AND f.ISACTIVE = 1
  INNER JOIN hrdbuser.ST_BRANCH g ON f.FATHER_ID = g.ID AND g.ISACTIVE = 1
  WHERE a.SRV_TYPE_ID = "+tp+" AND a.TRGT_ID="+ st_id + " AND a.YR = "+ (Int32.Parse(yr) - 1).ToString() + @" AND a.YR_HF = 2
  GROUP BY a.SRV_QUESTION_ID
) b ON a.ID=b.SRV_QUESTION_ID
WHERE a.SRV_TYPE_ID="+tp+@" AND a.IS_ACTIVE=1
ORDER BY a.ID");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AgreementTab1t3(string yr, string st_id)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT a.ID, a.NO, a.NAME, CASE WHEN a.YRHF1=1 THEN '&#x2713;' ELSE null END as YRHF1, CASE WHEN a.YRHF2=1 THEN '&#x2713;' ELSE null END as YRHF2, CASE WHEN g.AGREEMENT_OTHER_ID is not null THEN ' data-disabled=\"disabled\"' ELSE null END as YRHF1ISIMPLEVAL, CASE WHEN h.AGREEMENT_OTHER_ID is not null THEN ' data-disabled=\"disabled\"' ELSE null END as YRHF2ISIMPLEVAL, CASE WHEN i.AGREEMENT_OTHER_ID is not null THEN ' data-disabled=\"disabled\"' ELSE null END as ISIMPLEVAL FROM TBL_AGREEMENT_OTHER a LEFT JOIN TBL_AGREEMENT_OTHER_IMPL g ON a.ID=g.AGREEMENT_OTHER_ID AND g.YRHF=1 AND (g.PER1 is not null OR g.IMPL is not null) LEFT JOIN TBL_AGREEMENT_OTHER_IMPL h ON a.ID=h.AGREEMENT_OTHER_ID AND h.YRHF=2 AND (h.PER1 is not null OR h.IMPL is not null) LEFT JOIN TBL_AGREEMENT_OTHER_IMPL i ON a.ID=i.AGREEMENT_OTHER_ID AND (i.PER1 is not null OR i.IMPL is not null) WHERE a.YR=" + yr + " AND a.ST_ID=" + st_id + " GROUP BY a.ID, a.NO, a.NAME, CASE WHEN a.YRHF1=1 THEN '&#x2713;' ELSE null END, CASE WHEN a.YRHF2=1 THEN '&#x2713;' ELSE null END, CASE WHEN g.AGREEMENT_OTHER_ID is not null THEN ' data-disabled=\"disabled\"' ELSE null END, CASE WHEN h.AGREEMENT_OTHER_ID is not null THEN ' data-disabled=\"disabled\"' ELSE null END, CASE WHEN i.AGREEMENT_OTHER_ID is not null THEN ' data-disabled=\"disabled\"' ELSE null END");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AgreementTab2t1(string yr, string yrhf, string st_id)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strQry = "";
            string stposid = "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                stposid = myObj.OracleExecuteScalar("SELECT POS_ID FROM hrdbuser.ST_STBR WHERE ISACTIVE=1 AND STAFFS_ID=" + st_id).ToString();
                if (yrhf == "1")
                {
                    if (stposid == "2010201")
                    {
                        strQry = @"SELECT 
  a.PLANYR_ID, 
  d.NO as STRAT_NO, 
  c.NO as ACTION_NO, 
  b.NO as PLANYR_NO, 
  b.NAME as PLANYR_NAME, 
  REPLACE(NVL(b.BUDGET, 'Жилдээ'),'1,2,3,4,5,6,7,8,9,10,11,12','Сар бүр') as HUGATSAA, 
  CASE WHEN g.PER1 is not null THEN 1 ELSE 0 END as ISPER1, 
  CASE WHEN g.IMPL is not null THEN 1 ELSE 0 END as ISIMPL 
FROM (
  SELECT PLANYR_ID 
  FROM ( 
    SELECT b.PLANYR_ID
    FROM (
      SELECT PLANYR_ID 
      FROM TBL_AGREEMENT_MAIN 
      WHERE ST_ID = " + st_id + " AND YR = " + yr + @"
    ) a
    RIGHT JOIN (
      SELECT a.ID as PLANYR_ID 
      FROM TBL_PLANYR a 
      INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID 
      INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID 
      INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
      INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID 
      WHERE a.YR=" + yr + @" AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1 AND f.BR_ID=(SELECT b.FATHER_ID FROM hrdbuser.ST_STBR a INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID = b.ID WHERE a.ISACTIVE = 1 AND a.STAFFS_ID = " + st_id + @")
        AND (a.BUDGET IS NULL OR a.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||a.BUDGET||',' LIKE '%,1,%' OR ','||a.BUDGET||',' LIKE '%,2,%' OR ','||a.BUDGET||',' LIKE '%,3,%' OR ','||a.BUDGET||',' LIKE '%,4,%' OR ','||a.BUDGET||',' LIKE '%,5,%' OR ','||a.BUDGET||',' LIKE '%,6,%')
      GROUP BY a.ID 
    ) b ON a.PLANYR_ID=b.PLANYR_ID
    WHERE a.PLANYR_ID is null
    UNION ALL 
    SELECT PLANYR_ID 
    FROM TBL_AGREEMENT_MAIN 
    WHERE ST_ID = " + st_id + " AND YR = " + yr + @" AND YRHF1=1
  ) 
  GROUP BY PLANYR_ID 
) a 
INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID 
INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID 
LEFT JOIN TBL_AGREEMENT_MAIN f ON a.PLANYR_ID=f.PLANYR_ID AND f.ST_ID=" + st_id + @" 
LEFT JOIN TBL_AGREEMENT_MAIN_IMPL g ON f.ID=g.AGREEMENT_MAIN_ID AND g.YRHF=" + yrhf + @"
ORDER BY d.NO, c.NO, b.NO";
                    }
                    else if (stposid == "2010301")
                    {
                        strQry = @"SELECT 
  a.PLANYR_ID, 
  d.NO as STRAT_NO, 
  c.NO as ACTION_NO, 
  b.NO as PLANYR_NO, 
  b.NAME as PLANYR_NAME, 
  REPLACE(NVL(b.BUDGET, 'Жилдээ'),'1,2,3,4,5,6,7,8,9,10,11,12','Сар бүр') as HUGATSAA, 
  CASE WHEN g.PER1 is not null THEN 1 ELSE 0 END as ISPER1, 
  CASE WHEN g.IMPL is not null THEN 1 ELSE 0 END as ISIMPL 
FROM (
  SELECT PLANYR_ID 
  FROM ( 
    SELECT b.PLANYR_ID
    FROM (
      SELECT PLANYR_ID 
      FROM TBL_AGREEMENT_MAIN 
      WHERE ST_ID = " + st_id + " AND YR = " + yr + @"
    ) a
    RIGHT JOIN (
      SELECT a.ID as PLANYR_ID 
      FROM TBL_PLANYR a 
      INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID 
      INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID 
      INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
      INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID 
      WHERE a.YR=" + yr + @" AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1 AND d.BR_ID=(SELECT a.BRANCH_ID FROM hrdbuser.ST_STBR a INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID = b.ID WHERE a.ISACTIVE = 1 AND a.STAFFS_ID = " + st_id + @")
        AND (a.BUDGET IS NULL OR a.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||a.BUDGET||',' LIKE '%,1,%' OR ','||a.BUDGET||',' LIKE '%,2,%' OR ','||a.BUDGET||',' LIKE '%,3,%' OR ','||a.BUDGET||',' LIKE '%,4,%' OR ','||a.BUDGET||',' LIKE '%,5,%' OR ','||a.BUDGET||',' LIKE '%,6,%')
      GROUP BY a.ID 
    ) b ON a.PLANYR_ID=b.PLANYR_ID
    WHERE a.PLANYR_ID is null
    UNION ALL 
    SELECT PLANYR_ID 
    FROM TBL_AGREEMENT_MAIN 
    WHERE ST_ID = " + st_id + " AND YR = " + yr + @" AND YRHF1=1
  ) 
  GROUP BY PLANYR_ID 
) a 
INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID 
INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID 
LEFT JOIN TBL_AGREEMENT_MAIN f ON a.PLANYR_ID=f.PLANYR_ID AND f.ST_ID=" + st_id + @" 
LEFT JOIN TBL_AGREEMENT_MAIN_IMPL g ON f.ID=g.AGREEMENT_MAIN_ID AND g.YRHF=" + yrhf + @"
ORDER BY d.NO, c.NO, b.NO";
                    }
                    else
                    {
                        strQry = @"SELECT 
  a.PLANYR_ID, 
  d.NO as STRAT_NO, 
  c.NO as ACTION_NO, 
  b.NO as PLANYR_NO, 
  b.NAME as PLANYR_NAME, 
  REPLACE(NVL(b.BUDGET, 'Жилдээ'),'1,2,3,4,5,6,7,8,9,10,11,12','Сар бүр') as HUGATSAA, 
  CASE WHEN g.PER1 is not null THEN 1 ELSE 0 END as ISPER1, 
  CASE WHEN g.IMPL is not null THEN 1 ELSE 0 END as ISIMPL 
FROM (
  SELECT PLANYR_ID 
  FROM ( 
    SELECT b.PLANYR_ID
    FROM (
      SELECT PLANYR_ID 
      FROM TBL_AGREEMENT_MAIN 
      WHERE ST_ID = " + st_id + " AND YR = " + yr + @"
    ) a
    RIGHT JOIN (
      SELECT a.ID as PLANYR_ID 
      FROM TBL_PLANYR a 
      INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID AND b.ST_ID=" + st_id + @"  
      INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID 
      INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
      INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID 
      WHERE a.YR=" + yr + @" AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1 
        AND (a.BUDGET IS NULL OR a.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||a.BUDGET||',' LIKE '%,1,%' OR ','||a.BUDGET||',' LIKE '%,2,%' OR ','||a.BUDGET||',' LIKE '%,3,%' OR ','||a.BUDGET||',' LIKE '%,4,%' OR ','||a.BUDGET||',' LIKE '%,5,%' OR ','||a.BUDGET||',' LIKE '%,6,%')
      GROUP BY a.ID 
    ) b ON a.PLANYR_ID=b.PLANYR_ID
    WHERE a.PLANYR_ID is null
    UNION ALL 
    SELECT PLANYR_ID 
    FROM TBL_AGREEMENT_MAIN 
    WHERE ST_ID = " + st_id + " AND YR = " + yr + @" AND YRHF1=1
  ) 
  GROUP BY PLANYR_ID 
) a 
INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID 
INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID 
LEFT JOIN TBL_AGREEMENT_MAIN f ON a.PLANYR_ID=f.PLANYR_ID AND f.ST_ID=" + st_id + @" 
LEFT JOIN TBL_AGREEMENT_MAIN_IMPL g ON f.ID=g.AGREEMENT_MAIN_ID AND g.YRHF=" + yrhf + @"
ORDER BY d.NO, c.NO, b.NO";
                    }
                    
                }
                //yrhf 2
                else {
                    if (stposid == "2010201")
                    {
                        strQry = @"SELECT 
  a.PLANYR_ID, 
  d.NO as STRAT_NO, 
  c.NO as ACTION_NO, 
  b.NO as PLANYR_NO, 
  b.NAME as PLANYR_NAME, 
  REPLACE(NVL(b.BUDGET, 'Жилдээ'),'1,2,3,4,5,6,7,8,9,10,11,12','Сар бүр') as HUGATSAA, 
  CASE WHEN g.PER1 is not null THEN 1 ELSE 0 END as ISPER1, 
  CASE WHEN g.IMPL is not null THEN 1 ELSE 0 END as ISIMPL 
FROM (
  SELECT PLANYR_ID 
  FROM ( 
    SELECT b.PLANYR_ID
    FROM (
      SELECT PLANYR_ID 
      FROM TBL_AGREEMENT_MAIN 
      WHERE ST_ID = " + st_id + " AND YR = " + yr + @"
    ) a
    RIGHT JOIN (
      SELECT a.ID as PLANYR_ID 
      FROM TBL_PLANYR a 
      INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID  
      INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID 
      INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
      INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID 
      WHERE a.YR=" + yr + @" AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1 AND f.BR_ID=(SELECT b.FATHER_ID FROM hrdbuser.ST_STBR a INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID = b.ID WHERE a.ISACTIVE = 1 AND a.STAFFS_ID = " + st_id + @")
        AND (a.BUDGET IS NULL OR a.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||a.BUDGET||',' LIKE '%,1,%' OR ','||a.BUDGET||',' LIKE '%,2,%' OR ','||a.BUDGET||',' LIKE '%,3,%' OR ','||a.BUDGET||',' LIKE '%,4,%' OR ','||a.BUDGET||',' LIKE '%,5,%' OR ','||a.BUDGET||',' LIKE '%,6,%' OR ','||a.BUDGET||',' LIKE '%,7,%' OR ','||a.BUDGET||',' LIKE '%,8,%' OR ','||a.BUDGET||',' LIKE '%,9,%' OR ','||a.BUDGET||',' LIKE '%,10,%' OR ','||a.BUDGET||',' LIKE '%,11,%' OR ','||a.BUDGET||',' LIKE '%,12,%')
      GROUP BY a.ID 
    ) b ON a.PLANYR_ID=b.PLANYR_ID
    WHERE a.PLANYR_ID is null
    UNION ALL 
    SELECT PLANYR_ID 
    FROM TBL_AGREEMENT_MAIN 
    WHERE ST_ID = " + st_id + " AND YR = " + yr + @" AND (YRHF1=1 OR YRHF2=1)
  ) 
  GROUP BY PLANYR_ID 
) a 
INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID 
INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID 
LEFT JOIN TBL_AGREEMENT_MAIN f ON a.PLANYR_ID=f.PLANYR_ID AND f.ST_ID=" + st_id + @" 
LEFT JOIN TBL_AGREEMENT_MAIN_IMPL g ON f.ID=g.AGREEMENT_MAIN_ID AND g.YRHF=" + yrhf + @"
ORDER BY d.NO, c.NO, b.NO";
                    }
                    else if (stposid == "2010301")
                    {
                        strQry = @"SELECT 
  a.PLANYR_ID, 
  d.NO as STRAT_NO, 
  c.NO as ACTION_NO, 
  b.NO as PLANYR_NO, 
  b.NAME as PLANYR_NAME, 
  REPLACE(NVL(b.BUDGET, 'Жилдээ'),'1,2,3,4,5,6,7,8,9,10,11,12','Сар бүр') as HUGATSAA, 
  CASE WHEN g.PER1 is not null THEN 1 ELSE 0 END as ISPER1, 
  CASE WHEN g.IMPL is not null THEN 1 ELSE 0 END as ISIMPL 
FROM (
  SELECT PLANYR_ID 
  FROM ( 
    SELECT b.PLANYR_ID
    FROM (
      SELECT PLANYR_ID 
      FROM TBL_AGREEMENT_MAIN 
      WHERE ST_ID = " + st_id + " AND YR = " + yr + @"
    ) a
    RIGHT JOIN (
      SELECT a.ID as PLANYR_ID 
      FROM TBL_PLANYR a 
      INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID  
      INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID 
      INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
      INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID 
      WHERE a.YR=" + yr + @" AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1 AND d.BR_ID=(SELECT a.BRANCH_ID FROM hrdbuser.ST_STBR a INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID = b.ID WHERE a.ISACTIVE = 1 AND a.STAFFS_ID = " + st_id + @")
        AND (a.BUDGET IS NULL OR a.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||a.BUDGET||',' LIKE '%,1,%' OR ','||a.BUDGET||',' LIKE '%,2,%' OR ','||a.BUDGET||',' LIKE '%,3,%' OR ','||a.BUDGET||',' LIKE '%,4,%' OR ','||a.BUDGET||',' LIKE '%,5,%' OR ','||a.BUDGET||',' LIKE '%,6,%' OR ','||a.BUDGET||',' LIKE '%,7,%' OR ','||a.BUDGET||',' LIKE '%,8,%' OR ','||a.BUDGET||',' LIKE '%,9,%' OR ','||a.BUDGET||',' LIKE '%,10,%' OR ','||a.BUDGET||',' LIKE '%,11,%' OR ','||a.BUDGET||',' LIKE '%,12,%')
      GROUP BY a.ID 
    ) b ON a.PLANYR_ID=b.PLANYR_ID
    WHERE a.PLANYR_ID is null
    UNION ALL 
    SELECT PLANYR_ID 
    FROM TBL_AGREEMENT_MAIN 
    WHERE ST_ID = " + st_id + " AND YR = " + yr + @" AND (YRHF1=1 OR YRHF2=1)
  ) 
  GROUP BY PLANYR_ID 
) a 
INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID 
INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID 
LEFT JOIN TBL_AGREEMENT_MAIN f ON a.PLANYR_ID=f.PLANYR_ID AND f.ST_ID=" + st_id + @" 
LEFT JOIN TBL_AGREEMENT_MAIN_IMPL g ON f.ID=g.AGREEMENT_MAIN_ID AND g.YRHF=" + yrhf + @"
ORDER BY d.NO, c.NO, b.NO";
                    }
                    else
                    {
                        strQry = @"SELECT 
  a.PLANYR_ID, 
  d.NO as STRAT_NO, 
  c.NO as ACTION_NO, 
  b.NO as PLANYR_NO, 
  b.NAME as PLANYR_NAME, 
  REPLACE(NVL(b.BUDGET, 'Жилдээ'),'1,2,3,4,5,6,7,8,9,10,11,12','Сар бүр') as HUGATSAA, 
  CASE WHEN g.PER1 is not null THEN 1 ELSE 0 END as ISPER1, 
  CASE WHEN g.IMPL is not null THEN 1 ELSE 0 END as ISIMPL 
FROM (
  SELECT PLANYR_ID 
  FROM ( 
    SELECT b.PLANYR_ID
    FROM (
      SELECT PLANYR_ID 
      FROM TBL_AGREEMENT_MAIN 
      WHERE ST_ID = " + st_id + " AND YR = " + yr + @"
    ) a
    RIGHT JOIN (
      SELECT a.ID as PLANYR_ID 
      FROM TBL_PLANYR a 
      INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID AND b.ST_ID=" + st_id + @"  
      INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID 
      INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
      INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID 
      WHERE a.YR=" + yr + @" AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1 
        AND (a.BUDGET IS NULL OR a.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||a.BUDGET||',' LIKE '%,1,%' OR ','||a.BUDGET||',' LIKE '%,2,%' OR ','||a.BUDGET||',' LIKE '%,3,%' OR ','||a.BUDGET||',' LIKE '%,4,%' OR ','||a.BUDGET||',' LIKE '%,5,%' OR ','||a.BUDGET||',' LIKE '%,6,%' OR ','||a.BUDGET||',' LIKE '%,7,%' OR ','||a.BUDGET||',' LIKE '%,8,%' OR ','||a.BUDGET||',' LIKE '%,9,%' OR ','||a.BUDGET||',' LIKE '%,10,%' OR ','||a.BUDGET||',' LIKE '%,11,%' OR ','||a.BUDGET||',' LIKE '%,12,%')
      GROUP BY a.ID 
    ) b ON a.PLANYR_ID=b.PLANYR_ID
    WHERE a.PLANYR_ID is null
    UNION ALL 
    SELECT PLANYR_ID 
    FROM TBL_AGREEMENT_MAIN 
    WHERE ST_ID = " + st_id + " AND YR = " + yr + @" AND (YRHF1=1 OR YRHF2=1)
  ) 
  GROUP BY PLANYR_ID 
) a 
INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID 
INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID 
LEFT JOIN TBL_AGREEMENT_MAIN f ON a.PLANYR_ID=f.PLANYR_ID AND f.ST_ID=" + st_id + @" 
LEFT JOIN TBL_AGREEMENT_MAIN_IMPL g ON f.ID=g.AGREEMENT_MAIN_ID AND g.YRHF=" + yrhf + @"
ORDER BY d.NO, c.NO, b.NO";
                    }



                        
                }
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AgreementTab2t1PlanmImpl(string planyrid)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT a.MNTH, a.IMPL_DATA FROM TBL_PLAN_IMPL a INNER JOIN TBL_PLANMNTH b ON a.PLAN_ID=b.ID WHERE a.TP='month' AND b.PLANYR_ID=" + planyrid + " ORDER BY a.MNTH");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AgreementTab2t2(string yr, string yrhf, string st_id)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strQry = "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                strQry = "SELECT a.ID, a.D1, a.D2, a.D3, CASE WHEN b.PER1 is not null THEN 1 ELSE CASE WHEN b.IMPL is not null THEN 1 ELSE 0 END END as ISIMPL FROM TBL_AGREEMENT_SKILL a LEFT JOIN TBL_AGREEMENT_SKILL_IMPL b ON a.ID=b.AGREEMENT_SKILL_ID AND b.YRHF=" + yrhf + " WHERE a.YR=" + yr + " AND a.YRHF" + yrhf + "=1 AND a.ST_ID=" + st_id + " ORDER BY a.ID";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AgreementTab2t2Head(string yr, string yrhf, string st_id, string tp)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet(@"SELECT a.ID, a.NAME, NVL(b.AVGPNT,0) as AVGPNT
FROM TBL_SRV_QUESTION a
LEFT JOIN (
  SELECT a.SRV_QUESTION_ID, NVL(ROUND(ROUND(AVG(b.PER), 3) * 0.2, 3), 0) as AVGPNT
  FROM TBL_SRV a
  INNER JOIN TBL_SRV_ANSWER b ON a.SRV_ANSWER_ID = b.ID
  INNER JOIN hrdbuser.ST_STAFFS c ON a.TRGT_ID = c.ID
  INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
  INNER JOIN hrdbuser.ST_BRANCH f ON d.BRANCH_ID = f.ID AND f.ISACTIVE = 1
  INNER JOIN hrdbuser.ST_BRANCH g ON f.FATHER_ID = g.ID AND g.ISACTIVE = 1
  WHERE a.SRV_TYPE_ID = " + tp + " AND a.TRGT_ID=" + st_id + " AND a.YR = " + (Int32.Parse(yr) - 1).ToString() + @" AND a.YR_HF = 2
  GROUP BY a.SRV_QUESTION_ID
) b ON a.ID=b.SRV_QUESTION_ID
WHERE a.SRV_TYPE_ID=" + tp + @" AND a.IS_ACTIVE=1
ORDER BY a.ID");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AgreementTab2t3(string yr, string yrhf, string st_id)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = "SELECT a.ID, a.NO, a.NAME, CASE WHEN b.PER1 is not null THEN 1 ELSE CASE WHEN b.IMPL is not null THEN 1 ELSE 0 END END as ISIMPL FROM TBL_AGREEMENT_OTHER a LEFT JOIN TBL_AGREEMENT_OTHER_IMPL b ON a.ID=b.AGREEMENT_OTHER_ID AND b.YRHF=" + yrhf + " WHERE a.YR=" + yr + " AND a.YRHF" + yrhf + "=1 AND a.ST_ID=" + st_id + " ORDER BY a.NO";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AgreementTab3t1(string yr, string yrhf, string st_id)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strQry = "";
            string stposid = "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                stposid = myObj.OracleExecuteScalar("SELECT POS_ID FROM hrdbuser.ST_STBR WHERE ISACTIVE=1 AND STAFFS_ID=" + st_id).ToString();
                if (yrhf == "1")
                {
                    if (stposid == "2010201")
                    {
                        strQry = "SELECT a.*, CASE WHEN a.PER < 11 THEN 'bg-color-red' WHEN a.PER > 10 AND a.PER < 31 THEN 'bg-color-orange' WHEN a.PER>30 THEN 'bg-color-greenLight' END as PERCOLOR FROM ( SELECT a.ID, a.PLANYR_ID, d.NO as STRAT_NO, c.NO as ACTION_NO, b.NO as PLANYR_NO, b.NAME as PLANYR_NAME, b.CRITERIA, b.CNT, b.QUALITY, a.MNTHLIST, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.ISSPECIAL, CASE WHEN a.ISCANCEL = 1 THEN ' checked=\"checked\"' ELSE null END as ISCANCEL, CASE WHEN c.IS_LOCAL=1 THEN ROUND(NVL(a.PER, 0) * 0.3, 0) WHEN a.ISSPECIAL=1 THEN ROUND(NVL(a.PER, 0) * 0.4, 0) ELSE ROUND(NVL(a.PER, 0) * 0.3, 0) END as PER, NVL2(a.PER1,1,0) as ISPER1, NVL(a.PER1,0) as PER1, c.IS_LOCAL ";
                        strQry += @"FROM(
    SELECT a.ID, a.PLANYR_ID, a.ISSPECIAL, a.ISCANCEL, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, ROUND(NVL(AVG(b.EVAL), 0), 1) as PER, a.PER1, NVL(RTRIM(xmlagg(xmlelement(e, b.INTERVAL || ',') ORDER BY b.INTERVAL).extract('//text()'), ','), '-') MNTHLIST
    FROM(
      SELECT b.ID, a.PLANYR_ID, b.ISSPECIAL, b.ISCANCEL, c.IMPL, c.IMPL1, c.IMPL2, c.IMPL3, c.IMPL4, c.IMPL5, c.PER1
      FROM(
        SELECT PLANYR_ID
        FROM(
          SELECT b.PLANYR_ID
            FROM (
                SELECT PLANYR_ID 
                FROM TBL_AGREEMENT_MAIN 
                WHERE ST_ID = " + st_id + " AND YR = " + yr + @"
            ) a
            RIGHT JOIN (
                SELECT a.ID as PLANYR_ID 
                FROM TBL_PLANYR a 
                INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID 
                INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID 
                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID 
                WHERE a.YR=" + yr + @" AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1 AND f.BR_ID=(SELECT b.FATHER_ID FROM hrdbuser.ST_STBR a INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID = b.ID WHERE a.ISACTIVE = 1 AND a.STAFFS_ID = " + st_id + @")
                AND (a.BUDGET IS NULL OR a.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||a.BUDGET||',' LIKE '%,1,%' OR ','||a.BUDGET||',' LIKE '%,2,%' OR ','||a.BUDGET||',' LIKE '%,3,%' OR ','||a.BUDGET||',' LIKE '%,4,%' OR ','||a.BUDGET||',' LIKE '%,5,%' OR ','||a.BUDGET||',' LIKE '%,6,%')
                GROUP BY a.ID 
            ) b ON a.PLANYR_ID=b.PLANYR_ID
            WHERE a.PLANYR_ID is null
          UNION ALL
          SELECT PLANYR_ID
          FROM TBL_AGREEMENT_MAIN
          WHERE ST_ID = " + st_id + @" AND YR = " + yr + @" AND YRHF" + yrhf + @" = 1
        )
        GROUP BY PLANYR_ID
      ) a
      LEFT JOIN TBL_AGREEMENT_MAIN b ON a.PLANYR_ID = b.PLANYR_ID AND b.YR = " + yr + @" AND b.ST_ID = " + st_id + @"
      LEFT JOIN TBL_AGREEMENT_MAIN_IMPL c ON b.ID = c.AGREEMENT_MAIN_ID AND c.YRHF = " + yrhf + @"
    ) a
    LEFT JOIN TBL_PLANYR_EVAL b ON a.PLANYR_ID = b.PLANYR_ID AND b.TP = 'month'
    GROUP BY a.ID, a.PLANYR_ID, a.ISSPECIAL, a.ISCANCEL, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.PER1
  ) a
  INNER JOIN TBL_PLANYR b ON a.PLANYR_ID = b.ID
  INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID = c.ID
  INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID = d.ID
  ORDER BY a.ISSPECIAL, d.NO, c.NO, b.NO
) a";
                    }
                    else if (stposid == "2010301")
                    {
                        strQry = "SELECT a.*, CASE WHEN a.PER < 11 THEN 'bg-color-red' WHEN a.PER > 10 AND a.PER < 31 THEN 'bg-color-orange' WHEN a.PER>30 THEN 'bg-color-greenLight' END as PERCOLOR FROM ( SELECT a.ID, a.PLANYR_ID, d.NO as STRAT_NO, c.NO as ACTION_NO, b.NO as PLANYR_NO, b.NAME as PLANYR_NAME, b.CRITERIA, b.CNT, b.QUALITY, a.MNTHLIST, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.ISSPECIAL, CASE WHEN a.ISCANCEL = 1 THEN ' checked=\"checked\"' ELSE null END as ISCANCEL, CASE WHEN c.IS_LOCAL=1 THEN ROUND(NVL(a.PER, 0) * 0.3, 0) WHEN a.ISSPECIAL=1 THEN ROUND(NVL(a.PER, 0) * 0.4, 0) ELSE ROUND(NVL(a.PER, 0) * 0.3, 0) END as PER, NVL2(a.PER1,1,0) as ISPER1, NVL(a.PER1,0) as PER1, c.IS_LOCAL ";
                        strQry += @"FROM(
    SELECT a.ID, a.PLANYR_ID, a.ISSPECIAL, a.ISCANCEL, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, ROUND(NVL(AVG(b.EVAL), 0), 1) as PER, a.PER1, NVL(RTRIM(xmlagg(xmlelement(e, b.INTERVAL || ',') ORDER BY b.INTERVAL).extract('//text()'), ','), '-') MNTHLIST
    FROM(
      SELECT b.ID, a.PLANYR_ID, b.ISSPECIAL, b.ISCANCEL, c.IMPL, c.IMPL1, c.IMPL2, c.IMPL3, c.IMPL4, c.IMPL5, c.PER1
      FROM(
        SELECT PLANYR_ID
        FROM(
          SELECT b.PLANYR_ID
            FROM (
                SELECT PLANYR_ID 
                FROM TBL_AGREEMENT_MAIN 
                WHERE ST_ID = " + st_id + " AND YR = " + yr + @"
            ) a
            RIGHT JOIN (
                SELECT a.ID as PLANYR_ID 
                FROM TBL_PLANYR a 
                INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID 
                INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID 
                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID 
                WHERE a.YR=" + yr + @" AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1 AND d.BR_ID=(SELECT a.BRANCH_ID FROM hrdbuser.ST_STBR a INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID = b.ID WHERE a.ISACTIVE = 1 AND a.STAFFS_ID = " + st_id + @")
                AND (a.BUDGET IS NULL OR a.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||a.BUDGET||',' LIKE '%,1,%' OR ','||a.BUDGET||',' LIKE '%,2,%' OR ','||a.BUDGET||',' LIKE '%,3,%' OR ','||a.BUDGET||',' LIKE '%,4,%' OR ','||a.BUDGET||',' LIKE '%,5,%' OR ','||a.BUDGET||',' LIKE '%,6,%')
                GROUP BY a.ID 
            ) b ON a.PLANYR_ID=b.PLANYR_ID
            WHERE a.PLANYR_ID is null
          UNION ALL
          SELECT PLANYR_ID
          FROM TBL_AGREEMENT_MAIN
          WHERE ST_ID = " + st_id + @" AND YR = " + yr + @" AND YRHF" + yrhf + @" = 1
        )
        GROUP BY PLANYR_ID
      ) a
      LEFT JOIN TBL_AGREEMENT_MAIN b ON a.PLANYR_ID = b.PLANYR_ID AND b.YR = " + yr + @" AND b.ST_ID = " + st_id + @"
      LEFT JOIN TBL_AGREEMENT_MAIN_IMPL c ON b.ID = c.AGREEMENT_MAIN_ID AND c.YRHF = " + yrhf + @"
    ) a
    LEFT JOIN TBL_PLANYR_EVAL b ON a.PLANYR_ID = b.PLANYR_ID AND b.TP = 'month'
    GROUP BY a.ID, a.PLANYR_ID, a.ISSPECIAL, a.ISCANCEL, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.PER1
  ) a
  INNER JOIN TBL_PLANYR b ON a.PLANYR_ID = b.ID
  INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID = c.ID
  INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID = d.ID
  ORDER BY a.ISSPECIAL, d.NO, c.NO, b.NO
) a";
                    }
                    else
                    {
                        strQry = "SELECT a.*, CASE WHEN a.PER < 11 THEN 'bg-color-red' WHEN a.PER > 10 AND a.PER < 31 THEN 'bg-color-orange' WHEN a.PER>30 THEN 'bg-color-greenLight' END as PERCOLOR FROM ( SELECT a.ID, a.PLANYR_ID, d.NO as STRAT_NO, c.NO as ACTION_NO, b.NO as PLANYR_NO, b.NAME as PLANYR_NAME, b.CRITERIA, b.CNT, b.QUALITY, a.MNTHLIST, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.ISSPECIAL, CASE WHEN a.ISCANCEL = 1 THEN ' checked=\"checked\"' ELSE null END as ISCANCEL, CASE WHEN c.IS_LOCAL=1 THEN ROUND(NVL(a.PER, 0) * 0.3, 0) WHEN a.ISSPECIAL=1 THEN ROUND(NVL(a.PER, 0) * 0.4, 0) ELSE ROUND(NVL(a.PER, 0) * 0.3, 0) END as PER, NVL2(a.PER1,1,0) as ISPER1, NVL(a.PER1,0) as PER1, c.IS_LOCAL ";
                        strQry += @"FROM(
    SELECT a.ID, a.PLANYR_ID, a.ISSPECIAL, a.ISCANCEL, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, ROUND(NVL(AVG(b.EVAL), 0), 1) as PER, a.PER1, NVL(RTRIM(xmlagg(xmlelement(e, b.INTERVAL || ',') ORDER BY b.INTERVAL).extract('//text()'), ','), '-') MNTHLIST
    FROM(
      SELECT b.ID, a.PLANYR_ID, b.ISSPECIAL, b.ISCANCEL, c.IMPL, c.IMPL1, c.IMPL2, c.IMPL3, c.IMPL4, c.IMPL5, c.PER1
      FROM(
        SELECT PLANYR_ID
        FROM(
          SELECT b.PLANYR_ID
            FROM (
                SELECT PLANYR_ID 
                FROM TBL_AGREEMENT_MAIN 
                WHERE ST_ID = " + st_id + " AND YR = " + yr + @"
            ) a
            RIGHT JOIN (
                SELECT a.ID as PLANYR_ID 
                FROM TBL_PLANYR a 
                INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID AND b.ST_ID=" + st_id + @"  
                INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID 
                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID 
                WHERE a.YR=" + yr + @" AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1 
                AND (a.BUDGET IS NULL OR a.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||a.BUDGET||',' LIKE '%,1,%' OR ','||a.BUDGET||',' LIKE '%,2,%' OR ','||a.BUDGET||',' LIKE '%,3,%' OR ','||a.BUDGET||',' LIKE '%,4,%' OR ','||a.BUDGET||',' LIKE '%,5,%' OR ','||a.BUDGET||',' LIKE '%,6,%')
                GROUP BY a.ID 
            ) b ON a.PLANYR_ID=b.PLANYR_ID
            WHERE a.PLANYR_ID is null
          UNION ALL
          SELECT PLANYR_ID
          FROM TBL_AGREEMENT_MAIN
          WHERE ST_ID = " + st_id + @" AND YR = " + yr + @" AND YRHF" + yrhf + @" = 1
        )
        GROUP BY PLANYR_ID
      ) a
      LEFT JOIN TBL_AGREEMENT_MAIN b ON a.PLANYR_ID = b.PLANYR_ID AND b.YR = " + yr + @" AND b.ST_ID = " + st_id + @"
      LEFT JOIN TBL_AGREEMENT_MAIN_IMPL c ON b.ID = c.AGREEMENT_MAIN_ID AND c.YRHF = " + yrhf + @"
    ) a
    LEFT JOIN TBL_PLANYR_EVAL b ON a.PLANYR_ID = b.PLANYR_ID AND b.TP = 'month'
    GROUP BY a.ID, a.PLANYR_ID, a.ISSPECIAL, a.ISCANCEL, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.PER1
  ) a
  INNER JOIN TBL_PLANYR b ON a.PLANYR_ID = b.ID
  INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID = c.ID
  INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID = d.ID
  ORDER BY a.ISSPECIAL, d.NO, c.NO, b.NO
) a";
                    }
                                        
                }
                else {
                    if (stposid == "2010201")
                    {
                        strQry = "SELECT a.*, CASE WHEN a.PER < 11 THEN 'bg-color-red' WHEN a.PER > 10 AND a.PER < 31 THEN 'bg-color-orange' WHEN a.PER>30 THEN 'bg-color-greenLight' END as PERCOLOR FROM ( SELECT a.ID, a.PLANYR_ID, d.NO as STRAT_NO, c.NO as ACTION_NO, b.NO as PLANYR_NO, b.NAME as PLANYR_NAME, b.CRITERIA, b.CNT, b.QUALITY, a.MNTHLIST, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.ISSPECIAL, CASE WHEN a.ISCANCEL = 1 THEN ' checked=\"checked\"' ELSE null END as ISCANCEL, CASE WHEN a.ISSPECIAL=0 THEN ROUND(NVL(a.PER,0)*0.3,0) ELSE ROUND(NVL(a.PER,0)*0.4,0) END as PER, NVL2(a.PER1,1,0) as ISPER1, NVL(a.PER1,0) as PER1, c.IS_LOCAL ";
                        strQry += @"FROM(
    SELECT a.ID, a.PLANYR_ID, a.ISSPECIAL, a.ISCANCEL, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, ROUND(NVL(AVG(b.EVAL), 0), 1) as PER, a.PER1, NVL(RTRIM(xmlagg(xmlelement(e, b.INTERVAL || ',') ORDER BY b.INTERVAL).extract('//text()'), ','), '-') MNTHLIST
    FROM(
      SELECT b.ID, a.PLANYR_ID, b.ISSPECIAL, b.ISCANCEL, c.IMPL, c.IMPL1, c.IMPL2, c.IMPL3, c.IMPL4, c.IMPL5, c.PER1
      FROM(
        SELECT PLANYR_ID
        FROM(
          SELECT b.PLANYR_ID
        FROM (
          SELECT PLANYR_ID 
          FROM TBL_AGREEMENT_MAIN 
          WHERE ST_ID = " + st_id + " AND YR = " + yr + @"
        ) a
        RIGHT JOIN (
          SELECT a.ID as PLANYR_ID 
          FROM TBL_PLANYR a 
          INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID 
          INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID 
          INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
          INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID 
          WHERE a.YR=" + yr + @" AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1 AND f.BR_ID=(SELECT b.FATHER_ID FROM hrdbuser.ST_STBR a INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID = b.ID WHERE a.ISACTIVE = 1 AND a.STAFFS_ID = " + st_id + @")
            AND (a.BUDGET IS NULL OR a.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||a.BUDGET||',' LIKE '%,1,%' OR ','||a.BUDGET||',' LIKE '%,2,%' OR ','||a.BUDGET||',' LIKE '%,3,%' OR ','||a.BUDGET||',' LIKE '%,4,%' OR ','||a.BUDGET||',' LIKE '%,5,%' OR ','||a.BUDGET||',' LIKE '%,6,%' OR ','||a.BUDGET||',' LIKE '%,7,%' OR ','||a.BUDGET||',' LIKE '%,8,%' OR ','||a.BUDGET||',' LIKE '%,9,%' OR ','||a.BUDGET||',' LIKE '%,10,%' OR ','||a.BUDGET||',' LIKE '%,11,%' OR ','||a.BUDGET||',' LIKE '%,12,%')
          GROUP BY a.ID 
        ) b ON a.PLANYR_ID=b.PLANYR_ID
        WHERE a.PLANYR_ID is null
          UNION ALL
          SELECT PLANYR_ID
          FROM TBL_AGREEMENT_MAIN
          WHERE ST_ID = " + st_id + @" AND YR = " + yr + @" AND (YRHF1=1 OR YRHF2=1)
        )
        GROUP BY PLANYR_ID
      ) a
      LEFT JOIN TBL_AGREEMENT_MAIN b ON a.PLANYR_ID = b.PLANYR_ID AND b.YR = " + yr + @" AND b.ST_ID = " + st_id + @"
      LEFT JOIN TBL_AGREEMENT_MAIN_IMPL c ON b.ID = c.AGREEMENT_MAIN_ID AND c.YRHF = " + yrhf + @"
    ) a
    LEFT JOIN TBL_PLANYR_EVAL b ON a.PLANYR_ID = b.PLANYR_ID AND b.TP = 'month'
    GROUP BY a.ID, a.PLANYR_ID, a.ISSPECIAL, a.ISCANCEL, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.PER1
  ) a
  INNER JOIN TBL_PLANYR b ON a.PLANYR_ID = b.ID
  INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID = c.ID
  INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID = d.ID
  ORDER BY a.ISSPECIAL, d.NO, c.NO, b.NO
) a";
                    }
                    else if (stposid == "2010301")
                    {
                        strQry = "SELECT a.*, CASE WHEN a.PER < 11 THEN 'bg-color-red' WHEN a.PER > 10 AND a.PER < 31 THEN 'bg-color-orange' WHEN a.PER>30 THEN 'bg-color-greenLight' END as PERCOLOR FROM ( SELECT a.ID, a.PLANYR_ID, d.NO as STRAT_NO, c.NO as ACTION_NO, b.NO as PLANYR_NO, b.NAME as PLANYR_NAME, b.CRITERIA, b.CNT, b.QUALITY, a.MNTHLIST, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.ISSPECIAL, CASE WHEN a.ISCANCEL = 1 THEN ' checked=\"checked\"' ELSE null END as ISCANCEL, CASE WHEN a.ISSPECIAL=0 THEN ROUND(NVL(a.PER,0)*0.3,0) ELSE ROUND(NVL(a.PER,0)*0.4,0) END as PER, NVL2(a.PER1,1,0) as ISPER1, NVL(a.PER1,0) as PER1, c.IS_LOCAL ";
                        strQry += @"FROM(
    SELECT a.ID, a.PLANYR_ID, a.ISSPECIAL, a.ISCANCEL, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, ROUND(NVL(AVG(b.EVAL), 0), 1) as PER, a.PER1, NVL(RTRIM(xmlagg(xmlelement(e, b.INTERVAL || ',') ORDER BY b.INTERVAL).extract('//text()'), ','), '-') MNTHLIST
    FROM(
      SELECT b.ID, a.PLANYR_ID, b.ISSPECIAL, b.ISCANCEL, c.IMPL, c.IMPL1, c.IMPL2, c.IMPL3, c.IMPL4, c.IMPL5, c.PER1
      FROM(
        SELECT PLANYR_ID
        FROM(
          SELECT b.PLANYR_ID
        FROM (
          SELECT PLANYR_ID 
          FROM TBL_AGREEMENT_MAIN 
          WHERE ST_ID = " + st_id + " AND YR = " + yr + @"
        ) a
        RIGHT JOIN (
          SELECT a.ID as PLANYR_ID 
          FROM TBL_PLANYR a 
          INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID 
          INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID 
          INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
          INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID 
          WHERE a.YR=" + yr + @" AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1 AND d.BR_ID=(SELECT a.BRANCH_ID FROM hrdbuser.ST_STBR a INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID = b.ID WHERE a.ISACTIVE = 1 AND a.STAFFS_ID = " + st_id + @")
            AND (a.BUDGET IS NULL OR a.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||a.BUDGET||',' LIKE '%,1,%' OR ','||a.BUDGET||',' LIKE '%,2,%' OR ','||a.BUDGET||',' LIKE '%,3,%' OR ','||a.BUDGET||',' LIKE '%,4,%' OR ','||a.BUDGET||',' LIKE '%,5,%' OR ','||a.BUDGET||',' LIKE '%,6,%' OR ','||a.BUDGET||',' LIKE '%,7,%' OR ','||a.BUDGET||',' LIKE '%,8,%' OR ','||a.BUDGET||',' LIKE '%,9,%' OR ','||a.BUDGET||',' LIKE '%,10,%' OR ','||a.BUDGET||',' LIKE '%,11,%' OR ','||a.BUDGET||',' LIKE '%,12,%')
          GROUP BY a.ID 
        ) b ON a.PLANYR_ID=b.PLANYR_ID
        WHERE a.PLANYR_ID is null
          UNION ALL
          SELECT PLANYR_ID
          FROM TBL_AGREEMENT_MAIN
          WHERE ST_ID = " + st_id + @" AND YR = " + yr + @" AND (YRHF1=1 OR YRHF2=1)
        )
        GROUP BY PLANYR_ID
      ) a
      LEFT JOIN TBL_AGREEMENT_MAIN b ON a.PLANYR_ID = b.PLANYR_ID AND b.YR = " + yr + @" AND b.ST_ID = " + st_id + @"
      LEFT JOIN TBL_AGREEMENT_MAIN_IMPL c ON b.ID = c.AGREEMENT_MAIN_ID AND c.YRHF = " + yrhf + @"
    ) a
    LEFT JOIN TBL_PLANYR_EVAL b ON a.PLANYR_ID = b.PLANYR_ID AND b.TP = 'month'
    GROUP BY a.ID, a.PLANYR_ID, a.ISSPECIAL, a.ISCANCEL, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.PER1
  ) a
  INNER JOIN TBL_PLANYR b ON a.PLANYR_ID = b.ID
  INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID = c.ID
  INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID = d.ID
  ORDER BY a.ISSPECIAL, d.NO, c.NO, b.NO
) a";
                    }
                    else
                    {
                        strQry = "SELECT a.*, CASE WHEN a.PER < 11 THEN 'bg-color-red' WHEN a.PER > 10 AND a.PER < 31 THEN 'bg-color-orange' WHEN a.PER>30 THEN 'bg-color-greenLight' END as PERCOLOR FROM ( SELECT a.ID, a.PLANYR_ID, d.NO as STRAT_NO, c.NO as ACTION_NO, b.NO as PLANYR_NO, b.NAME as PLANYR_NAME, b.CRITERIA, b.CNT, b.QUALITY, a.MNTHLIST, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.ISSPECIAL, CASE WHEN a.ISCANCEL = 1 THEN ' checked=\"checked\"' ELSE null END as ISCANCEL, CASE WHEN a.ISSPECIAL=0 THEN ROUND(NVL(a.PER,0)*0.3,0) ELSE ROUND(NVL(a.PER,0)*0.4,0) END as PER, NVL2(a.PER1,1,0) as ISPER1, NVL(a.PER1,0) as PER1, c.IS_LOCAL ";
                        strQry += @"FROM(
    SELECT a.ID, a.PLANYR_ID, a.ISSPECIAL, a.ISCANCEL, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, ROUND(NVL(AVG(b.EVAL), 0), 1) as PER, a.PER1, NVL(RTRIM(xmlagg(xmlelement(e, b.INTERVAL || ',') ORDER BY b.INTERVAL).extract('//text()'), ','), '-') MNTHLIST
    FROM(
      SELECT b.ID, a.PLANYR_ID, b.ISSPECIAL, b.ISCANCEL, c.IMPL, c.IMPL1, c.IMPL2, c.IMPL3, c.IMPL4, c.IMPL5, c.PER1
      FROM(
        SELECT PLANYR_ID
        FROM(
          SELECT b.PLANYR_ID
        FROM (
          SELECT PLANYR_ID 
          FROM TBL_AGREEMENT_MAIN 
          WHERE ST_ID = " + st_id + " AND YR = " + yr + @"
        ) a
        RIGHT JOIN (
          SELECT a.ID as PLANYR_ID 
          FROM TBL_PLANYR a 
          INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID AND b.ST_ID=" + st_id + @"  
          INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID 
          INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
          INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID 
          WHERE a.YR=" + yr + @" AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1 
            AND (a.BUDGET IS NULL OR a.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||a.BUDGET||',' LIKE '%,1,%' OR ','||a.BUDGET||',' LIKE '%,2,%' OR ','||a.BUDGET||',' LIKE '%,3,%' OR ','||a.BUDGET||',' LIKE '%,4,%' OR ','||a.BUDGET||',' LIKE '%,5,%' OR ','||a.BUDGET||',' LIKE '%,6,%' OR ','||a.BUDGET||',' LIKE '%,7,%' OR ','||a.BUDGET||',' LIKE '%,8,%' OR ','||a.BUDGET||',' LIKE '%,9,%' OR ','||a.BUDGET||',' LIKE '%,10,%' OR ','||a.BUDGET||',' LIKE '%,11,%' OR ','||a.BUDGET||',' LIKE '%,12,%')
          GROUP BY a.ID 
        ) b ON a.PLANYR_ID=b.PLANYR_ID
        WHERE a.PLANYR_ID is null
          UNION ALL
          SELECT PLANYR_ID
          FROM TBL_AGREEMENT_MAIN
          WHERE ST_ID = " + st_id + @" AND YR = " + yr + @" AND (YRHF1=1 OR YRHF2=1)
        )
        GROUP BY PLANYR_ID
      ) a
      LEFT JOIN TBL_AGREEMENT_MAIN b ON a.PLANYR_ID = b.PLANYR_ID AND b.YR = " + yr + @" AND b.ST_ID = " + st_id + @"
      LEFT JOIN TBL_AGREEMENT_MAIN_IMPL c ON b.ID = c.AGREEMENT_MAIN_ID AND c.YRHF = " + yrhf + @"
    ) a
    LEFT JOIN TBL_PLANYR_EVAL b ON a.PLANYR_ID = b.PLANYR_ID AND b.TP = 'month'
    GROUP BY a.ID, a.PLANYR_ID, a.ISSPECIAL, a.ISCANCEL, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.PER1
  ) a
  INNER JOIN TBL_PLANYR b ON a.PLANYR_ID = b.ID
  INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID = c.ID
  INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID = d.ID
  ORDER BY a.ISSPECIAL, d.NO, c.NO, b.NO
) a";
                    }
                    
                }
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AgreementTab3t2(string yr, string yrhf, string st_id)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT a.ID, a.D1, a.D2, a.D3, b.IMPL, b.IMPL1, b.IMPL2, b.IMPL3, b.IMPL4, b.IMPL5, NVL2(b.PER1,1,0) as ISPER1, b.PER1 FROM TBL_AGREEMENT_SKILL a LEFT JOIN TBL_AGREEMENT_SKILL_IMPL b ON a.ID=b.AGREEMENT_SKILL_ID AND b.YRHF=" + yrhf + " WHERE a.YR=" + yr + " AND a.YRHF" + yrhf + "=1 AND a.ST_ID=" + st_id + " ORDER BY ID");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AgreementTab3t2Head(string yr, string yrhf, string st_id, string tp)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet(@"SELECT a.ID, a.NAME, NVL(b.AVGPNT,0) as AVGPNT, NVL(c.AVGPNT,0) as AVGPNT_NOW
FROM TBL_SRV_QUESTION a
LEFT JOIN (
  SELECT a.SRV_QUESTION_ID, NVL(ROUND(ROUND(AVG(b.PER), 3) * 0.2, 3), 0) as AVGPNT
  FROM TBL_SRV a
  INNER JOIN TBL_SRV_ANSWER b ON a.SRV_ANSWER_ID = b.ID
  INNER JOIN hrdbuser.ST_STAFFS c ON a.TRGT_ID = c.ID
  INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
  INNER JOIN hrdbuser.ST_BRANCH f ON d.BRANCH_ID = f.ID AND f.ISACTIVE = 1
  INNER JOIN hrdbuser.ST_BRANCH g ON f.FATHER_ID = g.ID AND g.ISACTIVE = 1
  WHERE a.SRV_TYPE_ID = " + tp + " AND a.TRGT_ID=" + st_id + " AND a.YR = " + (Int32.Parse(yr) - 1).ToString() + @" AND a.YR_HF = 2
  GROUP BY a.SRV_QUESTION_ID
) b ON a.ID=b.SRV_QUESTION_ID
LEFT JOIN (
  SELECT a.SRV_QUESTION_ID, NVL(ROUND(ROUND(AVG(b.PER), 3) * 0.2, 3), 0) as AVGPNT
  FROM TBL_SRV a
  INNER JOIN TBL_SRV_ANSWER b ON a.SRV_ANSWER_ID = b.ID
  INNER JOIN hrdbuser.ST_STAFFS c ON a.TRGT_ID = c.ID
  INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
  INNER JOIN hrdbuser.ST_BRANCH f ON d.BRANCH_ID = f.ID AND f.ISACTIVE = 1
  INNER JOIN hrdbuser.ST_BRANCH g ON f.FATHER_ID = g.ID AND g.ISACTIVE = 1
  WHERE a.SRV_TYPE_ID = " + tp + " AND a.TRGT_ID=" + st_id + " AND a.YR = " + yr + " AND a.YR_HF = "+ yrhf + @"
  GROUP BY a.SRV_QUESTION_ID
) c ON a.ID=c.SRV_QUESTION_ID
WHERE a.SRV_TYPE_ID=" + tp + @" AND a.IS_ACTIVE=1
ORDER BY a.ID");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AgreementTab3t3(string yr, string yrhf, string st_id)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT a.ID, a.NO, a.NAME, b.IMPL, b.IMPL1, b.IMPL2, b.IMPL3, b.IMPL4, b.IMPL5, NVL2(b.PER1,1,0) as ISPER1, b.PER1 FROM TBL_AGREEMENT_OTHER a LEFT JOIN TBL_AGREEMENT_OTHER_IMPL b ON a.ID=b.AGREEMENT_OTHER_ID AND b.YRHF=" + yrhf + " WHERE a.YR=" + yr + " AND a.YRHF" + yrhf + "=1 AND a.ST_ID=" + st_id + " ORDER BY a.NO");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AgreementTab1PrintModalHavsraltTable1(string yr, string st_id)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = "SELECT a.PLANYR_ID, a.STRAT_BRID, a.STRAT_NO, a.STRAT_NAME, a.ACTION_BRID, a.ACTION_NO, a.ACTION_NAME, a.PLANYR_NO, a.PLANYR_NAME, a.CRITERIA, a.CNT, a.QUALITY, a.MNTHLIST, a.BUDGET, a.GAZARID, a.GAZARNAME, a.HELTESID, a.HELTESNAME, NVL(RTRIM(xmlagg (xmlelement (e, c.ID || ',')).extract('//text()'), ','),'none') STLISTID, NVL(RTRIM(xmlagg (xmlelement (e, ' '||SUBSTR(c.LNAME,0,1)||'.'||SUBSTR(c.FNAME,1,1)||LOWER(SUBSTR(c.FNAME,2)) || ',')).extract('//text()'), ','),'none') STLISTNAME FROM ( SELECT a.PLANYR_ID, a.STRAT_BRID, a.STRAT_NO, a.STRAT_NAME, a.ACTION_BRID, a.ACTION_NO, a.ACTION_NAME, a.PLANYR_NO, a.PLANYR_NAME, a.CRITERIA, a.CNT, a.QUALITY, a.MNTHLIST, a.BUDGET, a.GAZARID, a.GAZARNAME, NVL(RTRIM(xmlagg (xmlelement (e, b.BR_ID || ',') ORDER BY b.BR_ID).extract('//text()'), ','),'-') as HELTESID, NVL(RTRIM(xmlagg (xmlelement (e, c.DOMAIN_ORG || ',') ORDER BY b.BR_ID).extract('//text()'), ','),'none') as HELTESNAME FROM ( SELECT a.PLANYR_ID, d.ID as STRAT_BRID, d.NO as STRAT_NO, d.NAME as STRAT_NAME, c.ID as ACTION_BRID, c.NO as ACTION_NO, c.NAME as ACTION_NAME, b.NO as PLANYR_NO, b.NAME as PLANYR_NAME, b.CRITERIA, b.QUALITY, b.BUDGET, b.CNT, NVL(RTRIM(xmlagg (xmlelement (e, f.INTERVAL || ',') ORDER BY f.INTERVAL).extract('//text()'), ','),'-') MNTHLIST, g.BR_ID as GAZARID, g.DOMAIN_ORG as GAZARNAME FROM ( SELECT b.PLANYR_ID FROM ( SELECT PLANYR_ID FROM TBL_AGREEMENT_MAIN WHERE YR=" + yr + " AND ST_ID=" + st_id + " AND ISSPECIAL=1 ) a RIGHT JOIN ( SELECT a.ID as PLANYR_ID FROM TBL_PLANYR a INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID AND b.ST_ID=" + st_id + " INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID AND c.IS_PLANED=1 INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID WHERE a.YR=" + yr + " AND a.IS_PLANED=1 AND a.SUBMIT_D2=1 GROUP BY a.ID ) b ON a.PLANYR_ID=b.PLANYR_ID WHERE a.PLANYR_ID IS NULL ) a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID LEFT JOIN TBL_PLANYR_EVAL f ON a.PLANYR_ID=f.PLANYR_ID AND f.TP='month' INNER JOIN TBL_BRANCH g ON d.BR_ID=g.BR_ID AND g.YR="+yr+ @" GROUP BY a.PLANYR_ID ,d.ID, d.NO, d.NAME,c.ID, c.NO, c.NAME, b.NO, b.NAME, b.CRITERIA, b.QUALITY, b.BUDGET,b.CNT,g.BR_ID,g.DOMAIN_ORG ) a INNER JOIN TBL_FUNC_ACTION_BR b ON a.ACTION_BRID=b.FUNC_ACTION_ID INNER JOIN TBL_BRANCH c ON b.BR_ID=c.BR_ID AND c.YR=" + yr + @" GROUP BY a.PLANYR_ID, a.STRAT_BRID, a.STRAT_NO, a.STRAT_NAME, a.ACTION_BRID, a.ACTION_NO, a.ACTION_NAME, a.PLANYR_NO, a.PLANYR_NAME, a.CRITERIA, a.CNT, a.QUALITY, a.MNTHLIST, a.BUDGET, a.GAZARID, a.GAZARNAME ) a INNER JOIN TBL_PLANYR_USER b ON a.PLANYR_ID=b.PLANYR_ID AND b.ISREAL=1 INNER JOIN hrdbuser.ST_STAFFS c ON b.ST_ID=c.ID GROUP BY a.PLANYR_ID, a.STRAT_BRID,a.STRAT_NO,a.STRAT_NAME,a.ACTION_BRID,a.ACTION_NO, a.ACTION_NAME, a.PLANYR_NO, a.PLANYR_NAME, a.CRITERIA, a.CNT, a.QUALITY, a.MNTHLIST,a.BUDGET, a.GAZARID, a.GAZARNAME, a.HELTESID, a.HELTESNAME ORDER BY a.STRAT_NO, a.ACTION_NO, a.PLANYR_NO";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AgreementTab1PrintModalHavsraltTable2(string yr, string st_id)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = "SELECT a.PLANYR_ID, a.STRAT_BRID, a.STRAT_NO, a.STRAT_NAME, a.ACTION_BRID, a.ACTION_NO, a.ACTION_NAME, a.PLANYR_NO, a.PLANYR_NAME, a.CRITERIA, a.CNT, a.QUALITY, a.MNTHLIST, a.BUDGET, a.GAZARID, a.GAZARNAME, a.HELTESID, a.HELTESNAME, NVL(RTRIM(xmlagg (xmlelement (e, c.ID || ',')).extract('//text()'), ','),'none') STLISTID, NVL(RTRIM(xmlagg (xmlelement (e, ' '||SUBSTR(c.LNAME,0,1)||'.'||SUBSTR(c.FNAME,1,1)||LOWER(SUBSTR(c.FNAME,2)) || ',')).extract('//text()'), ','),'none') STLISTNAME FROM ( SELECT a.PLANYR_ID, a.STRAT_BRID, a.STRAT_NO, a.STRAT_NAME, a.ACTION_BRID, a.ACTION_NO, a.ACTION_NAME, a.PLANYR_NO, a.PLANYR_NAME, a.CRITERIA, a.CNT, a.QUALITY, a.MNTHLIST, a.BUDGET, a.GAZARID, a.GAZARNAME, NVL(RTRIM(xmlagg (xmlelement (e, b.BR_ID || ',') ORDER BY b.BR_ID).extract('//text()'), ','),'-') as HELTESID, NVL(RTRIM(xmlagg (xmlelement (e, c.DOMAIN_ORG || ',') ORDER BY b.BR_ID).extract('//text()'), ','),'none') as HELTESNAME FROM ( SELECT a.PLANYR_ID, d.ID as STRAT_BRID, d.NO as STRAT_NO, d.NAME as STRAT_NAME, c.ID as ACTION_BRID, c.NO as ACTION_NO, c.NAME as ACTION_NAME, b.NO as PLANYR_NO, b.NAME as PLANYR_NAME, b.CRITERIA, b.QUALITY, b.BUDGET, b.CNT, NVL(RTRIM(xmlagg (xmlelement (e, f.INTERVAL || ',') ORDER BY f.INTERVAL).extract('//text()'), ','),'-') MNTHLIST, g.BR_ID as GAZARID, g.DOMAIN_ORG as GAZARNAME FROM ( SELECT PLANYR_ID FROM TBL_AGREEMENT_MAIN WHERE YR=" + yr + " AND ST_ID=" + st_id + " AND ISSPECIAL=1 ) a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID LEFT JOIN TBL_PLANYR_EVAL f ON a.PLANYR_ID=f.PLANYR_ID AND f.TP='month' INNER JOIN TBL_BRANCH g ON d.BR_ID=g.BR_ID AND g.YR=" + yr + @" GROUP BY a.PLANYR_ID ,d.ID, d.NO, d.NAME,c.ID, c.NO, c.NAME, b.NO, b.NAME, b.CRITERIA, b.QUALITY, b.BUDGET,b.CNT,g.BR_ID,g.DOMAIN_ORG ) a INNER JOIN TBL_FUNC_ACTION_BR b ON a.ACTION_BRID=b.FUNC_ACTION_ID INNER JOIN TBL_BRANCH c ON b.BR_ID=c.BR_ID AND c.YR=" + yr + @" GROUP BY a.PLANYR_ID, a.STRAT_BRID, a.STRAT_NO, a.STRAT_NAME, a.ACTION_BRID, a.ACTION_NO, a.ACTION_NAME, a.PLANYR_NO, a.PLANYR_NAME, a.CRITERIA, a.CNT, a.QUALITY, a.MNTHLIST, a.BUDGET, a.GAZARID, a.GAZARNAME ) a INNER JOIN TBL_PLANYR_USER b ON a.PLANYR_ID=b.PLANYR_ID AND b.ISREAL=1 INNER JOIN hrdbuser.ST_STAFFS c ON b.ST_ID=c.ID GROUP BY a.PLANYR_ID, a.STRAT_BRID,a.STRAT_NO,a.STRAT_NAME,a.ACTION_BRID,a.ACTION_NO, a.ACTION_NAME, a.PLANYR_NO, a.PLANYR_NAME, a.CRITERIA, a.CNT, a.QUALITY, a.MNTHLIST,a.BUDGET, a.GAZARID, a.GAZARNAME, a.HELTESID, a.HELTESNAME ORDER BY a.STRAT_NO, a.ACTION_NO, a.PLANYR_NO";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AgreementTab1PrintModalHavsraltTable3(string yr, string st_id)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = "SELECT a.NO, a.NAME, SUBSTR(b.LNAME,0,1)||'.'||SUBSTR(b.FNAME,1,1)||LOWER(SUBSTR(b.FNAME,2)) as FNAME FROM TBL_AGREEMENT_OTHER a INNER JOIN hrdbuser.ST_STAFFS b ON a.ST_ID=b.ID WHERE a.YR=" + yr + " AND a.ST_ID=" + st_id + " ORDER BY a.NO";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AgreementTab1PrintModalHavsraltTable4(string yr, string st_id)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = "SELECT ROWNUM as ROWNO, ID, NVL(D1,'-') as IMPROVESKILL_TARGET, NVL(D2,'-') as IMPROVESKILL_RESULTED, NVL(D3,'-') as IMPROVESKILL_BASICLEVEL FROM TBL_AGREEMENT_SKILL WHERE ST_ID=" + st_id + " AND YR=" + yr + " ORDER BY ID";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AgreementTab2PrintModalTable1(string yr, string yrhf, string st_id)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string month = "", month2 = "", strMonthList = "";
            string strQry = "", stposid = "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                stposid = myObj.OracleExecuteScalar("SELECT POS_ID FROM hrdbuser.ST_STBR WHERE ISACTIVE=1 AND STAFFS_ID=" + st_id).ToString();
                if (yrhf == "1")
                {
                    month = "1";
                    month2 = "6";
                }
                else if (yrhf == "2")
                {
                    month = "1";
                    month2 = "12";
                }
                for (int i = Int32.Parse(month); i <= Int32.Parse(month2); i++)
                {
                    if (strMonthList == "") strMonthList += i.ToString();
                    else strMonthList += "," + i.ToString();
                }
                //              string strQry = @"SELECT a.PLANYR_ID, d.ID as STRAT_ID, d.NO as STRAT_NO, d.NAME as STRAT_NAME, c.ID as ACTION_ID, c.NO as ACTION_NO, c.NAME as ACTION_NAME, b.NO as PLANYR_NO, b.NAME as PLANYR_NAME, b.CRITERIA, b.CNT, b.QUALITY, a.MNTHLIST, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, NVL(a.PER1,0) as PER1, ROUND(NVL(a.PER2,0)*0.3,0) as PER2 FROM ( SELECT a.PLANYR_ID, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.PER1, ROUND(NVL(AVG(b.EVAL),0),1) as PER2, NVL(RTRIM(xmlagg (xmlelement (e, b.INTERVAL || ',') ORDER BY b.INTERVAL).extract('//text()'), ','),'-') MNTHLIST FROM ( SELECT b.PLANYR_ID, c.IMPL, c.IMPL1, c.IMPL2, c.IMPL3, c.IMPL4, c.IMPL5, c.PER1
                //FROM(

                //  SELECT a.ID, MAX(b.YRHF) as YRHF
                //  FROM TBL_AGREEMENT_MAIN a
                //  LEFT JOIN TBL_AGREEMENT_MAIN_IMPL b ON a.ID = AGREEMENT_MAIN_ID AND b.YRHF IN(" + strYrhfB + @")
                //  WHERE a.YR = " + yr + strYrhfA + " AND a.ST_ID = " + st_id + @" AND a.ISSPECIAL = 0
                //  GROUP BY a.ID
                //) a
                //INNER JOIN TBL_AGREEMENT_MAIN b ON a.ID = b.ID
                //LEFT JOIN TBL_AGREEMENT_MAIN_IMPL c ON a.ID = c.AGREEMENT_MAIN_ID AND a.YRHF = c.YRHF ) a LEFT JOIN TBL_PLANYR_EVAL b ON a.PLANYR_ID=b.PLANYR_ID AND b.TP='month' AND b.INTERVAL IN (" + strMonthList + ") GROUP BY a.PLANYR_ID, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.PER1 ) a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID ORDER BY d.NO, c.NO, b.NO";
                if (yrhf == "1")
                {
                    if (stposid == "2010201")
                    {
                        strQry = @"SELECT a.PLANYR_ID, d.ID as STRAT_ID, d.NO as STRAT_NO, d.NAME as STRAT_NAME, c.ID as ACTION_ID, c.NO as ACTION_NO, c.NAME as ACTION_NAME, b.NO as PLANYR_NO, b.NAME as PLANYR_NAME, b.CRITERIA, b.CNT, b.QUALITY, a.MNTHLIST, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, NVL(a.PER1,0) as PER1, ROUND(NVL(a.PER2,0)*0.3,0) as PER2 
FROM ( 
  SELECT a.PLANYR_ID, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.PER1, ROUND(NVL(AVG(b.EVAL),0),1) as PER2, NVL(RTRIM(xmlagg (xmlelement (e, b.INTERVAL || ',') ORDER BY b.INTERVAL).extract('//text()'), ','),'-') MNTHLIST 
  FROM ( 
    SELECT a.PLANYR_ID, c.IMPL, c.IMPL1, c.IMPL2, c.IMPL3, c.IMPL4, c.IMPL5, c.PER1
    FROM(
      SELECT b.PLANYR_ID 
      FROM ( 
        SELECT a.PLANYR_ID 
        FROM TBL_AGREEMENT_MAIN a
        INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
        INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
        INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
        INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
        WHERE a.YR=" + yr + @" AND a.ST_ID=" + st_id + @" AND a.ISSPECIAL=1 AND a.ISCANCEL=0 AND a.YRHF1=1
          --AND (b.BUDGET IS NULL OR b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||b.BUDGET||',' LIKE '%,1,%' OR ','||b.BUDGET||',' LIKE '%,2,%' OR ','||b.BUDGET||',' LIKE '%,3,%' OR ','||b.BUDGET||',' LIKE '%,4,%' OR ','||b.BUDGET||',' LIKE '%,5,%' OR ','||b.BUDGET||',' LIKE '%,6,%')
        GROUP BY a.PLANYR_ID
      ) a 
      RIGHT JOIN ( 
        SELECT PLANYR_ID 
        FROM (
            SELECT b.PLANYR_ID
            FROM (
                SELECT a.PLANYR_ID 
                FROM TBL_AGREEMENT_MAIN a
                INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
                WHERE a.ST_ID = " + st_id + @" AND a.YR = " + yr + @" AND c.IS_LOCAL=0 AND a.ISCANCEL=0
            ) a
            RIGHT JOIN (
                SELECT a.ID as PLANYR_ID 
                FROM TBL_PLANYR a 
                INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID 
                INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID 
                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID 
                WHERE a.YR=" + yr + @" AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1 AND c.IS_LOCAL=0 AND f.BR_ID=(SELECT b.FATHER_ID FROM hrdbuser.ST_STBR a INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID = b.ID WHERE a.ISACTIVE = 1 AND a.STAFFS_ID = " + st_id + @")
                    AND (a.BUDGET IS NULL OR a.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||a.BUDGET||',' LIKE '%,1,%' OR ','||a.BUDGET||',' LIKE '%,2,%' OR ','||a.BUDGET||',' LIKE '%,3,%' OR ','||a.BUDGET||',' LIKE '%,4,%' OR ','||a.BUDGET||',' LIKE '%,5,%' OR ','||a.BUDGET||',' LIKE '%,6,%')
                GROUP BY a.ID 
            ) b ON a.PLANYR_ID=b.PLANYR_ID
            WHERE a.PLANYR_ID is null
            UNION ALL
            SELECT a.PLANYR_ID 
            FROM TBL_AGREEMENT_MAIN a
            INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
            INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
            INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
            INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
            WHERE a.ST_ID = " + st_id + @" AND a.YR = " + yr + @" AND a.YRHF1=1 AND c.IS_LOCAL=0 AND a.ISCANCEL=0
        ) 
        GROUP BY PLANYR_ID
      ) b ON a.PLANYR_ID=b.PLANYR_ID 
      WHERE a.PLANYR_ID IS NULL 
    ) a
    LEFT JOIN TBL_AGREEMENT_MAIN b ON a.PLANYR_ID=b.PLANYR_ID AND b.YR=" + yr + @" AND b.ST_ID=" + st_id + @"
    LEFT JOIN TBL_AGREEMENT_MAIN_IMPL c ON b.ID=c.AGREEMENT_MAIN_ID AND c.YRHF=" + yrhf + @"
    WHERE b.ISCANCEL=0 OR b.ISCANCEL IS NULL
  ) a 
  LEFT JOIN TBL_PLANYR_EVAL b ON a.PLANYR_ID=b.PLANYR_ID AND b.TP='month' AND b.INTERVAL IN (" + strMonthList + @") 
  GROUP BY a.PLANYR_ID, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.PER1 
) a 
INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID 
INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID 
ORDER BY d.NO, c.NO, b.NO";
                    }
                    else if (stposid == "2010301")
                    {
                        strQry = @"SELECT a.PLANYR_ID, d.ID as STRAT_ID, d.NO as STRAT_NO, d.NAME as STRAT_NAME, c.ID as ACTION_ID, c.NO as ACTION_NO, c.NAME as ACTION_NAME, b.NO as PLANYR_NO, b.NAME as PLANYR_NAME, b.CRITERIA, b.CNT, b.QUALITY, a.MNTHLIST, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, NVL(a.PER1,0) as PER1, ROUND(NVL(a.PER2,0)*0.3,0) as PER2 
FROM ( 
  SELECT a.PLANYR_ID, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.PER1, ROUND(NVL(AVG(b.EVAL),0),1) as PER2, NVL(RTRIM(xmlagg (xmlelement (e, b.INTERVAL || ',') ORDER BY b.INTERVAL).extract('//text()'), ','),'-') MNTHLIST 
  FROM ( 
    SELECT a.PLANYR_ID, c.IMPL, c.IMPL1, c.IMPL2, c.IMPL3, c.IMPL4, c.IMPL5, c.PER1
    FROM(
      SELECT b.PLANYR_ID 
      FROM ( 
        SELECT a.PLANYR_ID 
        FROM TBL_AGREEMENT_MAIN a
        INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
        INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
        INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
        INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
        WHERE a.YR=" + yr + @" AND a.ST_ID=" + st_id + @" AND a.ISSPECIAL=1 AND a.ISCANCEL=0 AND a.YRHF1=1
           --AND (b.BUDGET IS NULL OR b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||b.BUDGET||',' LIKE '%,1,%' OR ','||b.BUDGET||',' LIKE '%,2,%' OR ','||b.BUDGET||',' LIKE '%,3,%' OR ','||b.BUDGET||',' LIKE '%,4,%' OR ','||b.BUDGET||',' LIKE '%,5,%' OR ','||b.BUDGET||',' LIKE '%,6,%')
        GROUP BY a.PLANYR_ID
      ) a 
      RIGHT JOIN ( 
        SELECT PLANYR_ID 
        FROM (
            SELECT b.PLANYR_ID
            FROM (
                SELECT a.PLANYR_ID 
                FROM TBL_AGREEMENT_MAIN a
                INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
                WHERE a.ST_ID = " + st_id + @" AND a.YR = " + yr + @" AND c.IS_LOCAL=0 AND a.ISCANCEL=0
            ) a
            RIGHT JOIN (
                SELECT a.ID as PLANYR_ID 
                FROM TBL_PLANYR a 
                INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID 
                INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID 
                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID 
                WHERE a.YR=" + yr + @" AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1 AND c.IS_LOCAL=0 AND d.BR_ID=(SELECT a.BRANCH_ID FROM hrdbuser.ST_STBR a INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID = b.ID WHERE a.ISACTIVE = 1 AND a.STAFFS_ID = " + st_id + @")
                    AND (a.BUDGET IS NULL OR a.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||a.BUDGET||',' LIKE '%,1,%' OR ','||a.BUDGET||',' LIKE '%,2,%' OR ','||a.BUDGET||',' LIKE '%,3,%' OR ','||a.BUDGET||',' LIKE '%,4,%' OR ','||a.BUDGET||',' LIKE '%,5,%' OR ','||a.BUDGET||',' LIKE '%,6,%')
                GROUP BY a.ID 
            ) b ON a.PLANYR_ID=b.PLANYR_ID
            WHERE a.PLANYR_ID is null
            UNION ALL
            SELECT a.PLANYR_ID 
            FROM TBL_AGREEMENT_MAIN a
            INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
            INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
            INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
            INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
            WHERE a.ST_ID = " + st_id + @" AND a.YR = " + yr + @" AND a.YRHF1=1 AND c.IS_LOCAL=0 AND a.ISCANCEL=0
        ) 
        GROUP BY PLANYR_ID
      ) b ON a.PLANYR_ID=b.PLANYR_ID 
      WHERE a.PLANYR_ID IS NULL 
    ) a
    LEFT JOIN TBL_AGREEMENT_MAIN b ON a.PLANYR_ID=b.PLANYR_ID AND b.YR=" + yr + @" AND b.ST_ID=" + st_id + @"
    LEFT JOIN TBL_AGREEMENT_MAIN_IMPL c ON b.ID=c.AGREEMENT_MAIN_ID AND c.YRHF=" + yrhf + @"
    WHERE b.ISCANCEL=0 OR b.ISCANCEL IS NULL
  ) a 
  LEFT JOIN TBL_PLANYR_EVAL b ON a.PLANYR_ID=b.PLANYR_ID AND b.TP='month' AND b.INTERVAL IN (" + strMonthList + @") 
  GROUP BY a.PLANYR_ID, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.PER1 
) a 
INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID 
INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID 
ORDER BY d.NO, c.NO, b.NO";
                    }
                    else {
                        strQry = @"SELECT a.PLANYR_ID, d.ID as STRAT_ID, d.NO as STRAT_NO, d.NAME as STRAT_NAME, c.ID as ACTION_ID, c.NO as ACTION_NO, c.NAME as ACTION_NAME, b.NO as PLANYR_NO, b.NAME as PLANYR_NAME, b.CRITERIA, b.CNT, b.QUALITY, a.MNTHLIST, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, NVL(a.PER1,0) as PER1, ROUND(NVL(a.PER2,0)*0.3,0) as PER2 
FROM ( 
  SELECT a.PLANYR_ID, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.PER1, ROUND(NVL(AVG(b.EVAL),0),1) as PER2, NVL(RTRIM(xmlagg (xmlelement (e, b.INTERVAL || ',') ORDER BY b.INTERVAL).extract('//text()'), ','),'-') MNTHLIST 
  FROM ( 
    SELECT a.PLANYR_ID, c.IMPL, c.IMPL1, c.IMPL2, c.IMPL3, c.IMPL4, c.IMPL5, c.PER1
    FROM(
      SELECT b.PLANYR_ID 
      FROM ( 
        SELECT a.PLANYR_ID 
        FROM TBL_AGREEMENT_MAIN a
        INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
        INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
        INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
        INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
        WHERE a.YR=" + yr + @" AND a.ST_ID=" + st_id + @" AND a.ISSPECIAL=1 AND a.ISCANCEL=0 AND a.YRHF1=1
           --AND (b.BUDGET IS NULL OR b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||b.BUDGET||',' LIKE '%,1,%' OR ','||b.BUDGET||',' LIKE '%,2,%' OR ','||b.BUDGET||',' LIKE '%,3,%' OR ','||b.BUDGET||',' LIKE '%,4,%' OR ','||b.BUDGET||',' LIKE '%,5,%' OR ','||b.BUDGET||',' LIKE '%,6,%')
        GROUP BY a.PLANYR_ID
      ) a 
      RIGHT JOIN ( 
        SELECT PLANYR_ID 
        FROM (
            SELECT b.PLANYR_ID
            FROM (
                SELECT a.PLANYR_ID 
                FROM TBL_AGREEMENT_MAIN a
                INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
                WHERE a.ST_ID = " + st_id + @" AND a.YR = " + yr + @" AND c.IS_LOCAL=0 AND a.ISCANCEL=0
            ) a
            RIGHT JOIN (
                SELECT a.ID as PLANYR_ID 
                FROM TBL_PLANYR a 
                INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID AND b.ST_ID=" + st_id + @"  
                INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID 
                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID 
                WHERE a.YR=" + yr + @" AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1 AND c.IS_LOCAL=0
                    AND (a.BUDGET IS NULL OR a.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||a.BUDGET||',' LIKE '%,1,%' OR ','||a.BUDGET||',' LIKE '%,2,%' OR ','||a.BUDGET||',' LIKE '%,3,%' OR ','||a.BUDGET||',' LIKE '%,4,%' OR ','||a.BUDGET||',' LIKE '%,5,%' OR ','||a.BUDGET||',' LIKE '%,6,%')
                GROUP BY a.ID 
            ) b ON a.PLANYR_ID=b.PLANYR_ID
            WHERE a.PLANYR_ID is null
            UNION ALL
            SELECT a.PLANYR_ID 
            FROM TBL_AGREEMENT_MAIN a
            INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
            INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
            INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
            INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
            WHERE a.ST_ID = " + st_id + @" AND a.YR = " + yr + @" AND a.YRHF1=1 AND c.IS_LOCAL=0 AND a.ISCANCEL=0
        ) 
        GROUP BY PLANYR_ID
      ) b ON a.PLANYR_ID=b.PLANYR_ID 
      WHERE a.PLANYR_ID IS NULL 
    ) a
    LEFT JOIN TBL_AGREEMENT_MAIN b ON a.PLANYR_ID=b.PLANYR_ID AND b.YR=" + yr + @" AND b.ST_ID=" + st_id + @"
    LEFT JOIN TBL_AGREEMENT_MAIN_IMPL c ON b.ID=c.AGREEMENT_MAIN_ID AND c.YRHF=" + yrhf + @"
    WHERE b.ISCANCEL=0 OR b.ISCANCEL IS NULL
  ) a 
  LEFT JOIN TBL_PLANYR_EVAL b ON a.PLANYR_ID=b.PLANYR_ID AND b.TP='month' AND b.INTERVAL IN (" + strMonthList + @") 
  GROUP BY a.PLANYR_ID, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.PER1 
) a 
INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID 
INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID 
ORDER BY d.NO, c.NO, b.NO";
                    }
                }
                else {
                    if (stposid == "2010201")
                    {
                        strQry = @"SELECT a.PLANYR_ID, d.ID as STRAT_ID, d.NO as STRAT_NO, d.NAME as STRAT_NAME, c.ID as ACTION_ID, c.NO as ACTION_NO, c.NAME as ACTION_NAME, b.NO as PLANYR_NO, b.NAME as PLANYR_NAME, b.CRITERIA, b.CNT, b.QUALITY, a.MNTHLIST, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, NVL(a.PER1,0) as PER1, ROUND(NVL(a.PER2,0)*0.3,0) as PER2 
FROM ( 
  SELECT a.PLANYR_ID, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.PER1, ROUND(NVL(AVG(b.EVAL),0),1) as PER2, NVL(RTRIM(xmlagg (xmlelement (e, b.INTERVAL || ',') ORDER BY b.INTERVAL).extract('//text()'), ','),'-') MNTHLIST 
  FROM ( 
    SELECT a.PLANYR_ID, c.IMPL, c.IMPL1, c.IMPL2, c.IMPL3, c.IMPL4, c.IMPL5, c.PER1
    FROM(
      SELECT b.PLANYR_ID 
      FROM ( 
        SELECT a.PLANYR_ID 
        FROM TBL_AGREEMENT_MAIN a
        INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
        INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
        INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
        INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
        WHERE a.YR=" + yr + @" AND a.ST_ID=" + st_id + @" AND a.ISSPECIAL=1 AND (a.YRHF1=1 OR a.YRHF2=1)
           --AND (b.BUDGET IS NULL OR b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||b.BUDGET||',' LIKE '%,7,%' OR ','||b.BUDGET||',' LIKE '%,8,%' OR ','||b.BUDGET||',' LIKE '%,9,%' OR ','||b.BUDGET||',' LIKE '%,10,%' OR ','||b.BUDGET||',' LIKE '%,11,%' OR ','||b.BUDGET||',' LIKE '%,12,%')
        GROUP BY a.PLANYR_ID
      ) a 
      RIGHT JOIN ( 
        SELECT PLANYR_ID 
        FROM (
            SELECT b.PLANYR_ID
            FROM (
                SELECT a.PLANYR_ID 
                FROM TBL_AGREEMENT_MAIN a
                INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
                WHERE a.ST_ID = " + st_id + @" AND a.YR = " + yr + @" AND c.IS_LOCAL=0 AND a.ISCANCEL=0
            ) a
            RIGHT JOIN (
                SELECT a.ID as PLANYR_ID 
                FROM TBL_PLANYR a 
                INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID  
                INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID 
                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID 
                WHERE a.YR=" + yr + @" AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1 AND c.IS_LOCAL=0 AND f.BR_ID=(SELECT b.FATHER_ID FROM hrdbuser.ST_STBR a INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID = b.ID WHERE a.ISACTIVE = 1 AND a.STAFFS_ID = " + st_id + @")
                  AND (a.BUDGET IS NULL OR a.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||a.BUDGET||',' LIKE '%,1,%' OR ','||a.BUDGET||',' LIKE '%,2,%' OR ','||a.BUDGET||',' LIKE '%,3,%' OR ','||a.BUDGET||',' LIKE '%,4,%' OR ','||a.BUDGET||',' LIKE '%,5,%' OR ','||a.BUDGET||',' LIKE '%,6,%' OR ','||a.BUDGET||',' LIKE '%,7,%' OR ','||a.BUDGET||',' LIKE '%,8,%' OR ','||a.BUDGET||',' LIKE '%,9,%' OR ','||a.BUDGET||',' LIKE '%,10,%' OR ','||a.BUDGET||',' LIKE '%,11,%' OR ','||a.BUDGET||',' LIKE '%,12,%')
                GROUP BY a.ID 
            ) b ON a.PLANYR_ID=b.PLANYR_ID
            WHERE a.PLANYR_ID is null
            UNION ALL
            SELECT a.PLANYR_ID 
            FROM TBL_AGREEMENT_MAIN a
            INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
            INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
            INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
            INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
            WHERE a.ST_ID = " + st_id + @" AND a.YR = " + yr + @" AND (a.YRHF1=1 OR a.YRHF2=1) AND c.IS_LOCAL=0 AND a.ISCANCEL=0
        ) 
        GROUP BY PLANYR_ID
      ) b ON a.PLANYR_ID=b.PLANYR_ID 
      WHERE a.PLANYR_ID IS NULL 
    ) a
    LEFT JOIN TBL_AGREEMENT_MAIN b ON a.PLANYR_ID=b.PLANYR_ID AND b.YR=" + yr + @" AND b.ST_ID=" + st_id + @"
    LEFT JOIN TBL_AGREEMENT_MAIN_IMPL c ON b.ID=c.AGREEMENT_MAIN_ID AND c.YRHF=" + yrhf + @"
    WHERE b.ISCANCEL=0 OR b.ISCANCEL IS NULL
  ) a 
  LEFT JOIN TBL_PLANYR_EVAL b ON a.PLANYR_ID=b.PLANYR_ID AND b.TP='month' AND b.INTERVAL IN (" + strMonthList + @") 
  GROUP BY a.PLANYR_ID, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.PER1 
) a 
INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID 
INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID 
ORDER BY d.NO, c.NO, b.NO";
                    }
                    else if (stposid == "2010301")
                    {
                        strQry = @"SELECT a.PLANYR_ID, d.ID as STRAT_ID, d.NO as STRAT_NO, d.NAME as STRAT_NAME, c.ID as ACTION_ID, c.NO as ACTION_NO, c.NAME as ACTION_NAME, b.NO as PLANYR_NO, b.NAME as PLANYR_NAME, b.CRITERIA, b.CNT, b.QUALITY, a.MNTHLIST, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, NVL(a.PER1,0) as PER1, ROUND(NVL(a.PER2,0)*0.3,0) as PER2 
FROM ( 
  SELECT a.PLANYR_ID, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.PER1, ROUND(NVL(AVG(b.EVAL),0),1) as PER2, NVL(RTRIM(xmlagg (xmlelement (e, b.INTERVAL || ',') ORDER BY b.INTERVAL).extract('//text()'), ','),'-') MNTHLIST 
  FROM ( 
    SELECT a.PLANYR_ID, c.IMPL, c.IMPL1, c.IMPL2, c.IMPL3, c.IMPL4, c.IMPL5, c.PER1
    FROM(
      SELECT b.PLANYR_ID 
      FROM ( 
        SELECT a.PLANYR_ID 
        FROM TBL_AGREEMENT_MAIN a
        INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
        INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
        INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
        INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
        WHERE a.YR=" + yr + @" AND a.ST_ID=" + st_id + @" AND a.ISSPECIAL=1 AND (a.YRHF1=1 OR a.YRHF2=1)
           --AND (b.BUDGET IS NULL OR b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||b.BUDGET||',' LIKE '%,7,%' OR ','||b.BUDGET||',' LIKE '%,8,%' OR ','||b.BUDGET||',' LIKE '%,9,%' OR ','||b.BUDGET||',' LIKE '%,10,%' OR ','||b.BUDGET||',' LIKE '%,11,%' OR ','||b.BUDGET||',' LIKE '%,12,%')
        GROUP BY a.PLANYR_ID
      ) a 
      RIGHT JOIN ( 
        SELECT PLANYR_ID 
        FROM (
            SELECT b.PLANYR_ID
            FROM (
                SELECT a.PLANYR_ID 
                FROM TBL_AGREEMENT_MAIN a
                INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
                WHERE a.ST_ID = " + st_id + @" AND a.YR = " + yr + @" AND c.IS_LOCAL=0 AND a.ISCANCEL=0
            ) a
            RIGHT JOIN (
                SELECT a.ID as PLANYR_ID 
                FROM TBL_PLANYR a 
                INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID  
                INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID 
                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID 
                WHERE a.YR=" + yr + @" AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1 AND c.IS_LOCAL=0 AND d.BR_ID=(SELECT a.BRANCH_ID FROM hrdbuser.ST_STBR a INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID = b.ID WHERE a.ISACTIVE = 1 AND a.STAFFS_ID = " + st_id + @")
                  AND (a.BUDGET IS NULL OR a.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||a.BUDGET||',' LIKE '%,1,%' OR ','||a.BUDGET||',' LIKE '%,2,%' OR ','||a.BUDGET||',' LIKE '%,3,%' OR ','||a.BUDGET||',' LIKE '%,4,%' OR ','||a.BUDGET||',' LIKE '%,5,%' OR ','||a.BUDGET||',' LIKE '%,6,%' OR ','||a.BUDGET||',' LIKE '%,7,%' OR ','||a.BUDGET||',' LIKE '%,8,%' OR ','||a.BUDGET||',' LIKE '%,9,%' OR ','||a.BUDGET||',' LIKE '%,10,%' OR ','||a.BUDGET||',' LIKE '%,11,%' OR ','||a.BUDGET||',' LIKE '%,12,%')
                GROUP BY a.ID 
            ) b ON a.PLANYR_ID=b.PLANYR_ID
            WHERE a.PLANYR_ID is null
            UNION ALL
            SELECT a.PLANYR_ID 
            FROM TBL_AGREEMENT_MAIN a
            INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
            INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
            INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
            INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
            WHERE a.ST_ID = " + st_id + @" AND a.YR = " + yr + @" AND (a.YRHF1=1 OR a.YRHF2=1) AND c.IS_LOCAL=0 AND a.ISCANCEL=0
        ) 
        GROUP BY PLANYR_ID
      ) b ON a.PLANYR_ID=b.PLANYR_ID 
      WHERE a.PLANYR_ID IS NULL 
    ) a
    LEFT JOIN TBL_AGREEMENT_MAIN b ON a.PLANYR_ID=b.PLANYR_ID AND b.YR=" + yr + @" AND b.ST_ID=" + st_id + @"
    LEFT JOIN TBL_AGREEMENT_MAIN_IMPL c ON b.ID=c.AGREEMENT_MAIN_ID AND c.YRHF=" + yrhf + @"
    WHERE b.ISCANCEL=0 OR b.ISCANCEL IS NULL
  ) a 
  LEFT JOIN TBL_PLANYR_EVAL b ON a.PLANYR_ID=b.PLANYR_ID AND b.TP='month' AND b.INTERVAL IN (" + strMonthList + @") 
  GROUP BY a.PLANYR_ID, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.PER1 
) a 
INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID 
INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID 
ORDER BY d.NO, c.NO, b.NO";
                    }
                    else
                    {
                        strQry = @"SELECT a.PLANYR_ID, d.ID as STRAT_ID, d.NO as STRAT_NO, d.NAME as STRAT_NAME, c.ID as ACTION_ID, c.NO as ACTION_NO, c.NAME as ACTION_NAME, b.NO as PLANYR_NO, b.NAME as PLANYR_NAME, b.CRITERIA, b.CNT, b.QUALITY, a.MNTHLIST, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, NVL(a.PER1,0) as PER1, ROUND(NVL(a.PER2,0)*0.3,0) as PER2 
FROM ( 
  SELECT a.PLANYR_ID, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.PER1, ROUND(NVL(AVG(b.EVAL),0),1) as PER2, NVL(RTRIM(xmlagg (xmlelement (e, b.INTERVAL || ',') ORDER BY b.INTERVAL).extract('//text()'), ','),'-') MNTHLIST 
  FROM ( 
    SELECT a.PLANYR_ID, c.IMPL, c.IMPL1, c.IMPL2, c.IMPL3, c.IMPL4, c.IMPL5, c.PER1
    FROM(
      SELECT b.PLANYR_ID 
      FROM ( 
        SELECT a.PLANYR_ID 
        FROM TBL_AGREEMENT_MAIN a
        INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
        INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
        INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
        INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
        WHERE a.YR=" + yr + @" AND a.ST_ID=" + st_id + @" AND a.ISSPECIAL=1 AND (a.YRHF1=1 OR a.YRHF2=1)
           --AND (b.BUDGET IS NULL OR b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||b.BUDGET||',' LIKE '%,7,%' OR ','||b.BUDGET||',' LIKE '%,8,%' OR ','||b.BUDGET||',' LIKE '%,9,%' OR ','||b.BUDGET||',' LIKE '%,10,%' OR ','||b.BUDGET||',' LIKE '%,11,%' OR ','||b.BUDGET||',' LIKE '%,12,%')
        GROUP BY a.PLANYR_ID
      ) a 
      RIGHT JOIN ( 
        SELECT PLANYR_ID 
        FROM (
            SELECT b.PLANYR_ID
            FROM (
                SELECT a.PLANYR_ID 
                FROM TBL_AGREEMENT_MAIN a
                INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
                WHERE a.ST_ID = " + st_id + @" AND a.YR = " + yr + @" AND c.IS_LOCAL=0 AND a.ISCANCEL=0
            ) a
            RIGHT JOIN (
                SELECT a.ID as PLANYR_ID 
                FROM TBL_PLANYR a 
                INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID AND b.ST_ID=" + st_id + @"  
                INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID 
                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID 
                WHERE a.YR=" + yr + @" AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1 AND c.IS_LOCAL=0
                  AND (a.BUDGET IS NULL OR a.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||a.BUDGET||',' LIKE '%,1,%' OR ','||a.BUDGET||',' LIKE '%,2,%' OR ','||a.BUDGET||',' LIKE '%,3,%' OR ','||a.BUDGET||',' LIKE '%,4,%' OR ','||a.BUDGET||',' LIKE '%,5,%' OR ','||a.BUDGET||',' LIKE '%,6,%' OR ','||a.BUDGET||',' LIKE '%,7,%' OR ','||a.BUDGET||',' LIKE '%,8,%' OR ','||a.BUDGET||',' LIKE '%,9,%' OR ','||a.BUDGET||',' LIKE '%,10,%' OR ','||a.BUDGET||',' LIKE '%,11,%' OR ','||a.BUDGET||',' LIKE '%,12,%')
                GROUP BY a.ID 
            ) b ON a.PLANYR_ID=b.PLANYR_ID
            WHERE a.PLANYR_ID is null
            UNION ALL
            SELECT a.PLANYR_ID 
            FROM TBL_AGREEMENT_MAIN a
            INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
            INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
            INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
            INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
            WHERE a.ST_ID = " + st_id + @" AND a.YR = " + yr + @" AND (a.YRHF1=1 OR a.YRHF2=1) AND c.IS_LOCAL=0 AND a.ISCANCEL=0
        ) 
        GROUP BY PLANYR_ID
      ) b ON a.PLANYR_ID=b.PLANYR_ID 
      WHERE a.PLANYR_ID IS NULL 
    ) a
    LEFT JOIN TBL_AGREEMENT_MAIN b ON a.PLANYR_ID=b.PLANYR_ID AND b.YR=" + yr + @" AND b.ST_ID=" + st_id + @"
    LEFT JOIN TBL_AGREEMENT_MAIN_IMPL c ON b.ID=c.AGREEMENT_MAIN_ID AND c.YRHF=" + yrhf + @"
    WHERE b.ISCANCEL=0 OR b.ISCANCEL IS NULL
  ) a 
  LEFT JOIN TBL_PLANYR_EVAL b ON a.PLANYR_ID=b.PLANYR_ID AND b.TP='month' AND b.INTERVAL IN (" + strMonthList + @") 
  GROUP BY a.PLANYR_ID, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.PER1 
) a 
INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID 
INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID 
ORDER BY d.NO, c.NO, b.NO";
                    }
                }
                
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AgreementTab2PrintModalTable2(string yr, string yrhf, string st_id)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string month = "", month2 = "", strMonthList = "";
            string strQry = "", stposid="";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                stposid = myObj.OracleExecuteScalar("SELECT POS_ID FROM hrdbuser.ST_STBR WHERE ISACTIVE=1 AND STAFFS_ID=" + st_id).ToString();
                if (yrhf == "1")
                {
                    month = "1";
                    month2 = "6";
                }
                else if (yrhf == "2")
                {
                    month = "1";
                    month2 = "12";
                }
                for (int i = Int32.Parse(month); i <= Int32.Parse(month2); i++)
                {
                    if (strMonthList == "") strMonthList += i.ToString();
                    else strMonthList += "," + i.ToString();
                }
                //              string strQry = @"SELECT a.PLANYR_ID, d.ID as STRAT_ID, d.NO as STRAT_NO, d.NAME as STRAT_NAME, c.ID as ACTION_ID, c.NO as ACTION_NO, c.NAME as ACTION_NAME, b.NO as PLANYR_NO, b.NAME as PLANYR_NAME, b.CRITERIA, b.CNT, b.QUALITY, a.MNTHLIST, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, NVL(a.PER1,0) as PER1, ROUND(NVL(a.PER2,0)*0.3,0) as PER2 FROM ( SELECT a.PLANYR_ID, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.PER1, ROUND(NVL(AVG(b.EVAL),0),1) as PER2, NVL(RTRIM(xmlagg (xmlelement (e, b.INTERVAL || ',') ORDER BY b.INTERVAL).extract('//text()'), ','),'-') MNTHLIST FROM ( SELECT b.PLANYR_ID, c.IMPL, c.IMPL1, c.IMPL2, c.IMPL3, c.IMPL4, c.IMPL5, c.PER1
                //FROM(

                //  SELECT a.ID, MAX(b.YRHF) as YRHF
                //  FROM TBL_AGREEMENT_MAIN a
                //  LEFT JOIN TBL_AGREEMENT_MAIN_IMPL b ON a.ID = AGREEMENT_MAIN_ID AND b.YRHF IN(" + strYrhfB + @")
                //  WHERE a.YR = " + yr + strYrhfA + " AND a.ST_ID = " + st_id + @" AND a.ISSPECIAL = 0
                //  GROUP BY a.ID
                //) a
                //INNER JOIN TBL_AGREEMENT_MAIN b ON a.ID = b.ID
                //LEFT JOIN TBL_AGREEMENT_MAIN_IMPL c ON a.ID = c.AGREEMENT_MAIN_ID AND a.YRHF = c.YRHF ) a LEFT JOIN TBL_PLANYR_EVAL b ON a.PLANYR_ID=b.PLANYR_ID AND b.TP='month' AND b.INTERVAL IN (" + strMonthList + ") GROUP BY a.PLANYR_ID, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.PER1 ) a INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID ORDER BY d.NO, c.NO, b.NO";
                if (yrhf == "1")
                {
                    if (stposid == "2010201")
                    {
                        strQry = @"SELECT a.PLANYR_ID, d.ID as STRAT_ID, d.NO as STRAT_NO, d.NAME as STRAT_NAME, c.ID as ACTION_ID, c.NO as ACTION_NO, c.NAME as ACTION_NAME, b.NO as PLANYR_NO, b.NAME as PLANYR_NAME, b.CRITERIA, b.CNT, b.QUALITY, a.MNTHLIST, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, NVL(a.PER1,0) as PER1, ROUND(NVL(a.PER2,0)*0.4,0) as PER2 
FROM ( 
  SELECT a.PLANYR_ID, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.PER1, ROUND(NVL(AVG(b.EVAL),0),1) as PER2, NVL(RTRIM(xmlagg (xmlelement (e, b.INTERVAL || ',') ORDER BY b.INTERVAL).extract('//text()'), ','),'-') MNTHLIST 
  FROM ( 
    SELECT a.PLANYR_ID, c.IMPL, c.IMPL1, c.IMPL2, c.IMPL3, c.IMPL4, c.IMPL5, c.PER1
    FROM(
      SELECT b.PLANYR_ID 
      FROM ( 
        SELECT a.PLANYR_ID 
        FROM TBL_AGREEMENT_MAIN a
        INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
        INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
        INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
        INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
        WHERE a.YR=" + yr + @" AND a.ST_ID=" + st_id + @" AND a.ISSPECIAL=1 AND a.ISCANCEL=0 AND a.YRHF1=1
           --AND (b.BUDGET IS NULL OR b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||b.BUDGET||',' LIKE '%,1,%' OR ','||b.BUDGET||',' LIKE '%,2,%' OR ','||b.BUDGET||',' LIKE '%,3,%' OR ','||b.BUDGET||',' LIKE '%,4,%' OR ','||b.BUDGET||',' LIKE '%,5,%' OR ','||b.BUDGET||',' LIKE '%,6,%')
        GROUP BY a.PLANYR_ID
      ) a 
      INNER JOIN ( 
        SELECT PLANYR_ID 
        FROM (
            SELECT b.PLANYR_ID
            FROM (
                SELECT a.PLANYR_ID 
                FROM TBL_AGREEMENT_MAIN a
                INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
                WHERE a.ST_ID = " + st_id + @" AND a.YR = " + yr + @" AND c.IS_LOCAL=0 AND a.ISCANCEL=0
            ) a
            RIGHT JOIN (
                SELECT a.ID as PLANYR_ID 
                FROM TBL_PLANYR a 
                INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID  
                INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID 
                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID 
                WHERE a.YR=" + yr + @" AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1 AND c.IS_LOCAL=0 AND f.BR_ID=(SELECT b.FATHER_ID FROM hrdbuser.ST_STBR a INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID = b.ID WHERE a.ISACTIVE = 1 AND a.STAFFS_ID = " + st_id + @")
                    AND (a.BUDGET IS NULL OR a.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||a.BUDGET||',' LIKE '%,1,%' OR ','||a.BUDGET||',' LIKE '%,2,%' OR ','||a.BUDGET||',' LIKE '%,3,%' OR ','||a.BUDGET||',' LIKE '%,4,%' OR ','||a.BUDGET||',' LIKE '%,5,%' OR ','||a.BUDGET||',' LIKE '%,6,%')
                GROUP BY a.ID 
            ) b ON a.PLANYR_ID=b.PLANYR_ID
            WHERE a.PLANYR_ID is null
            UNION ALL
            SELECT a.PLANYR_ID 
            FROM TBL_AGREEMENT_MAIN a
            INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
            INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
            INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
            INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
            WHERE a.ST_ID = " + st_id + @" AND a.YR = " + yr + @" AND a.YRHF1=1 AND c.IS_LOCAL=0 AND a.ISCANCEL=0
        ) 
        GROUP BY PLANYR_ID
      ) b ON a.PLANYR_ID=b.PLANYR_ID 
    ) a
    LEFT JOIN TBL_AGREEMENT_MAIN b ON a.PLANYR_ID=b.PLANYR_ID AND b.YR=" + yr + @" AND b.ST_ID=" + st_id + @"
    LEFT JOIN TBL_AGREEMENT_MAIN_IMPL c ON b.ID=c.AGREEMENT_MAIN_ID AND c.YRHF=" + yrhf + @"
    WHERE b.ISCANCEL=0 OR b.ISCANCEL IS NULL
  ) a 
  LEFT JOIN TBL_PLANYR_EVAL b ON a.PLANYR_ID=b.PLANYR_ID AND b.TP='month' AND b.INTERVAL IN (" + strMonthList + @") 
  GROUP BY a.PLANYR_ID, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.PER1 
) a 
INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID 
INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID 
ORDER BY d.NO, c.NO, b.NO";
                    }
                    else if (stposid == "2010301")
                    {
                        strQry = @"SELECT a.PLANYR_ID, d.ID as STRAT_ID, d.NO as STRAT_NO, d.NAME as STRAT_NAME, c.ID as ACTION_ID, c.NO as ACTION_NO, c.NAME as ACTION_NAME, b.NO as PLANYR_NO, b.NAME as PLANYR_NAME, b.CRITERIA, b.CNT, b.QUALITY, a.MNTHLIST, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, NVL(a.PER1,0) as PER1, ROUND(NVL(a.PER2,0)*0.4,0) as PER2 
FROM ( 
  SELECT a.PLANYR_ID, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.PER1, ROUND(NVL(AVG(b.EVAL),0),1) as PER2, NVL(RTRIM(xmlagg (xmlelement (e, b.INTERVAL || ',') ORDER BY b.INTERVAL).extract('//text()'), ','),'-') MNTHLIST 
  FROM ( 
    SELECT a.PLANYR_ID, c.IMPL, c.IMPL1, c.IMPL2, c.IMPL3, c.IMPL4, c.IMPL5, c.PER1
    FROM(
      SELECT b.PLANYR_ID 
      FROM ( 
        SELECT a.PLANYR_ID 
        FROM TBL_AGREEMENT_MAIN a
        INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
        INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
        INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
        INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
        WHERE a.YR=" + yr + @" AND a.ST_ID=" + st_id + @" AND a.ISSPECIAL=1 AND a.ISCANCEL=0 AND a.YRHF1=1
           --AND (b.BUDGET IS NULL OR b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||b.BUDGET||',' LIKE '%,1,%' OR ','||b.BUDGET||',' LIKE '%,2,%' OR ','||b.BUDGET||',' LIKE '%,3,%' OR ','||b.BUDGET||',' LIKE '%,4,%' OR ','||b.BUDGET||',' LIKE '%,5,%' OR ','||b.BUDGET||',' LIKE '%,6,%')
        GROUP BY a.PLANYR_ID
      ) a 
      INNER JOIN ( 
        SELECT PLANYR_ID 
        FROM (
            SELECT b.PLANYR_ID
            FROM (
                SELECT a.PLANYR_ID 
                FROM TBL_AGREEMENT_MAIN a
                INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
                WHERE a.ST_ID = " + st_id + @" AND a.YR = " + yr + @" AND c.IS_LOCAL=0 AND a.ISCANCEL=0
            ) a
            RIGHT JOIN (
                SELECT a.ID as PLANYR_ID 
                FROM TBL_PLANYR a 
                INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID  
                INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID 
                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID 
                WHERE a.YR=" + yr + @" AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1 AND c.IS_LOCAL=0 AND d.BR_ID=(SELECT a.BRANCH_ID FROM hrdbuser.ST_STBR a INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID = b.ID WHERE a.ISACTIVE = 1 AND a.STAFFS_ID = " + st_id + @")
                    AND (a.BUDGET IS NULL OR a.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||a.BUDGET||',' LIKE '%,1,%' OR ','||a.BUDGET||',' LIKE '%,2,%' OR ','||a.BUDGET||',' LIKE '%,3,%' OR ','||a.BUDGET||',' LIKE '%,4,%' OR ','||a.BUDGET||',' LIKE '%,5,%' OR ','||a.BUDGET||',' LIKE '%,6,%')
                GROUP BY a.ID 
            ) b ON a.PLANYR_ID=b.PLANYR_ID
            WHERE a.PLANYR_ID is null
            UNION ALL
            SELECT a.PLANYR_ID 
            FROM TBL_AGREEMENT_MAIN a
            INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
            INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
            INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
            INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
            WHERE a.ST_ID = " + st_id + @" AND a.YR = " + yr + @" AND a.YRHF1=1 AND c.IS_LOCAL=0 AND a.ISCANCEL=0
        ) 
        GROUP BY PLANYR_ID
      ) b ON a.PLANYR_ID=b.PLANYR_ID 
    ) a
    LEFT JOIN TBL_AGREEMENT_MAIN b ON a.PLANYR_ID=b.PLANYR_ID AND b.YR=" + yr + @" AND b.ST_ID=" + st_id + @"
    LEFT JOIN TBL_AGREEMENT_MAIN_IMPL c ON b.ID=c.AGREEMENT_MAIN_ID AND c.YRHF=" + yrhf + @"
    WHERE b.ISCANCEL=0 OR b.ISCANCEL IS NULL
  ) a 
  LEFT JOIN TBL_PLANYR_EVAL b ON a.PLANYR_ID=b.PLANYR_ID AND b.TP='month' AND b.INTERVAL IN (" + strMonthList + @") 
  GROUP BY a.PLANYR_ID, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.PER1 
) a 
INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID 
INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID 
ORDER BY d.NO, c.NO, b.NO";
                    }
                    else {
                        strQry = @"SELECT a.PLANYR_ID, d.ID as STRAT_ID, d.NO as STRAT_NO, d.NAME as STRAT_NAME, c.ID as ACTION_ID, c.NO as ACTION_NO, c.NAME as ACTION_NAME, b.NO as PLANYR_NO, b.NAME as PLANYR_NAME, b.CRITERIA, b.CNT, b.QUALITY, a.MNTHLIST, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, NVL(a.PER1,0) as PER1, ROUND(NVL(a.PER2,0)*0.4,0) as PER2 
FROM ( 
  SELECT a.PLANYR_ID, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.PER1, ROUND(NVL(AVG(b.EVAL),0),1) as PER2, NVL(RTRIM(xmlagg (xmlelement (e, b.INTERVAL || ',') ORDER BY b.INTERVAL).extract('//text()'), ','),'-') MNTHLIST 
  FROM ( 
    SELECT a.PLANYR_ID, c.IMPL, c.IMPL1, c.IMPL2, c.IMPL3, c.IMPL4, c.IMPL5, c.PER1
    FROM(
      SELECT b.PLANYR_ID 
      FROM ( 
        SELECT a.PLANYR_ID 
        FROM TBL_AGREEMENT_MAIN a
        INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
        INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
        INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
        INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
        WHERE a.YR=" + yr + @" AND a.ST_ID=" + st_id + @" AND a.ISSPECIAL=1 AND a.ISCANCEL=0 AND a.YRHF1=1
           --AND (b.BUDGET IS NULL OR b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||b.BUDGET||',' LIKE '%,1,%' OR ','||b.BUDGET||',' LIKE '%,2,%' OR ','||b.BUDGET||',' LIKE '%,3,%' OR ','||b.BUDGET||',' LIKE '%,4,%' OR ','||b.BUDGET||',' LIKE '%,5,%' OR ','||b.BUDGET||',' LIKE '%,6,%')
        GROUP BY a.PLANYR_ID
      ) a 
      INNER JOIN ( 
        SELECT PLANYR_ID 
        FROM (
            SELECT b.PLANYR_ID
            FROM (
                SELECT a.PLANYR_ID 
                FROM TBL_AGREEMENT_MAIN a
                INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
                WHERE a.ST_ID = " + st_id + @" AND a.YR = " + yr + @" AND c.IS_LOCAL=0 AND a.ISCANCEL=0
            ) a
            RIGHT JOIN (
                SELECT a.ID as PLANYR_ID 
                FROM TBL_PLANYR a 
                INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID AND b.ST_ID=" + st_id + @"  
                INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID 
                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID 
                WHERE a.YR=" + yr + @" AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1 AND c.IS_LOCAL=0
                    AND (a.BUDGET IS NULL OR a.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||a.BUDGET||',' LIKE '%,1,%' OR ','||a.BUDGET||',' LIKE '%,2,%' OR ','||a.BUDGET||',' LIKE '%,3,%' OR ','||a.BUDGET||',' LIKE '%,4,%' OR ','||a.BUDGET||',' LIKE '%,5,%' OR ','||a.BUDGET||',' LIKE '%,6,%')
                GROUP BY a.ID 
            ) b ON a.PLANYR_ID=b.PLANYR_ID
            WHERE a.PLANYR_ID is null
            UNION ALL
            SELECT a.PLANYR_ID 
            FROM TBL_AGREEMENT_MAIN a
            INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
            INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
            INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
            INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
            WHERE a.ST_ID = " + st_id + @" AND a.YR = " + yr + @" AND a.YRHF1=1 AND c.IS_LOCAL=0 AND a.ISCANCEL=0
        ) 
        GROUP BY PLANYR_ID
      ) b ON a.PLANYR_ID=b.PLANYR_ID 
    ) a
    LEFT JOIN TBL_AGREEMENT_MAIN b ON a.PLANYR_ID=b.PLANYR_ID AND b.YR=" + yr + @" AND b.ST_ID=" + st_id + @"
    LEFT JOIN TBL_AGREEMENT_MAIN_IMPL c ON b.ID=c.AGREEMENT_MAIN_ID AND c.YRHF=" + yrhf + @"
    WHERE b.ISCANCEL=0 OR b.ISCANCEL IS NULL
  ) a 
  LEFT JOIN TBL_PLANYR_EVAL b ON a.PLANYR_ID=b.PLANYR_ID AND b.TP='month' AND b.INTERVAL IN (" + strMonthList + @") 
  GROUP BY a.PLANYR_ID, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.PER1 
) a 
INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID 
INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID 
ORDER BY d.NO, c.NO, b.NO";
                    }     
                }
                else
                {
                    if (stposid == "2010201")
                    {
                        strQry = @"SELECT a.PLANYR_ID, d.ID as STRAT_ID, d.NO as STRAT_NO, d.NAME as STRAT_NAME, c.ID as ACTION_ID, c.NO as ACTION_NO, c.NAME as ACTION_NAME, b.NO as PLANYR_NO, b.NAME as PLANYR_NAME, b.CRITERIA, b.CNT, b.QUALITY, a.MNTHLIST, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, NVL(a.PER1,0) as PER1, ROUND(NVL(a.PER2,0)*0.4,0) as PER2 
FROM ( 
  SELECT a.PLANYR_ID, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.PER1, ROUND(NVL(AVG(b.EVAL),0),1) as PER2, NVL(RTRIM(xmlagg (xmlelement (e, b.INTERVAL || ',') ORDER BY b.INTERVAL).extract('//text()'), ','),'-') MNTHLIST 
  FROM ( 
    SELECT a.PLANYR_ID, c.IMPL, c.IMPL1, c.IMPL2, c.IMPL3, c.IMPL4, c.IMPL5, c.PER1
    FROM(
      SELECT b.PLANYR_ID 
      FROM ( 
        SELECT a.PLANYR_ID 
        FROM TBL_AGREEMENT_MAIN a
        INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
        INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
        INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
        INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
        WHERE a.YR=" + yr + @" AND a.ST_ID=" + st_id + @" AND a.ISSPECIAL=1 AND a.ISCANCEL=0 AND (a.YRHF1=1 OR a.YRHF2=1)
           --AND (b.BUDGET IS NULL OR b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||b.BUDGET||',' LIKE '%,7,%' OR ','||b.BUDGET||',' LIKE '%,8,%' OR ','||b.BUDGET||',' LIKE '%,9,%' OR ','||b.BUDGET||',' LIKE '%,10,%' OR ','||b.BUDGET||',' LIKE '%,11,%' OR ','||b.BUDGET||',' LIKE '%,12,%')
        GROUP BY a.PLANYR_ID
      ) a 
      INNER JOIN ( 
        SELECT PLANYR_ID 
        FROM (
            SELECT b.PLANYR_ID
            FROM (
                SELECT a.PLANYR_ID 
                FROM TBL_AGREEMENT_MAIN a
                INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
                WHERE a.ST_ID = " + st_id + @" AND a.YR = " + yr + @" AND c.IS_LOCAL=0 AND a.ISCANCEL=0
            ) a
            RIGHT JOIN (
                SELECT a.ID as PLANYR_ID 
                FROM TBL_PLANYR a 
                INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID  
                INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID 
                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID 
                WHERE a.YR=" + yr + @" AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1 AND c.IS_LOCAL=0 AND f.BR_ID=(SELECT b.FATHER_ID FROM hrdbuser.ST_STBR a INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID = b.ID WHERE a.ISACTIVE = 1 AND a.STAFFS_ID = " + st_id + @")
                  AND (a.BUDGET IS NULL OR a.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||a.BUDGET||',' LIKE '%,1,%' OR ','||a.BUDGET||',' LIKE '%,2,%' OR ','||a.BUDGET||',' LIKE '%,3,%' OR ','||a.BUDGET||',' LIKE '%,4,%' OR ','||a.BUDGET||',' LIKE '%,5,%' OR ','||a.BUDGET||',' LIKE '%,6,%' OR ','||a.BUDGET||',' LIKE '%,1,%' OR ','||a.BUDGET||',' LIKE '%,2,%' OR ','||a.BUDGET||',' LIKE '%,3,%' OR ','||a.BUDGET||',' LIKE '%,4,%' OR ','||a.BUDGET||',' LIKE '%,5,%' OR ','||a.BUDGET||',' LIKE '%,6,%' OR ','||a.BUDGET||',' LIKE '%,7,%' OR ','||a.BUDGET||',' LIKE '%,8,%' OR ','||a.BUDGET||',' LIKE '%,9,%' OR ','||a.BUDGET||',' LIKE '%,10,%' OR ','||a.BUDGET||',' LIKE '%,11,%' OR ','||a.BUDGET||',' LIKE '%,12,%')
                GROUP BY a.ID 
            ) b ON a.PLANYR_ID=b.PLANYR_ID
            WHERE a.PLANYR_ID is null
            UNION ALL
            SELECT a.PLANYR_ID 
            FROM TBL_AGREEMENT_MAIN a
            INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
            INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
            INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
            INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
            WHERE a.ST_ID = " + st_id + @" AND a.YR = " + yr + @" AND (a.YRHF1=1 OR a.YRHF2=1) AND c.IS_LOCAL=0 AND a.ISCANCEL=0
        ) 
        GROUP BY PLANYR_ID
      ) b ON a.PLANYR_ID=b.PLANYR_ID 
    ) a
    LEFT JOIN TBL_AGREEMENT_MAIN b ON a.PLANYR_ID=b.PLANYR_ID AND b.YR=" + yr + @" AND b.ST_ID=" + st_id + @"
    LEFT JOIN TBL_AGREEMENT_MAIN_IMPL c ON b.ID=c.AGREEMENT_MAIN_ID AND c.YRHF=" + yrhf + @"
    WHERE b.ISCANCEL=0 OR b.ISCANCEL IS NULL
  ) a 
  LEFT JOIN TBL_PLANYR_EVAL b ON a.PLANYR_ID=b.PLANYR_ID AND b.TP='month' AND b.INTERVAL IN (" + strMonthList + @") 
  GROUP BY a.PLANYR_ID, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.PER1 
) a 
INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID 
INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID 
ORDER BY d.NO, c.NO, b.NO";
                    }
                    else if (stposid == "2010301")
                    {
                        strQry = @"SELECT a.PLANYR_ID, d.ID as STRAT_ID, d.NO as STRAT_NO, d.NAME as STRAT_NAME, c.ID as ACTION_ID, c.NO as ACTION_NO, c.NAME as ACTION_NAME, b.NO as PLANYR_NO, b.NAME as PLANYR_NAME, b.CRITERIA, b.CNT, b.QUALITY, a.MNTHLIST, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, NVL(a.PER1,0) as PER1, ROUND(NVL(a.PER2,0)*0.4,0) as PER2 
FROM ( 
  SELECT a.PLANYR_ID, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.PER1, ROUND(NVL(AVG(b.EVAL),0),1) as PER2, NVL(RTRIM(xmlagg (xmlelement (e, b.INTERVAL || ',') ORDER BY b.INTERVAL).extract('//text()'), ','),'-') MNTHLIST 
  FROM ( 
    SELECT a.PLANYR_ID, c.IMPL, c.IMPL1, c.IMPL2, c.IMPL3, c.IMPL4, c.IMPL5, c.PER1
    FROM(
      SELECT b.PLANYR_ID 
      FROM ( 
        SELECT a.PLANYR_ID 
        FROM TBL_AGREEMENT_MAIN a
        INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
        INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
        INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
        INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
        WHERE a.YR=" + yr + @" AND a.ST_ID=" + st_id + @" AND a.ISSPECIAL=1 AND a.ISCANCEL=0 AND (a.YRHF1=1 OR a.YRHF2=1)
           --AND (b.BUDGET IS NULL OR b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||b.BUDGET||',' LIKE '%,7,%' OR ','||b.BUDGET||',' LIKE '%,8,%' OR ','||b.BUDGET||',' LIKE '%,9,%' OR ','||b.BUDGET||',' LIKE '%,10,%' OR ','||b.BUDGET||',' LIKE '%,11,%' OR ','||b.BUDGET||',' LIKE '%,12,%')
        GROUP BY a.PLANYR_ID
      ) a 
      INNER JOIN ( 
        SELECT PLANYR_ID 
        FROM (
            SELECT b.PLANYR_ID
            FROM (
                SELECT a.PLANYR_ID 
                FROM TBL_AGREEMENT_MAIN a
                INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
                WHERE a.ST_ID = " + st_id + @" AND a.YR = " + yr + @" AND c.IS_LOCAL=0 AND a.ISCANCEL=0
            ) a
            RIGHT JOIN (
                SELECT a.ID as PLANYR_ID 
                FROM TBL_PLANYR a 
                INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID  
                INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID 
                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID 
                WHERE a.YR=" + yr + @" AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1 AND c.IS_LOCAL=0 AND d.BR_ID=(SELECT a.BRANCH_ID FROM hrdbuser.ST_STBR a INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID = b.ID WHERE a.ISACTIVE = 1 AND a.STAFFS_ID = " + st_id + @")
                  AND (a.BUDGET IS NULL OR a.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||a.BUDGET||',' LIKE '%,1,%' OR ','||a.BUDGET||',' LIKE '%,2,%' OR ','||a.BUDGET||',' LIKE '%,3,%' OR ','||a.BUDGET||',' LIKE '%,4,%' OR ','||a.BUDGET||',' LIKE '%,5,%' OR ','||a.BUDGET||',' LIKE '%,6,%' OR ','||a.BUDGET||',' LIKE '%,7,%' OR ','||a.BUDGET||',' LIKE '%,8,%' OR ','||a.BUDGET||',' LIKE '%,9,%' OR ','||a.BUDGET||',' LIKE '%,10,%' OR ','||a.BUDGET||',' LIKE '%,11,%' OR ','||a.BUDGET||',' LIKE '%,12,%')
                GROUP BY a.ID 
            ) b ON a.PLANYR_ID=b.PLANYR_ID
            WHERE a.PLANYR_ID is null
            UNION ALL
            SELECT a.PLANYR_ID 
            FROM TBL_AGREEMENT_MAIN a
            INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
            INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
            INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
            INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
            WHERE a.ST_ID = " + st_id + @" AND a.YR = " + yr + @" AND (a.YRHF1=1 OR a.YRHF2=1) AND c.IS_LOCAL=0 AND a.ISCANCEL=0
        ) 
        GROUP BY PLANYR_ID
      ) b ON a.PLANYR_ID=b.PLANYR_ID 
    ) a
    LEFT JOIN TBL_AGREEMENT_MAIN b ON a.PLANYR_ID=b.PLANYR_ID AND b.YR=" + yr + @" AND b.ST_ID=" + st_id + @"
    LEFT JOIN TBL_AGREEMENT_MAIN_IMPL c ON b.ID=c.AGREEMENT_MAIN_ID AND c.YRHF=" + yrhf + @"
    WHERE b.ISCANCEL=0 OR b.ISCANCEL IS NULL
  ) a 
  LEFT JOIN TBL_PLANYR_EVAL b ON a.PLANYR_ID=b.PLANYR_ID AND b.TP='month' AND b.INTERVAL IN (" + strMonthList + @") 
  GROUP BY a.PLANYR_ID, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.PER1 
) a 
INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID 
INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID 
ORDER BY d.NO, c.NO, b.NO";
                    }
                    else {
                        strQry = @"SELECT a.PLANYR_ID, d.ID as STRAT_ID, d.NO as STRAT_NO, d.NAME as STRAT_NAME, c.ID as ACTION_ID, c.NO as ACTION_NO, c.NAME as ACTION_NAME, b.NO as PLANYR_NO, b.NAME as PLANYR_NAME, b.CRITERIA, b.CNT, b.QUALITY, a.MNTHLIST, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, NVL(a.PER1,0) as PER1, ROUND(NVL(a.PER2,0)*0.4,0) as PER2 
FROM ( 
  SELECT a.PLANYR_ID, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.PER1, ROUND(NVL(AVG(b.EVAL),0),1) as PER2, NVL(RTRIM(xmlagg (xmlelement (e, b.INTERVAL || ',') ORDER BY b.INTERVAL).extract('//text()'), ','),'-') MNTHLIST 
  FROM ( 
    SELECT a.PLANYR_ID, c.IMPL, c.IMPL1, c.IMPL2, c.IMPL3, c.IMPL4, c.IMPL5, c.PER1
    FROM(
      SELECT b.PLANYR_ID 
      FROM ( 
        SELECT a.PLANYR_ID 
        FROM TBL_AGREEMENT_MAIN a
        INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
        INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
        INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
        INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
        WHERE a.YR=" + yr + @" AND a.ST_ID=" + st_id + @" AND a.ISSPECIAL=1 AND a.ISCANCEL=0 AND (a.YRHF1=1 OR a.YRHF2=1)
           --AND (b.BUDGET IS NULL OR b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||b.BUDGET||',' LIKE '%,7,%' OR ','||b.BUDGET||',' LIKE '%,8,%' OR ','||b.BUDGET||',' LIKE '%,9,%' OR ','||b.BUDGET||',' LIKE '%,10,%' OR ','||b.BUDGET||',' LIKE '%,11,%' OR ','||b.BUDGET||',' LIKE '%,12,%')
        GROUP BY a.PLANYR_ID
      ) a 
      INNER JOIN ( 
        SELECT PLANYR_ID 
        FROM (
            SELECT b.PLANYR_ID
            FROM (
                SELECT a.PLANYR_ID 
                FROM TBL_AGREEMENT_MAIN a
                INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
                WHERE a.ST_ID = " + st_id + @" AND a.YR = " + yr + @" AND c.IS_LOCAL=0 AND a.ISCANCEL=0
            ) a
            RIGHT JOIN (
                SELECT a.ID as PLANYR_ID 
                FROM TBL_PLANYR a 
                INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID AND b.ST_ID=" + st_id + @"  
                INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID 
                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID 
                WHERE a.YR=" + yr + @" AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1 AND c.IS_LOCAL=0
                  AND (a.BUDGET IS NULL OR a.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||a.BUDGET||',' LIKE '%,1,%' OR ','||a.BUDGET||',' LIKE '%,2,%' OR ','||a.BUDGET||',' LIKE '%,3,%' OR ','||a.BUDGET||',' LIKE '%,4,%' OR ','||a.BUDGET||',' LIKE '%,5,%' OR ','||a.BUDGET||',' LIKE '%,6,%' OR ','||a.BUDGET||',' LIKE '%,7,%' OR ','||a.BUDGET||',' LIKE '%,8,%' OR ','||a.BUDGET||',' LIKE '%,9,%' OR ','||a.BUDGET||',' LIKE '%,10,%' OR ','||a.BUDGET||',' LIKE '%,11,%' OR ','||a.BUDGET||',' LIKE '%,12,%')
                GROUP BY a.ID 
            ) b ON a.PLANYR_ID=b.PLANYR_ID
            WHERE a.PLANYR_ID is null
            UNION ALL
            SELECT a.PLANYR_ID 
            FROM TBL_AGREEMENT_MAIN a
            INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
            INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
            INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
            INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
            WHERE a.ST_ID = " + st_id + @" AND a.YR = " + yr + @" AND (a.YRHF1=1 OR a.YRHF2=1) AND c.IS_LOCAL=0 AND a.ISCANCEL=0
        ) 
        GROUP BY PLANYR_ID
      ) b ON a.PLANYR_ID=b.PLANYR_ID 
    ) a
    LEFT JOIN TBL_AGREEMENT_MAIN b ON a.PLANYR_ID=b.PLANYR_ID AND b.YR=" + yr + @" AND b.ST_ID=" + st_id + @"
    LEFT JOIN TBL_AGREEMENT_MAIN_IMPL c ON b.ID=c.AGREEMENT_MAIN_ID AND c.YRHF=" + yrhf + @"
    WHERE b.ISCANCEL=0 OR b.ISCANCEL IS NULL
  ) a 
  LEFT JOIN TBL_PLANYR_EVAL b ON a.PLANYR_ID=b.PLANYR_ID AND b.TP='month' AND b.INTERVAL IN (" + strMonthList + @") 
  GROUP BY a.PLANYR_ID, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.PER1 
) a 
INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID 
INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID 
ORDER BY d.NO, c.NO, b.NO";
                    }
                }
                
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AgreementTab2PrintModalTable3(string yr, string yrhf, string st_id)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strYrhfA = "", strYrhfB = "";
            string strQry = "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                if (yrhf == "1")
                {
                    strYrhfA = " AND a.YRHF1=1";
                    strYrhfB = "1";
                }
                else if (yrhf == "2")
                {
                    strYrhfA = " AND (a.YRHF1=1 OR a.YRHF2=1)";
                    strYrhfB = "1,2";
                }             
                strQry = @"SELECT b.NO, b.NAME, c.IMPL, c.IMPL1, c.IMPL2, c.IMPL3, c.IMPL4, c.IMPL5, NVL(c.PER1,0) as PER1 
FROM(
  SELECT a.ID, MAX(b.YRHF) as YRHF
  FROM TBL_AGREEMENT_OTHER a
  LEFT JOIN TBL_AGREEMENT_OTHER_IMPL b ON a.ID = AGREEMENT_OTHER_ID AND b.YRHF IN(" + strYrhfB + @")
  WHERE a.YR = " + yr + strYrhfA + " AND a.ST_ID = " + st_id + @"
  GROUP BY a.ID
) a
INNER JOIN TBL_AGREEMENT_OTHER b ON a.ID = b.ID
LEFT JOIN TBL_AGREEMENT_OTHER_IMPL c ON a.ID = c.AGREEMENT_OTHER_ID AND a.YRHF = c.YRHF";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AgreementTab2PrintModalTable3t2(string yr, string yrhf, string st_id)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string month = "", month2 = "", strMonthList = "";
            string strQry = "", stposid = "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                stposid = myObj.OracleExecuteScalar("SELECT POS_ID FROM hrdbuser.ST_STBR WHERE ISACTIVE=1 AND STAFFS_ID=" + st_id).ToString();
                if (yrhf == "1")
                {
                    month = "1";
                    month2 = "6";
                }
                else if (yrhf == "2")
                {
                    month = "1";
                    month2 = "12";
                }
                for (int i = Int32.Parse(month); i <= Int32.Parse(month2); i++)
                {
                    if (strMonthList == "") strMonthList += i.ToString();
                    else strMonthList += "," + i.ToString();
                }
                if (yrhf == "1")
                {
                    if (stposid == "2010201")
                    {
                        strQry = @"SELECT a.PLANYR_ID, d.ID as STRAT_ID, d.NO as STRAT_NO, d.NAME as STRAT_NAME, c.ID as ACTION_ID, c.NO as ACTION_NO, c.NAME as ACTION_NAME, b.NO as PLANYR_NO, b.NAME as PLANYR_NAME, b.CRITERIA, b.CNT, b.QUALITY, a.MNTHLIST, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, NVL(a.PER1,0) as PER1, ROUND(NVL(a.PER2,0)*0.3,0) as PER2 
FROM ( 
  SELECT a.PLANYR_ID, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.PER1, ROUND(NVL(AVG(b.EVAL),0),1) as PER2, NVL(RTRIM(xmlagg (xmlelement (e, b.INTERVAL || ',') ORDER BY b.INTERVAL).extract('//text()'), ','),'-') MNTHLIST 
  FROM ( 
    SELECT a.PLANYR_ID, c.IMPL, c.IMPL1, c.IMPL2, c.IMPL3, c.IMPL4, c.IMPL5, c.PER1
    FROM(
      SELECT PLANYR_ID 
        FROM (
            SELECT b.PLANYR_ID
            FROM (
                SELECT a.PLANYR_ID 
                FROM TBL_AGREEMENT_MAIN a
                INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
                WHERE a.ST_ID = " + st_id + @" AND a.YR = " + yr + @" AND c.IS_LOCAL=1 AND a.ISCANCEL=0
            ) a
            RIGHT JOIN (
                SELECT a.ID as PLANYR_ID 
                FROM TBL_PLANYR a 
                INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID  
                INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID 
                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID 
                WHERE a.YR=" + yr + @" AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1 AND c.IS_LOCAL=1 AND f.BR_ID=(SELECT b.FATHER_ID FROM hrdbuser.ST_STBR a INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID = b.ID WHERE a.ISACTIVE = 1 AND a.STAFFS_ID = " + st_id + @")
                AND (a.BUDGET IS NULL OR a.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||a.BUDGET||',' LIKE '%,1,%' OR ','||a.BUDGET||',' LIKE '%,2,%' OR ','||a.BUDGET||',' LIKE '%,3,%' OR ','||a.BUDGET||',' LIKE '%,4,%' OR ','||a.BUDGET||',' LIKE '%,5,%' OR ','||a.BUDGET||',' LIKE '%,6,%')
                GROUP BY a.ID 
            ) b ON a.PLANYR_ID=b.PLANYR_ID
            WHERE a.PLANYR_ID is null
            UNION ALL
            SELECT a.PLANYR_ID 
            FROM TBL_AGREEMENT_MAIN a
            INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
            INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
            INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
            INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
            WHERE a.ST_ID = " + st_id + @" AND a.YR = " + yr + @" AND a.YRHF1=1 AND c.IS_LOCAL=1 AND a.ISCANCEL=0
        ) 
        GROUP BY PLANYR_ID
    ) a
    LEFT JOIN TBL_AGREEMENT_MAIN b ON a.PLANYR_ID=b.PLANYR_ID AND b.YR=" + yr + @" AND b.ST_ID=" + st_id + @"
    LEFT JOIN TBL_AGREEMENT_MAIN_IMPL c ON b.ID=c.AGREEMENT_MAIN_ID AND c.YRHF=" + yrhf + @"
    WHERE b.ISCANCEL=0 OR b.ISCANCEL IS NULL
  ) a 
  LEFT JOIN TBL_PLANYR_EVAL b ON a.PLANYR_ID=b.PLANYR_ID AND b.TP='month' AND b.INTERVAL IN (" + strMonthList + @") 
  GROUP BY a.PLANYR_ID, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.PER1 
) a 
INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID 
INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID 
ORDER BY d.NO, c.NO, b.NO";
                    }
                    else if (stposid == "2010301")
                    {
                        strQry = @"SELECT a.PLANYR_ID, d.ID as STRAT_ID, d.NO as STRAT_NO, d.NAME as STRAT_NAME, c.ID as ACTION_ID, c.NO as ACTION_NO, c.NAME as ACTION_NAME, b.NO as PLANYR_NO, b.NAME as PLANYR_NAME, b.CRITERIA, b.CNT, b.QUALITY, a.MNTHLIST, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, NVL(a.PER1,0) as PER1, ROUND(NVL(a.PER2,0)*0.3,0) as PER2 
FROM ( 
  SELECT a.PLANYR_ID, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.PER1, ROUND(NVL(AVG(b.EVAL),0),1) as PER2, NVL(RTRIM(xmlagg (xmlelement (e, b.INTERVAL || ',') ORDER BY b.INTERVAL).extract('//text()'), ','),'-') MNTHLIST 
  FROM ( 
    SELECT a.PLANYR_ID, c.IMPL, c.IMPL1, c.IMPL2, c.IMPL3, c.IMPL4, c.IMPL5, c.PER1
    FROM(
      SELECT PLANYR_ID 
        FROM (
            SELECT b.PLANYR_ID
            FROM (
                SELECT a.PLANYR_ID 
                FROM TBL_AGREEMENT_MAIN a
                INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
                WHERE a.ST_ID = " + st_id + @" AND a.YR = " + yr + @" AND c.IS_LOCAL=1 AND a.ISCANCEL=0
            ) a
            RIGHT JOIN (
                SELECT a.ID as PLANYR_ID 
                FROM TBL_PLANYR a 
                INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID  
                INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID 
                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID 
                WHERE a.YR=" + yr + @" AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1 AND c.IS_LOCAL=1 AND d.BR_ID=(SELECT a.BRANCH_ID FROM hrdbuser.ST_STBR a INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID = b.ID WHERE a.ISACTIVE = 1 AND a.STAFFS_ID = " + st_id + @")
                AND (a.BUDGET IS NULL OR a.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||a.BUDGET||',' LIKE '%,1,%' OR ','||a.BUDGET||',' LIKE '%,2,%' OR ','||a.BUDGET||',' LIKE '%,3,%' OR ','||a.BUDGET||',' LIKE '%,4,%' OR ','||a.BUDGET||',' LIKE '%,5,%' OR ','||a.BUDGET||',' LIKE '%,6,%')
                GROUP BY a.ID 
            ) b ON a.PLANYR_ID=b.PLANYR_ID
            WHERE a.PLANYR_ID is null
            UNION ALL
            SELECT a.PLANYR_ID 
            FROM TBL_AGREEMENT_MAIN a
            INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
            INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
            INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
            INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
            WHERE a.ST_ID = " + st_id + @" AND a.YR = " + yr + @" AND a.YRHF1=1 AND c.IS_LOCAL=1 AND a.ISCANCEL=0
        ) 
        GROUP BY PLANYR_ID
    ) a
    LEFT JOIN TBL_AGREEMENT_MAIN b ON a.PLANYR_ID=b.PLANYR_ID AND b.YR=" + yr + @" AND b.ST_ID=" + st_id + @"
    LEFT JOIN TBL_AGREEMENT_MAIN_IMPL c ON b.ID=c.AGREEMENT_MAIN_ID AND c.YRHF=" + yrhf + @"
    WHERE b.ISCANCEL=0 OR b.ISCANCEL IS NULL
  ) a 
  LEFT JOIN TBL_PLANYR_EVAL b ON a.PLANYR_ID=b.PLANYR_ID AND b.TP='month' AND b.INTERVAL IN (" + strMonthList + @") 
  GROUP BY a.PLANYR_ID, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.PER1 
) a 
INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID 
INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID 
ORDER BY d.NO, c.NO, b.NO";
                    }
                    else
                    {
                        strQry = @"SELECT a.PLANYR_ID, d.ID as STRAT_ID, d.NO as STRAT_NO, d.NAME as STRAT_NAME, c.ID as ACTION_ID, c.NO as ACTION_NO, c.NAME as ACTION_NAME, b.NO as PLANYR_NO, b.NAME as PLANYR_NAME, b.CRITERIA, b.CNT, b.QUALITY, a.MNTHLIST, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, NVL(a.PER1,0) as PER1, ROUND(NVL(a.PER2,0)*0.3,0) as PER2 
FROM ( 
  SELECT a.PLANYR_ID, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.PER1, ROUND(NVL(AVG(b.EVAL),0),1) as PER2, NVL(RTRIM(xmlagg (xmlelement (e, b.INTERVAL || ',') ORDER BY b.INTERVAL).extract('//text()'), ','),'-') MNTHLIST 
  FROM ( 
    SELECT a.PLANYR_ID, c.IMPL, c.IMPL1, c.IMPL2, c.IMPL3, c.IMPL4, c.IMPL5, c.PER1
    FROM(
      SELECT PLANYR_ID 
        FROM (
            SELECT b.PLANYR_ID
            FROM (
                SELECT a.PLANYR_ID 
                FROM TBL_AGREEMENT_MAIN a
                INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
                WHERE a.ST_ID = " + st_id + @" AND a.YR = " + yr + @" AND c.IS_LOCAL=1 AND a.ISCANCEL=0
            ) a
            RIGHT JOIN (
                SELECT a.ID as PLANYR_ID 
                FROM TBL_PLANYR a 
                INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID AND b.ST_ID=" + st_id + @"  
                INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID 
                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID 
                WHERE a.YR=" + yr + @" AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1 AND c.IS_LOCAL=1
                AND (a.BUDGET IS NULL OR a.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||a.BUDGET||',' LIKE '%,1,%' OR ','||a.BUDGET||',' LIKE '%,2,%' OR ','||a.BUDGET||',' LIKE '%,3,%' OR ','||a.BUDGET||',' LIKE '%,4,%' OR ','||a.BUDGET||',' LIKE '%,5,%' OR ','||a.BUDGET||',' LIKE '%,6,%')
                GROUP BY a.ID 
            ) b ON a.PLANYR_ID=b.PLANYR_ID
            WHERE a.PLANYR_ID is null
            UNION ALL
            SELECT a.PLANYR_ID 
            FROM TBL_AGREEMENT_MAIN a
            INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
            INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
            INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
            INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
            WHERE a.ST_ID = " + st_id + @" AND a.YR = " + yr + @" AND a.YRHF1=1 AND c.IS_LOCAL=1 AND a.ISCANCEL=0
        ) 
        GROUP BY PLANYR_ID
    ) a
    LEFT JOIN TBL_AGREEMENT_MAIN b ON a.PLANYR_ID=b.PLANYR_ID AND b.YR=" + yr + @" AND b.ST_ID=" + st_id + @"
    LEFT JOIN TBL_AGREEMENT_MAIN_IMPL c ON b.ID=c.AGREEMENT_MAIN_ID AND c.YRHF=" + yrhf + @"
    WHERE b.ISCANCEL=0 OR b.ISCANCEL IS NULL
  ) a 
  LEFT JOIN TBL_PLANYR_EVAL b ON a.PLANYR_ID=b.PLANYR_ID AND b.TP='month' AND b.INTERVAL IN (" + strMonthList + @") 
  GROUP BY a.PLANYR_ID, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.PER1 
) a 
INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID 
INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID 
ORDER BY d.NO, c.NO, b.NO";
                    }   
                }
                else
                {
                    if (stposid == "2010201")
                    {
                        strQry = @"SELECT a.PLANYR_ID, d.ID as STRAT_ID, d.NO as STRAT_NO, d.NAME as STRAT_NAME, c.ID as ACTION_ID, c.NO as ACTION_NO, c.NAME as ACTION_NAME, b.NO as PLANYR_NO, b.NAME as PLANYR_NAME, b.CRITERIA, b.CNT, b.QUALITY, a.MNTHLIST, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, NVL(a.PER1,0) as PER1, ROUND(NVL(a.PER2,0)*0.3,0) as PER2 
FROM ( 
  SELECT a.PLANYR_ID, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.PER1, ROUND(NVL(AVG(b.EVAL),0),1) as PER2, NVL(RTRIM(xmlagg (xmlelement (e, b.INTERVAL || ',') ORDER BY b.INTERVAL).extract('//text()'), ','),'-') MNTHLIST 
  FROM ( 
    SELECT a.PLANYR_ID, c.IMPL, c.IMPL1, c.IMPL2, c.IMPL3, c.IMPL4, c.IMPL5, c.PER1
    FROM(
        SELECT PLANYR_ID 
        FROM (
            SELECT b.PLANYR_ID
            FROM (
                SELECT a.PLANYR_ID 
                FROM TBL_AGREEMENT_MAIN a
                INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
                WHERE a.ST_ID = " + st_id + @" AND a.YR = " + yr + @" AND c.IS_LOCAL=1 AND a.ISCANCEL=0
            ) a
            RIGHT JOIN (
                SELECT a.ID as PLANYR_ID 
                FROM TBL_PLANYR a 
                INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID 
                INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID 
                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID 
                WHERE a.YR=" + yr + @" AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1 AND c.IS_LOCAL=1 AND f.BR_ID=(SELECT b.FATHER_ID FROM hrdbuser.ST_STBR a INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID = b.ID WHERE a.ISACTIVE = 1 AND a.STAFFS_ID = " + st_id + @")
                  AND (a.BUDGET IS NULL OR a.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||a.BUDGET||',' LIKE '%,7,%' OR ','||a.BUDGET||',' LIKE '%,8,%' OR ','||a.BUDGET||',' LIKE '%,9,%' OR ','||a.BUDGET||',' LIKE '%,10,%' OR ','||a.BUDGET||',' LIKE '%,11,%' OR ','||a.BUDGET||',' LIKE '%,12,%')
                GROUP BY a.ID 
            ) b ON a.PLANYR_ID=b.PLANYR_ID
            WHERE a.PLANYR_ID is null
            UNION ALL
            SELECT a.PLANYR_ID 
            FROM TBL_AGREEMENT_MAIN a
            INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
            INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
            INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
            INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
            WHERE a.ST_ID = " + st_id + @" AND a.YR = " + yr + @" AND (a.YRHF1=1 OR a.YRHF2=1) AND c.IS_LOCAL=1 AND a.ISCANCEL=0
        ) 
        GROUP BY PLANYR_ID
    ) a
    LEFT JOIN TBL_AGREEMENT_MAIN b ON a.PLANYR_ID=b.PLANYR_ID AND b.YR=" + yr + @" AND b.ST_ID=" + st_id + @"
    LEFT JOIN TBL_AGREEMENT_MAIN_IMPL c ON b.ID=c.AGREEMENT_MAIN_ID AND c.YRHF=" + yrhf + @"
    WHERE b.ISCANCEL=0 OR b.ISCANCEL IS NULL
  ) a 
  LEFT JOIN TBL_PLANYR_EVAL b ON a.PLANYR_ID=b.PLANYR_ID AND b.TP='month' AND b.INTERVAL IN (" + strMonthList + @") 
  GROUP BY a.PLANYR_ID, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.PER1 
) a 
INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID 
INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID 
ORDER BY d.NO, c.NO, b.NO";
                    }
                    else if (stposid == "2010301")
                    {
                        strQry = @"SELECT a.PLANYR_ID, d.ID as STRAT_ID, d.NO as STRAT_NO, d.NAME as STRAT_NAME, c.ID as ACTION_ID, c.NO as ACTION_NO, c.NAME as ACTION_NAME, b.NO as PLANYR_NO, b.NAME as PLANYR_NAME, b.CRITERIA, b.CNT, b.QUALITY, a.MNTHLIST, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, NVL(a.PER1,0) as PER1, ROUND(NVL(a.PER2,0)*0.3,0) as PER2 
FROM ( 
  SELECT a.PLANYR_ID, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.PER1, ROUND(NVL(AVG(b.EVAL),0),1) as PER2, NVL(RTRIM(xmlagg (xmlelement (e, b.INTERVAL || ',') ORDER BY b.INTERVAL).extract('//text()'), ','),'-') MNTHLIST 
  FROM ( 
    SELECT a.PLANYR_ID, c.IMPL, c.IMPL1, c.IMPL2, c.IMPL3, c.IMPL4, c.IMPL5, c.PER1
    FROM(
        SELECT PLANYR_ID 
        FROM (
            SELECT b.PLANYR_ID
            FROM (
                SELECT a.PLANYR_ID 
                FROM TBL_AGREEMENT_MAIN a
                INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
                WHERE a.ST_ID = " + st_id + @" AND a.YR = " + yr + @" AND c.IS_LOCAL=1 AND a.ISCANCEL=0
            ) a
            RIGHT JOIN (
                SELECT a.ID as PLANYR_ID 
                FROM TBL_PLANYR a 
                INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID 
                INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID 
                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID 
                WHERE a.YR=" + yr + @" AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1 AND c.IS_LOCAL=1 AND d.BR_ID=(SELECT a.BRANCH_ID FROM hrdbuser.ST_STBR a INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID = b.ID WHERE a.ISACTIVE = 1 AND a.STAFFS_ID = " + st_id + @")
                  AND (a.BUDGET IS NULL OR a.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||a.BUDGET||',' LIKE '%,7,%' OR ','||a.BUDGET||',' LIKE '%,8,%' OR ','||a.BUDGET||',' LIKE '%,9,%' OR ','||a.BUDGET||',' LIKE '%,10,%' OR ','||a.BUDGET||',' LIKE '%,11,%' OR ','||a.BUDGET||',' LIKE '%,12,%')
                GROUP BY a.ID 
            ) b ON a.PLANYR_ID=b.PLANYR_ID
            WHERE a.PLANYR_ID is null
            UNION ALL
            SELECT a.PLANYR_ID 
            FROM TBL_AGREEMENT_MAIN a
            INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
            INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
            INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
            INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
            WHERE a.ST_ID = " + st_id + @" AND a.YR = " + yr + @" AND (a.YRHF1=1 OR a.YRHF2=1) AND c.IS_LOCAL=1 AND a.ISCANCEL=0
        ) 
        GROUP BY PLANYR_ID
    ) a
    LEFT JOIN TBL_AGREEMENT_MAIN b ON a.PLANYR_ID=b.PLANYR_ID AND b.YR=" + yr + @" AND b.ST_ID=" + st_id + @"
    LEFT JOIN TBL_AGREEMENT_MAIN_IMPL c ON b.ID=c.AGREEMENT_MAIN_ID AND c.YRHF=" + yrhf + @"
    WHERE b.ISCANCEL=0 OR b.ISCANCEL IS NULL
  ) a 
  LEFT JOIN TBL_PLANYR_EVAL b ON a.PLANYR_ID=b.PLANYR_ID AND b.TP='month' AND b.INTERVAL IN (" + strMonthList + @") 
  GROUP BY a.PLANYR_ID, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.PER1 
) a 
INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID 
INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID 
ORDER BY d.NO, c.NO, b.NO";
                    }
                    else
                    {
                        strQry = @"SELECT a.PLANYR_ID, d.ID as STRAT_ID, d.NO as STRAT_NO, d.NAME as STRAT_NAME, c.ID as ACTION_ID, c.NO as ACTION_NO, c.NAME as ACTION_NAME, b.NO as PLANYR_NO, b.NAME as PLANYR_NAME, b.CRITERIA, b.CNT, b.QUALITY, a.MNTHLIST, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, NVL(a.PER1,0) as PER1, ROUND(NVL(a.PER2,0)*0.3,0) as PER2 
FROM ( 
  SELECT a.PLANYR_ID, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.PER1, ROUND(NVL(AVG(b.EVAL),0),1) as PER2, NVL(RTRIM(xmlagg (xmlelement (e, b.INTERVAL || ',') ORDER BY b.INTERVAL).extract('//text()'), ','),'-') MNTHLIST 
  FROM ( 
    SELECT a.PLANYR_ID, c.IMPL, c.IMPL1, c.IMPL2, c.IMPL3, c.IMPL4, c.IMPL5, c.PER1
    FROM(
        SELECT PLANYR_ID 
        FROM (
            SELECT b.PLANYR_ID
            FROM (
                SELECT a.PLANYR_ID 
                FROM TBL_AGREEMENT_MAIN a
                INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
                WHERE a.ST_ID = " + st_id + @" AND a.YR = " + yr + @" AND c.IS_LOCAL=1 AND a.ISCANCEL=0
            ) a
            RIGHT JOIN (
                SELECT a.ID as PLANYR_ID 
                FROM TBL_PLANYR a 
                INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID AND b.ST_ID=" + st_id + @"  
                INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID 
                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID 
                WHERE a.YR=" + yr + @" AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1 AND c.IS_LOCAL=1
                  AND (a.BUDGET IS NULL OR a.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||a.BUDGET||',' LIKE '%,7,%' OR ','||a.BUDGET||',' LIKE '%,8,%' OR ','||a.BUDGET||',' LIKE '%,9,%' OR ','||a.BUDGET||',' LIKE '%,10,%' OR ','||a.BUDGET||',' LIKE '%,11,%' OR ','||a.BUDGET||',' LIKE '%,12,%')
                GROUP BY a.ID 
            ) b ON a.PLANYR_ID=b.PLANYR_ID
            WHERE a.PLANYR_ID is null
            UNION ALL
            SELECT a.PLANYR_ID 
            FROM TBL_AGREEMENT_MAIN a
            INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
            INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
            INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
            INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
            WHERE a.ST_ID = " + st_id + @" AND a.YR = " + yr + @" AND (a.YRHF1=1 OR a.YRHF2=1) AND c.IS_LOCAL=1 AND a.ISCANCEL=0
        ) 
        GROUP BY PLANYR_ID
    ) a
    LEFT JOIN TBL_AGREEMENT_MAIN b ON a.PLANYR_ID=b.PLANYR_ID AND b.YR=" + yr + @" AND b.ST_ID=" + st_id + @"
    LEFT JOIN TBL_AGREEMENT_MAIN_IMPL c ON b.ID=c.AGREEMENT_MAIN_ID AND c.YRHF=" + yrhf + @"
    WHERE b.ISCANCEL=0 OR b.ISCANCEL IS NULL
  ) a 
  LEFT JOIN TBL_PLANYR_EVAL b ON a.PLANYR_ID=b.PLANYR_ID AND b.TP='month' AND b.INTERVAL IN (" + strMonthList + @") 
  GROUP BY a.PLANYR_ID, a.IMPL, a.IMPL1, a.IMPL2, a.IMPL3, a.IMPL4, a.IMPL5, a.PER1 
) a 
INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID 
INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
INNER JOIN TBL_FUNC_STRAT d ON c.FUNC_STRAT_ID=d.ID 
ORDER BY d.NO, c.NO, b.NO";
                    }
                    
                }

                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AgreementTab2PrintModalTable4(string yr, string yrhf, string st_id)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string stryrhf = "";
            string strYrhfA = "", strYrhfB = "";
            string stposid = "";
            string strQry = "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                stposid = myObj.OracleExecuteScalar("SELECT POS_ID FROM hrdbuser.ST_STBR WHERE ISACTIVE=1 AND STAFFS_ID=" + st_id).ToString();
                stryrhf = yrhf;
                if (yrhf == "1")
                {
                    strYrhfA = " AND a.YRHF1=1";
                    strYrhfB = "1";
                }
                else if (yrhf == "2")
                {
                    strYrhfA = " AND (a.YRHF1=1 OR a.YRHF2=1)";
                    strYrhfB = "1,2";
                }
                if (stposid == "2010201" || stposid == "2010301")
                {
                    if (stposid == "2010201")
                    {
                        strQry = @"SELECT a.ID, a.NAME as D1, '100 хувь' as D2, NVL(b.AVGPNT,0) as D3, '-' as IMPL, null as IMPL1, null as IMPL2, null as IMPL3, null as IMPL4, null as IMPL5, NVL(c.AVGPNT,0) as PER1
FROM TBL_SRV_QUESTION a
LEFT JOIN (
  SELECT a.SRV_QUESTION_ID, NVL(ROUND(ROUND(AVG(b.PER), 3) * 0.2, 3), 0) as AVGPNT
  FROM TBL_SRV a
  INNER JOIN TBL_SRV_ANSWER b ON a.SRV_ANSWER_ID = b.ID
  INNER JOIN hrdbuser.ST_STAFFS c ON a.TRGT_ID = c.ID
  INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
  INNER JOIN hrdbuser.ST_BRANCH f ON d.BRANCH_ID = f.ID AND f.ISACTIVE = 1
  INNER JOIN hrdbuser.ST_BRANCH g ON f.FATHER_ID = g.ID AND g.ISACTIVE = 1
  WHERE a.SRV_TYPE_ID = 1 AND a.TRGT_ID=" + st_id + " AND a.YR = " + (Int32.Parse(yr) - 1).ToString() + @" AND a.YR_HF = 2
  GROUP BY a.SRV_QUESTION_ID
) b ON a.ID=b.SRV_QUESTION_ID
LEFT JOIN (
  SELECT a.SRV_QUESTION_ID, NVL(ROUND(ROUND(AVG(b.PER), 3) * 0.2, 3), 0) as AVGPNT
  FROM TBL_SRV a
  INNER JOIN TBL_SRV_ANSWER b ON a.SRV_ANSWER_ID = b.ID
  INNER JOIN hrdbuser.ST_STAFFS c ON a.TRGT_ID = c.ID
  INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
  INNER JOIN hrdbuser.ST_BRANCH f ON d.BRANCH_ID = f.ID AND f.ISACTIVE = 1
  INNER JOIN hrdbuser.ST_BRANCH g ON f.FATHER_ID = g.ID AND g.ISACTIVE = 1
  WHERE a.SRV_TYPE_ID = 1 AND a.TRGT_ID=" + st_id + " AND a.YR = " + yr + " AND a.YR_HF = " + yrhf + @"
  GROUP BY a.SRV_QUESTION_ID
) c ON a.ID=c.SRV_QUESTION_ID
WHERE a.SRV_TYPE_ID=1 AND a.IS_ACTIVE=1
ORDER BY a.ID";
                    }
                    else if (stposid == "2010301") {
                        strQry = @"SELECT a.ID, a.NAME as D1, '100 хувь' as D2, NVL(b.AVGPNT,0) as D3, '-' as IMPL, null as IMPL1, null as IMPL2, null as IMPL3, null as IMPL4, null as IMPL5, NVL(c.AVGPNT,0) as PER1
FROM TBL_SRV_QUESTION a
LEFT JOIN (
  SELECT a.SRV_QUESTION_ID, NVL(ROUND(ROUND(AVG(b.PER), 3) * 0.2, 3), 0) as AVGPNT
  FROM TBL_SRV a
  INNER JOIN TBL_SRV_ANSWER b ON a.SRV_ANSWER_ID = b.ID
  INNER JOIN hrdbuser.ST_STAFFS c ON a.TRGT_ID = c.ID
  INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
  INNER JOIN hrdbuser.ST_BRANCH f ON d.BRANCH_ID = f.ID AND f.ISACTIVE = 1
  INNER JOIN hrdbuser.ST_BRANCH g ON f.FATHER_ID = g.ID AND g.ISACTIVE = 1
  WHERE a.SRV_TYPE_ID = 2 AND a.TRGT_ID=" + st_id + " AND a.YR = " + (Int32.Parse(yr) - 1).ToString() + @" AND a.YR_HF = 2
  GROUP BY a.SRV_QUESTION_ID
) b ON a.ID=b.SRV_QUESTION_ID
LEFT JOIN (
  SELECT a.SRV_QUESTION_ID, NVL(ROUND(ROUND(AVG(b.PER), 3) * 0.2, 3), 0) as AVGPNT
  FROM TBL_SRV a
  INNER JOIN TBL_SRV_ANSWER b ON a.SRV_ANSWER_ID = b.ID
  INNER JOIN hrdbuser.ST_STAFFS c ON a.TRGT_ID = c.ID
  INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
  INNER JOIN hrdbuser.ST_BRANCH f ON d.BRANCH_ID = f.ID AND f.ISACTIVE = 1
  INNER JOIN hrdbuser.ST_BRANCH g ON f.FATHER_ID = g.ID AND g.ISACTIVE = 1
  WHERE a.SRV_TYPE_ID = 2 AND a.TRGT_ID=" + st_id + " AND a.YR = " + yr + " AND a.YR_HF = " + yrhf + @"
  GROUP BY a.SRV_QUESTION_ID
) c ON a.ID=c.SRV_QUESTION_ID
WHERE a.SRV_TYPE_ID=2 AND a.IS_ACTIVE=1
ORDER BY a.ID";
                    }
                }
                else
                {
                    strQry = @"SELECT b.D1, b.D2, b.D3, c.IMPL, c.IMPL1, c.IMPL2, c.IMPL3, c.IMPL4, c.IMPL5, NVL(c.PER1,0) as PER1 
FROM(
  SELECT a.ID, MAX(b.YRHF) as YRHF
  FROM TBL_AGREEMENT_SKILL a
  LEFT JOIN TBL_AGREEMENT_SKILL_IMPL b ON a.ID = AGREEMENT_SKILL_ID AND b.YRHF IN(" + strYrhfB + @")
  WHERE a.YR = " + yr + strYrhfA + " AND a.ST_ID = " + st_id + @"
  GROUP BY a.ID
) a
INNER JOIN TBL_AGREEMENT_SKILL b ON a.ID = b.ID
LEFT JOIN TBL_AGREEMENT_SKILL_IMPL c ON a.ID = c.AGREEMENT_SKILL_ID AND a.YRHF = c.YRHF";
                }
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AgreementTab2PrintModalTable5(string yr, string yrhf, string st_id)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string stryrhf = "", month = "", month2 = "", strMonthList = "";
            string strQry = "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                stryrhf = yrhf;
                if (yrhf == "1")
                {
                    yrhf = " AND HFYR1=1";
                    month = "1";
                    month2 = "6";
                }
                else if (yrhf == "2")
                {
                    yrhf = " AND HFYR2=1";
                    month = "1";
                    month2 = "12";
                }
                for (int i = Int32.Parse(month); i <= Int32.Parse(month2); i++)
                {
                    if (strMonthList == "") strMonthList += i.ToString();
                    else strMonthList += "," + i.ToString();
                }
//                strQry = @"SELECT a.WORKDAY, ROUND((a.WORKDAY - (a.TASALSANDAYSUM + a.HOTSORSONDAYSUM + a.ERTDAYSUM)), 2) as EVALWORKEDDAY, ROUND(((a.WORKDAY - (a.TASALSANDAYSUM + a.HOTSORSONDAYSUM + a.ERTDAYSUM)) / a.WORKDAY) * 100, 2) as PER, ROUND(ROUND(((a.WORKDAY - (a.TASALSANDAYSUM + a.HOTSORSONDAYSUM + a.ERTDAYSUM)) / a.WORKDAY) * 100, 2) * 0.05, 1) as PNT
//FROM(
//  SELECT ST_ID,
//    SUM(ISWORK) as WORKDAY,
//    SUM(CHOLOODAY) as CHOLOODAYSUM,
//    SUM(UWCHTEIDAY) as UWCHTEIDAYSUM,
//    SUM(AMRALTDAY) as AMRALTDAYSUM,
//    SUM(TOMILOLTDAY) as TOMILOLTDAYSUM,
//    SUM(ISTASALSAN) as TASALSANDAYSUM,
//    SUM(HOTSORSONMINUTE) as HOTSORSONMINUTESUM,
//    SUM(HOTSORSONDAY) as HOTSORSONDAYSUM,
//    SUM(ERTMINUTE) as ERTMINUTESUM,
//    SUM(ERTDAY) as ERTDAYSUM,
//    SUM(OROIMINUTE) as OROIMINUTESUM,
//    SUM(OROIDAY) as OROIDAYSUM
//  FROM(
//    SELECT ST_ID, TP, DT, MINTM, MAXTM, ISWORK,
//      CASE WHEN TP = 11 AND ISWORK = 1 OR TP = 12 THEN 1 ELSE 0 END as CHOLOODAY,
//      CASE WHEN TP = 13 AND ISWORK = 1 THEN 1 ELSE 0 END as UWCHTEIDAY,
//      CASE WHEN TP = 21 AND ISWORK = 1 THEN 1 ELSE 0 END as AMRALTDAY,
//      CASE WHEN TP = 31 AND ISWORK = 1 THEN 1 ELSE 0 END as TOMILOLTDAY,
//      CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM = MAXTM THEN 1 ELSE 0 END as ISTASALSAN,
//      CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'hotsorson', 'minute') ELSE 0 END as HOTSORSONMINUTE,
//      CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'hotsorson', 'day') ELSE 0 END as HOTSORSONDAY,
//      CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'ert', 'minute') ELSE 0 END as ERTMINUTE,
//      CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'ert', 'day') ELSE 0 END as ERTDAY,
//      CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'oroi', 'minute') ELSE 0 END as OROIMINUTE,
//      CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'oroi', 'day') ELSE 0 END as OROIDAY
//    FROM(
//      SELECT ST_ID, TP, DT, MINTM, MAXTM, ISWORK
//      FROM(
//        SELECT a.ST_ID, NVL(b.TP, a.TP) as TP, a.DT, a.MINTM, a.MAXTM, a.ISWORK
//        FROM(
//          SELECT a.ST_ID, NVL(b.TP, 0) as TP, a.DT, a.MINTM, a.MAXTM, a.ISWORK
//          FROM(
//            SELECT a.YEAR, a.MONTH, a.ST_ID, a.DT, NVL(b.TP, 0) as TP, NVL(b.MINTM, '00:00:00') as MINTM, NVL(b.MAXTM, '00:00:00') as MAXTM, a.ISWORK
//            FROM(
//              SELECT a.YEAR, a.MONTH, a.ST_ID, a.DT, CASE WHEN b.DT IS NULL THEN a.ISWORK ELSE 1 END as ISWORK
//              FROM(
//                SELECT YEAR, MONTH2 as MONTH, ST_ID, DT, ISWORK
//                FROM(
//                  SELECT a.ST_ID, a.YEAR, a.MONTH as MONTH1, TO_NUMBER(TO_CHAR(b.DT, 'mm')) as MONTH2, b.DT, CASE WHEN(MOD(TO_CHAR(b.DT, 'J'), 7) + 1) = 6 OR(MOD(TO_CHAR(b.DT, 'J'), 7) + 1) = 7 THEN 0 ELSE 1 END as ISWORK
//                  FROM(
//                    SELECT a.ID as ST_ID, f.YEAR, MIN(f.MONTH) as MONTH
//                    FROM hrdbuser.ST_STAFFS a
//                    INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1
//                    INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1
//                    INNER JOIN STN_TRCDLOG f ON a.FINGERID = f.ENO
//                    WHERE b.POS_ID != 2020102 AND f.YEAR = " + yr + " AND a.ID = " + st_id + @"
//                    GROUP BY a.ID, f.YEAR
//                  ) a, (
//                    SELECT DT
//                    FROM(
//                      SELECT(TO_DATE('" + yr + @"-01-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
//                      FROM DUAL
//                      CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + @"-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + @"-01-01', 'yyyy-mm-dd')
//                    )
//                    WHERE DT BETWEEN TO_DATE('" + yr + @"-01-01', 'yyyy-mm-dd') AND SYSDATE AND MOD(TO_CHAR(DT, 'J'), 7) + 1 IN(1, 2, 3, 4, 5, 6, 7)
//                  ) b
//                )
//                WHERE MONTH1 <= MONTH2
//              ) a
//              LEFT JOIN(
//                SELECT TO_DATE(HOLDATE, 'YYYY-MM-DD') as DT FROM hrdbuser.ST_HOLIDAYISWORK WHERE TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'YYYY')) = " + yr + @" AND TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'MM')) IN(" + strMonthList + @")
//              ) b ON a.DT = b.DT
//            ) a
//            LEFT JOIN(
//              SELECT a.MONTH, a.INOUT as TP, b.ID as ST_ID, TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd') as DT, TO_CHAR(MIN(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY || ' ' || a.HOUR || ':' || a.MINUTE || ':' || a.SECOND, 'yyyy-mm-dd hh24:mi:ss')), 'hh24:mi:ss') as MINTM, TO_CHAR(MAX(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY || ' ' || a.HOUR || ':' || a.MINUTE || ':' || a.SECOND, 'yyyy-mm-dd hh24:mi:ss')), 'hh24:mi:ss') as MAXTM
//              FROM STN_TRCDLOG a
//              INNER JOIN hrdbuser.ST_STAFFS b ON a.ENO = b.FINGERID
//              INNER JOIN hrdbuser.ST_STBR c ON b.ID = c.STAFFS_ID AND c.ISACTIVE = 1
//              INNER JOIN hrdbuser.STN_MOVE d ON c.MOVE_ID = d.ID AND d.ACTIVE = 1
//              WHERE c.POS_ID != 2020102 AND a.INOUT = 0 AND a.YEAR = " + yr + @" AND b.ID = " + st_id + @" AND a.MONTH IN(" + strMonthList + @") AND TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd') BETWEEN TO_DATE('" + yr + @"-01-01', 'yyyy-mm-dd') AND SYSDATE AND MOD(TO_CHAR(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd'), 'J'), 7) + 1 IN(1, 2, 3, 4, 5, 6, 7)
//              GROUP BY a.MONTH, a.INOUT, b.ID, TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd')
//            ) b ON a.ST_ID = b.ST_ID AND a.DT = b.DT
//          ) a
//          LEFT JOIN(
//            SELECT DT, STAFFS_ID, MAX(TP) as TP
//            FROM(
//              SELECT b.DT, a.STAFFS_ID, 11 as TP
//              FROM hrdbuser.ST_CHULUUDAYF3 a,
//              (
//                SELECT TO_DATE('" + yr + @"-01-01', 'YYYY-MM-DD') + (ROWNUM - 1) DT
//                FROM DUAL
//                CONNECT BY LEVEL <= ADD_MONTHS(TO_DATE('" + yr + "-" + month2 + "-01', 'YYYY-MM-DD'), 1) - TO_DATE('" + yr + @"-01-01', 'YYYY-MM-DD')
//              ) b
//              WHERE
//                a.STAFFS_ID = " + st_id + @" AND
//                (TO_DATE(a.BEGINDT, 'YYYY-MM-DD') BETWEEN TO_DATE('" + yr + @"-01-01', 'YYYY-MM-DD') AND LAST_DAY(TO_DATE('" + yr + @"-" + month2 + "-01', 'yyyy-mm-dd')) OR TO_DATE(a.ENDDT, 'YYYY-MM-DD') BETWEEN TO_DATE('" + yr + @"-01-01', 'YYYY-MM-DD') AND LAST_DAY(TO_DATE('" + yr + @"-" + month2 + @"-01', 'yyyy-mm-dd'))) AND
//                b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
//              UNION ALL
//              SELECT b.DT, a.STAFFS_ID, 12 as TP
//              FROM hrdbuser.ST_CHULUUDAYT2 a,
//              (
//                SELECT TO_DATE('" + yr + @"-01-01', 'YYYY-MM-DD') + (ROWNUM - 1) DT
//                FROM DUAL
//                CONNECT BY LEVEL <= ADD_MONTHS(TO_DATE('" + yr + @"-" + month2 + "-01', 'YYYY-MM-DD'), 1) - TO_DATE('" + yr + @"-01-01', 'YYYY-MM-DD')
//              ) b
//              WHERE
//                a.STAFFS_ID = " + st_id + @" AND
//                a.ISRECEIVED = 1 AND
//                (TO_DATE(a.BEGINDT, 'YYYY-MM-DD') BETWEEN TO_DATE('2013-01-01', 'YYYY-MM-DD') AND LAST_DAY(TO_DATE('2013-" + month2 + "-01', 'yyyy-mm-dd')) OR TO_DATE(a.ENDDT, 'YYYY-MM-DD') BETWEEN TO_DATE('2013-01-01', 'YYYY-MM-DD') AND LAST_DAY(TO_DATE('2013-" + month2 + @"-01', 'yyyy-mm-dd'))) AND
//                b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
//              UNION ALL
//              SELECT b.DT, a.STAFFS_ID, 13 as TP
//              FROM hrdbuser.ST_CHULUUSICK a,
//              (
//                SELECT TO_DATE('" + yr + @"-01-01', 'YYYY-MM-DD') + (ROWNUM - 1) DT
//                FROM DUAL
//                CONNECT BY LEVEL <= ADD_MONTHS(TO_DATE('" + yr + @"-" + month2 + "-01', 'YYYY-MM-DD'), 1) - TO_DATE('" + yr + @"-01-01', 'YYYY-MM-DD')
//              ) b
//              WHERE
//                a.STAFFS_ID = " + st_id + @" AND
//                (TO_DATE(a.BEGINDT, 'YYYY-MM-DD') BETWEEN TO_DATE('" + yr + @"-01-01', 'YYYY-MM-DD') AND LAST_DAY(TO_DATE('" + yr + @"-" + month2 + "-01', 'yyyy-mm-dd')) OR TO_DATE(a.ENDDT, 'YYYY-MM-DD') BETWEEN TO_DATE('" + yr + "-01-01', 'YYYY-MM-DD') AND LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd'))) AND
//                b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
//              UNION ALL
//              SELECT b.DT, a.STAFFS_ID, 21 as TP
//              FROM hrdbuser.ST_AMRALT a,
//              (
//                SELECT TO_DATE('" + yr + @"-01-01', 'YYYY-MM-DD') + (ROWNUM - 1) DT
//                FROM DUAL
//                CONNECT BY LEVEL <= ADD_MONTHS(TO_DATE('" + yr + @"-" + month2 + "-01', 'YYYY-MM-DD'), 1) - TO_DATE('" + yr + @"-01-01', 'YYYY-MM-DD')
//              ) b
//              WHERE
//                a.STAFFS_ID = " + st_id + @" AND
//                a.TZISRECEIVED = 1 AND
//                (TO_DATE(a.BEGINDT, 'YYYY-MM-DD') BETWEEN TO_DATE('" + yr + @"-01-01', 'YYYY-MM-DD') AND LAST_DAY(TO_DATE('" + yr + @"-" + month2 + "-01', 'yyyy-mm-dd')) OR TO_DATE(a.ENDDT, 'YYYY-MM-DD') BETWEEN TO_DATE('" + yr + @"-01-01', 'YYYY-MM-DD') AND LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd'))) AND
//                b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
//              UNION ALL
//              SELECT b.DT, a.STAFFS_ID, 31 as TP
//              FROM hrdbuser.ST_TOMILOLT_STAFFS a
//              INNER JOIN hrdbuser.ST_TOMILOLT c ON a.TOMILOLT_ID = c.ID,
//              (
//                SELECT TO_DATE('" + yr + @"-01-01', 'YYYY-MM-DD') + (ROWNUM - 1) DT
//                FROM DUAL
//                CONNECT BY LEVEL <= ADD_MONTHS(TO_DATE('" + yr + "-" + month2 + "-01', 'YYYY-MM-DD'), 1) - TO_DATE('" + yr + @"-01-01', 'YYYY-MM-DD')
//              ) b
//              WHERE
//                a.STAFFS_ID = " + st_id + @" AND
//                (
//                  TO_DATE(c.FROMDATE, 'YYYY-MM-DD')
//                  BETWEEN
//                    TO_DATE('" + yr + @"-01-01', 'YYYY-MM-DD') AND LAST_DAY(TO_DATE('" + yr + @"-" + month2 + @"-01', 'yyyy-mm-dd')) OR
//                  TO_DATE(c.TODATE, 'YYYY-MM-DD')
//                  BETWEEN
//                    TO_DATE('" + yr + @"-01-01', 'YYYY-MM-DD') AND LAST_DAY(TO_DATE('" + yr + @"-" + month2 + @"-01', 'yyyy-mm-dd'))) AND
//                b.DT BETWEEN TO_DATE(c.FROMDATE, 'YYYY-MM-DD') AND TO_DATE(c.TODATE, 'YYYY-MM-DD')
//            )
//            GROUP BY DT, STAFFS_ID
//          ) b ON a.DT = b.DT AND a.ST_ID = b.STAFFS_ID
//        ) a
//        LEFT JOIN(
//          SELECT TO_DATE('" + yr + @"-' || HOLMONTH || '-' || HOLDAY, 'YYYY-MM-DD') as DT, 91 as TP
//          FROM hrdbuser.ST_HOLIDAYOFFICIAL
//          WHERE HOLMONTH IN(" + strMonthList + @")
//          UNION ALL
//          SELECT TO_DATE(HOLDATE, 'YYYY-MM-DD') as DT, 91 as TP
//          FROM hrdbuser.ST_HOLIDAYUNOFFICIAL
//          WHERE TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'YYYY')) = " + yr + @" AND TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'MM')) IN(" + strMonthList + @")
//        ) b ON a.DT = b.DT
//        ORDER BY a.DT
//      )
//    )
//  )
//  GROUP BY ST_ID
//) a";
                strQry = @"SELECT a.WORKDAY, ROUND((a.WORKDAY - (a.TASALSANDAYSUM + a.HOTSORSONDAYSUM + a.ERTDAYSUM)), 2) as EVALWORKEDDAY, ROUND(((a.WORKDAY - (a.TASALSANDAYSUM + a.HOTSORSONDAYSUM + a.ERTDAYSUM)) / a.WORKDAY) * 100, 3) as PER, ROUND(ROUND(((a.WORKDAY - (a.TASALSANDAYSUM + a.HOTSORSONDAYSUM + a.ERTDAYSUM)) / a.WORKDAY) * 100, 3) * 0.05, 3) as PNT
FROM(
    SELECT ST_ID,
      SUM(ISWORK) as WORKDAY,
      SUM(CHOLOODAY) as CHOLOODAYSUM,
      SUM(UWCHTEIDAY) as UWCHTEIDAYSUM,
      SUM(AMRALTDAY) as AMRALTDAYSUM,
      SUM(TOMILOLTDAY) as TOMILOLTDAYSUM,
      SUM(ISTASALSAN) as TASALSANDAYSUM,
      SUM(HOTSORSONMINUTE) as HOTSORSONMINUTESUM,
      SUM(HOTSORSONDAY) as HOTSORSONDAYSUM,
      SUM(ERTMINUTE) as ERTMINUTESUM,
      SUM(ERTDAY) as ERTDAYSUM,
      SUM(OROIMINUTE) as OROIMINUTESUM,
      SUM(OROIDAY) as OROIDAYSUM
    FROM(
      SELECT ST_ID, TP, DT, MINTM, MAXTM, ISWORK,
        CASE WHEN TP = 11 AND ISWORK = 1 OR TP = 12 THEN 1 ELSE 0 END as CHOLOODAY,
        CASE WHEN TP = 13 AND ISWORK = 1 THEN 1 ELSE 0 END as UWCHTEIDAY,
        CASE WHEN TP = 21 AND ISWORK = 1 THEN 1 ELSE 0 END as AMRALTDAY,
        CASE WHEN TP = 31 AND ISWORK = 1 THEN 1 ELSE 0 END as TOMILOLTDAY,
        CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM = MAXTM THEN 1 ELSE 0 END as ISTASALSAN,
        CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'hotsorson', 'minute') ELSE 0 END as HOTSORSONMINUTE,
        CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'hotsorson', 'day') ELSE 0 END as HOTSORSONDAY,
        CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'ert', 'minute') ELSE 0 END as ERTMINUTE,
        CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'ert', 'day') ELSE 0 END as ERTDAY,
        CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'oroi', 'minute') ELSE 0 END as OROIMINUTE,
        CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'oroi', 'day') ELSE 0 END as OROIDAY
      FROM(
        SELECT a.ST_ID, a.TP, a.DT, a.MINTM, a.MAXTM, CASE WHEN b.DT is null THEN a.ISWORK ELSE 0 END as ISWORK
        FROM(
          SELECT a.ST_ID, NVL(b.TP, 0) as TP, a.DT, a.MINTM, a.MAXTM, a.ISWORK
          FROM(
            SELECT a.ST_ID, a.DT, NVL(b.TP, 0) as TP, NVL(b.MINTM, '00:00:00') as MINTM, NVL(b.MAXTM, '00:00:00') as MAXTM, a.ISWORK
            FROM(
              SELECT a.STAFFS_ID as ST_ID, a.DT, CASE WHEN b.DT IS NULL THEN a.ISWORK ELSE 1 END as ISWORK
              FROM ( 
                SELECT a.ID, b.STAFFS_ID, c.FATHER_ID as GAZAR_ID, c.ID as HELTES_ID, a.DT, CASE WHEN(MOD(TO_CHAR(a.DT, 'J'), 7) + 1) = 6 OR(MOD(TO_CHAR(a.DT, 'J'), 7) + 1) = 7 THEN 0 ELSE 1 END as ISWORK
                FROM (
                  SELECT a.ID, a.BEGINDT, a.ENDDT, b.DT
                  FROM (
                    SELECT a.ID, 
                      CASE 
                        WHEN TO_DATE(a.DT,'YYYY-MM-DD')>TO_DATE('" + yr + "-" + month + @"-01','YYYY-MM-DD') 
                        THEN a.DT 
                        ELSE '" + yr + "-" + month + @"-01' 
                      END as BEGINDT, 
                      CASE 
                        --WHEN TO_DATE(CASE WHEN c.ACTIVE=0 THEN NVL(a.ENDDT,a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE,'YYYY-MM-DD')) END,'YYYY-MM-DD')<LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01','YYYY-MM-DD')) 
                        --THEN CASE WHEN c.ACTIVE=0 THEN NVL(a.ENDDT,a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE,'YYYY-MM-DD')) END ELSE TO_CHAR(LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01','YYYY-MM-DD')),'YYYY-MM-DD') END as ENDDT
                        WHEN TO_DATE(CASE WHEN c.ACTIVE=0 THEN TO_CHAR((TO_DATE(NVL(a.ENDDT,a.DT),'YYYY-MM-DD')-1),'YYYY-MM-DD') ELSE NVL(TO_CHAR((TO_DATE(a.ENDDT,'YYYY-MM-DD')-1),'YYYY-MM-DD'), TO_CHAR(SYSDATE,'YYYY-MM-DD')) END,'YYYY-MM-DD')<LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01','YYYY-MM-DD')) 
                        THEN CASE WHEN c.ACTIVE=0 THEN TO_CHAR((TO_DATE(NVL(a.ENDDT,a.DT),'YYYY-MM-DD')-1),'YYYY-MM-DD') ELSE NVL(TO_CHAR((TO_DATE(a.ENDDT,'YYYY-MM-DD')-1),'YYYY-MM-DD'), TO_CHAR(SYSDATE,'YYYY-MM-DD')) END ELSE TO_CHAR(LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01','YYYY-MM-DD')),'YYYY-MM-DD') END as ENDDT
                    FROM hrdbuser.ST_STBR a
                    INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID=b.ID AND b.ISACTIVE=1
                    INNER JOIN hrdbuser.STN_MOVE c ON a.MOVE_ID=c.ID
                    WHERE a.POS_ID!=2020102 AND c.ACTIVE=1 AND a.STAFFS_ID=" + st_id + @"
                    AND ((
                        TO_DATE('" + yr + "-" + month + @"-01','YYYY-MM-DD') 
                        BETWEEN TO_DATE(a.DT,'YYYY-MM-DD') AND TO_DATE(CASE WHEN c.ACTIVE=0 THEN NVL(a.ENDDT,a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE,'YYYY-MM-DD')) END,'YYYY-MM-DD')
                        OR 
                        LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01','YYYY-MM-DD')) 
                        BETWEEN TO_DATE(a.DT,'YYYY-MM-DD') AND TO_DATE(CASE WHEN c.ACTIVE=0 THEN NVL(a.ENDDT,a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE,'YYYY-MM-DD')) END,'YYYY-MM-DD')
                      ) OR 
                        (
                          TO_DATE('" + yr + "-" + month + @"-01','YYYY-MM-DD')<TO_DATE(a.DT,'YYYY-MM-DD') AND LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01','YYYY-MM-DD'))>TO_DATE(a.DT,'YYYY-MM-DD')
                        ))
                  ) a, (
                    SELECT DT
                    FROM(
                      SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                      FROM DUAL
                      CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                    )
                    WHERE DT BETWEEN TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') AND SYSDATE AND MOD(TO_CHAR(DT, 'J'), 7) + 1 IN(1, 2, 3, 4, 5, 6, 7)
                  ) b
                ) a
                INNER JOIN hrdbuser.ST_STBR b ON a.ID=b.ID
                INNER JOIN hrdbuser.ST_BRANCH c ON b.BRANCH_ID=c.ID AND c.ISACTIVE=1
                WHERE a.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD') AND b.POS_ID!=2020102 AND b.STAFFS_ID=" + st_id + @"
              ) a
              LEFT JOIN(
                SELECT TO_DATE(HOLDATE, 'YYYY-MM-DD') as DT FROM hrdbuser.ST_HOLIDAYISWORK WHERE TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'YYYY')) = " + yr + @" AND TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'MM')) IN(" + strMonthList + @")
              ) b ON a.DT = b.DT  
            ) a
            LEFT JOIN(
              SELECT a.MONTH, a.INOUT as TP, b.ID as ST_ID, TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd') as DT, TO_CHAR(MIN(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY || ' ' || a.HOUR || ':' || a.MINUTE || ':' || a.SECOND, 'yyyy-mm-dd hh24:mi:ss')), 'hh24:mi:ss') as MINTM, TO_CHAR(MAX(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY || ' ' || a.HOUR || ':' || a.MINUTE || ':' || a.SECOND, 'yyyy-mm-dd hh24:mi:ss')), 'hh24:mi:ss') as MAXTM
              FROM STN_TRCDLOG a
              INNER JOIN hrdbuser.ST_STAFFS b ON a.ENO = b.FINGERID
              INNER JOIN hrdbuser.ST_STBR c ON b.ID = c.STAFFS_ID
              INNER JOIN hrdbuser.STN_MOVE d ON c.MOVE_ID = d.ID
              INNER JOIN hrdbuser.ST_BRANCH f ON c.BRANCH_ID = f.ID AND f.ISACTIVE = 1
              WHERE c.POS_ID!=2020102 AND a.INOUT = 0 AND a.YEAR = " + yr + @" AND a.MONTH IN(" + strMonthList + @") AND TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd') BETWEEN TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') AND SYSDATE AND MOD(TO_CHAR(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd'), 'J'), 7) + 1 IN(1, 2, 3, 4, 5, 6, 7)
              GROUP BY a.MONTH, a.INOUT, b.ID, TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd')
            ) b ON a.ST_ID = b.ST_ID AND a.DT = b.DT  
          ) a
          LEFT JOIN(
            SELECT DT, STAFFS_ID, MAX(TP) as TP
            FROM(
              SELECT b.DT, a.STAFFS_ID, 11 as TP
              FROM hrdbuser.ST_CHULUUDAYF3 a,
              (
                SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                FROM DUAL
                CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
              ) b
              WHERE
                b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
              UNION ALL
              SELECT b.DT, a.STAFFS_ID, 12 as TP
              FROM hrdbuser.ST_CHULUUDAYT2 a,
              (
                SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                FROM DUAL
                CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
              ) b
              WHERE
                a.ISRECEIVED = 1 AND
                b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
              UNION ALL
              SELECT b.DT, a.STAFFS_ID, 13 as TP
              FROM hrdbuser.ST_CHULUUSICK a,
              (
                SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                FROM DUAL
                CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
              ) b
              WHERE
                b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
              UNION ALL
              SELECT b.DT, a.STAFFS_ID, 21 as TP
              FROM hrdbuser.ST_AMRALT a,
              (
                SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                FROM DUAL
                CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
              ) b
              WHERE
                a.TZISRECEIVED = 1 AND
                b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
              UNION ALL
              SELECT b.DT, a.STAFFS_ID, 31 as TP
              FROM hrdbuser.ST_TOMILOLT_STAFFS a
              INNER JOIN hrdbuser.ST_TOMILOLT c ON a.TOMILOLT_ID = c.ID,
              (
                SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                FROM DUAL
                CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
              ) b
              WHERE
                b.DT BETWEEN TO_DATE(c.FROMDATE, 'YYYY-MM-DD') AND TO_DATE(c.TODATE, 'YYYY-MM-DD')
            )
            GROUP BY DT, STAFFS_ID
          ) b ON a.DT = b.DT AND a.ST_ID = b.STAFFS_ID
        ) a
        LEFT JOIN(
          SELECT TO_DATE('" + yr + @"-' || HOLMONTH || '-' || HOLDAY, 'YYYY-MM-DD') as DT
          FROM hrdbuser.ST_HOLIDAYOFFICIAL
          WHERE HOLMONTH IN(" + strMonthList + @")
          UNION ALL
          SELECT TO_DATE(HOLDATE, 'YYYY-MM-DD') as DT
          FROM hrdbuser.ST_HOLIDAYUNOFFICIAL
          WHERE TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'YYYY')) = " + yr + @" AND TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'MM')) IN(" + strMonthList + @")
        ) b ON a.DT = b.DT
        GROUP BY a.ST_ID, a.TP, a.DT, a.MINTM, a.MAXTM, CASE WHEN b.DT is null THEN a.ISWORK ELSE 0 END
      )
    )
    GROUP BY ST_ID
) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AgreementTab2PrintModalTable6(string yr, string yrhf, string st_id)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string posid = "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObjGetTableData.getUserInfo(st_id);
                posid = ds.Tables[0].Rows[0]["POSID"].ToString();
                if (posid == "2010201") ds = myObj.OracleExecuteDataSet(@"SELECT ROUND(AVG(b.PER),3) as AVGPER, ROUND(ROUND(AVG(b.PER),3)*0.05,3) as AVGPNT 
FROM TBL_SRV a
INNER JOIN TBL_SRV_ANSWER b ON a.SRV_ANSWER_ID = b.ID
INNER JOIN hrdbuser.ST_STAFFS c ON a.TRGT_ID = c.ID
INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
WHERE a.SRV_TYPE_ID = 3 AND a.YR = " + yr + " AND a.YR_HF = " + yrhf + " AND a.TRGT_ID = " + st_id);
                else ds = myObj.OracleExecuteDataSet(@"SELECT ROUND(AVG(b.PER),3) as AVGPER, ROUND(ROUND(AVG(b.PER),3)*0.05,3) as AVGPNT 
FROM TBL_SRV a
INNER JOIN TBL_SRV_ANSWER b ON a.SRV_ANSWER_ID = b.ID
INNER JOIN hrdbuser.ST_STAFFS c ON a.TRGT_ID = c.ID
INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
WHERE a.SRV_TYPE_ID = 3 AND a.YR = " + yr + " AND a.YR_HF = " + yrhf + " AND a.TRGT_ID = " + st_id);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AgreementStaff30Dahi(string yr, string yrhf, string stid)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strGazarId1 = "", strHeltesId1 = "";
            string strGazarId2 = "", strHeltesId2 = "";
            string strGazarId3 = "", strHeltesId3 = "";
            string month = "", month2 = "", strMonthList = "";
            string str30Per = "0";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                if (yrhf == "1")
                {
                    month = "1";
                    month2 = "6";
                }
                else if (yrhf == "2")
                {
                    month = "7";
                    month2 = "12";
                }
                for (int i = Int32.Parse(month); i <= Int32.Parse(month2); i++)
                {
                    if (strMonthList == "") strMonthList += i.ToString();
                    else strMonthList += "," + i.ToString();
                }
                string strQry = @"SELECT c.ID as HELTESID, c.FATHER_ID as GAZARID 
FROM hrdbuser.ST_STAFFS a 
INNER JOIN hrdbuser.ST_STBR b ON a.ID=b.STAFFS_ID AND b.ISACTIVE=1
INNER JOIN hrdbuser.ST_BRANCH c ON b.BRANCH_ID=c.ID AND c.ISACTIVE=1
WHERE a.ID=" + stid;
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                if (ds.Tables[0].Rows[0]["HELTESID"].ToString() != ds.Tables[0].Rows[0]["GAZARID"].ToString())
                {
                    strGazarId1 = " AND d.FATHER_ID=" + ds.Tables[0].Rows[0]["GAZARID"].ToString();
                    strGazarId2 = " AND c.FATHER_ID=" + ds.Tables[0].Rows[0]["GAZARID"].ToString();
                    strGazarId3 = " AND g.FATHER_ID=" + ds.Tables[0].Rows[0]["GAZARID"].ToString();
                    strHeltesId1 = " AND d.ID=" + ds.Tables[0].Rows[0]["HELTESID"].ToString();
                    strHeltesId2 = " AND c.ID=" + ds.Tables[0].Rows[0]["HELTESID"].ToString();
                    strHeltesId3 = " AND g.ID=" + ds.Tables[0].Rows[0]["HELTESID"].ToString();
                }
                else
                {
                    strGazarId1 = " AND d.FATHER_ID=" + ds.Tables[0].Rows[0]["GAZARID"].ToString();
                    strGazarId2 = " AND c.FATHER_ID=" + ds.Tables[0].Rows[0]["GAZARID"].ToString();
                    strGazarId3 = " AND g.FATHER_ID=" + ds.Tables[0].Rows[0]["GAZARID"].ToString();
                }
                strQry = @"SELECT a.SUMPER 
FROM ( 
  SELECT ROWNUM as ROWNO, a.NEGJ, a.POS_NAME, a.STAFFNAME, a.SUMPER 
  FROM ( 
    SELECT a.NEGJ, a.POS_NAME, a.STAFFNAME, a.SUMPER 
    FROM ( 
      SELECT f.SORT as GAZARSORT, d.SORT as HELTESSORT, g.SORT as POSSSORT, a.ID as ST_ID, CASE WHEN d.ID=d.FATHER_ID THEN d.INITNAME ELSE f.INITNAME||'-'||d.INITNAME END AS NEGJ, g.NAME as POS_NAME, SUBSTR(a.LNAME,0,1)||'.'||SUBSTR(a.FNAME,1,1)||LOWER(SUBSTR(a.FNAME,2)) as STAFFNAME, NVL(h.NIIT_PERAVG,0)+NVL(h.TUSGAI_PERAVG,0)+NVL(h.TAB2PER1AVG,0)+NVL(h.TAB2PERIRTS,0)+NVL(h.TAB2PERHAMT,0) as SUMPER 
      FROM hrdbuser.ST_STAFFS a
      INNER JOIN hrdbuser.ST_STBR b ON a.ID=b.STAFFS_ID AND b.ISACTIVE=1 
      INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID=c.ID AND c.ACTIVE=1
      INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID=d.ID 
      INNER JOIN hrdbuser.ST_BRANCH f ON d.FATHER_ID=f.ID 
      INNER JOIN hrdbuser.STN_POS g ON b.POS_ID=g.ID 
      LEFT JOIN (
        SELECT a.ST_ID, a.NIIT_PLANCNT, a.NIIT_IMPLCNT, CASE WHEN COUNT(b.ST_ID)!=0 THEN ROUND((a.NIIT_PERAVG+ROUND(AVG(NVL(c.PER1,0)),0))/2,0) ELSE a.NIIT_PERAVG END as NIIT_PERAVG, a.TUSGAI_PLANCNT, a.TUSGAI_IMPLCNT, a.TUSGAI_PERAVG, a.TAB2PLANCNT, a.TAB2IMPLCNT, a.TAB2PER1AVG, a.TAB2PERIRTS, a.TAB2PERHAMT, COUNT(b.ST_ID) as TAB3PLANCNT, SUM(NVL2(c.IMPL,1,0)) as TAB3IMPLCNT, ROUND(AVG(NVL(c.PER1,0)),0) as TAB3PER1AVG 
        FROM ( 
          SELECT a.ST_ID, a.NIIT_PLANCNT, a.NIIT_IMPLCNT, a.NIIT_PERAVG, a.TUSGAI_PLANCNT, a.TUSGAI_IMPLCNT, a.TUSGAI_PERAVG, COUNT(b.ST_ID) as TAB2PLANCNT, SUM(NVL2(f.IMPL,1,0)) as TAB2IMPLCNT, ROUND(AVG(NVL(f.PER1,0)),0) as TAB2PER1AVG, NVL(c.PER,0) as TAB2PERIRTS, NVL(d.AVGPNT,0) as TAB2PERHAMT 
          FROM ( 
            SELECT a.ST_ID, a.NIIT_PLANCNT, a.NIIT_IMPLCNT, a.NIIT_PERAVG, COUNT(a.TUSGAI_PLANCNT) as TUSGAI_PLANCNT, SUM(a.TUSGAI_IMPLCNT) as TUSGAI_IMPLCNT, ROUND(AVG(a.TUSGAI_PER2AVG+TUSGAI_PER1),0) as TUSGAI_PERAVG 
            FROM ( 
              SELECT a.ST_ID, a.NIIT_PLANCNT, a.NIIT_IMPLCNT, a.NIIT_PERAVG, f.PLANYR_ID as TUSGAI_PLANCNT, NVL2(h.IMPL,1,0) as TUSGAI_IMPLCNT, ROUND(ROUND(NVL(AVG(g.EVAL),0),1)*0.4,0) as TUSGAI_PER2AVG, NVL(h.PER1,0) as TUSGAI_PER1 
              FROM ( 
                SELECT a.ST_ID, COUNT(a.NIIT_PLANCNT) as NIIT_PLANCNT, SUM(a.NIIT_IMPLCNT) as NIIT_IMPLCNT, ROUND(AVG(a.NIIT_PER2AVG+NIIT_PER1),0) as NIIT_PERAVG 
                FROM ( 
                  SELECT a.ID as ST_ID, f.PLANYR_ID as NIIT_PLANCNT, NVL2(h.IMPL,1,0) as NIIT_IMPLCNT, ROUND(ROUND(NVL(AVG(g.EVAL),0),1)*0.3,0) as NIIT_PER2AVG, NVL(h.PER1,0) as NIIT_PER1
                  FROM hrdbuser.ST_STAFFS a
                  INNER JOIN hrdbuser.ST_STBR b ON a.ID=b.STAFFS_ID AND b.ISACTIVE=1 
                  INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID=c.ID AND c.ACTIVE=1
                  INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID=d.ID 
                  LEFT JOIN TBL_AGREEMENT_MAIN f ON a.ID=f.ST_ID AND f.YR=" + yr + " AND f.YRHF" + yrhf + @"=1 AND f.ISSPECIAL=0 
                  LEFT JOIN TBL_AGREEMENT_MAIN_IMPL h ON f.ID = h.AGREEMENT_MAIN_ID AND h.YRHF = " + yrhf + @"
                  LEFT JOIN TBL_PLANYR_EVAL g ON f.PLANYR_ID = g.PLANYR_ID AND g.TP = 'month'
                  WHERE b.POS_ID != 2020102" + strGazarId1 + strHeltesId1 + @"
                  HAVING NVL(AVG(g.EVAL), 0)!= 0
                  GROUP BY a.ID, f.PLANYR_ID, NVL2(h.IMPL, 1, 0),NVL(h.PER1, 0)
                ) a
                GROUP BY a.ST_ID
              ) a
              LEFT JOIN TBL_AGREEMENT_MAIN f ON a.ST_ID = f.ST_ID AND f.YR = " + yr + " AND f.YRHF" + yrhf + @" = 1 AND f.ISSPECIAL = 1
              LEFT JOIN TBL_AGREEMENT_MAIN_IMPL h ON f.ID = h.AGREEMENT_MAIN_ID AND h.YRHF = " + yrhf + @"
              LEFT JOIN TBL_PLANYR_EVAL g ON f.PLANYR_ID = g.PLANYR_ID AND g.TP = 'month'
              HAVING NVL(AVG(g.EVAL), 0)!= 0
              GROUP BY a.ST_ID, a.NIIT_PLANCNT, a.NIIT_IMPLCNT, a.NIIT_PERAVG, f.PLANYR_ID, NVL2(h.IMPL, 1, 0),NVL(h.PER1, 0)
            ) a
            GROUP BY a.ST_ID, a.NIIT_PLANCNT, a.NIIT_IMPLCNT, a.NIIT_PERAVG
          ) a
          LEFT JOIN TBL_AGREEMENT_SKILL b ON a.ST_ID = b.ST_ID AND b.YR = " + yr + " AND b.YRHF" + yrhf + @" = 1
          LEFT JOIN TBL_AGREEMENT_SKILL_IMPL f ON b.ID = f.AGREEMENT_SKILL_ID AND f.YRHF = " + yrhf + @"
          LEFT JOIN (
            SELECT ST_ID, ROUND(ROUND(((WORKDAY - (TASALSANDAYSUM + HOTSORSONDAYSUM + ERTDAYSUM)) / WORKDAY) * 100, 3) * 0.05, 3) as PER
            FROM(
              SELECT ST_ID,
                SUM(ISWORK) as WORKDAY,
                SUM(CHOLOODAY) as CHOLOODAYSUM,
                SUM(UWCHTEIDAY) as UWCHTEIDAYSUM,
                SUM(AMRALTDAY) as AMRALTDAYSUM,
                SUM(TOMILOLTDAY) as TOMILOLTDAYSUM,
                SUM(ISTASALSAN) as TASALSANDAYSUM,
                SUM(HOTSORSONMINUTE) as HOTSORSONMINUTESUM,
                SUM(HOTSORSONDAY) as HOTSORSONDAYSUM,
                SUM(ERTMINUTE) as ERTMINUTESUM,
                SUM(ERTDAY) as ERTDAYSUM,
                SUM(OROIMINUTE) as OROIMINUTESUM,
                SUM(OROIDAY) as OROIDAYSUM
              FROM(
                SELECT ST_ID, TP, DT, MINTM, MAXTM, ISWORK,
                  CASE WHEN TP = 11 AND ISWORK = 1 OR TP = 12 THEN 1 ELSE 0 END as CHOLOODAY,
                  CASE WHEN TP = 13 AND ISWORK = 1 THEN 1 ELSE 0 END as UWCHTEIDAY,
                  CASE WHEN TP = 21 AND ISWORK = 1 THEN 1 ELSE 0 END as AMRALTDAY,
                  CASE WHEN TP = 31 AND ISWORK = 1 THEN 1 ELSE 0 END as TOMILOLTDAY,
                  CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM = MAXTM THEN 1 ELSE 0 END as ISTASALSAN,
                  CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'hotsorson', 'minute') ELSE 0 END as HOTSORSONMINUTE,
                  CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'hotsorson', 'day') ELSE 0 END as HOTSORSONDAY,
                  CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'ert', 'minute') ELSE 0 END as ERTMINUTE,
                  CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'ert', 'day') ELSE 0 END as ERTDAY,
                  CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'oroi', 'minute') ELSE 0 END as OROIMINUTE,
                  CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'oroi', 'day') ELSE 0 END as OROIDAY
                FROM(
                  SELECT a.ST_ID, a.TP, a.DT, a.MINTM, a.MAXTM, CASE WHEN b.DT is null THEN a.ISWORK ELSE 0 END as ISWORK
                  FROM(
                    SELECT a.ST_ID, NVL(b.TP, 0) as TP, a.DT, a.MINTM, a.MAXTM, a.ISWORK
                    FROM(
                      SELECT a.ST_ID, a.DT, NVL(b.TP, 0) as TP, NVL(b.MINTM, '00:00:00') as MINTM, NVL(b.MAXTM, '00:00:00') as MAXTM, a.ISWORK
                      FROM(
                        SELECT a.STAFFS_ID as ST_ID, a.DT, CASE WHEN b.DT IS NULL THEN a.ISWORK ELSE 1 END as ISWORK
                        FROM(
                          SELECT a.ID, b.STAFFS_ID, c.FATHER_ID as GAZAR_ID, c.ID as HELTES_ID, a.DT, CASE WHEN(MOD(TO_CHAR(a.DT, 'J'), 7) + 1) = 6 OR(MOD(TO_CHAR(a.DT, 'J'), 7) + 1) = 7 THEN 0 ELSE 1 END as ISWORK
                          FROM(
                            SELECT a.ID, a.BEGINDT, a.ENDDT, b.DT
                            FROM(
                              SELECT a.ID,
                                CASE
                                  WHEN TO_DATE(a.DT, 'YYYY-MM-DD') > TO_DATE('" + yr + "-" + month + @"-01', 'YYYY-MM-DD')
                                  THEN a.DT
                                  ELSE '" + yr + "-" + month + @"-01'
                                END as BEGINDT,
                                CASE
                                  --WHEN TO_DATE(CASE WHEN c.ACTIVE = 0 THEN NVL(a.ENDDT, a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE, 'YYYY-MM-DD')) END, 'YYYY-MM-DD') < LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'YYYY-MM-DD'))
                                  --THEN CASE WHEN c.ACTIVE = 0 THEN NVL(a.ENDDT, a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE, 'YYYY-MM-DD')) END ELSE TO_CHAR(LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'YYYY-MM-DD')), 'YYYY-MM-DD') END as ENDDT
                                  WHEN TO_DATE(CASE WHEN c.ACTIVE = 0 THEN TO_CHAR((TO_DATE(NVL(a.ENDDT, a.DT), 'YYYY-MM-DD') - 1), 'YYYY-MM-DD') ELSE NVL(TO_CHAR((TO_DATE(a.ENDDT, 'YYYY-MM-DD') - 1), 'YYYY-MM-DD'), TO_CHAR(SYSDATE, 'YYYY-MM-DD')) END, 'YYYY-MM-DD') < LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'YYYY-MM-DD'))
                                  THEN CASE WHEN c.ACTIVE = 0 THEN TO_CHAR((TO_DATE(NVL(a.ENDDT, a.DT), 'YYYY-MM-DD') - 1), 'YYYY-MM-DD') ELSE NVL(TO_CHAR((TO_DATE(a.ENDDT, 'YYYY-MM-DD') - 1), 'YYYY-MM-DD'), TO_CHAR(SYSDATE, 'YYYY-MM-DD')) END ELSE TO_CHAR(LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'YYYY-MM-DD')), 'YYYY-MM-DD') END as ENDDT
                              FROM hrdbuser.ST_STBR a
                              INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID = b.ID AND b.ISACTIVE = 1
                              INNER JOIN hrdbuser.STN_MOVE c ON a.MOVE_ID = c.ID
                              WHERE a.POS_ID != 2020102 AND c.ACTIVE = 1
                              AND ((
                                TO_DATE('" + yr + "-" + month + @"-01','YYYY-MM-DD') 
                                BETWEEN TO_DATE(a.DT,'YYYY-MM-DD') AND TO_DATE(CASE WHEN c.ACTIVE=0 THEN NVL(a.ENDDT,a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE,'YYYY-MM-DD')) END,'YYYY-MM-DD')
                                OR 
                                LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01','YYYY-MM-DD')) 
                                BETWEEN TO_DATE(a.DT,'YYYY-MM-DD') AND TO_DATE(CASE WHEN c.ACTIVE=0 THEN NVL(a.ENDDT,a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE,'YYYY-MM-DD')) END,'YYYY-MM-DD')
                              ) OR 
                                (
                                  TO_DATE('" + yr + "-" + month + @"-01','YYYY-MM-DD')<TO_DATE(a.DT,'YYYY-MM-DD') AND LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01','YYYY-MM-DD'))>TO_DATE(a.DT,'YYYY-MM-DD')
                                ))
                            ) a, (
                              SELECT DT
                              FROM(
                                SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                                FROM DUAL
                                CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                              )
                              WHERE DT BETWEEN TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') AND SYSDATE AND MOD(TO_CHAR(DT, 'J'), 7) + 1 IN(1, 2, 3, 4, 5, 6, 7)
                            ) b
                          ) a
                          INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.ID
                          INNER JOIN hrdbuser.ST_BRANCH c ON b.BRANCH_ID = c.ID AND c.ISACTIVE = 1
                          WHERE a.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD') AND b.POS_ID != 2020102" + strGazarId2 + strHeltesId2 + @"
                        ) a
                        LEFT JOIN(
                          SELECT TO_DATE(HOLDATE, 'YYYY-MM-DD') as DT FROM hrdbuser.ST_HOLIDAYISWORK WHERE TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'YYYY')) = "+yr+ @" AND TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'MM')) IN(" + strMonthList + @")
                        ) b ON a.DT = b.DT
                      ) a
                      LEFT JOIN(
                        SELECT a.MONTH, a.INOUT as TP, b.ID as ST_ID, TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd') as DT, TO_CHAR(MIN(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY || ' ' || a.HOUR || ':' || a.MINUTE || ':' || a.SECOND, 'yyyy-mm-dd hh24:mi:ss')), 'hh24:mi:ss') as MINTM, TO_CHAR(MAX(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY || ' ' || a.HOUR || ':' || a.MINUTE || ':' || a.SECOND, 'yyyy-mm-dd hh24:mi:ss')), 'hh24:mi:ss') as MAXTM
                        FROM STN_TRCDLOG a
                        INNER JOIN hrdbuser.ST_STAFFS b ON a.ENO = b.FINGERID
                        INNER JOIN hrdbuser.ST_STBR c ON b.ID = c.STAFFS_ID
                        INNER JOIN hrdbuser.STN_MOVE d ON c.MOVE_ID = d.ID
                        INNER JOIN hrdbuser.ST_BRANCH f ON c.BRANCH_ID = f.ID AND f.ISACTIVE = 1
                        WHERE c.POS_ID != 2020102 AND a.INOUT = 0 AND a.YEAR = " + yr+ @" AND a.MONTH IN(" + strMonthList + @") AND TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd') BETWEEN TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') AND SYSDATE AND MOD(TO_CHAR(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd'), 'J'), 7) + 1 IN(1, 2, 3, 4, 5, 6, 7)
                        GROUP BY a.MONTH, a.INOUT, b.ID, TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd')
                      ) b ON a.ST_ID = b.ST_ID AND a.DT = b.DT
                    ) a
                    LEFT JOIN(
                      SELECT DT, STAFFS_ID, MAX(TP) as TP
                        FROM(
                          SELECT b.DT, a.STAFFS_ID, 11 as TP
                          FROM hrdbuser.ST_CHULUUDAYF3 a,
                          (
                            SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                            FROM DUAL
                            CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                          ) b
                          WHERE
                            b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
                          UNION ALL
                          SELECT b.DT, a.STAFFS_ID, 12 as TP
                          FROM hrdbuser.ST_CHULUUDAYT2 a,
                          (
                            SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                            FROM DUAL
                            CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                          ) b
                          WHERE
                            a.ISRECEIVED = 1 AND
                            b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
                          UNION ALL
                          SELECT b.DT, a.STAFFS_ID, 13 as TP
                          FROM hrdbuser.ST_CHULUUSICK a,
                          (
                            SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                            FROM DUAL
                            CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                          ) b
                          WHERE
                            b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
                          UNION ALL
                          SELECT b.DT, a.STAFFS_ID, 21 as TP
                          FROM hrdbuser.ST_AMRALT a,
                          (
                            SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                            FROM DUAL
                            CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                          ) b
                          WHERE
                            a.TZISRECEIVED = 1 AND
                            b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
                          UNION ALL
                          SELECT b.DT, a.STAFFS_ID, 31 as TP
                          FROM hrdbuser.ST_TOMILOLT_STAFFS a
                          INNER JOIN hrdbuser.ST_TOMILOLT c ON a.TOMILOLT_ID = c.ID,
                          (
                            SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                            FROM DUAL
                            CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                          ) b
                          WHERE
                            b.DT BETWEEN TO_DATE(c.FROMDATE, 'YYYY-MM-DD') AND TO_DATE(c.TODATE, 'YYYY-MM-DD')
                        )
                        GROUP BY DT, STAFFS_ID
                    ) b ON a.DT = b.DT AND a.ST_ID = b.STAFFS_ID
                  ) a
                  LEFT JOIN(
                    SELECT TO_DATE('" + yr+ @"-' || HOLMONTH || '-' || HOLDAY, 'YYYY-MM-DD') as DT
                    FROM hrdbuser.ST_HOLIDAYOFFICIAL
                    WHERE HOLMONTH IN(" + strMonthList + @")
                    UNION ALL
                    SELECT TO_DATE(HOLDATE, 'YYYY-MM-DD') as DT
                    FROM hrdbuser.ST_HOLIDAYUNOFFICIAL
                    WHERE TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'YYYY')) = "+yr+@" AND TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'MM')) IN(" + strMonthList + @")
                  ) b ON a.DT = b.DT
                  GROUP BY a.ST_ID, a.TP, a.DT, a.MINTM, a.MAXTM, CASE WHEN b.DT is null THEN a.ISWORK ELSE 0 END
                )
              )
              GROUP BY ST_ID
            )
          ) c ON a.ST_ID = c.ST_ID
          LEFT JOIN (
            SELECT c.ID as ST_ID, ROUND(ROUND(AVG(b.PER), 3) * 0.05, 3) as AVGPNT
            FROM TBL_SRV a
            INNER JOIN TBL_SRV_ANSWER b ON a.SRV_ANSWER_ID = b.ID
            INNER JOIN hrdbuser.ST_STAFFS c ON a.TRGT_ID = c.ID
            INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
            INNER JOIN hrdbuser.STN_MOVE f ON d.MOVE_ID = f.ID AND f.ACTIVE = 1
            INNER JOIN hrdbuser.ST_BRANCH g ON d.BRANCH_ID = g.ID
            WHERE a.SRV_TYPE_ID = 3 AND a.YR = " + yr + " AND a.YR_HF = " + yrhf + strGazarId3 + strHeltesId3 + @"
            GROUP BY c.ID
          ) d ON a.ST_ID = d.ST_ID
          GROUP BY a.ST_ID, a.NIIT_PLANCNT, a.NIIT_IMPLCNT, a.NIIT_PERAVG, a.TUSGAI_PLANCNT, a.TUSGAI_IMPLCNT, a.TUSGAI_PERAVG, NVL(c.PER, 0), NVL(d.AVGPNT, 0)
        ) a
        LEFT JOIN TBL_AGREEMENT_OTHER b ON a.ST_ID = b.ST_ID AND b.YR = " + yr + " AND b.YRHF" + yrhf + @" = 1
        LEFT JOIN TBL_AGREEMENT_OTHER_IMPL c ON b.ID = c.AGREEMENT_OTHER_ID AND c.YRHF = " + yrhf + @"
        GROUP BY a.ST_ID, a.NIIT_PLANCNT, a.NIIT_IMPLCNT, a.NIIT_PERAVG, a.TUSGAI_PLANCNT, a.TUSGAI_IMPLCNT, a.TUSGAI_PERAVG, a.TAB2PLANCNT, a.TAB2IMPLCNT, a.TAB2PER1AVG, a.TAB2PERIRTS, a.TAB2PERHAMT
      ) h ON a.ID = h.ST_ID
      WHERE 1 = 1" + strGazarId1 + strHeltesId1 + @"
    ) a
    ORDER BY a.SUMPER DESC
  ) a
) a
INNER JOIN(
  SELECT ROUND(COUNT(a.ID) * 0.3, 0) as INDEX3T1
  FROM hrdbuser.ST_STAFFS a
  INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1
  INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1
  INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID
  WHERE b.POS_ID != 2020102" + strGazarId1 + strHeltesId1 + @"
) b ON a.ROWNO = b.INDEX3T1";
                ds = myObj.OracleExecuteDataSet(strQry);
                if (ds.Tables[0].Rows.Count != 0) str30Per = ds.Tables[0].Rows[0][0].ToString();
                return str30Per;
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AgreementTab4t1(string yr, string yrhf, string gazarid, string heltesid, string proports)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string month = "", month2 = "", strMonthList = "";
            string strYrhfA = "", strYrhfB = "";
            string str30Per = "0";
            string strMnthLike = "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                if (yrhf == "1")
                {
                    strYrhfA = " AND a.YRHF1=1";
                    strYrhfB = "1";
                    month = "1";
                    month2 = "6";
                    strMnthLike = " AND (b.BUDGET IS NULL OR b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||b.BUDGET||',' LIKE '%,1,%' OR ','||b.BUDGET||',' LIKE '%,2,%' OR ','||b.BUDGET||',' LIKE '%,3,%' OR ','||b.BUDGET||',' LIKE '%,4,%' OR ','||b.BUDGET||',' LIKE '%,5,%' OR ','||b.BUDGET||',' LIKE '%,6,%')";
                }
                else if (yrhf == "2")
                {
                    strYrhfA = " AND (a.YRHF1=1 OR a.YRHF2=1)";
                    strYrhfB = "1,2";
                    month = "1";
                    month2 = "12";
                    strMnthLike = " AND (b.BUDGET IS NULL OR b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||b.BUDGET||',' LIKE '%,1,%' OR ','||b.BUDGET||',' LIKE '%,2,%' OR ','||b.BUDGET||',' LIKE '%,3,%' OR ','||b.BUDGET||',' LIKE '%,4,%' OR ','||b.BUDGET||',' LIKE '%,5,%' OR ','||b.BUDGET||',' LIKE '%,6,%' OR ','||b.BUDGET||',' LIKE '%,7,%' OR ','||b.BUDGET||',' LIKE '%,8,%' OR ','||b.BUDGET||',' LIKE '%,9,%' OR ','||b.BUDGET||',' LIKE '%,10,%' OR ','||b.BUDGET||',' LIKE '%,11,%' OR ','||b.BUDGET||',' LIKE '%,12,%')";
                }
                for (int i = Int32.Parse(month); i <= Int32.Parse(month2); i++)
                {
                    if (strMonthList == "") strMonthList += i.ToString();
                    else strMonthList += "," + i.ToString();
                }
                
                string strQry = @"SELECT a.SUMPER 
FROM ( 
  SELECT ROWNUM as ROWNO, a.SUMPER
  FROM (
    SELECT (NVL(h.NIITOTHER_PERAVG, 0) + NVL(h.TUSGAI_PERAVG, 0) + NVL(h.TAB2PER1AVG, 0) + NVL(h.TAB2PERIRTS, 0) + NVL(h.TAB2PERHAMT, 0)) as SUMPER
      FROM (
            SELECT a.ST_ID
              , b.NIIT_PLANCNT
              , b.NIIT_IMPLCNT
              , b.NIIT_PERAVG
              , c.TUSGAI_PLANCNT
              , c.TUSGAI_IMPLCNT
              , c.TUSGAI_PERAVG
              , d.TAB2PLANCNT
              , d.TAB2IMPLCNT
              , d.TAB2PER1AVG
              , f.PER as TAB2PERIRTS
              , g.AVGPNT as TAB2PERHAMT
              , h.TAB3PLANCNT
              , h.TAB3IMPLCNT
              , h.TAB3PER1AVG
              , (NVL(b.NIIT_PLANCNT, 0) + NVL(h.TAB3PLANCNT, 0)) as NIITOTHER_PLANCNT
              , (NVL(b.NIIT_IMPLCNT, 0) + NVL(h.TAB3IMPLCNT, 0)) as NIITOTHER_IMPLCNT
              , CASE WHEN NVL(h.TAB3PER1AVG, 0) != 0 THEN ROUND((NVL(b.NIIT_PERAVG, 0) + NVL(h.TAB3PER1AVG, 0)) / 2, 3) ELSE NVL(b.NIIT_PERAVG, 0) END as NIITOTHER_PERAVG
            FROM(
              SELECT a.ID as ST_ID
              FROM hrdbuser.ST_STAFFS a
              INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1
              INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1
              INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
              INNER JOIN hrdbuser.ST_BRANCH f ON d.FATHER_ID = f.ID AND f.ISACTIVE = 1
              INNER JOIN hrdbuser.STN_POS g ON b.POS_ID = g.ID
              INNER JOIN TBL_AGREEMENTSUBMITSTAFF h ON a.ID=h.ST_ID AND h.YR="+yr+" AND h.HFYR="+yrhf+@"
              WHERE b.POS_ID NOT IN (2020102,2010201,2010301) AND d.FATHER_ID="+gazarid+" AND d.ID=" + heltesid + @"
              GROUP BY a.ID
            ) a
            LEFT JOIN(
              SELECT 
                a.ST_ID, 
                COUNT(a.PLANYR_ID) as NIIT_PLANCNT, 
                SUM(NVL2(c.IMPL,1,0)) as NIIT_IMPLCNT, 
                NVL(ROUND(AVG((NVL(a.NIIT_PER2AVG,0)+NVL(c.PER1,0))),3),0) as NIIT_PERAVG
              FROM (
                SELECT a.PLANYR_ID, a.ST_ID, ROUND(ROUND(NVL(AVG(b.EVAL), 0), 3) * 0.3, 3) as NIIT_PER2AVG
                FROM (

                  SELECT a.PLANYR_ID, a.ST_ID
                  FROM (
                    SELECT a.PLANYR_ID, a.ST_ID, NVL(b.ISCANCEL,0) as ISCANCEL
                    FROM (
                      SELECT b.PLANYR_ID, b.ST_ID 
                      FROM ( 
                        SELECT a.PLANYR_ID, a.ST_ID 
                        FROM TBL_AGREEMENT_MAIN a
                        INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                        INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
                        INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                        INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
                        WHERE a.YR=" + yr + @" AND a.ISSPECIAL=1 AND b.SUBMIT_D2=1 AND f.BR_ID=" + gazarid + @" AND d.BR_ID=" + heltesid + @" " + strYrhfA + @"
                        GROUP BY a.PLANYR_ID, a.ST_ID
                      ) a 
                      RIGHT JOIN ( 
                        SELECT PLANYR_ID, ST_ID 
                        FROM (
                            SELECT b.PLANYR_ID, b.ST_ID
                            FROM ( 
                                SELECT a.PLANYR_ID, a.ST_ID 
                                FROM TBL_AGREEMENT_MAIN a
                                INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                                INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
                                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
                                WHERE a.YR = " + yr + @" AND f.BR_ID=" + gazarid + @" AND d.BR_ID=" + heltesid + @" AND b.SUBMIT_D2=1
                            ) a
                            RIGHT JOIN (
                                SELECT a.ID as PLANYR_ID, b.ST_ID 
                                FROM TBL_PLANYR a 
                                INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID  
                                INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID 
                                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID 
                                WHERE a.YR=" + yr + @" AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1 AND f.BR_ID=" + gazarid + @" AND d.BR_ID=" + heltesid + @"
                                    " + strMnthLike.Replace("b.BUDGET", "a.BUDGET") + @"
                                GROUP BY a.ID, b.ST_ID 
                            ) b ON a.PLANYR_ID=b.PLANYR_ID AND a.ST_ID=b.ST_ID
                            WHERE a.PLANYR_ID is null AND a.ST_ID is null
                            UNION ALL
                            SELECT a.PLANYR_ID, a.ST_ID 
                            FROM TBL_AGREEMENT_MAIN a
                            INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                            INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
                            INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                            INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
                            WHERE a.YR = " + yr + @" " + strYrhfA + @" AND f.BR_ID=" + gazarid + @" AND d.BR_ID=" + heltesid + @" AND b.SUBMIT_D2=1
                        ) 
                        GROUP BY PLANYR_ID, ST_ID
                      ) b ON a.PLANYR_ID=b.PLANYR_ID AND a.ST_ID=b.ST_ID 
                      WHERE a.PLANYR_ID IS NULL 
                    ) a
                    LEFT JOIN TBL_AGREEMENT_MAIN b ON a.PLANYR_ID=b.PLANYR_ID AND a.ST_ID=b.ST_ID AND b.YR=" + yr + @" " + strYrhfA.Replace("a.", "b.") + @"
                  ) a
                  WHERE a.ISCANCEL=0

                ) a
                LEFT JOIN TBL_PLANYR_EVAL b ON a.PLANYR_ID = b.PLANYR_ID AND b.TP = 'month' AND b.INTERVAL IN(" + strMonthList + @")
                GROUP BY a.PLANYR_ID, a.ST_ID
              ) a
              LEFT JOIN TBL_AGREEMENT_MAIN b ON a.ST_ID=b.ST_ID AND a.PLANYR_ID=b.PLANYR_ID AND YR=" + yr + @" 
              LEFT JOIN TBL_AGREEMENT_MAIN_IMPL c ON b.ID=c.AGREEMENT_MAIN_ID AND c.YRHF=" + yrhf + @"
              GROUP BY a.ST_ID
            ) b ON a.ST_ID = b.ST_ID
            LEFT JOIN(
              SELECT 
                a.ST_ID, 
                COUNT(a.PLANYR_ID) as TUSGAI_PLANCNT, 
                SUM(NVL2(c.IMPL,1,0)) as TUSGAI_IMPLCNT, 
                NVL(ROUND(AVG((NVL(a.TUSGAI_PER2AVG,0)+NVL(c.PER1,0))),3),0) as TUSGAI_PERAVG
              FROM (
                SELECT a.PLANYR_ID, a.ST_ID, ROUND(ROUND(NVL(AVG(b.EVAL), 0), 3) * 0.4, 3) as TUSGAI_PER2AVG
                FROM (

                  SELECT a.PLANYR_ID, a.ST_ID
                  FROM (
                    SELECT a.PLANYR_ID, a.ST_ID, NVL(b.ISCANCEL,0) as ISCANCEL
                    FROM (
                      SELECT b.PLANYR_ID, b.ST_ID 
                      FROM ( 
                        SELECT a.PLANYR_ID, a.ST_ID 
                        FROM TBL_AGREEMENT_MAIN a
                        INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                        INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
                        INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                        INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
                        WHERE a.YR=" + yr + @" AND a.ISSPECIAL=1  AND f.BR_ID=" + gazarid + @" AND d.BR_ID=" + heltesid + @" " + strYrhfA + @" AND b.SUBMIT_D2=1
                        GROUP BY a.PLANYR_ID, a.ST_ID
                      ) a 
                      INNER JOIN ( 
                        SELECT PLANYR_ID, ST_ID 
                        FROM (
                            SELECT b.PLANYR_ID, b.ST_ID
                            FROM ( 
                                SELECT a.PLANYR_ID, a.ST_ID 
                                FROM TBL_AGREEMENT_MAIN a
                                INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                                INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
                                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
                                WHERE a.YR = " + yr + @" AND f.BR_ID=" + gazarid + @" AND d.BR_ID=" + heltesid + @" AND b.SUBMIT_D2=1
                            ) a
                            RIGHT JOIN (
                                SELECT a.ID as PLANYR_ID, b.ST_ID 
                                FROM TBL_PLANYR a 
                                INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID  
                                INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID 
                                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID 
                                WHERE a.YR=" + yr + @" AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1 AND f.BR_ID=" + gazarid + @" AND d.BR_ID=" + heltesid + @"
                                    " + strMnthLike.Replace("b.BUDGET", "a.BUDGET") + @"
                                GROUP BY a.ID, b.ST_ID 
                            ) b ON a.PLANYR_ID=b.PLANYR_ID AND a.ST_ID=b.ST_ID
                            WHERE a.PLANYR_ID is null AND a.ST_ID is null
                            UNION ALL
                            SELECT a.PLANYR_ID, a.ST_ID 
                            FROM TBL_AGREEMENT_MAIN a
                            INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                            INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
                            INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                            INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
                            WHERE a.YR = " + yr + @" " + strYrhfA + @" AND f.BR_ID= " + gazarid + @" AND d.BR_ID= " + heltesid + @" AND b.SUBMIT_D2=1
                        ) 
                        GROUP BY PLANYR_ID, ST_ID
                      ) b ON a.PLANYR_ID=b.PLANYR_ID AND a.ST_ID=b.ST_ID 
                    ) a
                    LEFT JOIN TBL_AGREEMENT_MAIN b ON a.PLANYR_ID=b.PLANYR_ID AND a.ST_ID=b.ST_ID AND b.YR=" + yr + @" " + strYrhfA.Replace("a.", "b.") + @"
                  ) a
                  WHERE a.ISCANCEL=0

                ) a
                LEFT JOIN TBL_PLANYR_EVAL b ON a.PLANYR_ID = b.PLANYR_ID AND b.TP = 'month' AND b.INTERVAL IN(" + strMonthList + @")
                GROUP BY a.PLANYR_ID, a.ST_ID
              ) a
              LEFT JOIN TBL_AGREEMENT_MAIN b ON a.ST_ID=b.ST_ID AND a.PLANYR_ID=b.PLANYR_ID AND YR=" + yr + @" 
              LEFT JOIN TBL_AGREEMENT_MAIN_IMPL c ON b.ID=c.AGREEMENT_MAIN_ID AND c.YRHF=" + yrhf + @"
              GROUP BY a.ST_ID
            ) c ON a.ST_ID = c.ST_ID
            LEFT JOIN(
              SELECT a.ST_ID, NVL(COUNT(a.ID), 0) as TAB2PLANCNT, NVL(SUM(NVL2(a.TAB2IMPLCNT, 1, 0)), 0) as TAB2IMPLCNT, NVL(ROUND(AVG(a.PER1), 3), 0) as TAB2PER1AVG
              FROM(
                SELECT a.ST_ID, a.ID, NVL2(c.IMPL, 1, 0) as TAB2IMPLCNT, NVL(c.PER1, 0) as PER1
                FROM(
                  SELECT a.ST_ID, a.ID, MAX(d.YRHF) as YRHF
                  FROM TBL_AGREEMENT_SKILL a
                  INNER JOIN hrdbuser.ST_STBR b ON a.ST_ID=b.STAFFS_ID AND b.ISACTIVE=1
                  INNER JOIN hrdbuser.ST_BRANCH c ON b.BRANCH_ID=c.ID
                  LEFT JOIN TBL_AGREEMENT_SKILL_IMPL d ON a.ID = d.AGREEMENT_SKILL_ID AND d.YRHF IN(" + strYrhfB + @")
                  WHERE a.YR = " + yr + @" " + strYrhfA + @" AND c.FATHER_ID=" + gazarid + @" AND c.ID=" + heltesid + @" AND b.POS_ID NOT IN (2010201, 2013201)
                  GROUP BY a.ST_ID, a.ID
                ) a
                INNER JOIN TBL_AGREEMENT_SKILL b ON a.ID = b.ID
                LEFT JOIN TBL_AGREEMENT_SKILL_IMPL c ON a.ID = c.AGREEMENT_SKILL_ID AND a.YRHF = c.YRHF
                GROUP BY a.ST_ID, a.ID, NVL2(c.IMPL, 1, 0), NVL(c.PER1, 0)
              ) a
              GROUP BY a.ST_ID
            ) d ON a.ST_ID = d.ST_ID
            LEFT JOIN(
              SELECT a.ST_ID, CASE WHEN a.WORKDAY=0 THEN 0 ELSE NVL(ROUND(ROUND(((a.WORKDAY - (a.TASALSANDAYSUM + a.HOTSORSONDAYSUM + a.ERTDAYSUM)) / a.WORKDAY) * 100, 3) * 0.05, 3), 0) END as PER
              FROM(
                SELECT ST_ID,
                    SUM(ISWORK) as WORKDAY,
                    SUM(CHOLOODAY) as CHOLOODAYSUM,
                    SUM(UWCHTEIDAY) as UWCHTEIDAYSUM,
                    SUM(AMRALTDAY) as AMRALTDAYSUM,
                    SUM(TOMILOLTDAY) as TOMILOLTDAYSUM,
                    SUM(ISTASALSAN) as TASALSANDAYSUM,
                    SUM(HOTSORSONMINUTE) as HOTSORSONMINUTESUM,
                    SUM(HOTSORSONDAY) as HOTSORSONDAYSUM,
                    SUM(ERTMINUTE) as ERTMINUTESUM,
                    SUM(ERTDAY) as ERTDAYSUM,
                    SUM(OROIMINUTE) as OROIMINUTESUM,
                    SUM(OROIDAY) as OROIDAYSUM
                  FROM(
                    SELECT ST_ID, TP, DT, MINTM, MAXTM, ISWORK,
                      CASE WHEN TP = 11 AND ISWORK = 1 OR TP = 12 THEN 1 ELSE 0 END as CHOLOODAY,
                      CASE WHEN TP = 13 AND ISWORK = 1 THEN 1 ELSE 0 END as UWCHTEIDAY,
                      CASE WHEN TP = 21 AND ISWORK = 1 THEN 1 ELSE 0 END as AMRALTDAY,
                      CASE WHEN TP = 31 AND ISWORK = 1 THEN 1 ELSE 0 END as TOMILOLTDAY,
                      CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM = MAXTM THEN 1 ELSE 0 END as ISTASALSAN,
                      CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'hotsorson', 'minute') ELSE 0 END as HOTSORSONMINUTE,
                      CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'hotsorson', 'day') ELSE 0 END as HOTSORSONDAY,
                      CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'ert', 'minute') ELSE 0 END as ERTMINUTE,
                      CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'ert', 'day') ELSE 0 END as ERTDAY,
                      CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'oroi', 'minute') ELSE 0 END as OROIMINUTE,
                      CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'oroi', 'day') ELSE 0 END as OROIDAY
                    FROM(
                      SELECT a.ST_ID, a.TP, a.DT, a.MINTM, a.MAXTM, CASE WHEN b.DT is null THEN a.ISWORK ELSE 0 END as ISWORK
                      FROM(
                        SELECT a.ST_ID, NVL(b.TP, 0) as TP, a.DT, a.MINTM, a.MAXTM, a.ISWORK
                        FROM(
                          SELECT a.ST_ID, a.DT, NVL(b.TP, 0) as TP, NVL(b.MINTM, '00:00:00') as MINTM, NVL(b.MAXTM, '00:00:00') as MAXTM, a.ISWORK
                          FROM(
                            SELECT a.STAFFS_ID as ST_ID, a.DT, CASE WHEN b.DT IS NULL THEN a.ISWORK ELSE 1 END as ISWORK
                            FROM(
                              SELECT a.ID, b.STAFFS_ID, c.FATHER_ID as GAZAR_ID, c.ID as HELTES_ID, a.DT, CASE WHEN(MOD(TO_CHAR(a.DT, 'J'), 7) + 1) = 6 OR(MOD(TO_CHAR(a.DT, 'J'), 7) + 1) = 7 THEN 0 ELSE 1 END as ISWORK
                              FROM(
                                SELECT a.ID, a.BEGINDT, a.ENDDT, b.DT
                                FROM(
                                  SELECT a.ID,
                                    CASE
                                      WHEN TO_DATE(a.DT, 'YYYY-MM-DD') > TO_DATE('" + yr + "-" + month + @"-01', 'YYYY-MM-DD')
                                      THEN a.DT
                                      ELSE '" + yr + "-" + month + @"-01'
                                    END as BEGINDT,
                                    CASE
                                      --WHEN TO_DATE(CASE WHEN c.ACTIVE = 0 THEN NVL(a.ENDDT, a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE, 'YYYY-MM-DD')) END, 'YYYY-MM-DD') < LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'YYYY-MM-DD'))
                                      --THEN CASE WHEN c.ACTIVE = 0 THEN NVL(a.ENDDT, a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE, 'YYYY-MM-DD')) END ELSE TO_CHAR(LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'YYYY-MM-DD')), 'YYYY-MM-DD') END as ENDDT
                                      WHEN TO_DATE(CASE WHEN c.ACTIVE = 0 THEN TO_CHAR((TO_DATE(NVL(a.ENDDT, a.DT), 'YYYY-MM-DD') - 1), 'YYYY-MM-DD') ELSE NVL(TO_CHAR((TO_DATE(a.ENDDT, 'YYYY-MM-DD') - 1), 'YYYY-MM-DD'), TO_CHAR(SYSDATE, 'YYYY-MM-DD')) END, 'YYYY-MM-DD') < LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'YYYY-MM-DD'))
                                      THEN CASE WHEN c.ACTIVE = 0 THEN TO_CHAR((TO_DATE(NVL(a.ENDDT, a.DT), 'YYYY-MM-DD') - 1), 'YYYY-MM-DD') ELSE NVL(TO_CHAR((TO_DATE(a.ENDDT, 'YYYY-MM-DD') - 1), 'YYYY-MM-DD'), TO_CHAR(SYSDATE, 'YYYY-MM-DD')) END ELSE TO_CHAR(LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'YYYY-MM-DD')), 'YYYY-MM-DD') END as ENDDT
                                  FROM hrdbuser.ST_STBR a
                                  INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID = b.ID AND b.ISACTIVE = 1
                                  INNER JOIN hrdbuser.STN_MOVE c ON a.MOVE_ID = c.ID
                                  WHERE a.POS_ID != 2020102 AND c.ACTIVE = 1
                                  AND ((
                                        TO_DATE('" + yr + "-" + month + @"-01','YYYY-MM-DD') 
                                        BETWEEN TO_DATE(a.DT,'YYYY-MM-DD') AND TO_DATE(CASE WHEN c.ACTIVE=0 THEN NVL(a.ENDDT,a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE,'YYYY-MM-DD')) END,'YYYY-MM-DD')
                                        OR 
                                        LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01','YYYY-MM-DD')) 
                                        BETWEEN TO_DATE(a.DT,'YYYY-MM-DD') AND TO_DATE(CASE WHEN c.ACTIVE=0 THEN NVL(a.ENDDT,a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE,'YYYY-MM-DD')) END,'YYYY-MM-DD')
                                      ) OR 
                                        (
                                          TO_DATE('" + yr + "-" + month + @"-01','YYYY-MM-DD')<TO_DATE(a.DT,'YYYY-MM-DD') AND LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01','YYYY-MM-DD'))>TO_DATE(a.DT,'YYYY-MM-DD')
                                        ))
                                ) a, (
                                  SELECT DT
                                  FROM(
                                    SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                                    FROM DUAL
                                    CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                                  )
                                  WHERE DT BETWEEN TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') AND SYSDATE AND MOD(TO_CHAR(DT, 'J'), 7) + 1 IN(1, 2, 3, 4, 5, 6, 7)
                                ) b
                              ) a
                              INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.ID
                              INNER JOIN hrdbuser.ST_BRANCH c ON b.BRANCH_ID = c.ID AND c.ISACTIVE = 1
                              WHERE a.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD') AND b.POS_ID != 2020102 AND b.STAFFS_ID IN (
                      SELECT a.STAFFS_ID as ST_ID
                      FROM hrdbuser.ST_STBR a 
                      INNER JOIN hrdbuser.STN_MOVE b ON a.MOVE_ID=b.ID AND b.ACTIVE=1
                      INNER JOIN hrdbuser.ST_BRANCH c ON a.BRANCH_ID = c.ID AND c.ISACTIVE = 1
                      WHERE a.ISACTIVE=1 AND a.POS_ID NOT IN (2010201,2010301) AND c.FATHER_ID=" + gazarid + @" AND c.ID=" + heltesid + @"
                      GROUP BY a.STAFFS_ID)
                            ) a
                            LEFT JOIN(
                              SELECT TO_DATE(HOLDATE, 'YYYY-MM-DD') as DT FROM hrdbuser.ST_HOLIDAYISWORK WHERE TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'YYYY')) = " + yr + @" AND TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'MM')) IN(" + strMonthList + @")
                            ) b ON a.DT = b.DT
                          ) a
                          LEFT JOIN(
                            SELECT a.MONTH, a.INOUT as TP, b.ID as ST_ID, TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd') as DT, TO_CHAR(MIN(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY || ' ' || a.HOUR || ':' || a.MINUTE || ':' || a.SECOND, 'yyyy-mm-dd hh24:mi:ss')), 'hh24:mi:ss') as MINTM, TO_CHAR(MAX(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY || ' ' || a.HOUR || ':' || a.MINUTE || ':' || a.SECOND, 'yyyy-mm-dd hh24:mi:ss')), 'hh24:mi:ss') as MAXTM
                            FROM STN_TRCDLOG a
                            INNER JOIN hrdbuser.ST_STAFFS b ON a.ENO = b.FINGERID
                            INNER JOIN hrdbuser.ST_STBR c ON b.ID = c.STAFFS_ID
                            INNER JOIN hrdbuser.STN_MOVE d ON c.MOVE_ID = d.ID
                            INNER JOIN hrdbuser.ST_BRANCH f ON c.BRANCH_ID = f.ID AND f.ISACTIVE = 1
                            WHERE c.POS_ID != 2020102 AND a.INOUT = 0 AND a.YEAR = " + yr + @" AND a.MONTH IN(" + strMonthList + @") AND TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd') BETWEEN TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') AND SYSDATE AND MOD(TO_CHAR(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd'), 'J'), 7) + 1 IN(1, 2, 3, 4, 5, 6, 7)
                            GROUP BY a.MONTH, a.INOUT, b.ID, TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd')
                          ) b ON a.ST_ID = b.ST_ID AND a.DT = b.DT
                        ) a
                        LEFT JOIN(
                          SELECT DT, STAFFS_ID, MAX(TP) as TP
                        FROM(
                            SELECT b.DT, a.STAFFS_ID, 11 as TP
                            FROM hrdbuser.ST_CHULUUDAYF3 a,
                            (
                                SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                                FROM DUAL
                                CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                            ) b
                            WHERE
                                b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
                            UNION ALL
                            SELECT b.DT, a.STAFFS_ID, 12 as TP
                            FROM hrdbuser.ST_CHULUUDAYT2 a,
                            (
                            SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                            FROM DUAL
                            CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                            ) b
                            WHERE
                            a.ISRECEIVED = 1 AND
                            b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
                            UNION ALL
                            SELECT b.DT, a.STAFFS_ID, 13 as TP
                            FROM hrdbuser.ST_CHULUUSICK a,
                            (
                            SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                            FROM DUAL
                            CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                            ) b
                            WHERE
                            b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
                            UNION ALL
                            SELECT b.DT, a.STAFFS_ID, 21 as TP
                            FROM hrdbuser.ST_AMRALT a,
                            (
                            SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                            FROM DUAL
                            CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                            ) b
                            WHERE
                            a.TZISRECEIVED = 1 AND
                            b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
                            UNION ALL
                            SELECT b.DT, a.STAFFS_ID, 31 as TP
                            FROM hrdbuser.ST_TOMILOLT_STAFFS a
                            INNER JOIN hrdbuser.ST_TOMILOLT c ON a.TOMILOLT_ID = c.ID,
                            (
                            SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                            FROM DUAL
                            CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                            ) b
                            WHERE
                            b.DT BETWEEN TO_DATE(c.FROMDATE, 'YYYY-MM-DD') AND TO_DATE(c.TODATE, 'YYYY-MM-DD')
                        )
                        GROUP BY DT, STAFFS_ID
                        ) b ON a.DT = b.DT AND a.ST_ID = b.STAFFS_ID
                      ) a
                      LEFT JOIN(
                        SELECT TO_DATE('" + yr + @"-' || HOLMONTH || '-' || HOLDAY, 'YYYY-MM-DD') as DT
                        FROM hrdbuser.ST_HOLIDAYOFFICIAL
                        WHERE HOLMONTH IN(" + strMonthList + @")
                        UNION ALL
                        SELECT TO_DATE(HOLDATE, 'YYYY-MM-DD') as DT
                        FROM hrdbuser.ST_HOLIDAYUNOFFICIAL
                        WHERE TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'YYYY')) = " + yr + @" AND TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'MM')) IN(" + strMonthList + @")
                      ) b ON a.DT = b.DT
                      GROUP BY a.ST_ID, a.TP, a.DT, a.MINTM, a.MAXTM, CASE WHEN b.DT is null THEN a.ISWORK ELSE 0 END
                    )
                  )
                  GROUP BY ST_ID
              ) a
            ) f ON a.ST_ID = f.ST_ID
            LEFT JOIN (
              SELECT c.ID as ST_ID, NVL(ROUND(ROUND(AVG(b.PER), 3) * 0.05, 3), 0) as AVGPNT
              FROM TBL_SRV a
              INNER JOIN TBL_SRV_ANSWER b ON a.SRV_ANSWER_ID = b.ID
              INNER JOIN hrdbuser.ST_STAFFS c ON a.TRGT_ID = c.ID
              INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
              INNER JOIN hrdbuser.ST_BRANCH f ON d.BRANCH_ID = f.ID AND f.ISACTIVE = 1
              INNER JOIN hrdbuser.ST_BRANCH g ON f.FATHER_ID = g.ID AND g.ISACTIVE = 1
              WHERE a.SRV_TYPE_ID = 3 AND a.YR = " + yr + @" AND a.YR_HF = " + yrhf + @" AND f.FATHER_ID=" + gazarid + @" AND f.ID=" + heltesid + @"
              GROUP BY c.ID
            ) g ON a.ST_ID = g.ST_ID
            LEFT JOIN (
              SELECT a.ST_ID, NVL(COUNT(a.ID), 0) as TAB3PLANCNT, NVL(SUM(NVL2(a.TAB3IMPLCNT, 1, 0)), 0) as TAB3IMPLCNT, NVL(ROUND(AVG(a.PER1), 3), 0) as TAB3PER1AVG
              FROM(
                SELECT a.ST_ID, a.ID, NVL2(c.IMPL, 1, 0) as TAB3IMPLCNT, NVL(c.PER1, 0) as PER1
                FROM(
                  SELECT a.ST_ID, a.ID, MAX(d.YRHF) as YRHF
                  FROM TBL_AGREEMENT_OTHER a
                  INNER JOIN hrdbuser.ST_STBR b ON a.ST_ID=b.STAFFS_ID AND b.ISACTIVE=1
                  INNER JOIN hrdbuser.ST_BRANCH c ON b.BRANCH_ID=c.ID
                  LEFT JOIN TBL_AGREEMENT_OTHER_IMPL d ON a.ID = d.AGREEMENT_OTHER_ID AND d.YRHF IN(" + strYrhfB + @")
                  WHERE a.YR = " + yr + @" " + strYrhfA + @"
                  GROUP BY a.ST_ID, a.ID
                ) a
                INNER JOIN TBL_AGREEMENT_OTHER b ON a.ID = b.ID
                LEFT JOIN TBL_AGREEMENT_OTHER_IMPL c ON a.ID = c.AGREEMENT_OTHER_ID AND a.YRHF = c.YRHF
                GROUP BY a.ST_ID, a.ID, NVL2(c.IMPL, 1, 0), NVL(c.PER1, 0)
              ) a
              GROUP BY a.ST_ID
            ) h ON a.ST_ID = h.ST_ID
          ) h 
      ORDER BY (NVL(h.NIITOTHER_PERAVG, 0) + NVL(h.TUSGAI_PERAVG, 0) + NVL(h.TAB2PER1AVG, 0) + NVL(h.TAB2PERIRTS, 0) + NVL(h.TAB2PERHAMT, 0)) DESC
    ) a
 ) a 
INNER JOIN ( 
  SELECT ROUND(COUNT(a.ID)*"+proports+@",0) as INDEX3T1 
  FROM hrdbuser.ST_STAFFS a
  INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1
  INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1
  INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
  WHERE b.POS_ID NOT IN (2020102,2010201,2010301) AND d.FATHER_ID=" + gazarid+" AND d.ID=" + heltesid + @"
) b ON a.ROWNO=b.INDEX3T1";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                if (ds.Tables[0].Rows.Count != 0) str30Per = ds.Tables[0].Rows[0][0].ToString();
                strQry = @"SELECT ROWNUM as ROWNO
  , a.NEGJ
  , a.POS_NAME
  , a.MOVE_NAME
  , a.STAFFNAME
  , a.NIIT_PLANCNT
  , a.NIIT_IMPLCNT
  , a.NIIT_PERAVG
  , a.TUSGAI_PLANCNT
  , a.TUSGAI_IMPLCNT
  , a.TUSGAI_PERAVG
  , a.TAB2PLANCNT
  , a.TAB2IMPLCNT
  , NVL(a.TAB2PER1AVG,0) as TAB2PER1AVG
  , NVL(a.TAB2PERIRTS,0) as TAB2PERIRTS
  , NVL(a.TAB2PERHAMT,0) as TAB2PERHAMT
  , a.TAB3PLANCNT
  , a.TAB3IMPLCNT
  , a.TAB3PER1AVG
  , a.NIITOTHER_PLANCNT
  , a.NIITOTHER_IMPLCNT
  , a.NIITOTHER_PERAVG
  , a.SUMPER
  , CASE WHEN a.NEWSUMPER<0 THEN 0 ELSE CASE WHEN a.NEWSUMPER>100 THEN 100 ELSE a.NEWSUMPER END END as NEWSUMPER
  , CASE WHEN a.SUMPER <= 20 THEN 'bg-color-red' ELSE CASE WHEN a.SUMPER > 20 AND a.SUMPER <= 80 THEN 'bg-color-orange' ELSE CASE WHEN a.SUMPER > 80 THEN 'bg-color-greenLight' END END END as SUMPERCOLOR
  , CASE WHEN a.NEWSUMPER <= 20 THEN 'bg-color-red' ELSE CASE WHEN a.NEWSUMPER > 20 AND a.NEWSUMPER <= 80 THEN 'bg-color-orange' ELSE CASE WHEN a.NEWSUMPER > 80 THEN 'bg-color-greenLight' END END END as NEWSUMPERCOLOR
FROM(
  SELECT f.SORT as GAZARSORT
    , d.SORT as HELTESSORT
    , g.SORT as POSSORT
    , a.ID as ST_ID
    , CASE WHEN d.ID = d.FATHER_ID THEN d.INITNAME ELSE f.INITNAME || '-' || d.INITNAME END AS NEGJ
    , g.NAME as POS_NAME
    , c.NAME as MOVE_NAME
    , SUBSTR(a.LNAME, 0, 1) || '.' || SUBSTR(a.FNAME, 1, 1) || LOWER(SUBSTR(a.FNAME, 2)) as STAFFNAME
    , h.NIIT_PLANCNT
    , h.NIIT_IMPLCNT
    , h.NIIT_PERAVG
    , h.TUSGAI_PLANCNT
    , h.TUSGAI_IMPLCNT
    , h.TUSGAI_PERAVG
    , h.TAB2PLANCNT
    , h.TAB2IMPLCNT
    , h.TAB2PER1AVG
    , h.TAB2PERIRTS
    , h.TAB2PERHAMT
    , h.TAB3PLANCNT
    , h.TAB3IMPLCNT
    , h.TAB3PER1AVG
    , h.NIITOTHER_PLANCNT
    , h.NIITOTHER_IMPLCNT
    , h.NIITOTHER_PERAVG
    , h.SUMPER
    , h.NEWSUMPER
  FROM (
  
    SELECT a.ST_ID
      , b.NIIT_PLANCNT
      , b.NIIT_IMPLCNT
      , b.NIIT_PERAVG as NIIT_PERAVG
      , c.TUSGAI_PLANCNT
      , c.TUSGAI_IMPLCNT
      , c.TUSGAI_PERAVG
      , d.TAB2PLANCNT
      , d.TAB2IMPLCNT
      , d.TAB2PER1AVG
      , f.PER as TAB2PERIRTS
      , g.AVGPNT as TAB2PERHAMT
      , h.TAB3PLANCNT
      , h.TAB3IMPLCNT
      , h.TAB3PER1AVG
      , (NVL(b.NIIT_PLANCNT, 0) + NVL(h.TAB3PLANCNT, 0)) as NIITOTHER_PLANCNT
      , (NVL(b.NIIT_IMPLCNT, 0) + NVL(h.TAB3IMPLCNT, 0)) as NIITOTHER_IMPLCNT
      , CASE WHEN NVL(h.TAB3PER1AVG, 0) != 0 THEN ROUND((NVL(b.NIIT_PERAVG, 0) + NVL(h.TAB3PER1AVG, 0)) / 2, 3) ELSE NVL(b.NIIT_PERAVG, 0) END as NIITOTHER_PERAVG
      , (NVL(CASE WHEN NVL(h.TAB3PER1AVG, 0) != 0 THEN ROUND((NVL(b.NIIT_PERAVG, 0) + NVL(h.TAB3PER1AVG, 0)) / 2, 3) ELSE NVL(b.NIIT_PERAVG, 0) END, 0) + NVL(c.TUSGAI_PERAVG, 0) + NVL(d.TAB2PER1AVG, 0) + NVL(f.PER, 0) + NVL(g.AVGPNT, 0)) as SUMPER
      , CASE WHEN(NVL(CASE WHEN NVL(h.TAB3PER1AVG, 0) != 0 THEN ROUND((NVL(b.NIIT_PERAVG, 0) + NVL(h.TAB3PER1AVG, 0)) / 2, 3) ELSE NVL(b.NIIT_PERAVG, 0) END, 0) + NVL(c.TUSGAI_PERAVG, 0) + NVL(d.TAB2PER1AVG, 0) + NVL(f.PER, 0) + NVL(g.AVGPNT, 0)) > " + str30Per + @" THEN(NVL(CASE WHEN NVL(h.TAB3PER1AVG, 0) != 0 THEN ROUND((NVL(b.NIIT_PERAVG, 0) + NVL(h.TAB3PER1AVG, 0)) / 2, 3) ELSE NVL(b.NIIT_PERAVG, 0) END, 0) + NVL(c.TUSGAI_PERAVG, 0) + NVL(d.TAB2PER1AVG, 0) + NVL(f.PER, 0) + NVL(g.AVGPNT, 0)) - (" + str30Per + @" - 90) ELSE(NVL(CASE WHEN NVL(h.TAB3PER1AVG, 0) != 0 THEN ROUND((NVL(b.NIIT_PERAVG, 0) + NVL(h.TAB3PER1AVG, 0)) / 2, 3) ELSE NVL(b.NIIT_PERAVG, 0) END, 0) + NVL(c.TUSGAI_PERAVG, 0) + NVL(d.TAB2PER1AVG, 0) + NVL(f.PER, 0) + NVL(g.AVGPNT, 0)) - (" + str30Per + @" - 90) END as NEWSUMPER
    FROM(
      SELECT a.ID as ST_ID
      FROM hrdbuser.ST_STAFFS a
      INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1
      INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1
      INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
      INNER JOIN hrdbuser.ST_BRANCH f ON d.FATHER_ID = f.ID AND f.ISACTIVE = 1
      INNER JOIN hrdbuser.STN_POS g ON b.POS_ID = g.ID
      INNER JOIN TBL_AGREEMENTSUBMITSTAFF h ON a.ID=h.ST_ID AND h.YR=" + yr + @" AND h.HFYR=" + yrhf + @"
      WHERE b.POS_ID NOT IN (2020102,2010201,2010301) AND d.FATHER_ID="+gazarid+@" AND d.ID="+heltesid+ @"
      GROUP BY a.ID
    ) a
    LEFT JOIN(
    
      SELECT 
        a.ST_ID, 
        COUNT(a.PLANYR_ID) as NIIT_PLANCNT, 
        SUM(NVL2(c.IMPL,1,0)) as NIIT_IMPLCNT, 
        NVL(ROUND(AVG((NVL(a.NIIT_PER2AVG,0)+NVL(c.PER1,0))),3),0) as NIIT_PERAVG
      FROM (
        SELECT a.PLANYR_ID, a.ST_ID, ROUND(ROUND(NVL(AVG(b.EVAL), 0), 3) * 0.3, 3) as NIIT_PER2AVG
        FROM (

          SELECT a.PLANYR_ID, a.ST_ID
          FROM (
            SELECT a.PLANYR_ID, a.ST_ID, NVL(b.ISCANCEL,0) as ISCANCEL
            FROM (
              SELECT b.PLANYR_ID, b.ST_ID 
              FROM ( 
                SELECT a.PLANYR_ID, a.ST_ID 
                FROM TBL_AGREEMENT_MAIN a
                INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
                WHERE a.YR=" + yr + @" AND a.ISSPECIAL=1 AND f.BR_ID=" + gazarid + @" AND d.BR_ID=" + heltesid + @" " + strYrhfA + @" AND b.SUBMIT_D2=1
                GROUP BY a.PLANYR_ID, a.ST_ID
              ) a 
              RIGHT JOIN ( 
                SELECT PLANYR_ID, ST_ID 
                FROM (
                    SELECT b.PLANYR_ID, b.ST_ID
                    FROM ( 
                        SELECT a.PLANYR_ID, a.ST_ID 
                        FROM TBL_AGREEMENT_MAIN a
                        INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                        INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
                        INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                        INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
                        WHERE a.YR = " + yr + @" AND f.BR_ID=" + gazarid + @" AND d.BR_ID=" + heltesid + @" AND b.SUBMIT_D2=1
                    ) a
                    RIGHT JOIN (
                        SELECT a.ID as PLANYR_ID, b.ST_ID 
                        FROM TBL_PLANYR a 
                        INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID  
                        INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID 
                        INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                        INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID 
                        WHERE a.YR=" + yr + @" AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1 AND f.BR_ID=" + gazarid + @" AND d.BR_ID=" + heltesid + @"
                            " + strMnthLike.Replace("b.BUDGET", "a.BUDGET") + @"
                        GROUP BY a.ID, b.ST_ID 
                    ) b ON a.PLANYR_ID=b.PLANYR_ID AND a.ST_ID=b.ST_ID
                    WHERE a.PLANYR_ID is null AND a.ST_ID is null
                    UNION ALL
                    SELECT a.PLANYR_ID, a.ST_ID 
                    FROM TBL_AGREEMENT_MAIN a
                    INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                    INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
                    INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                    INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
                    WHERE a.YR = " + yr + @" " + strYrhfA + @" AND f.BR_ID=" + gazarid + @" AND d.BR_ID=" + heltesid + @" AND b.SUBMIT_D2=1
                ) 
                GROUP BY PLANYR_ID, ST_ID
              ) b ON a.PLANYR_ID=b.PLANYR_ID AND a.ST_ID=b.ST_ID 
              WHERE a.PLANYR_ID IS NULL 
            ) a
            LEFT JOIN TBL_AGREEMENT_MAIN b ON a.PLANYR_ID=b.PLANYR_ID AND a.ST_ID=b.ST_ID AND b.YR=" + yr + @" " + strYrhfA.Replace("a.", "b.") + @"
          ) a
          WHERE a.ISCANCEL=0

        ) a
        LEFT JOIN TBL_PLANYR_EVAL b ON a.PLANYR_ID = b.PLANYR_ID AND b.TP = 'month' AND b.INTERVAL IN("+strMonthList+@")
        GROUP BY a.PLANYR_ID, a.ST_ID
      ) a
      LEFT JOIN TBL_AGREEMENT_MAIN b ON a.ST_ID=b.ST_ID AND a.PLANYR_ID=b.PLANYR_ID AND YR="+yr+@" 
      LEFT JOIN TBL_AGREEMENT_MAIN_IMPL c ON b.ID=c.AGREEMENT_MAIN_ID AND c.YRHF="+yrhf+ @"
      GROUP BY a.ST_ID      
      
    ) b ON a.ST_ID = b.ST_ID
    LEFT JOIN(
    
      SELECT 
        a.ST_ID, 
        COUNT(a.PLANYR_ID) as TUSGAI_PLANCNT, 
        SUM(NVL2(c.IMPL,1,0)) as TUSGAI_IMPLCNT, 
        NVL(ROUND(AVG((NVL(a.TUSGAI_PER2AVG,0)+NVL(c.PER1,0))),3),0) as TUSGAI_PERAVG
      FROM (
        SELECT a.PLANYR_ID, a.ST_ID, ROUND(ROUND(NVL(AVG(b.EVAL), 0), 3) * 0.4, 3) as TUSGAI_PER2AVG
        FROM (

          SELECT a.PLANYR_ID, a.ST_ID
          FROM (
            SELECT a.PLANYR_ID, a.ST_ID, NVL(b.ISCANCEL,0) as ISCANCEL
            FROM (
              SELECT b.PLANYR_ID, b.ST_ID 
              FROM ( 
                SELECT a.PLANYR_ID, a.ST_ID 
                FROM TBL_AGREEMENT_MAIN a
                INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
                WHERE a.YR=" + yr + @" AND a.ISSPECIAL=1 AND f.BR_ID=" + gazarid + @" AND d.BR_ID=" + heltesid + @" "+ strYrhfA + @" AND b.SUBMIT_D2=1
                GROUP BY a.PLANYR_ID, a.ST_ID
              ) a 
              INNER JOIN ( 
                SELECT PLANYR_ID, ST_ID 
                FROM (
                    SELECT b.PLANYR_ID, b.ST_ID
                    FROM ( 
                        SELECT a.PLANYR_ID, a.ST_ID 
                        FROM TBL_AGREEMENT_MAIN a
                        INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                        INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
                        INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                        INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
                        WHERE a.YR = " + yr + @" AND f.BR_ID=" + gazarid + @" AND d.BR_ID=" + heltesid + @" AND b.SUBMIT_D2=1
                    ) a
                    RIGHT JOIN (
                        SELECT a.ID as PLANYR_ID, b.ST_ID 
                        FROM TBL_PLANYR a 
                        INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID  
                        INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID 
                        INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                        INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID 
                        WHERE a.YR=" + yr + @" AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1 AND f.BR_ID=" + gazarid + @" AND d.BR_ID=" + heltesid + @"
                            " + strMnthLike.Replace("b.BUDGET", "a.BUDGET") + @"
                        GROUP BY a.ID, b.ST_ID 
                    ) b ON a.PLANYR_ID=b.PLANYR_ID AND a.ST_ID=b.ST_ID
                    WHERE a.PLANYR_ID is null AND a.ST_ID is null
                    UNION ALL
                    SELECT a.PLANYR_ID, a.ST_ID 
                    FROM TBL_AGREEMENT_MAIN a
                    INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                    INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
                    INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                    INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
                    WHERE a.YR = " + yr + @" " + strYrhfA + @" AND f.BR_ID= " + gazarid + @" AND d.BR_ID= " + heltesid + @" AND b.SUBMIT_D2=1
                ) 
                GROUP BY PLANYR_ID, ST_ID
              ) b ON a.PLANYR_ID=b.PLANYR_ID AND a.ST_ID=b.ST_ID 
            ) a
            LEFT JOIN TBL_AGREEMENT_MAIN b ON a.PLANYR_ID=b.PLANYR_ID AND a.ST_ID=b.ST_ID AND b.YR=" + yr + @" " + strYrhfA.Replace("a.", "b.") + @"
          ) a
          WHERE a.ISCANCEL=0

        ) a
        LEFT JOIN TBL_PLANYR_EVAL b ON a.PLANYR_ID = b.PLANYR_ID AND b.TP = 'month' AND b.INTERVAL IN(" + strMonthList + @")
        GROUP BY a.PLANYR_ID, a.ST_ID
      ) a
      LEFT JOIN TBL_AGREEMENT_MAIN b ON a.ST_ID=b.ST_ID AND a.PLANYR_ID=b.PLANYR_ID AND YR="+yr+@" 
      LEFT JOIN TBL_AGREEMENT_MAIN_IMPL c ON b.ID=c.AGREEMENT_MAIN_ID AND c.YRHF="+yrhf+ @"
      GROUP BY a.ST_ID 
    
    ) c ON a.ST_ID = c.ST_ID
    LEFT JOIN(
    
      SELECT a.ST_ID, NVL(COUNT(a.ID), 0) as TAB2PLANCNT, NVL(SUM(NVL2(a.TAB2IMPLCNT, 1, 0)), 0) as TAB2IMPLCNT, NVL(ROUND(AVG(a.PER1), 3), 0) as TAB2PER1AVG
      FROM(
        SELECT a.ST_ID, a.ID, NVL2(c.IMPL, 1, 0) as TAB2IMPLCNT, NVL(c.PER1, 0) as PER1
        FROM(
          SELECT a.ST_ID, a.ID, MAX(d.YRHF) as YRHF
          FROM TBL_AGREEMENT_SKILL a
          INNER JOIN hrdbuser.ST_STBR b ON a.ST_ID=b.STAFFS_ID AND b.ISACTIVE=1
          INNER JOIN hrdbuser.ST_BRANCH c ON b.BRANCH_ID=c.ID
          LEFT JOIN TBL_AGREEMENT_SKILL_IMPL d ON a.ID = d.AGREEMENT_SKILL_ID AND d.YRHF IN("+strYrhfB+@")
          WHERE a.YR = " + yr + @" " + strYrhfA + @" AND c.FATHER_ID=" + gazarid + @" AND c.ID=" + heltesid + @" AND b.POS_ID NOT IN (2010201, 2013201)
          GROUP BY a.ST_ID, a.ID
        ) a
        INNER JOIN TBL_AGREEMENT_SKILL b ON a.ID = b.ID
        LEFT JOIN TBL_AGREEMENT_SKILL_IMPL c ON a.ID = c.AGREEMENT_SKILL_ID AND a.YRHF = c.YRHF
        GROUP BY a.ST_ID, a.ID, NVL2(c.IMPL, 1, 0), NVL(c.PER1, 0)
      ) a
      GROUP BY a.ST_ID
      
    ) d ON a.ST_ID = d.ST_ID
    LEFT JOIN(
      
        SELECT a.ST_ID, CASE WHEN a.WORKDAY=0 THEN 0 ELSE NVL(ROUND(ROUND(((a.WORKDAY - (a.TASALSANDAYSUM + a.HOTSORSONDAYSUM + a.ERTDAYSUM)) / a.WORKDAY) * 100, 3) * 0.05, 3), 0) END as PER
        FROM(
        SELECT ST_ID,
            SUM(ISWORK) as WORKDAY,
            SUM(CHOLOODAY) as CHOLOODAYSUM,
            SUM(UWCHTEIDAY) as UWCHTEIDAYSUM,
            SUM(AMRALTDAY) as AMRALTDAYSUM,
            SUM(TOMILOLTDAY) as TOMILOLTDAYSUM,
            SUM(ISTASALSAN) as TASALSANDAYSUM,
            SUM(HOTSORSONMINUTE) as HOTSORSONMINUTESUM,
            SUM(HOTSORSONDAY) as HOTSORSONDAYSUM,
            SUM(ERTMINUTE) as ERTMINUTESUM,
            SUM(ERTDAY) as ERTDAYSUM,
            SUM(OROIMINUTE) as OROIMINUTESUM,
            SUM(OROIDAY) as OROIDAYSUM
        FROM(
        SELECT ST_ID, TP, DT, MINTM, MAXTM, ISWORK,
            CASE WHEN TP = 11 AND ISWORK = 1 OR TP = 12 THEN 1 ELSE 0 END as CHOLOODAY,
            CASE WHEN TP = 13 AND ISWORK = 1 THEN 1 ELSE 0 END as UWCHTEIDAY,
            CASE WHEN TP = 21 AND ISWORK = 1 THEN 1 ELSE 0 END as AMRALTDAY,
            CASE WHEN TP = 31 AND ISWORK = 1 THEN 1 ELSE 0 END as TOMILOLTDAY,
            CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM = MAXTM THEN 1 ELSE 0 END as ISTASALSAN,
            CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'hotsorson', 'minute') ELSE 0 END as HOTSORSONMINUTE,
            CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'hotsorson', 'day') ELSE 0 END as HOTSORSONDAY,
            CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'ert', 'minute') ELSE 0 END as ERTMINUTE,
            CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'ert', 'day') ELSE 0 END as ERTDAY,
            CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'oroi', 'minute') ELSE 0 END as OROIMINUTE,
            CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'oroi', 'day') ELSE 0 END as OROIDAY
        FROM(
            SELECT a.ST_ID, a.TP, a.DT, a.MINTM, a.MAXTM, CASE WHEN b.DT is null THEN a.ISWORK ELSE 0 END as ISWORK
            FROM(
            SELECT a.ST_ID, NVL(b.TP, 0) as TP, a.DT, a.MINTM, a.MAXTM, a.ISWORK
            FROM(
                SELECT a.ST_ID, a.DT, NVL(b.TP, 0) as TP, NVL(b.MINTM, '00:00:00') as MINTM, NVL(b.MAXTM, '00:00:00') as MAXTM, a.ISWORK
                FROM(
                SELECT a.STAFFS_ID as ST_ID, a.DT, CASE WHEN b.DT IS NULL THEN a.ISWORK ELSE 1 END as ISWORK
                FROM(
                    SELECT a.ID, b.STAFFS_ID, c.FATHER_ID as GAZAR_ID, c.ID as HELTES_ID, a.DT, CASE WHEN(MOD(TO_CHAR(a.DT, 'J'), 7) + 1) = 6 OR(MOD(TO_CHAR(a.DT, 'J'), 7) + 1) = 7 THEN 0 ELSE 1 END as ISWORK
                    FROM(
                    SELECT a.ID, a.BEGINDT, a.ENDDT, b.DT
                    FROM(
                        SELECT a.ID,
                        CASE
                            WHEN TO_DATE(a.DT, 'YYYY-MM-DD') > TO_DATE('" + yr + "-" + month + @"-01', 'YYYY-MM-DD')
                            THEN a.DT
                            ELSE '" + yr + "-" + month + @"-01'
                        END as BEGINDT,
                        CASE
                            --WHEN TO_DATE(CASE WHEN c.ACTIVE = 0 THEN NVL(a.ENDDT, a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE, 'YYYY-MM-DD')) END, 'YYYY-MM-DD') < LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'YYYY-MM-DD'))
                            --THEN CASE WHEN c.ACTIVE = 0 THEN NVL(a.ENDDT, a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE, 'YYYY-MM-DD')) END ELSE TO_CHAR(LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'YYYY-MM-DD')), 'YYYY-MM-DD') END as ENDDT
                            WHEN TO_DATE(CASE WHEN c.ACTIVE = 0 THEN TO_CHAR((TO_DATE(NVL(a.ENDDT, a.DT), 'YYYY-MM-DD') - 1), 'YYYY-MM-DD') ELSE NVL(TO_CHAR((TO_DATE(a.ENDDT, 'YYYY-MM-DD') - 1), 'YYYY-MM-DD'), TO_CHAR(SYSDATE, 'YYYY-MM-DD')) END, 'YYYY-MM-DD') < LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'YYYY-MM-DD'))
                            THEN CASE WHEN c.ACTIVE = 0 THEN TO_CHAR((TO_DATE(NVL(a.ENDDT, a.DT), 'YYYY-MM-DD') - 1), 'YYYY-MM-DD') ELSE NVL(TO_CHAR((TO_DATE(a.ENDDT, 'YYYY-MM-DD') - 1), 'YYYY-MM-DD'), TO_CHAR(SYSDATE, 'YYYY-MM-DD')) END ELSE TO_CHAR(LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'YYYY-MM-DD')), 'YYYY-MM-DD') END as ENDDT
                        FROM hrdbuser.ST_STBR a
                        INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID = b.ID AND b.ISACTIVE = 1
                        INNER JOIN hrdbuser.STN_MOVE c ON a.MOVE_ID = c.ID
                        WHERE a.POS_ID != 2020102 AND c.ACTIVE = 1
                        AND ((
                            TO_DATE('" + yr + "-" + month + @"-01','YYYY-MM-DD') 
                            BETWEEN TO_DATE(a.DT,'YYYY-MM-DD') AND TO_DATE(CASE WHEN c.ACTIVE=0 THEN NVL(a.ENDDT,a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE,'YYYY-MM-DD')) END,'YYYY-MM-DD')
                            OR 
                            LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01','YYYY-MM-DD')) 
                            BETWEEN TO_DATE(a.DT,'YYYY-MM-DD') AND TO_DATE(CASE WHEN c.ACTIVE=0 THEN NVL(a.ENDDT,a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE,'YYYY-MM-DD')) END,'YYYY-MM-DD')
                            ) OR 
                            (
                                TO_DATE('" + yr + "-" + month + @"-01','YYYY-MM-DD')<TO_DATE(a.DT,'YYYY-MM-DD') AND LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01','YYYY-MM-DD'))>TO_DATE(a.DT,'YYYY-MM-DD')
                            ))
                    ) a, (
                        SELECT DT
                        FROM(
                        SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                        FROM DUAL
                        CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                        )
                        WHERE DT BETWEEN TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') AND SYSDATE AND MOD(TO_CHAR(DT, 'J'), 7) + 1 IN(1, 2, 3, 4, 5, 6, 7)
                    ) b
                    ) a
                    INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.ID
                    INNER JOIN hrdbuser.ST_BRANCH c ON b.BRANCH_ID = c.ID AND c.ISACTIVE = 1
                    WHERE a.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD') AND b.POS_ID != 2020102 AND b.STAFFS_ID IN (
                      SELECT a.STAFFS_ID as ST_ID
                      FROM hrdbuser.ST_STBR a 
                      INNER JOIN hrdbuser.STN_MOVE b ON a.MOVE_ID=b.ID AND b.ACTIVE=1
                      INNER JOIN hrdbuser.ST_BRANCH c ON a.BRANCH_ID = c.ID AND c.ISACTIVE = 1
                      WHERE a.ISACTIVE=1 AND a.POS_ID NOT IN (2010201,2010301) AND c.FATHER_ID="+gazarid+@" AND c.ID="+heltesid+@"
                      GROUP BY a.STAFFS_ID)
                ) a
                LEFT JOIN(
                    SELECT TO_DATE(HOLDATE, 'YYYY-MM-DD') as DT FROM hrdbuser.ST_HOLIDAYISWORK WHERE TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'YYYY')) = " + yr + @" AND TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'MM')) IN(" + strMonthList + @")
                ) b ON a.DT = b.DT
                ) a
                LEFT JOIN(
                SELECT a.MONTH, a.INOUT as TP, b.ID as ST_ID, TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd') as DT, TO_CHAR(MIN(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY || ' ' || a.HOUR || ':' || a.MINUTE || ':' || a.SECOND, 'yyyy-mm-dd hh24:mi:ss')), 'hh24:mi:ss') as MINTM, TO_CHAR(MAX(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY || ' ' || a.HOUR || ':' || a.MINUTE || ':' || a.SECOND, 'yyyy-mm-dd hh24:mi:ss')), 'hh24:mi:ss') as MAXTM
                FROM STN_TRCDLOG a
                INNER JOIN hrdbuser.ST_STAFFS b ON a.ENO = b.FINGERID
                INNER JOIN hrdbuser.ST_STBR c ON b.ID = c.STAFFS_ID
                INNER JOIN hrdbuser.STN_MOVE d ON c.MOVE_ID = d.ID
                INNER JOIN hrdbuser.ST_BRANCH f ON c.BRANCH_ID = f.ID AND f.ISACTIVE = 1
                WHERE c.POS_ID != 2020102 AND a.INOUT = 0 AND a.YEAR = " + yr + @" AND a.MONTH IN(" + strMonthList + @") AND TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd') BETWEEN TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') AND SYSDATE AND MOD(TO_CHAR(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd'), 'J'), 7) + 1 IN(1, 2, 3, 4, 5, 6, 7)
                GROUP BY a.MONTH, a.INOUT, b.ID, TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd')
                ) b ON a.ST_ID = b.ST_ID AND a.DT = b.DT
            ) a
            LEFT JOIN(
                SELECT DT, STAFFS_ID, MAX(TP) as TP
                FROM(
                    SELECT b.DT, a.STAFFS_ID, 11 as TP
                    FROM hrdbuser.ST_CHULUUDAYF3 a,
                    (
                    SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                    FROM DUAL
                    CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                    ) b
                    WHERE
                    b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
                    UNION ALL
                    SELECT b.DT, a.STAFFS_ID, 12 as TP
                    FROM hrdbuser.ST_CHULUUDAYT2 a,
                    (
                    SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                    FROM DUAL
                    CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                    ) b
                    WHERE
                    a.ISRECEIVED = 1 AND
                    b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
                    UNION ALL
                    SELECT b.DT, a.STAFFS_ID, 13 as TP
                    FROM hrdbuser.ST_CHULUUSICK a,
                    (
                    SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                    FROM DUAL
                    CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                    ) b
                    WHERE
                    b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
                    UNION ALL
                    SELECT b.DT, a.STAFFS_ID, 21 as TP
                    FROM hrdbuser.ST_AMRALT a,
                    (
                    SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                    FROM DUAL
                    CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                    ) b
                    WHERE
                    a.TZISRECEIVED = 1 AND
                    b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
                    UNION ALL
                    SELECT b.DT, a.STAFFS_ID, 31 as TP
                    FROM hrdbuser.ST_TOMILOLT_STAFFS a
                    INNER JOIN hrdbuser.ST_TOMILOLT c ON a.TOMILOLT_ID = c.ID,
                    (
                    SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                    FROM DUAL
                    CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                    ) b
                    WHERE
                    b.DT BETWEEN TO_DATE(c.FROMDATE, 'YYYY-MM-DD') AND TO_DATE(c.TODATE, 'YYYY-MM-DD')
                )
                GROUP BY DT, STAFFS_ID
            ) b ON a.DT = b.DT AND a.ST_ID = b.STAFFS_ID
            ) a
            LEFT JOIN(
            SELECT TO_DATE('" + yr + @"-' || HOLMONTH || '-' || HOLDAY, 'YYYY-MM-DD') as DT
            FROM hrdbuser.ST_HOLIDAYOFFICIAL
            WHERE HOLMONTH IN(" + strMonthList + @")
            UNION ALL
            SELECT TO_DATE(HOLDATE, 'YYYY-MM-DD') as DT
            FROM hrdbuser.ST_HOLIDAYUNOFFICIAL
            WHERE TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'YYYY')) = " + yr + @" AND TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'MM')) IN(" + strMonthList + @")
            ) b ON a.DT = b.DT
            GROUP BY a.ST_ID, a.TP, a.DT, a.MINTM, a.MAXTM, CASE WHEN b.DT is null THEN a.ISWORK ELSE 0 END
        )
        )
        GROUP BY ST_ID
        ) a

    ) f ON a.ST_ID = f.ST_ID
    LEFT JOIN (
      SELECT c.ID as ST_ID, NVL(ROUND(ROUND(AVG(b.PER), 3) * 0.05, 3), 0) as AVGPNT
      FROM TBL_SRV a
      INNER JOIN TBL_SRV_ANSWER b ON a.SRV_ANSWER_ID = b.ID
      INNER JOIN hrdbuser.ST_STAFFS c ON a.TRGT_ID = c.ID
      INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
      INNER JOIN hrdbuser.ST_BRANCH f ON d.BRANCH_ID = f.ID AND f.ISACTIVE = 1
      INNER JOIN hrdbuser.ST_BRANCH g ON f.FATHER_ID = g.ID AND g.ISACTIVE = 1
      WHERE a.SRV_TYPE_ID = 3 AND a.YR = " + yr+@" AND a.YR_HF = "+yrhf+@" AND f.FATHER_ID="+gazarid+@" AND f.ID="+heltesid+@"
      GROUP BY c.ID
    ) g ON a.ST_ID = g.ST_ID
    LEFT JOIN (
      SELECT a.ST_ID, NVL(COUNT(a.ID), 0) as TAB3PLANCNT, NVL(SUM(NVL2(a.TAB3IMPLCNT, 1, 0)), 0) as TAB3IMPLCNT, NVL(ROUND(AVG(a.PER1), 3), 0) as TAB3PER1AVG
      FROM(
        SELECT a.ST_ID, a.ID, NVL2(c.IMPL, 1, 0) as TAB3IMPLCNT, NVL(c.PER1, 0) as PER1
        FROM(
          SELECT a.ST_ID, a.ID, MAX(d.YRHF) as YRHF
          FROM TBL_AGREEMENT_OTHER a
          INNER JOIN hrdbuser.ST_STBR b ON a.ST_ID=b.STAFFS_ID AND b.ISACTIVE=1
          INNER JOIN hrdbuser.ST_BRANCH c ON b.BRANCH_ID=c.ID
          LEFT JOIN TBL_AGREEMENT_OTHER_IMPL d ON a.ID = d.AGREEMENT_OTHER_ID AND d.YRHF IN("+strYrhfB+@")
          WHERE a.YR = "+yr+@" "+strYrhfA+@"
          GROUP BY a.ST_ID, a.ID
        ) a
        INNER JOIN TBL_AGREEMENT_OTHER b ON a.ID = b.ID
        LEFT JOIN TBL_AGREEMENT_OTHER_IMPL c ON a.ID = c.AGREEMENT_OTHER_ID AND a.YRHF = c.YRHF
        GROUP BY a.ST_ID, a.ID, NVL2(c.IMPL, 1, 0), NVL(c.PER1, 0)
      ) a
      GROUP BY a.ST_ID
    ) h ON a.ST_ID = h.ST_ID

  ) h 
  INNER JOIN hrdbuser.ST_STAFFS a ON h.ST_ID=a.ID
  INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1
  INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1
  INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
  INNER JOIN hrdbuser.ST_BRANCH f ON d.FATHER_ID = f.ID AND f.ISACTIVE = 1
  INNER JOIN hrdbuser.STN_POS g ON b.POS_ID = g.ID
  ORDER BY f.SORT, d.SORT, g.SORT, a.ID
) a";
                ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AgreementTab5t1(string yr, string yrhf, string gazar, string heltes)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (gazar != "") gazar = " AND d.FATHER_ID=" + gazar;
            if (heltes != "") heltes = " AND d.ID=" + heltes;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT ROWNUM as ROWNO, a.* FROM( SELECT a.ID as STAFFS_ID , CASE WHEN d.ID = d.FATHER_ID THEN d.INITNAME ELSE f.INITNAME || '-' || d.INITNAME END as NEGJ , g.NAME AS POS_NAME , (SUBSTR(a.LNAME, 0, 1) || '.' || SUBSTR(a.FNAME, 0, 1) || LOWER(SUBSTR(a.FNAME, 2))) as STAFFNAME , NVL2(h.ST_ID, ' checked=\"checked\"', null) as ISSUBMIT, NVL2(i.ST_ID, null, ' hide') as ISAGREEMENTSUBMIT FROM hrdbuser.ST_STAFFS a INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1 INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1 INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1 INNER JOIN hrdbuser.ST_BRANCH f ON d.FATHER_ID = f.ID AND f.ISACTIVE = 1 INNER JOIN hrdbuser.STN_POS g ON b.POS_ID = g.ID LEFT JOIN TBL_AGREEMENTSUBMITSTAFF h ON a.ID = h.ST_ID AND h.YR = " + yr + " AND h.HFYR=" + yrhf + " LEFT JOIN TBL_AGREEMENTSUBMITST i ON a.ID=i.ST_ID AND i.YR=" + yr + " WHERE 1=1" + gazar + heltes + " ORDER BY f.SORT, d.SORT, g.SORT ) a");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AgreementTab5t3(string yr, string gazar, string heltes)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strQry = "";
            string strGazar1 = "", strGazar2 = "";
            string strHeltes1 = "", strHeltes2 = "";
            if (gazar != "") {
                strGazar1 = " AND f.BR_ID=" + gazar;
                strGazar2 = " AND d.FATHER_ID =" + gazar;
            }
            if (heltes != "")
            {
                strHeltes1 = " AND d.BR_ID=" + heltes;
                strHeltes2 = " AND d.ID =" + heltes;
            }
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                strQry = "SELECT ROWNUM as ROWNO, a.* FROM ( SELECT a.ID as STAFFS_ID, CASE WHEN d.ID = d.FATHER_ID THEN d.INITNAME ELSE f.INITNAME || '-' || d.INITNAME END as NEGJ, g.NAME AS POS_NAME, (SUBSTR(a.LNAME, 0, 1) || '.' || SUBSTR(a.FNAME, 0, 1) || LOWER(SUBSTR(a.FNAME, 2))) as STAFFNAME, NVL2(h.ST_ID,' checked=\"checked\"',null) as ISSUBMIT, ";
                strQry += @"i.ISSPECIAL0 as ISSPECIAL0CNT,
    i.ISSPECIAL1 as ISSPECIAL1CNT,
    i.ISLOCAL as ISLOCALCNT,
    j.SKILLCNT,
    k.OTHERCNT
  FROM hrdbuser.ST_STAFFS a
  INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1
  INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1
  INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
  INNER JOIN hrdbuser.ST_BRANCH f ON d.FATHER_ID = f.ID AND f.ISACTIVE = 1
  INNER JOIN hrdbuser.STN_POS g ON b.POS_ID = g.ID
  LEFT JOIN TBL_AGREEMENTSUBMITST h ON a.ID = h.ST_ID AND h.YR = " + yr + @"
  LEFT JOIN(
    SELECT ST_ID, SUM(ISSPECIAL0) as ISSPECIAL0, SUM(ISSPECIAL1) as ISSPECIAL1, SUM(ISLOCAL) as ISLOCAL
    FROM(
      SELECT
        PLANYR_ID,
        ST_ID,
        CASE WHEN SUM(ISSPECIAL0) > 1 THEN 1 ELSE SUM(ISSPECIAL0) END as ISSPECIAL0,
        CASE WHEN SUM(ISSPECIAL1) > 1 THEN 1 ELSE SUM(ISSPECIAL1) END as ISSPECIAL1,
        CASE WHEN SUM(ISLOCAL) > 1 THEN 1 ELSE SUM(ISLOCAL) END as ISLOCAL
      FROM(
        SELECT a.ID as PLANYR_ID, b.ST_ID, 1 as ISSPECIAL0, 0 as ISSPECIAL1, 0 ISLOCAL
        FROM TBL_PLANYR a
        INNER JOIN TBL_PLANYR_USER b ON a.ID = b.PLANYR_ID
        INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID = c.ID
        INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID = d.FUNC_ACTION_ID
        INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID = f.ID
        WHERE a.YR = " + yr + " AND a.IS_PLANED IN (1,0,null) AND c.IS_LOCAL = 0 AND a.SUBMIT_D2 = 1" + strGazar1 + @"
        GROUP BY a.ID, b.ST_ID
        UNION ALL
        SELECT PLANYR_ID, ST_ID, CASE WHEN ISSPECIAL = 0 THEN 1 ELSE 0 END AS ISSPECIAL0, CASE WHEN ISSPECIAL = 1 THEN 1 ELSE 0 END AS ISSPECIAL1, 0 ISLOCAL
        FROM TBL_AGREEMENT_MAIN a
        INNER JOIN TBL_PLANYR b ON a.PLANYR_ID = b.ID
        INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID = c.ID
        INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID = d.FUNC_ACTION_ID
        INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID = f.ID
        WHERE a.YR = " + yr + " AND c.IS_LOCAL = 0" + strGazar1 + strHeltes1 + @"
        UNION ALL
        SELECT a.ID as PLANYR_ID, b.ST_ID, 0 as ISSPECIAL0, 0 as ISSPECIAL1, 1 ISLOCAL
        FROM TBL_PLANYR a
        INNER JOIN TBL_PLANYR_USER b ON a.ID = b.PLANYR_ID
        INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID = c.ID
        INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID = d.FUNC_ACTION_ID
        INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID = f.ID
        WHERE a.YR = " + yr + " AND a.IS_PLANED IN (1,0,null) AND c.IS_LOCAL = 1 AND a.SUBMIT_D2 = 1" + strGazar1 + @"
        GROUP BY a.ID, b.ST_ID
        UNION ALL
        SELECT PLANYR_ID, ST_ID, 0 as ISSPECIAL0, 0 as ISSPECIAL1, 1 ISLOCAL
        FROM TBL_AGREEMENT_MAIN a
        INNER JOIN TBL_PLANYR b ON a.PLANYR_ID = b.ID
        INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID = c.ID
        INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID = d.FUNC_ACTION_ID
        INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID = f.ID
        WHERE a.YR = "+yr+" AND c.IS_LOCAL = 1" + strGazar1 + strHeltes1 + @"
      )
      GROUP BY PLANYR_ID, ST_ID
    )
    GROUP BY ST_ID
  ) i ON a.ID = i.ST_ID
  LEFT JOIN(
    SELECT a.ST_ID, COUNT(a.ID) as SKILLCNT
    FROM TBL_AGREEMENT_SKILL a
    INNER JOIN hrdbuser.ST_STAFFS b ON a.ST_ID = b.ID
    INNER JOIN hrdbuser.ST_STBR c ON b.ID = c.STAFFS_ID AND c.ISACTIVE = 1
    INNER JOIN hrdbuser.ST_BRANCH d ON c.BRANCH_ID = d.ID AND d.ISACTIVE = 1
    WHERE a.YR="+yr + strGazar2 + strHeltes2 + @"
    GROUP BY a.ST_ID
  ) j ON a.ID = j.ST_ID
  LEFT JOIN(
    SELECT a.ST_ID, COUNT(a.ID) as OTHERCNT
    FROM TBL_AGREEMENT_OTHER a
    INNER JOIN hrdbuser.ST_STAFFS b ON a.ST_ID = b.ID
    INNER JOIN hrdbuser.ST_STBR c ON b.ID = c.STAFFS_ID AND c.ISACTIVE = 1
    INNER JOIN hrdbuser.ST_BRANCH d ON c.BRANCH_ID = d.ID AND d.ISACTIVE = 1
    WHERE a.YR=" + yr + strGazar2 + strHeltes2 + @"
    GROUP BY a.ST_ID
  ) k ON a.ID = k.ST_ID
  WHERE b.POS_ID != 2020102" + strGazar2 + strHeltes2 + @"
  ORDER BY f.SORT, d.SORT, g.SORT
) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AgreementTab4t2(string yr, string yrhf)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string month = "", month2 = "", strMonthList = "";
            string strYrhfA = "", strYrhfB = "";
            string strMnthLike = "";
            string strQry = "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                if (yrhf == "1")
                {
                    strYrhfA = " AND a.YRHF1=1";
                    strYrhfB = "1";
                    month = "1";
                    month2 = "6";
                    strMnthLike = " AND (b.BUDGET IS NULL OR b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||b.BUDGET||',' LIKE '%,1,%' OR ','||b.BUDGET||',' LIKE '%,2,%' OR ','||b.BUDGET||',' LIKE '%,3,%' OR ','||b.BUDGET||',' LIKE '%,4,%' OR ','||b.BUDGET||',' LIKE '%,5,%' OR ','||b.BUDGET||',' LIKE '%,6,%')";
                }
                else if (yrhf == "2")
                {
                    strYrhfA = " AND (a.YRHF1=1 OR a.YRHF2=1)";
                    strYrhfB = "1,2";
                    month = "1";
                    month2 = "12";
                    strMnthLike = " AND (b.BUDGET IS NULL OR b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||b.BUDGET||',' LIKE '%,1,%' OR ','||b.BUDGET||',' LIKE '%,2,%' OR ','||b.BUDGET||',' LIKE '%,3,%' OR ','||b.BUDGET||',' LIKE '%,4,%' OR ','||b.BUDGET||',' LIKE '%,5,%' OR ','||b.BUDGET||',' LIKE '%,6,%' OR ','||b.BUDGET||',' LIKE '%,7,%' OR ','||b.BUDGET||',' LIKE '%,8,%' OR ','||b.BUDGET||',' LIKE '%,9,%' OR ','||b.BUDGET||',' LIKE '%,10,%' OR ','||b.BUDGET||',' LIKE '%,11,%' OR ','||b.BUDGET||',' LIKE '%,12,%')";
                }
                for (int i = Int32.Parse(month); i <= Int32.Parse(month2); i++)
                {
                    if (strMonthList == "") strMonthList += i.ToString();
                    else strMonthList += "," + i.ToString();
                }
                strQry = @"SELECT ROWNUM as ROWNO
  , a.NEGJ
  , a.POS_NAME
  , a.MOVE_NAME
  , a.STAFFNAME
  , a.NIIT_PLANCNT
  , a.NIIT_IMPLCNT
  , a.NIIT_PERAVG
  , a.TUSGAI_PLANCNT
  , a.TUSGAI_IMPLCNT
  , a.TUSGAI_PERAVG
  , a.TAB2PLANCNT
  , a.TAB2IMPLCNT
  , NVL(a.TAB2PER1AVG,0) as TAB2PER1AVG
  , NVL(a.TAB2PERIRTS,0) as TAB2PERIRTS
  , NVL(a.TAB2PERHAMT,0) as TAB2PERHAMT
  , a.TAB3PLANCNT
  , a.TAB3IMPLCNT
  , a.TAB3PER1AVG
  , a.NIITOTHER_PLANCNT
  , a.NIITOTHER_IMPLCNT
  , a.NIITOTHER_PERAVG
  , a.SUMPER
  , CASE WHEN a.SUMPER <= 20 THEN 'bg-color-red' ELSE CASE WHEN a.SUMPER > 20 AND a.SUMPER <= 80 THEN 'bg-color-orange' ELSE CASE WHEN a.SUMPER > 80 THEN 'bg-color-greenLight' END END END as SUMPERCOLOR
FROM(
  SELECT f.SORT as GAZARSORT
    , d.SORT as HELTESSORT
    , g.SORT as POSSORT
    , a.ID as ST_ID
    , CASE WHEN d.ID = d.FATHER_ID THEN d.INITNAME ELSE f.INITNAME || '-' || d.INITNAME END AS NEGJ
    , g.NAME as POS_NAME
    , c.NAME as MOVE_NAME
    , SUBSTR(a.LNAME, 0, 1) || '.' || SUBSTR(a.FNAME, 1, 1) || LOWER(SUBSTR(a.FNAME, 2)) as STAFFNAME
    , h.NIIT_PLANCNT
    , h.NIIT_IMPLCNT
    , h.NIIT_PERAVG
    , h.TUSGAI_PLANCNT
    , h.TUSGAI_IMPLCNT
    , h.TUSGAI_PERAVG
    , h.TAB2PLANCNT
    , h.TAB2IMPLCNT
    , h.TAB2PER1AVG
    , h.TAB2PERIRTS
    , h.TAB2PERHAMT
    , h.TAB3PLANCNT
    , h.TAB3IMPLCNT
    , h.TAB3PER1AVG
    , h.NIITOTHER_PLANCNT
    , h.NIITOTHER_IMPLCNT
    , h.NIITOTHER_PERAVG
    , h.SUMPER
  FROM (
  
    SELECT a.ST_ID
      , b.NIIT_PLANCNT
      , b.NIIT_IMPLCNT
      , b.NIIT_PERAVG as NIIT_PERAVG
      , c.TUSGAI_PLANCNT
      , c.TUSGAI_IMPLCNT
      , c.TUSGAI_PERAVG
      , d.TAB2PLANCNT
      , d.TAB2IMPLCNT
      , d.TAB2PER1AVG
      , f.PER as TAB2PERIRTS
      , g.AVGPNT as TAB2PERHAMT
      , h.TAB3PLANCNT
      , h.TAB3IMPLCNT
      , h.TAB3PER1AVG
      , (NVL(b.NIIT_PLANCNT, 0) + NVL(h.TAB3PLANCNT, 0)) as NIITOTHER_PLANCNT
      , (NVL(b.NIIT_IMPLCNT, 0) + NVL(h.TAB3IMPLCNT, 0)) as NIITOTHER_IMPLCNT
      , CASE WHEN NVL(h.TAB3PER1AVG, 0) != 0 THEN ROUND((NVL(b.NIIT_PERAVG, 0) + NVL(h.TAB3PER1AVG, 0)) / 2, 3) ELSE NVL(b.NIIT_PERAVG, 0) END as NIITOTHER_PERAVG
      , (NVL(CASE WHEN NVL(h.TAB3PER1AVG, 0) != 0 THEN ROUND((NVL(b.NIIT_PERAVG, 0) + NVL(h.TAB3PER1AVG, 0)) / 2, 3) ELSE NVL(b.NIIT_PERAVG, 0) END, 0) + NVL(c.TUSGAI_PERAVG, 0) + NVL(d.TAB2PER1AVG, 0) + NVL(f.PER, 0) + NVL(g.AVGPNT, 0)) as SUMPER
    FROM(
      SELECT a.ID as ST_ID
      FROM hrdbuser.ST_STAFFS a
      INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1
      INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1
      INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
      INNER JOIN hrdbuser.ST_BRANCH f ON d.FATHER_ID = f.ID AND f.ISACTIVE = 1
      INNER JOIN hrdbuser.STN_POS g ON b.POS_ID = g.ID
      INNER JOIN TBL_AGREEMENTSUBMITSTAFF h ON a.ID=h.ST_ID AND h.YR="+yr+@" AND h.HFYR="+yrhf+ @"
      WHERE b.POS_ID IN (2010201,2010301)
      GROUP BY a.ID
    ) a
    LEFT JOIN(
    
      SELECT 
        a.ST_ID, 
        COUNT(a.PLANYR_ID) as NIIT_PLANCNT, 
        SUM(NVL2(c.IMPL,1,0)) as NIIT_IMPLCNT, 
        NVL(ROUND(AVG((NVL(a.NIIT_PER2AVG,0)+NVL(c.PER1,0))),3),0) as NIIT_PERAVG
      FROM (
        SELECT a.PLANYR_ID, a.ST_ID, ROUND(ROUND(NVL(AVG(b.EVAL), 0), 3) * 0.3, 3) as NIIT_PER2AVG
        FROM (

          SELECT a.PLANYR_ID, a.ST_ID
          FROM (
            SELECT a.PLANYR_ID, a.ST_ID, NVL(b.ISCANCEL,0) as ISCANCEL
            FROM (
              SELECT b.PLANYR_ID, b.ST_ID 
              FROM ( 
                SELECT a.PLANYR_ID, a.ST_ID 
                FROM TBL_AGREEMENT_MAIN a
                INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                INNER JOIN hrdbuser.ST_STBR c ON a.ST_ID=c.STAFFS_ID AND c.ISACTIVE=1 AND c.POS_ID=2010301
                INNER JOIN hrdbuser.STN_MOVE d ON c.MOVE_ID=d.ID AND d.ACTIVE=1
                WHERE a.YR=" + yr + @" AND a.ISSPECIAL=1 " + strYrhfA + @" AND b.SUBMIT_D2=1
                GROUP BY a.PLANYR_ID, a.ST_ID
              ) a 
              RIGHT JOIN ( 
                SELECT PLANYR_ID, ST_ID 
                FROM (
                    SELECT b.PLANYR_ID, b.ST_ID
                    FROM ( 
                        SELECT a.PLANYR_ID, a.ST_ID 
                        FROM TBL_AGREEMENT_MAIN a
                        INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                        INNER JOIN hrdbuser.ST_STBR c ON a.ST_ID=c.STAFFS_ID AND c.ISACTIVE=1 AND c.POS_ID=2010301
                        INNER JOIN hrdbuser.STN_MOVE d ON c.MOVE_ID=d.ID AND d.ACTIVE=1
                        WHERE a.YR = " + yr + @"  AND b.SUBMIT_D2=1
                    ) a
                    RIGHT JOIN (
                        SELECT a.ID as PLANYR_ID, d.ST_ID
                        FROM TBL_PLANYR a 
                        INNER JOIN TBL_FUNC_ACTION b ON a.FUNC_ACTION_ID=b.ID 
                        INNER JOIN TBL_FUNC_ACTION_BR c ON b.ID=c.FUNC_ACTION_ID
                        INNER JOIN (
                          SELECT a.STAFFS_ID as ST_ID, a.BRANCH_ID as BR_ID
                          FROM hrdbuser.ST_STBR a 
                          INNER JOIN hrdbuser.STN_MOVE b ON a.MOVE_ID=b.ID AND b.ACTIVE=1
                          WHERE a.ISACTIVE=1 AND a.POS_ID IN (2010301)
                          GROUP BY a.STAFFS_ID, a.BRANCH_ID
                        ) d ON c.BR_ID=d.BR_ID
                        WHERE a.YR=" + yr + @" AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1
                             " + strMnthLike.Replace("b.BUDGET", "a.BUDGET") + @"
                        GROUP BY a.ID, d.ST_ID
                    ) b ON a.PLANYR_ID=b.PLANYR_ID
                    WHERE a.PLANYR_ID is null
                    UNION ALL
                    SELECT a.PLANYR_ID, a.ST_ID 
                    FROM TBL_AGREEMENT_MAIN a
                    INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                    INNER JOIN hrdbuser.ST_STBR c ON a.ST_ID=c.STAFFS_ID AND c.ISACTIVE=1 AND c.POS_ID=2010301
                    INNER JOIN hrdbuser.STN_MOVE d ON c.MOVE_ID=d.ID AND d.ACTIVE=1
                    WHERE a.YR = " + yr + @" " + strYrhfA + @" AND b.SUBMIT_D2=1
                ) 
                GROUP BY PLANYR_ID, ST_ID
              ) b ON a.PLANYR_ID=b.PLANYR_ID AND a.ST_ID=b.ST_ID 
              WHERE a.PLANYR_ID IS NULL AND a.ST_ID IS NULL
            ) a
            LEFT JOIN TBL_AGREEMENT_MAIN b ON a.PLANYR_ID=b.PLANYR_ID AND a.ST_ID=b.ST_ID AND b.YR=" + yr + @" " + strYrhfA.Replace("a.", "b.") + @"
          ) a
          WHERE a.ISCANCEL=0

        ) a
        LEFT JOIN TBL_PLANYR_EVAL b ON a.PLANYR_ID = b.PLANYR_ID AND b.TP = 'month' AND b.INTERVAL IN("+strMonthList+@")
        GROUP BY a.PLANYR_ID, a.ST_ID
      ) a
      LEFT JOIN TBL_AGREEMENT_MAIN b ON a.ST_ID=b.ST_ID AND a.PLANYR_ID=b.PLANYR_ID AND b.YR="+yr+@" 
      LEFT JOIN TBL_AGREEMENT_MAIN_IMPL c ON b.ID=c.AGREEMENT_MAIN_ID AND c.YRHF="+yrhf+ @"
      GROUP BY a.ST_ID 
      UNION ALL
      SELECT 
        a.ST_ID, 
        COUNT(a.PLANYR_ID) as NIIT_PLANCNT, 
        SUM(NVL2(c.IMPL,1,0)) as NIIT_IMPLCNT, 
        NVL(ROUND(AVG((NVL(a.NIIT_PER2AVG,0)+NVL(c.PER1,0))),3),0) as NIIT_PERAVG
      FROM (
        SELECT a.PLANYR_ID, a.ST_ID, ROUND(ROUND(NVL(AVG(b.EVAL), 0), 3) * 0.3, 3) as NIIT_PER2AVG
        FROM (

          SELECT a.PLANYR_ID, a.ST_ID
          FROM (
            SELECT a.PLANYR_ID, a.ST_ID, NVL(b.ISCANCEL,0) as ISCANCEL
            FROM (
              SELECT b.PLANYR_ID, b.ST_ID 
              FROM ( 
                SELECT a.PLANYR_ID, a.ST_ID 
                FROM TBL_AGREEMENT_MAIN a
                INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                INNER JOIN hrdbuser.ST_STBR c ON a.ST_ID=c.STAFFS_ID AND c.ISACTIVE=1 AND c.POS_ID=2010201
                INNER JOIN hrdbuser.STN_MOVE d ON c.MOVE_ID=d.ID AND d.ACTIVE=1
                WHERE a.YR=" + yr + @" AND a.ISSPECIAL=1 " + strYrhfA + @" AND b.SUBMIT_D2=1
                GROUP BY a.PLANYR_ID, a.ST_ID
              ) a 
              RIGHT JOIN ( 
                SELECT PLANYR_ID, ST_ID 
                FROM (
                    SELECT b.PLANYR_ID, b.ST_ID
                    FROM ( 
                        SELECT a.PLANYR_ID, a.ST_ID 
                        FROM TBL_AGREEMENT_MAIN a
                        INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                        INNER JOIN hrdbuser.ST_STBR c ON a.ST_ID=c.STAFFS_ID AND c.ISACTIVE=1 AND c.POS_ID=2010201
                        INNER JOIN hrdbuser.STN_MOVE d ON c.MOVE_ID=d.ID AND d.ACTIVE=1
                        WHERE a.YR = " + yr + @" AND b.SUBMIT_D2=1
                    ) a
                    RIGHT JOIN (
                        SELECT a.ID as PLANYR_ID, f.ST_ID
                        FROM TBL_PLANYR a 
                        INNER JOIN TBL_FUNC_ACTION b ON a.FUNC_ACTION_ID=b.ID 
                        INNER JOIN TBL_FUNC_ACTION_BR c ON b.ID=c.FUNC_ACTION_ID
                        INNER JOIN TBL_FUNC_STRAT d ON b.FUNC_STRAT_ID=d.ID
                        INNER JOIN (
                          SELECT a.STAFFS_ID as ST_ID, a.BRANCH_ID as BR_ID
                          FROM hrdbuser.ST_STBR a 
                          INNER JOIN hrdbuser.STN_MOVE b ON a.MOVE_ID=b.ID AND b.ACTIVE=1
                          WHERE a.ISACTIVE=1 AND a.POS_ID IN (2010201)
                          GROUP BY a.STAFFS_ID, a.BRANCH_ID
                        ) f ON d.BR_ID=f.BR_ID
                        WHERE a.YR=" + yr + @" AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1
                             " + strMnthLike.Replace("b.BUDGET", "a.BUDGET") + @"
                        GROUP BY a.ID, f.ST_ID
                    ) b ON a.PLANYR_ID=b.PLANYR_ID
                    WHERE a.PLANYR_ID is null
                    UNION ALL
                    SELECT a.PLANYR_ID, a.ST_ID 
                    FROM TBL_AGREEMENT_MAIN a
                    INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                    INNER JOIN hrdbuser.ST_STBR c ON a.ST_ID=c.STAFFS_ID AND c.ISACTIVE=1 AND c.POS_ID=2010201
                    INNER JOIN hrdbuser.STN_MOVE d ON c.MOVE_ID=d.ID AND d.ACTIVE=1
                    WHERE a.YR = " + yr + @" " + strYrhfA + @" AND b.SUBMIT_D2=1
                ) 
                GROUP BY PLANYR_ID, ST_ID
              ) b ON a.PLANYR_ID=b.PLANYR_ID AND a.ST_ID=b.ST_ID 
              WHERE a.PLANYR_ID IS NULL AND a.ST_ID IS NULL
            ) a
            LEFT JOIN TBL_AGREEMENT_MAIN b ON a.PLANYR_ID=b.PLANYR_ID AND a.ST_ID=b.ST_ID AND b.YR=" + yr + @" " + strYrhfA.Replace("a.", "b.") + @"
          ) a
          WHERE a.ISCANCEL=0

        ) a
        LEFT JOIN TBL_PLANYR_EVAL b ON a.PLANYR_ID = b.PLANYR_ID AND b.TP = 'month' AND b.INTERVAL IN(" + strMonthList + @")
        GROUP BY a.PLANYR_ID, a.ST_ID
      ) a
      LEFT JOIN TBL_AGREEMENT_MAIN b ON a.ST_ID=b.ST_ID AND a.PLANYR_ID=b.PLANYR_ID AND b.YR="+yr+@" 
      LEFT JOIN TBL_AGREEMENT_MAIN_IMPL c ON b.ID=c.AGREEMENT_MAIN_ID AND c.YRHF="+yrhf+ @"
      GROUP BY a.ST_ID      
      
    ) b ON a.ST_ID = b.ST_ID
    LEFT JOIN(
    
      SELECT 
        a.ST_ID, 
        COUNT(a.PLANYR_ID) as TUSGAI_PLANCNT, 
        SUM(NVL2(c.IMPL,1,0)) as TUSGAI_IMPLCNT, 
        NVL(ROUND(AVG((NVL(a.TUSGAI_PER2AVG,0)+NVL(c.PER1,0))),3),0) as TUSGAI_PERAVG
      FROM (
        SELECT a.PLANYR_ID, a.ST_ID, ROUND(ROUND(NVL(AVG(b.EVAL), 0), 3) * 0.4, 3) as TUSGAI_PER2AVG
        FROM (

          SELECT a.PLANYR_ID, a.ST_ID
          FROM (
            SELECT a.PLANYR_ID, a.ST_ID, NVL(b.ISCANCEL,0) as ISCANCEL
            FROM (
              SELECT b.PLANYR_ID, b.ST_ID 
              FROM ( 
                SELECT a.PLANYR_ID, a.ST_ID 
                FROM TBL_AGREEMENT_MAIN a
                INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                INNER JOIN hrdbuser.ST_STBR c ON a.ST_ID=c.STAFFS_ID AND c.ISACTIVE=1 AND c.POS_ID=2010301
                INNER JOIN hrdbuser.STN_MOVE d ON c.MOVE_ID=d.ID AND d.ACTIVE=1
                WHERE a.YR=" + yr + @" AND a.ISSPECIAL=1 " + strYrhfA + @" AND b.SUBMIT_D2=1
                GROUP BY a.PLANYR_ID, a.ST_ID
              ) a 
              INNER JOIN ( 
                SELECT PLANYR_ID, ST_ID 
                FROM (
                    SELECT b.PLANYR_ID, b.ST_ID
                    FROM ( 
                        SELECT a.PLANYR_ID, a.ST_ID 
                        FROM TBL_AGREEMENT_MAIN a
                        INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                        INNER JOIN hrdbuser.ST_STBR c ON a.ST_ID=c.STAFFS_ID AND c.ISACTIVE=1 AND c.POS_ID=2010301
                        INNER JOIN hrdbuser.STN_MOVE d ON c.MOVE_ID=d.ID AND d.ACTIVE=1
                        WHERE a.YR = " + yr + @" AND b.SUBMIT_D2=1
                    ) a
                    RIGHT JOIN (
                        SELECT a.ID as PLANYR_ID, d.ST_ID
                        FROM TBL_PLANYR a 
                        INNER JOIN TBL_FUNC_ACTION b ON a.FUNC_ACTION_ID=b.ID 
                        INNER JOIN TBL_FUNC_ACTION_BR c ON b.ID=c.FUNC_ACTION_ID
                        INNER JOIN (
                          SELECT a.STAFFS_ID as ST_ID, a.BRANCH_ID as BR_ID
                          FROM hrdbuser.ST_STBR a 
                          INNER JOIN hrdbuser.STN_MOVE b ON a.MOVE_ID=b.ID AND b.ACTIVE=1
                          WHERE a.ISACTIVE=1 AND a.POS_ID IN (2010301)
                          GROUP BY a.STAFFS_ID, a.BRANCH_ID
                        ) d ON c.BR_ID=d.BR_ID
                        WHERE a.YR=" + yr + @" AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1
                             " + strMnthLike.Replace("b.BUDGET", "a.BUDGET") + @"
                        GROUP BY a.ID, d.ST_ID
                    ) b ON a.PLANYR_ID=b.PLANYR_ID
                    WHERE a.PLANYR_ID is null
                    UNION ALL
                    SELECT a.PLANYR_ID, a.ST_ID 
                    FROM TBL_AGREEMENT_MAIN a
                    INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                    INNER JOIN hrdbuser.ST_STBR c ON a.ST_ID=c.STAFFS_ID AND c.ISACTIVE=1 AND c.POS_ID=2010301
                    INNER JOIN hrdbuser.STN_MOVE d ON c.MOVE_ID=d.ID AND d.ACTIVE=1
                    WHERE a.YR = " + yr + @" " + strYrhfA + @" AND b.SUBMIT_D2=1
                ) 
                GROUP BY PLANYR_ID, ST_ID
              ) b ON a.PLANYR_ID=b.PLANYR_ID AND a.ST_ID=b.ST_ID
            ) a
            LEFT JOIN TBL_AGREEMENT_MAIN b ON a.PLANYR_ID=b.PLANYR_ID AND a.ST_ID=b.ST_ID AND b.YR=" + yr + @" " + strYrhfA.Replace("a.", "b.") + @"
          ) a
          WHERE a.ISCANCEL=0

        ) a
        LEFT JOIN TBL_PLANYR_EVAL b ON a.PLANYR_ID = b.PLANYR_ID AND b.TP = 'month' AND b.INTERVAL IN("+strMonthList+@")
        GROUP BY a.PLANYR_ID, a.ST_ID
      ) a
      LEFT JOIN TBL_AGREEMENT_MAIN b ON a.ST_ID=b.ST_ID AND a.PLANYR_ID=b.PLANYR_ID AND b.YR="+yr+@" 
      LEFT JOIN TBL_AGREEMENT_MAIN_IMPL c ON b.ID=c.AGREEMENT_MAIN_ID AND c.YRHF="+yrhf+ @"
      GROUP BY a.ST_ID 
      UNION ALL
      SELECT 
        a.ST_ID, 
        COUNT(a.PLANYR_ID) as TUSGAI_PLANCNT, 
        SUM(NVL2(c.IMPL,1,0)) as TUSGAI_IMPLCNT, 
        NVL(ROUND(AVG((NVL(a.TUSGAI_PER2AVG,0)+NVL(c.PER1,0))),3),0) as TUSGAI_PERAVG
      FROM (
        SELECT a.PLANYR_ID, a.ST_ID, ROUND(ROUND(NVL(AVG(b.EVAL), 0), 3) * 0.4, 3) as TUSGAI_PER2AVG
        FROM (

          SELECT a.PLANYR_ID, a.ST_ID
          FROM (
            SELECT a.PLANYR_ID, a.ST_ID, NVL(b.ISCANCEL,0) as ISCANCEL
            FROM (
              SELECT b.PLANYR_ID, b.ST_ID 
              FROM ( 
                SELECT a.PLANYR_ID, a.ST_ID 
                FROM TBL_AGREEMENT_MAIN a
                INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                INNER JOIN hrdbuser.ST_STBR c ON a.ST_ID=c.STAFFS_ID AND c.ISACTIVE=1 AND c.POS_ID=2010201
                INNER JOIN hrdbuser.STN_MOVE d ON c.MOVE_ID=d.ID AND d.ACTIVE=1
                WHERE a.YR=" + yr + @" AND a.ISSPECIAL=1 " + strYrhfA + @" AND b.SUBMIT_D2=1
                GROUP BY a.PLANYR_ID, a.ST_ID
              ) a 
              INNER JOIN ( 
                SELECT PLANYR_ID, ST_ID 
                FROM (
                    SELECT b.PLANYR_ID, b.ST_ID
                    FROM ( 
                        SELECT a.PLANYR_ID, a.ST_ID 
                        FROM TBL_AGREEMENT_MAIN a
                        INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                        INNER JOIN hrdbuser.ST_STBR c ON a.ST_ID=c.STAFFS_ID AND c.ISACTIVE=1 AND c.POS_ID=2010201
                        INNER JOIN hrdbuser.STN_MOVE d ON c.MOVE_ID=d.ID AND d.ACTIVE=1
                        WHERE a.YR = " + yr + @" AND b.SUBMIT_D2=1
                    ) a
                    RIGHT JOIN (
                        SELECT a.ID as PLANYR_ID, f.ST_ID
                        FROM TBL_PLANYR a 
                        INNER JOIN TBL_FUNC_ACTION b ON a.FUNC_ACTION_ID=b.ID 
                        INNER JOIN TBL_FUNC_ACTION_BR c ON b.ID=c.FUNC_ACTION_ID
                        INNER JOIN TBL_FUNC_STRAT d ON b.FUNC_STRAT_ID=d.ID
                        INNER JOIN (
                          SELECT a.STAFFS_ID as ST_ID, a.BRANCH_ID as BR_ID
                          FROM hrdbuser.ST_STBR a 
                          INNER JOIN hrdbuser.STN_MOVE b ON a.MOVE_ID=b.ID AND b.ACTIVE=1
                          WHERE a.ISACTIVE=1 AND a.POS_ID IN (2010201)
                          GROUP BY a.STAFFS_ID, a.BRANCH_ID
                        ) f ON d.BR_ID=f.BR_ID
                        WHERE a.YR=" + yr + @" AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1
                             " + strMnthLike.Replace("b.BUDGET", "a.BUDGET") + @"
                        GROUP BY a.ID, f.ST_ID
                    ) b ON a.PLANYR_ID=b.PLANYR_ID
                    WHERE a.PLANYR_ID is null
                    UNION ALL
                    SELECT a.PLANYR_ID, a.ST_ID 
                    FROM TBL_AGREEMENT_MAIN a
                    INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                    INNER JOIN hrdbuser.ST_STBR c ON a.ST_ID=c.STAFFS_ID AND c.ISACTIVE=1 AND c.POS_ID=2010201
                    INNER JOIN hrdbuser.STN_MOVE d ON c.MOVE_ID=d.ID AND d.ACTIVE=1
                    WHERE a.YR = " + yr + @" " + strYrhfA + @" AND b.SUBMIT_D2=1
                ) 
                GROUP BY PLANYR_ID, ST_ID
              ) b ON a.PLANYR_ID=b.PLANYR_ID AND a.ST_ID=b.ST_ID
            ) a
            LEFT JOIN TBL_AGREEMENT_MAIN b ON a.PLANYR_ID=b.PLANYR_ID AND a.ST_ID=b.ST_ID AND b.YR=" + yr + @" " + strYrhfA.Replace("a.", "b.") + @"
          ) a
          WHERE a.ISCANCEL=0
 
        ) a
        LEFT JOIN TBL_PLANYR_EVAL b ON a.PLANYR_ID = b.PLANYR_ID AND b.TP = 'month' AND b.INTERVAL IN("+strMonthList+@")
        GROUP BY a.PLANYR_ID, a.ST_ID
      ) a
      LEFT JOIN TBL_AGREEMENT_MAIN b ON a.ST_ID=b.ST_ID AND a.PLANYR_ID=b.PLANYR_ID AND b.YR="+yr+@" 
      LEFT JOIN TBL_AGREEMENT_MAIN_IMPL c ON b.ID=c.AGREEMENT_MAIN_ID AND c.YRHF="+yrhf+@"
      GROUP BY a.ST_ID 
    
    ) c ON a.ST_ID = c.ST_ID
    LEFT JOIN(
      
      SELECT a.ST_ID, NVL(COUNT(a.SRV_QUESTION_ID),0) as TAB2PLANCNT, NVL(COUNT(a.SRV_QUESTION_ID),0) as TAB2IMPLCNT, NVL(ROUND(AVG(a.AVGPNT), 3), 0) as TAB2PER1AVG
      FROM (
        SELECT a.TRGT_ID as ST_ID, a.SRV_QUESTION_ID, NVL(ROUND(ROUND(AVG(b.PER), 3) * 0.2, 3), 0) as AVGPNT
        FROM TBL_SRV a
        INNER JOIN TBL_SRV_ANSWER b ON a.SRV_ANSWER_ID = b.ID
        INNER JOIN hrdbuser.ST_STBR c ON a.TRGT_ID=c.STAFFS_ID AND c.ISACTIVE=1 AND c.POS_ID=2010201
        INNER JOIN hrdbuser.STN_MOVE d ON c.MOVE_ID=d.ID AND d.ACTIVE=1
        WHERE a.SRV_TYPE_ID = 1 AND a.YR = "+yr+@" AND a.YR_HF = "+yrhf+ @"
        GROUP BY a.TRGT_ID, a.SRV_QUESTION_ID
      ) a
      GROUP BY a.ST_ID
      UNION ALL
      SELECT a.ST_ID, NVL(COUNT(a.SRV_QUESTION_ID),0) as TAB2PLANCNT, NVL(COUNT(a.SRV_QUESTION_ID),0) as TAB2IMPLCNT, NVL(ROUND(AVG(a.AVGPNT), 3), 0) as TAB2PER1AVG
      FROM (
        SELECT a.TRGT_ID as ST_ID, a.SRV_QUESTION_ID, NVL(ROUND(ROUND(AVG(b.PER), 3) * 0.2, 3), 0) as AVGPNT
        FROM TBL_SRV a
        INNER JOIN TBL_SRV_ANSWER b ON a.SRV_ANSWER_ID = b.ID
        INNER JOIN hrdbuser.ST_STBR c ON a.TRGT_ID=c.STAFFS_ID AND c.ISACTIVE=1 AND c.POS_ID=2010301
        INNER JOIN hrdbuser.STN_MOVE d ON c.MOVE_ID=d.ID AND d.ACTIVE=1
        WHERE a.SRV_TYPE_ID = 2 AND a.YR = " + yr + @" AND a.YR_HF = " + yrhf + @"
        GROUP BY a.TRGT_ID, a.SRV_QUESTION_ID
      ) a
      GROUP BY a.ST_ID
      
    ) d ON a.ST_ID = d.ST_ID
    LEFT JOIN(
      
        SELECT a.ST_ID, CASE WHEN a.WORKDAY=0 THEN 0 ELSE NVL(ROUND(ROUND(((a.WORKDAY - (a.TASALSANDAYSUM + a.HOTSORSONDAYSUM + a.ERTDAYSUM)) / a.WORKDAY) * 100, 3) * 0.05, 3), 0) END as PER
        FROM(
        SELECT ST_ID,
            SUM(ISWORK) as WORKDAY,
            SUM(CHOLOODAY) as CHOLOODAYSUM,
            SUM(UWCHTEIDAY) as UWCHTEIDAYSUM,
            SUM(AMRALTDAY) as AMRALTDAYSUM,
            SUM(TOMILOLTDAY) as TOMILOLTDAYSUM,
            SUM(ISTASALSAN) as TASALSANDAYSUM,
            SUM(HOTSORSONMINUTE) as HOTSORSONMINUTESUM,
            SUM(HOTSORSONDAY) as HOTSORSONDAYSUM,
            SUM(ERTMINUTE) as ERTMINUTESUM,
            SUM(ERTDAY) as ERTDAYSUM,
            SUM(OROIMINUTE) as OROIMINUTESUM,
            SUM(OROIDAY) as OROIDAYSUM
        FROM(
        SELECT ST_ID, TP, DT, MINTM, MAXTM, ISWORK,
            CASE WHEN TP = 11 AND ISWORK = 1 OR TP = 12 THEN 1 ELSE 0 END as CHOLOODAY,
            CASE WHEN TP = 13 AND ISWORK = 1 THEN 1 ELSE 0 END as UWCHTEIDAY,
            CASE WHEN TP = 21 AND ISWORK = 1 THEN 1 ELSE 0 END as AMRALTDAY,
            CASE WHEN TP = 31 AND ISWORK = 1 THEN 1 ELSE 0 END as TOMILOLTDAY,
            CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM = MAXTM THEN 1 ELSE 0 END as ISTASALSAN,
            CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'hotsorson', 'minute') ELSE 0 END as HOTSORSONMINUTE,
            CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'hotsorson', 'day') ELSE 0 END as HOTSORSONDAY,
            CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'ert', 'minute') ELSE 0 END as ERTMINUTE,
            CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'ert', 'day') ELSE 0 END as ERTDAY,
            CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'oroi', 'minute') ELSE 0 END as OROIMINUTE,
            CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'oroi', 'day') ELSE 0 END as OROIDAY
        FROM(
            SELECT a.ST_ID, a.TP, a.DT, a.MINTM, a.MAXTM, CASE WHEN b.DT is null THEN a.ISWORK ELSE 0 END as ISWORK
            FROM(
            SELECT a.ST_ID, NVL(b.TP, 0) as TP, a.DT, a.MINTM, a.MAXTM, a.ISWORK
            FROM(
                SELECT a.ST_ID, a.DT, NVL(b.TP, 0) as TP, NVL(b.MINTM, '00:00:00') as MINTM, NVL(b.MAXTM, '00:00:00') as MAXTM, a.ISWORK
                FROM(
                SELECT a.STAFFS_ID as ST_ID, a.DT, CASE WHEN b.DT IS NULL THEN a.ISWORK ELSE 1 END as ISWORK
                FROM(
                    SELECT a.ID, b.STAFFS_ID, c.FATHER_ID as GAZAR_ID, c.ID as HELTES_ID, a.DT, CASE WHEN(MOD(TO_CHAR(a.DT, 'J'), 7) + 1) = 6 OR(MOD(TO_CHAR(a.DT, 'J'), 7) + 1) = 7 THEN 0 ELSE 1 END as ISWORK
                    FROM(
                    SELECT a.ID, a.BEGINDT, a.ENDDT, b.DT
                    FROM(
                        SELECT a.ID,
                        CASE
                            WHEN TO_DATE(a.DT, 'YYYY-MM-DD') > TO_DATE('" + yr + "-" + month + @"-01', 'YYYY-MM-DD')
                            THEN a.DT
                            ELSE '" + yr + "-" + month + @"-01'
                        END as BEGINDT,
                        CASE
                            --WHEN TO_DATE(CASE WHEN c.ACTIVE = 0 THEN NVL(a.ENDDT, a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE, 'YYYY-MM-DD')) END, 'YYYY-MM-DD') < LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'YYYY-MM-DD'))
                            --THEN CASE WHEN c.ACTIVE = 0 THEN NVL(a.ENDDT, a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE, 'YYYY-MM-DD')) END ELSE TO_CHAR(LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'YYYY-MM-DD')), 'YYYY-MM-DD') END as ENDDT
                            WHEN TO_DATE(CASE WHEN c.ACTIVE = 0 THEN TO_CHAR((TO_DATE(NVL(a.ENDDT, a.DT), 'YYYY-MM-DD') - 1), 'YYYY-MM-DD') ELSE NVL(TO_CHAR((TO_DATE(a.ENDDT, 'YYYY-MM-DD') - 1), 'YYYY-MM-DD'), TO_CHAR(SYSDATE, 'YYYY-MM-DD')) END, 'YYYY-MM-DD') < LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'YYYY-MM-DD'))
                            THEN CASE WHEN c.ACTIVE = 0 THEN TO_CHAR((TO_DATE(NVL(a.ENDDT, a.DT), 'YYYY-MM-DD') - 1), 'YYYY-MM-DD') ELSE NVL(TO_CHAR((TO_DATE(a.ENDDT, 'YYYY-MM-DD') - 1), 'YYYY-MM-DD'), TO_CHAR(SYSDATE, 'YYYY-MM-DD')) END ELSE TO_CHAR(LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'YYYY-MM-DD')), 'YYYY-MM-DD') END as ENDDT
                        FROM hrdbuser.ST_STBR a
                        INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID = b.ID AND b.ISACTIVE = 1
                        INNER JOIN hrdbuser.STN_MOVE c ON a.MOVE_ID = c.ID
                        WHERE a.POS_ID != 2020102 AND c.ACTIVE = 1
                        AND ((
                            TO_DATE('" + yr + "-" + month + @"-01','YYYY-MM-DD') 
                            BETWEEN TO_DATE(a.DT,'YYYY-MM-DD') AND TO_DATE(CASE WHEN c.ACTIVE=0 THEN NVL(a.ENDDT,a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE,'YYYY-MM-DD')) END,'YYYY-MM-DD')
                            OR 
                            LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01','YYYY-MM-DD')) 
                            BETWEEN TO_DATE(a.DT,'YYYY-MM-DD') AND TO_DATE(CASE WHEN c.ACTIVE=0 THEN NVL(a.ENDDT,a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE,'YYYY-MM-DD')) END,'YYYY-MM-DD')
                            ) OR 
                            (
                                TO_DATE('" + yr + "-" + month + @"-01','YYYY-MM-DD')<TO_DATE(a.DT,'YYYY-MM-DD') AND LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01','YYYY-MM-DD'))>TO_DATE(a.DT,'YYYY-MM-DD')
                            ))
                    ) a, (
                        SELECT DT
                        FROM(
                        SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                        FROM DUAL
                        CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                        )
                        WHERE DT BETWEEN TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') AND SYSDATE AND MOD(TO_CHAR(DT, 'J'), 7) + 1 IN(1, 2, 3, 4, 5, 6, 7)
                    ) b
                    ) a
                    INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.ID
                    INNER JOIN hrdbuser.ST_BRANCH c ON b.BRANCH_ID = c.ID AND c.ISACTIVE = 1
                    WHERE a.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD') AND b.POS_ID != 2020102 AND b.STAFFS_ID IN (SELECT a.STAFFS_ID as ST_ID
                      FROM hrdbuser.ST_STBR a 
                      INNER JOIN hrdbuser.STN_MOVE b ON a.MOVE_ID=b.ID AND b.ACTIVE=1
                      WHERE a.ISACTIVE=1 AND a.POS_ID IN (2010201,2010301)
                      GROUP BY a.STAFFS_ID)
                ) a
                LEFT JOIN(
                    SELECT TO_DATE(HOLDATE, 'YYYY-MM-DD') as DT FROM hrdbuser.ST_HOLIDAYISWORK WHERE TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'YYYY')) = " + yr + @" AND TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'MM')) IN(" + strMonthList + @")
                ) b ON a.DT = b.DT
                ) a
                LEFT JOIN(
                SELECT a.MONTH, a.INOUT as TP, b.ID as ST_ID, TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd') as DT, TO_CHAR(MIN(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY || ' ' || a.HOUR || ':' || a.MINUTE || ':' || a.SECOND, 'yyyy-mm-dd hh24:mi:ss')), 'hh24:mi:ss') as MINTM, TO_CHAR(MAX(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY || ' ' || a.HOUR || ':' || a.MINUTE || ':' || a.SECOND, 'yyyy-mm-dd hh24:mi:ss')), 'hh24:mi:ss') as MAXTM
                FROM STN_TRCDLOG a
                INNER JOIN hrdbuser.ST_STAFFS b ON a.ENO = b.FINGERID
                INNER JOIN hrdbuser.ST_STBR c ON b.ID = c.STAFFS_ID
                INNER JOIN hrdbuser.STN_MOVE d ON c.MOVE_ID = d.ID
                INNER JOIN hrdbuser.ST_BRANCH f ON c.BRANCH_ID = f.ID AND f.ISACTIVE = 1
                WHERE c.POS_ID != 2020102 AND a.INOUT = 0 AND a.YEAR = " + yr + @" AND a.MONTH IN(" + strMonthList + @") AND TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd') BETWEEN TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') AND SYSDATE AND MOD(TO_CHAR(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd'), 'J'), 7) + 1 IN(1, 2, 3, 4, 5, 6, 7)
                GROUP BY a.MONTH, a.INOUT, b.ID, TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd')
                ) b ON a.ST_ID = b.ST_ID AND a.DT = b.DT
            ) a
            LEFT JOIN(
                SELECT DT, STAFFS_ID, MAX(TP) as TP
                FROM(
                    SELECT b.DT, a.STAFFS_ID, 11 as TP
                    FROM hrdbuser.ST_CHULUUDAYF3 a,
                    (
                    SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                    FROM DUAL
                    CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                    ) b
                    WHERE
                    b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
                    UNION ALL
                    SELECT b.DT, a.STAFFS_ID, 12 as TP
                    FROM hrdbuser.ST_CHULUUDAYT2 a,
                    (
                    SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                    FROM DUAL
                    CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                    ) b
                    WHERE
                    a.ISRECEIVED = 1 AND
                    b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
                    UNION ALL
                    SELECT b.DT, a.STAFFS_ID, 13 as TP
                    FROM hrdbuser.ST_CHULUUSICK a,
                    (
                    SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                    FROM DUAL
                    CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                    ) b
                    WHERE
                    b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
                    UNION ALL
                    SELECT b.DT, a.STAFFS_ID, 21 as TP
                    FROM hrdbuser.ST_AMRALT a,
                    (
                    SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                    FROM DUAL
                    CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                    ) b
                    WHERE
                    a.TZISRECEIVED = 1 AND
                    b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
                    UNION ALL
                    SELECT b.DT, a.STAFFS_ID, 31 as TP
                    FROM hrdbuser.ST_TOMILOLT_STAFFS a
                    INNER JOIN hrdbuser.ST_TOMILOLT c ON a.TOMILOLT_ID = c.ID,
                    (
                    SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                    FROM DUAL
                    CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                    ) b
                    WHERE
                    b.DT BETWEEN TO_DATE(c.FROMDATE, 'YYYY-MM-DD') AND TO_DATE(c.TODATE, 'YYYY-MM-DD')
                )
                GROUP BY DT, STAFFS_ID
            ) b ON a.DT = b.DT AND a.ST_ID = b.STAFFS_ID
            ) a
            LEFT JOIN(
            SELECT TO_DATE('" + yr + @"-' || HOLMONTH || '-' || HOLDAY, 'YYYY-MM-DD') as DT
            FROM hrdbuser.ST_HOLIDAYOFFICIAL
            WHERE HOLMONTH IN(" + strMonthList + @")
            UNION ALL
            SELECT TO_DATE(HOLDATE, 'YYYY-MM-DD') as DT
            FROM hrdbuser.ST_HOLIDAYUNOFFICIAL
            WHERE TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'YYYY')) = " + yr + @" AND TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'MM')) IN(" + strMonthList + @")
            ) b ON a.DT = b.DT
            GROUP BY a.ST_ID, a.TP, a.DT, a.MINTM, a.MAXTM, CASE WHEN b.DT is null THEN a.ISWORK ELSE 0 END
        )
        )
        GROUP BY ST_ID
        ) a

    ) f ON a.ST_ID = f.ST_ID
    LEFT JOIN (
      SELECT a.TRGT_ID as ST_ID, NVL(ROUND(ROUND(AVG(b.PER), 3) * 0.05, 3), 0) as AVGPNT
      FROM TBL_SRV a
      INNER JOIN TBL_SRV_ANSWER b ON a.SRV_ANSWER_ID = b.ID
      INNER JOIN hrdbuser.ST_STBR c ON a.TRGT_ID=c.STAFFS_ID AND c.ISACTIVE=1
      INNER JOIN hrdbuser.STN_MOVE d ON c.MOVE_ID=d.ID AND d.ACTIVE=1
      WHERE a.SRV_TYPE_ID = 3 AND a.YR = " + yr+@" AND a.YR_HF = "+yrhf+ @"
      GROUP BY a.TRGT_ID
    ) g ON a.ST_ID = g.ST_ID
    LEFT JOIN (
      SELECT a.ST_ID, NVL(COUNT(a.ID), 0) as TAB3PLANCNT, NVL(SUM(NVL2(a.TAB3IMPLCNT, 1, 0)), 0) as TAB3IMPLCNT, NVL(ROUND(AVG(a.PER1), 3), 0) as TAB3PER1AVG
      FROM(
        SELECT a.ST_ID, a.ID, NVL2(c.IMPL, 1, 0) as TAB3IMPLCNT, NVL(c.PER1, 0) as PER1
        FROM(
          SELECT a.ST_ID, a.ID, MAX(d.YRHF) as YRHF
          FROM TBL_AGREEMENT_OTHER a
          INNER JOIN hrdbuser.ST_STBR b ON a.ST_ID=b.STAFFS_ID AND b.ISACTIVE=1
          INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID=c.ID AND c.ACTIVE=1
          LEFT JOIN TBL_AGREEMENT_OTHER_IMPL d ON a.ID = d.AGREEMENT_OTHER_ID AND d.YRHF IN(" + strYrhfB+@")
          WHERE a.YR = "+yr+@" "+strYrhfA+@"
          GROUP BY a.ST_ID, a.ID
        ) a
        INNER JOIN TBL_AGREEMENT_OTHER b ON a.ID = b.ID
        LEFT JOIN TBL_AGREEMENT_OTHER_IMPL c ON a.ID = c.AGREEMENT_OTHER_ID AND a.YRHF = c.YRHF
        GROUP BY a.ST_ID, a.ID, NVL2(c.IMPL, 1, 0), NVL(c.PER1, 0)
      ) a
      GROUP BY a.ST_ID
    ) h ON a.ST_ID = h.ST_ID

  ) h 
  INNER JOIN hrdbuser.ST_STAFFS a ON h.ST_ID=a.ID
  INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1
  INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1
  INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
  INNER JOIN hrdbuser.ST_BRANCH f ON d.FATHER_ID = f.ID AND f.ISACTIVE = 1
  INNER JOIN hrdbuser.STN_POS g ON b.POS_ID = g.ID
  ORDER BY f.SORT, d.SORT, g.SORT, a.ID
) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }

        public string AgreementIltgehHuudasLastPer(string yr, string yrhf, string stid)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string month = "", month2 = "", strMonthList = "";
            string strYrhfA = "", strYrhfB = "";
            string str30Per = "0";
            string gazarid = "", heltesid = "";
            string strMnthLike = "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                if (yrhf == "1")
                {
                    strYrhfA = " AND a.YRHF1=1";
                    strYrhfB = "1";
                    month = "1";
                    month2 = "6";
                    strMnthLike = " AND (b.BUDGET IS NULL OR b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||b.BUDGET||',' LIKE '%,1,%' OR ','||b.BUDGET||',' LIKE '%,2,%' OR ','||b.BUDGET||',' LIKE '%,3,%' OR ','||b.BUDGET||',' LIKE '%,4,%' OR ','||b.BUDGET||',' LIKE '%,5,%' OR ','||b.BUDGET||',' LIKE '%,6,%')";
                }
                else if (yrhf == "2")
                {
                    strYrhfA = " AND (a.YRHF1=1 OR a.YRHF2=1)";
                    strYrhfB = "1,2";
                    month = "1";
                    month2 = "12";
                    strMnthLike = " AND (b.BUDGET IS NULL OR b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||b.BUDGET||',' LIKE '%,7,%' OR ','||b.BUDGET||',' LIKE '%,8,%' OR ','||b.BUDGET||',' LIKE '%,9,%' OR ','||b.BUDGET||',' LIKE '%,10,%' OR ','||b.BUDGET||',' LIKE '%,11,%' OR ','||b.BUDGET||',' LIKE '%,12,%')";
                }
                string strQry = @"SELECT c.ID as HELTESID, c.FATHER_ID as GAZARID 
FROM hrdbuser.ST_STAFFS a 
INNER JOIN hrdbuser.ST_STBR b ON a.ID=b.STAFFS_ID AND b.ISACTIVE=1
INNER JOIN hrdbuser.ST_BRANCH c ON b.BRANCH_ID=c.ID AND c.ISACTIVE=1
WHERE a.ID=" + stid;
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                gazarid = ds.Tables[0].Rows[0]["GAZARID"].ToString();
                heltesid = ds.Tables[0].Rows[0]["HELTESID"].ToString();
                for (int i = Int32.Parse(month); i <= Int32.Parse(month2); i++)
                {
                    if (strMonthList == "") strMonthList += i.ToString();
                    else strMonthList += "," + i.ToString();
                }

                strQry = @"SELECT a.SUMPER 
FROM ( 
  SELECT ROWNUM as ROWNO, a.SUMPER
  FROM (
    SELECT (NVL(h.NIITOTHER_PERAVG, 0) + NVL(h.TUSGAI_PERAVG, 0) + NVL(h.TAB2PER1AVG, 0) + NVL(h.TAB2PERIRTS, 0) + NVL(h.TAB2PERHAMT, 0)) as SUMPER
      FROM (
            SELECT a.ST_ID
              , b.NIIT_PLANCNT
              , b.NIIT_IMPLCNT
              , NVL(b.NIIT_PERAVG,0) as NIIT_PERAVG
              , c.TUSGAI_PLANCNT
              , c.TUSGAI_IMPLCNT
              , NVL(c.TUSGAI_PERAVG,0) as TUSGAI_PERAVG
              , d.TAB2PLANCNT
              , d.TAB2IMPLCNT
              , NVL(d.TAB2PER1AVG, 0) as TAB2PER1AVG
              , NVL(f.PER, 0) as TAB2PERIRTS
              , NVL(g.AVGPNT, 0) as TAB2PERHAMT
              , h.TAB3PLANCNT
              , h.TAB3IMPLCNT
              , h.TAB3PER1AVG
              , (NVL(b.NIIT_PLANCNT, 0) + NVL(h.TAB3PLANCNT, 0)) as NIITOTHER_PLANCNT
              , (NVL(b.NIIT_IMPLCNT, 0) + NVL(h.TAB3IMPLCNT, 0)) as NIITOTHER_IMPLCNT
              , CASE WHEN NVL(h.TAB3PER1AVG, 0) != 0 THEN ROUND((NVL(b.NIIT_PERAVG, 0) + NVL(h.TAB3PER1AVG, 0)) / 2, 3) ELSE NVL(b.NIIT_PERAVG, 0) END as NIITOTHER_PERAVG
            FROM(
              SELECT a.ID as ST_ID
              FROM hrdbuser.ST_STAFFS a
              INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1
              INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1
              INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
              INNER JOIN hrdbuser.ST_BRANCH f ON d.FATHER_ID = f.ID AND f.ISACTIVE = 1
              INNER JOIN hrdbuser.STN_POS g ON b.POS_ID = g.ID
              WHERE b.POS_ID NOT IN (2020102,2010201,2010301) AND d.FATHER_ID=" + gazarid + " AND d.ID=" + heltesid + @"
              GROUP BY a.ID
            ) a
            LEFT JOIN(
              SELECT 
                a.ST_ID, 
                COUNT(a.PLANYR_ID) as NIIT_PLANCNT, 
                SUM(NVL2(c.IMPL,1,0)) as NIIT_IMPLCNT, 
                NVL(ROUND(AVG((NVL(a.NIIT_PER2AVG,0)+NVL(c.PER1,0))),3),0) as NIIT_PERAVG
              FROM (
                SELECT a.PLANYR_ID, a.ST_ID, ROUND(ROUND(NVL(AVG(b.EVAL), 0), 3) * 0.3, 3) as NIIT_PER2AVG
                FROM (

                  SELECT a.PLANYR_ID, a.ST_ID
                  FROM (
                    SELECT a.PLANYR_ID, a.ST_ID, NVL(b.ISCANCEL,0) as ISCANCEL
                    FROM (
                      SELECT b.PLANYR_ID, b.ST_ID 
                      FROM ( 
                        SELECT a.PLANYR_ID, a.ST_ID 
                        FROM TBL_AGREEMENT_MAIN a
                        INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                        INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
                        INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                        INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
                        WHERE a.YR=" + yr + @" AND a.ISSPECIAL=1 AND f.BR_ID=" + gazarid + @" AND d.BR_ID=" + heltesid + @" " + strYrhfA + @" AND b.SUBMIT_D2=1
                        GROUP BY a.PLANYR_ID, a.ST_ID
                      ) a 
                      RIGHT JOIN ( 
                        SELECT PLANYR_ID, ST_ID 
                        FROM (
                            SELECT b.PLANYR_ID, b.ST_ID
                            FROM ( 
                                SELECT a.PLANYR_ID, a.ST_ID 
                                FROM TBL_AGREEMENT_MAIN a
                                INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                                INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
                                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
                                WHERE a.YR = " + yr + @" AND f.BR_ID=" + gazarid + @" AND d.BR_ID=" + heltesid + @" AND b.SUBMIT_D2=1
                            ) a
                            RIGHT JOIN (
                                SELECT a.ID as PLANYR_ID, b.ST_ID 
                                FROM TBL_PLANYR a 
                                INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID  
                                INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID 
                                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID 
                                WHERE a.YR=" + yr + @" AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1 AND f.BR_ID=" + gazarid + @" AND d.BR_ID=" + heltesid + @"
                                    " + strMnthLike.Replace("b.BUDGET", "a.BUDGET") + @"
                                GROUP BY a.ID, b.ST_ID 
                            ) b ON a.PLANYR_ID=b.PLANYR_ID AND a.ST_ID=b.ST_ID
                            WHERE a.PLANYR_ID is null AND a.ST_ID is null
                            UNION ALL
                            SELECT a.PLANYR_ID, a.ST_ID 
                            FROM TBL_AGREEMENT_MAIN a
                            INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                            INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
                            INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                            INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
                            WHERE a.YR = " + yr + @" " + strYrhfA + @" AND f.BR_ID=" + gazarid + @" AND d.BR_ID=" + heltesid + @" AND b.SUBMIT_D2=1
                        ) 
                        GROUP BY PLANYR_ID, ST_ID
                      ) b ON a.PLANYR_ID=b.PLANYR_ID AND a.ST_ID=b.ST_ID 
                      WHERE a.PLANYR_ID IS NULL 
                    ) a
                    LEFT JOIN TBL_AGREEMENT_MAIN b ON a.PLANYR_ID=b.PLANYR_ID AND a.ST_ID=b.ST_ID AND b.YR=" + yr + @" " + strYrhfA.Replace("a.", "b.") + @"
                  ) a
                  WHERE a.ISCANCEL=0
                  
                ) a
                LEFT JOIN TBL_PLANYR_EVAL b ON a.PLANYR_ID = b.PLANYR_ID AND b.TP = 'month' AND b.INTERVAL IN(" + strMonthList + @")
                GROUP BY a.PLANYR_ID, a.ST_ID
              ) a
              LEFT JOIN TBL_AGREEMENT_MAIN b ON a.ST_ID=b.ST_ID AND a.PLANYR_ID=b.PLANYR_ID AND YR=" + yr + @" 
              LEFT JOIN TBL_AGREEMENT_MAIN_IMPL c ON b.ID=c.AGREEMENT_MAIN_ID AND c.YRHF=" + yrhf + @"
              GROUP BY a.ST_ID
            ) b ON a.ST_ID = b.ST_ID
            LEFT JOIN(
              SELECT 
                a.ST_ID, 
                COUNT(a.PLANYR_ID) as TUSGAI_PLANCNT, 
                SUM(NVL2(c.IMPL,1,0)) as TUSGAI_IMPLCNT, 
                NVL(ROUND(AVG((NVL(a.TUSGAI_PER2AVG,0)+NVL(c.PER1,0))),3),0) as TUSGAI_PERAVG
              FROM (
                SELECT a.PLANYR_ID, a.ST_ID, ROUND(ROUND(NVL(AVG(b.EVAL), 0), 3) * 0.4, 3) as TUSGAI_PER2AVG
                FROM (

                  SELECT a.PLANYR_ID, a.ST_ID
                  FROM (
                    SELECT a.PLANYR_ID, a.ST_ID, NVL(b.ISCANCEL,0) as ISCANCEL
                    FROM (
                      SELECT b.PLANYR_ID, b.ST_ID 
                      FROM ( 
                        SELECT a.PLANYR_ID, a.ST_ID 
                        FROM TBL_AGREEMENT_MAIN a
                        INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                        INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
                        INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                        INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
                        WHERE a.YR=" + yr + @" AND a.ISSPECIAL=1 AND f.BR_ID=" + gazarid + @" AND d.BR_ID=" + heltesid + @" " + strYrhfA + @" AND b.SUBMIT_D2=1
                        GROUP BY a.PLANYR_ID, a.ST_ID
                      ) a 
                      INNER JOIN ( 
                        SELECT PLANYR_ID, ST_ID 
                        FROM (
                            SELECT b.PLANYR_ID, b.ST_ID
                            FROM ( 
                                SELECT a.PLANYR_ID, a.ST_ID 
                                FROM TBL_AGREEMENT_MAIN a
                                INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                                INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
                                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
                                WHERE a.YR = " + yr + @" AND f.BR_ID=" + gazarid + @" AND d.BR_ID=" + heltesid + @" AND b.SUBMIT_D2=1
                            ) a
                            RIGHT JOIN (
                                SELECT a.ID as PLANYR_ID, b.ST_ID 
                                FROM TBL_PLANYR a 
                                INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID  
                                INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID 
                                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID 
                                WHERE a.YR=" + yr + @" AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1 AND f.BR_ID=" + gazarid + @" AND d.BR_ID=" + heltesid + @"
                                    " + strMnthLike.Replace("b.BUDGET", "a.BUDGET") + @"
                                GROUP BY a.ID, b.ST_ID 
                            ) b ON a.PLANYR_ID=b.PLANYR_ID AND a.ST_ID=b.ST_ID
                            WHERE a.PLANYR_ID is null AND a.ST_ID is null
                            UNION ALL
                            SELECT a.PLANYR_ID, a.ST_ID 
                            FROM TBL_AGREEMENT_MAIN a
                            INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                            INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
                            INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                            INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
                            WHERE a.YR = " + yr + @" " + strYrhfA + @" AND f.BR_ID= " + gazarid + @" AND d.BR_ID= " + heltesid + @" AND b.SUBMIT_D2=1
                        ) 
                        GROUP BY PLANYR_ID, ST_ID
                      ) b ON a.PLANYR_ID=b.PLANYR_ID AND a.ST_ID=b.ST_ID
                    ) a
                    LEFT JOIN TBL_AGREEMENT_MAIN b ON a.PLANYR_ID=b.PLANYR_ID AND a.ST_ID=b.ST_ID AND b.YR=" + yr + @" " + strYrhfA.Replace("a.", "b.") + @"
                  ) a
                  WHERE a.ISCANCEL=0
 
                ) a
                LEFT JOIN TBL_PLANYR_EVAL b ON a.PLANYR_ID = b.PLANYR_ID AND b.TP = 'month' AND b.INTERVAL IN(" + strMonthList + @")
                GROUP BY a.PLANYR_ID, a.ST_ID
              ) a
              LEFT JOIN TBL_AGREEMENT_MAIN b ON a.ST_ID=b.ST_ID AND a.PLANYR_ID=b.PLANYR_ID AND YR=" + yr + @"
              LEFT JOIN TBL_AGREEMENT_MAIN_IMPL c ON b.ID=c.AGREEMENT_MAIN_ID AND c.YRHF=" + yrhf + @"
              GROUP BY a.ST_ID
            ) c ON a.ST_ID = c.ST_ID
            LEFT JOIN(
              SELECT a.ST_ID, NVL(COUNT(a.ID), 0) as TAB2PLANCNT, NVL(SUM(NVL2(a.TAB2IMPLCNT, 1, 0)), 0) as TAB2IMPLCNT, NVL(ROUND(AVG(a.PER1), 3), 0) as TAB2PER1AVG
              FROM(
                SELECT a.ST_ID, a.ID, NVL2(c.IMPL, 1, 0) as TAB2IMPLCNT, NVL(c.PER1, 0) as PER1
                FROM(
                  SELECT a.ST_ID, a.ID, MAX(d.YRHF) as YRHF
                  FROM TBL_AGREEMENT_SKILL a
                  INNER JOIN hrdbuser.ST_STBR b ON a.ST_ID=b.STAFFS_ID AND b.ISACTIVE=1
                  INNER JOIN hrdbuser.ST_BRANCH c ON b.BRANCH_ID=c.ID
                  LEFT JOIN TBL_AGREEMENT_SKILL_IMPL d ON a.ID = d.AGREEMENT_SKILL_ID AND d.YRHF IN(" + strYrhfB + @")
                  WHERE a.YR = " + yr + @" " + strYrhfA + @" AND c.FATHER_ID=" + gazarid + @" AND c.ID=" + heltesid + @" AND b.POS_ID NOT IN (2010201, 2013201)
                  GROUP BY a.ST_ID, a.ID
                ) a
                INNER JOIN TBL_AGREEMENT_SKILL b ON a.ID = b.ID
                LEFT JOIN TBL_AGREEMENT_SKILL_IMPL c ON a.ID = c.AGREEMENT_SKILL_ID AND a.YRHF = c.YRHF
                GROUP BY a.ST_ID, a.ID, NVL2(c.IMPL, 1, 0), NVL(c.PER1, 0)
              ) a
              GROUP BY a.ST_ID
            ) d ON a.ST_ID = d.ST_ID
            LEFT JOIN(
              SELECT a.ST_ID, CASE WHEN a.WORKDAY=0 THEN 0 ELSE NVL(ROUND(ROUND(((a.WORKDAY - (a.TASALSANDAYSUM + a.HOTSORSONDAYSUM + a.ERTDAYSUM)) / a.WORKDAY) * 100, 3) * 0.05, 3), 0) END as PER
              FROM(
                SELECT ST_ID,
                    SUM(ISWORK) as WORKDAY,
                    SUM(CHOLOODAY) as CHOLOODAYSUM,
                    SUM(UWCHTEIDAY) as UWCHTEIDAYSUM,
                    SUM(AMRALTDAY) as AMRALTDAYSUM,
                    SUM(TOMILOLTDAY) as TOMILOLTDAYSUM,
                    SUM(ISTASALSAN) as TASALSANDAYSUM,
                    SUM(HOTSORSONMINUTE) as HOTSORSONMINUTESUM,
                    SUM(HOTSORSONDAY) as HOTSORSONDAYSUM,
                    SUM(ERTMINUTE) as ERTMINUTESUM,
                    SUM(ERTDAY) as ERTDAYSUM,
                    SUM(OROIMINUTE) as OROIMINUTESUM,
                    SUM(OROIDAY) as OROIDAYSUM
                  FROM(
                    SELECT ST_ID, TP, DT, MINTM, MAXTM, ISWORK,
                      CASE WHEN TP = 11 AND ISWORK = 1 OR TP = 12 THEN 1 ELSE 0 END as CHOLOODAY,
                      CASE WHEN TP = 13 AND ISWORK = 1 THEN 1 ELSE 0 END as UWCHTEIDAY,
                      CASE WHEN TP = 21 AND ISWORK = 1 THEN 1 ELSE 0 END as AMRALTDAY,
                      CASE WHEN TP = 31 AND ISWORK = 1 THEN 1 ELSE 0 END as TOMILOLTDAY,
                      CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM = MAXTM THEN 1 ELSE 0 END as ISTASALSAN,
                      CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'hotsorson', 'minute') ELSE 0 END as HOTSORSONMINUTE,
                      CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'hotsorson', 'day') ELSE 0 END as HOTSORSONDAY,
                      CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'ert', 'minute') ELSE 0 END as ERTMINUTE,
                      CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'ert', 'day') ELSE 0 END as ERTDAY,
                      CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'oroi', 'minute') ELSE 0 END as OROIMINUTE,
                      CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'oroi', 'day') ELSE 0 END as OROIDAY
                    FROM(
                      SELECT a.ST_ID, a.TP, a.DT, a.MINTM, a.MAXTM, CASE WHEN b.DT is null THEN a.ISWORK ELSE 0 END as ISWORK
                      FROM(
                        SELECT a.ST_ID, NVL(b.TP, 0) as TP, a.DT, a.MINTM, a.MAXTM, a.ISWORK
                        FROM(
                          SELECT a.ST_ID, a.DT, NVL(b.TP, 0) as TP, NVL(b.MINTM, '00:00:00') as MINTM, NVL(b.MAXTM, '00:00:00') as MAXTM, a.ISWORK
                          FROM(
                            SELECT a.STAFFS_ID as ST_ID, a.DT, CASE WHEN b.DT IS NULL THEN a.ISWORK ELSE 1 END as ISWORK
                            FROM(
                              SELECT a.ID, b.STAFFS_ID, c.FATHER_ID as GAZAR_ID, c.ID as HELTES_ID, a.DT, CASE WHEN(MOD(TO_CHAR(a.DT, 'J'), 7) + 1) = 6 OR(MOD(TO_CHAR(a.DT, 'J'), 7) + 1) = 7 THEN 0 ELSE 1 END as ISWORK
                              FROM(
                                SELECT a.ID, a.BEGINDT, a.ENDDT, b.DT
                                FROM(
                                  SELECT a.ID,
                                    CASE
                                      WHEN TO_DATE(a.DT, 'YYYY-MM-DD') > TO_DATE('" + yr + "-" + month + @"-01', 'YYYY-MM-DD')
                                      THEN a.DT
                                      ELSE '" + yr + "-" + month + @"-01'
                                    END as BEGINDT,
                                    CASE
                                      --WHEN TO_DATE(CASE WHEN c.ACTIVE = 0 THEN NVL(a.ENDDT, a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE, 'YYYY-MM-DD')) END, 'YYYY-MM-DD') < LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'YYYY-MM-DD'))
                                      --THEN CASE WHEN c.ACTIVE = 0 THEN NVL(a.ENDDT, a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE, 'YYYY-MM-DD')) END ELSE TO_CHAR(LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'YYYY-MM-DD')), 'YYYY-MM-DD') END as ENDDT
                                      WHEN TO_DATE(CASE WHEN c.ACTIVE = 0 THEN TO_CHAR((TO_DATE(NVL(a.ENDDT, a.DT), 'YYYY-MM-DD') - 1), 'YYYY-MM-DD') ELSE NVL(TO_CHAR((TO_DATE(a.ENDDT, 'YYYY-MM-DD') - 1), 'YYYY-MM-DD'), TO_CHAR(SYSDATE, 'YYYY-MM-DD')) END, 'YYYY-MM-DD') < LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'YYYY-MM-DD'))
                                      THEN CASE WHEN c.ACTIVE = 0 THEN TO_CHAR((TO_DATE(NVL(a.ENDDT, a.DT), 'YYYY-MM-DD') - 1), 'YYYY-MM-DD') ELSE NVL(TO_CHAR((TO_DATE(a.ENDDT, 'YYYY-MM-DD') - 1), 'YYYY-MM-DD'), TO_CHAR(SYSDATE, 'YYYY-MM-DD')) END ELSE TO_CHAR(LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'YYYY-MM-DD')), 'YYYY-MM-DD') END as ENDDT
                                  FROM hrdbuser.ST_STBR a
                                  INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID = b.ID AND b.ISACTIVE = 1
                                  INNER JOIN hrdbuser.STN_MOVE c ON a.MOVE_ID = c.ID
                                  WHERE a.POS_ID != 2020102 AND c.ACTIVE = 1
                                  AND ((
                                        TO_DATE('" + yr + "-" + month + @"-01','YYYY-MM-DD') 
                                        BETWEEN TO_DATE(a.DT,'YYYY-MM-DD') AND TO_DATE(CASE WHEN c.ACTIVE=0 THEN NVL(a.ENDDT,a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE,'YYYY-MM-DD')) END,'YYYY-MM-DD')
                                        OR 
                                        LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01','YYYY-MM-DD')) 
                                        BETWEEN TO_DATE(a.DT,'YYYY-MM-DD') AND TO_DATE(CASE WHEN c.ACTIVE=0 THEN NVL(a.ENDDT,a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE,'YYYY-MM-DD')) END,'YYYY-MM-DD')
                                      ) OR 
                                        (
                                          TO_DATE('" + yr + "-" + month + @"-01','YYYY-MM-DD')<TO_DATE(a.DT,'YYYY-MM-DD') AND LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01','YYYY-MM-DD'))>TO_DATE(a.DT,'YYYY-MM-DD')
                                        ))
                                ) a, (
                                  SELECT DT
                                  FROM(
                                    SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                                    FROM DUAL
                                    CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                                  )
                                  WHERE DT BETWEEN TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') AND SYSDATE AND MOD(TO_CHAR(DT, 'J'), 7) + 1 IN(1, 2, 3, 4, 5, 6, 7)
                                ) b
                              ) a
                              INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.ID
                              INNER JOIN hrdbuser.ST_BRANCH c ON b.BRANCH_ID = c.ID AND c.ISACTIVE = 1
                              WHERE a.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD') AND b.POS_ID != 2020102 AND b.STAFFS_ID IN (
                      SELECT a.STAFFS_ID as ST_ID
                      FROM hrdbuser.ST_STBR a 
                      INNER JOIN hrdbuser.STN_MOVE b ON a.MOVE_ID=b.ID AND b.ACTIVE=1
                      INNER JOIN hrdbuser.ST_BRANCH c ON a.BRANCH_ID = c.ID AND c.ISACTIVE = 1
                      WHERE a.ISACTIVE=1 AND a.POS_ID NOT IN (2010201,2010301) AND c.FATHER_ID=" + gazarid + @" AND c.ID=" + heltesid + @"
                      GROUP BY a.STAFFS_ID)
                            ) a
                            LEFT JOIN(
                              SELECT TO_DATE(HOLDATE, 'YYYY-MM-DD') as DT FROM hrdbuser.ST_HOLIDAYISWORK WHERE TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'YYYY')) = " + yr + @" AND TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'MM')) IN(" + strMonthList + @")
                            ) b ON a.DT = b.DT
                          ) a
                          LEFT JOIN(
                            SELECT a.MONTH, a.INOUT as TP, b.ID as ST_ID, TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd') as DT, TO_CHAR(MIN(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY || ' ' || a.HOUR || ':' || a.MINUTE || ':' || a.SECOND, 'yyyy-mm-dd hh24:mi:ss')), 'hh24:mi:ss') as MINTM, TO_CHAR(MAX(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY || ' ' || a.HOUR || ':' || a.MINUTE || ':' || a.SECOND, 'yyyy-mm-dd hh24:mi:ss')), 'hh24:mi:ss') as MAXTM
                            FROM STN_TRCDLOG a
                            INNER JOIN hrdbuser.ST_STAFFS b ON a.ENO = b.FINGERID
                            INNER JOIN hrdbuser.ST_STBR c ON b.ID = c.STAFFS_ID
                            INNER JOIN hrdbuser.STN_MOVE d ON c.MOVE_ID = d.ID
                            INNER JOIN hrdbuser.ST_BRANCH f ON c.BRANCH_ID = f.ID AND f.ISACTIVE = 1
                            WHERE c.POS_ID != 2020102 AND a.INOUT = 0 AND a.YEAR = " + yr + @" AND a.MONTH IN(" + strMonthList + @") AND TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd') BETWEEN TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') AND SYSDATE AND MOD(TO_CHAR(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd'), 'J'), 7) + 1 IN(1, 2, 3, 4, 5, 6, 7)
                            GROUP BY a.MONTH, a.INOUT, b.ID, TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd')
                          ) b ON a.ST_ID = b.ST_ID AND a.DT = b.DT
                        ) a
                        LEFT JOIN(
                          SELECT DT, STAFFS_ID, MAX(TP) as TP
                        FROM(
                            SELECT b.DT, a.STAFFS_ID, 11 as TP
                            FROM hrdbuser.ST_CHULUUDAYF3 a,
                            (
                                SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                                FROM DUAL
                                CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                            ) b
                            WHERE
                                b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
                            UNION ALL
                            SELECT b.DT, a.STAFFS_ID, 12 as TP
                            FROM hrdbuser.ST_CHULUUDAYT2 a,
                            (
                            SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                            FROM DUAL
                            CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                            ) b
                            WHERE
                            a.ISRECEIVED = 1 AND
                            b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
                            UNION ALL
                            SELECT b.DT, a.STAFFS_ID, 13 as TP
                            FROM hrdbuser.ST_CHULUUSICK a,
                            (
                            SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                            FROM DUAL
                            CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                            ) b
                            WHERE
                            b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
                            UNION ALL
                            SELECT b.DT, a.STAFFS_ID, 21 as TP
                            FROM hrdbuser.ST_AMRALT a,
                            (
                            SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                            FROM DUAL
                            CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                            ) b
                            WHERE
                            a.TZISRECEIVED = 1 AND
                            b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
                            UNION ALL
                            SELECT b.DT, a.STAFFS_ID, 31 as TP
                            FROM hrdbuser.ST_TOMILOLT_STAFFS a
                            INNER JOIN hrdbuser.ST_TOMILOLT c ON a.TOMILOLT_ID = c.ID,
                            (
                            SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                            FROM DUAL
                            CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                            ) b
                            WHERE
                            b.DT BETWEEN TO_DATE(c.FROMDATE, 'YYYY-MM-DD') AND TO_DATE(c.TODATE, 'YYYY-MM-DD')
                        )
                        GROUP BY DT, STAFFS_ID
                        ) b ON a.DT = b.DT AND a.ST_ID = b.STAFFS_ID
                      ) a
                      LEFT JOIN(
                        SELECT TO_DATE('" + yr + @"-' || HOLMONTH || '-' || HOLDAY, 'YYYY-MM-DD') as DT
                        FROM hrdbuser.ST_HOLIDAYOFFICIAL
                        WHERE HOLMONTH IN(" + strMonthList + @")
                        UNION ALL
                        SELECT TO_DATE(HOLDATE, 'YYYY-MM-DD') as DT
                        FROM hrdbuser.ST_HOLIDAYUNOFFICIAL
                        WHERE TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'YYYY')) = " + yr + @" AND TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'MM')) IN(" + strMonthList + @")
                      ) b ON a.DT = b.DT
                      GROUP BY a.ST_ID, a.TP, a.DT, a.MINTM, a.MAXTM, CASE WHEN b.DT is null THEN a.ISWORK ELSE 0 END
                    )
                  )
                  GROUP BY ST_ID
              ) a
            ) f ON a.ST_ID = f.ST_ID
            LEFT JOIN (
              SELECT c.ID as ST_ID, NVL(ROUND(ROUND(AVG(b.PER), 3) * 0.05, 3), 0) as AVGPNT
              FROM TBL_SRV a
              INNER JOIN TBL_SRV_ANSWER b ON a.SRV_ANSWER_ID = b.ID
              INNER JOIN hrdbuser.ST_STAFFS c ON a.TRGT_ID = c.ID
              INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
              INNER JOIN hrdbuser.ST_BRANCH f ON d.BRANCH_ID = f.ID AND f.ISACTIVE = 1
              INNER JOIN hrdbuser.ST_BRANCH g ON f.FATHER_ID = g.ID AND g.ISACTIVE = 1
              WHERE a.SRV_TYPE_ID = 3 AND a.YR = " + yr + @" AND a.YR_HF = " + yrhf + @" AND f.FATHER_ID=" + gazarid + @" AND f.ID=" + heltesid + @"
              GROUP BY c.ID
            ) g ON a.ST_ID = g.ST_ID
            LEFT JOIN (
              SELECT a.ST_ID, NVL(COUNT(a.ID), 0) as TAB3PLANCNT, NVL(SUM(NVL2(a.TAB3IMPLCNT, 1, 0)), 0) as TAB3IMPLCNT, NVL(ROUND(AVG(a.PER1), 3), 0) as TAB3PER1AVG
              FROM(
                SELECT a.ST_ID, a.ID, NVL2(c.IMPL, 1, 0) as TAB3IMPLCNT, NVL(c.PER1, 0) as PER1
                FROM(
                  SELECT a.ST_ID, a.ID, MAX(d.YRHF) as YRHF
                  FROM TBL_AGREEMENT_OTHER a
                  INNER JOIN hrdbuser.ST_STBR b ON a.ST_ID=b.STAFFS_ID AND b.ISACTIVE=1
                  INNER JOIN hrdbuser.ST_BRANCH c ON b.BRANCH_ID=c.ID
                  LEFT JOIN TBL_AGREEMENT_OTHER_IMPL d ON a.ID = d.AGREEMENT_OTHER_ID AND d.YRHF IN(" + strYrhfB + @")
                  WHERE a.YR = " + yr + @" " + strYrhfA + @"
                  GROUP BY a.ST_ID, a.ID
                ) a
                INNER JOIN TBL_AGREEMENT_OTHER b ON a.ID = b.ID
                LEFT JOIN TBL_AGREEMENT_OTHER_IMPL c ON a.ID = c.AGREEMENT_OTHER_ID AND a.YRHF = c.YRHF
                GROUP BY a.ST_ID, a.ID, NVL2(c.IMPL, 1, 0), NVL(c.PER1, 0)
              ) a
              GROUP BY a.ST_ID
            ) h ON a.ST_ID = h.ST_ID
          ) h 
      ORDER BY (NVL(h.NIITOTHER_PERAVG, 0) + NVL(h.TUSGAI_PERAVG, 0) + NVL(h.TAB2PER1AVG, 0) + NVL(h.TAB2PERIRTS, 0) + NVL(h.TAB2PERHAMT, 0)) DESC
    ) a
 ) a 
INNER JOIN ( 
  SELECT ROUND(COUNT(a.ID)*0.3,0) as INDEX3T1 
  FROM hrdbuser.ST_STAFFS a
  INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1
  INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1
  INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
  WHERE b.POS_ID NOT IN (2020102,2010201,2010301) AND d.FATHER_ID=" + gazarid + " AND d.ID=" + heltesid + @"
) b ON a.ROWNO=b.INDEX3T1";
                ds = myObj.OracleExecuteDataSet(strQry);
                if (ds.Tables[0].Rows.Count != 0) str30Per = ds.Tables[0].Rows[0][0].ToString();
                strQry = @"SELECT 
      a.NIIT_PERAVG||'~'||a.TUSGAI_PERAVG||'~'||(a.TAB2PER1AVG+a.TAB2PERIRTS+a.TAB2PERHAMT)||'~'||a.SUMPER||'~'||a.NEWSUMPER as DATA
    FROM (
       SELECT a.ST_ID
      , b.NIIT_PLANCNT
      , b.NIIT_IMPLCNT
      , NVL(b.NIIT_PERAVG,0) as NIIT_PERAVG
      , c.TUSGAI_PLANCNT
      , c.TUSGAI_IMPLCNT
      , NVL(c.TUSGAI_PERAVG,0) as TUSGAI_PERAVG
      , d.TAB2PLANCNT
      , d.TAB2IMPLCNT
      , NVL(d.TAB2PER1AVG, 0) as TAB2PER1AVG
      , NVL(f.PER, 0) as TAB2PERIRTS
      , NVL(g.AVGPNT, 0) as TAB2PERHAMT
      , h.TAB3PLANCNT
      , h.TAB3IMPLCNT
      , h.TAB3PER1AVG
      , (NVL(b.NIIT_PLANCNT, 0) + NVL(h.TAB3PLANCNT, 0)) as NIITOTHER_PLANCNT
      , (NVL(b.NIIT_IMPLCNT, 0) + NVL(h.TAB3IMPLCNT, 0)) as NIITOTHER_IMPLCNT
      , CASE WHEN NVL(h.TAB3PER1AVG, 0) != 0 THEN ROUND((NVL(b.NIIT_PERAVG, 0) + NVL(h.TAB3PER1AVG, 0)) / 2, 3) ELSE NVL(b.NIIT_PERAVG, 0) END as NIITOTHER_PERAVG
      , (NVL(CASE WHEN NVL(h.TAB3PER1AVG, 0) != 0 THEN ROUND((NVL(b.NIIT_PERAVG, 0) + NVL(h.TAB3PER1AVG, 0)) / 2, 3) ELSE NVL(b.NIIT_PERAVG, 0) END, 0) + NVL(c.TUSGAI_PERAVG, 0) + NVL(d.TAB2PER1AVG, 0) + NVL(f.PER, 0) + NVL(g.AVGPNT, 0)) as SUMPER
      , CASE WHEN(NVL(CASE WHEN NVL(h.TAB3PER1AVG, 0) != 0 THEN ROUND((NVL(b.NIIT_PERAVG, 0) + NVL(h.TAB3PER1AVG, 0)) / 2, 3) ELSE NVL(b.NIIT_PERAVG, 0) END, 0) + NVL(c.TUSGAI_PERAVG, 0) + NVL(d.TAB2PER1AVG, 0) + NVL(f.PER, 0) + NVL(g.AVGPNT, 0)) > " + str30Per + @" THEN(NVL(CASE WHEN NVL(h.TAB3PER1AVG, 0) != 0 THEN ROUND((NVL(b.NIIT_PERAVG, 0) + NVL(h.TAB3PER1AVG, 0)) / 2, 3) ELSE NVL(b.NIIT_PERAVG, 0) END, 0) + NVL(c.TUSGAI_PERAVG, 0) + NVL(d.TAB2PER1AVG, 0) + NVL(f.PER, 0) + NVL(g.AVGPNT, 0)) - (" + str30Per + @" - 90) ELSE(NVL(CASE WHEN NVL(h.TAB3PER1AVG, 0) != 0 THEN ROUND((NVL(b.NIIT_PERAVG, 0) + NVL(h.TAB3PER1AVG, 0)) / 2, 3) ELSE NVL(b.NIIT_PERAVG, 0) END, 0) + NVL(c.TUSGAI_PERAVG, 0) + NVL(d.TAB2PER1AVG, 0) + NVL(f.PER, 0) + NVL(g.AVGPNT, 0)) - (" + str30Per + @" - 90) END as NEWSUMPER
    FROM(
      SELECT a.ID as ST_ID
      FROM hrdbuser.ST_STAFFS a
      INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1
      INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1
      INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
      INNER JOIN hrdbuser.ST_BRANCH f ON d.FATHER_ID = f.ID AND f.ISACTIVE = 1
      INNER JOIN hrdbuser.STN_POS g ON b.POS_ID = g.ID
      WHERE b.POS_ID NOT IN (2020102,2010201,2010301) AND d.FATHER_ID=" + gazarid + @" AND d.ID=" + heltesid + @"
      GROUP BY a.ID
    ) a
    LEFT JOIN(
    
      SELECT 
        a.ST_ID, 
        COUNT(a.PLANYR_ID) as NIIT_PLANCNT, 
        SUM(NVL2(c.IMPL,1,0)) as NIIT_IMPLCNT, 
        NVL(ROUND(AVG((NVL(a.NIIT_PER2AVG,0)+NVL(c.PER1,0))),3),0) as NIIT_PERAVG
      FROM (
        SELECT a.PLANYR_ID, a.ST_ID, ROUND(ROUND(NVL(AVG(b.EVAL), 0), 3) * 0.3, 3) as NIIT_PER2AVG
        FROM (

          SELECT a.PLANYR_ID, a.ST_ID
          FROM (
            SELECT a.PLANYR_ID, a.ST_ID, NVL(b.ISCANCEL,0) as ISCANCEL
            FROM (
              SELECT b.PLANYR_ID, b.ST_ID 
              FROM ( 
                SELECT a.PLANYR_ID, a.ST_ID 
                FROM TBL_AGREEMENT_MAIN a
                INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
                WHERE a.YR=" + yr + @" AND a.ISSPECIAL=1 AND f.BR_ID=" + gazarid + @" AND d.BR_ID=" + heltesid + @" " + strYrhfA + @" AND b.SUBMIT_D2=1
                GROUP BY a.PLANYR_ID, a.ST_ID
              ) a 
              RIGHT JOIN ( 
                SELECT PLANYR_ID, ST_ID 
                FROM (
                    SELECT b.PLANYR_ID, b.ST_ID
                    FROM ( 
                        SELECT a.PLANYR_ID, a.ST_ID 
                        FROM TBL_AGREEMENT_MAIN a
                        INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                        INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
                        INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                        INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
                        WHERE a.YR = " + yr + @" AND f.BR_ID=" + gazarid + @" AND d.BR_ID=" + heltesid + @" AND b.SUBMIT_D2=1
                    ) a
                    RIGHT JOIN (
                        SELECT a.ID as PLANYR_ID, b.ST_ID 
                        FROM TBL_PLANYR a 
                        INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID  
                        INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID 
                        INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                        INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID 
                        WHERE a.YR=" + yr + @" AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1 AND f.BR_ID=" + gazarid + @" AND d.BR_ID=" + heltesid + @"
                            " + strMnthLike.Replace("b.BUDGET", "a.BUDGET") + @"
                        GROUP BY a.ID, b.ST_ID 
                    ) b ON a.PLANYR_ID=b.PLANYR_ID AND a.ST_ID=b.ST_ID
                    WHERE a.PLANYR_ID is null AND a.ST_ID is null
                    UNION ALL
                    SELECT a.PLANYR_ID, a.ST_ID 
                    FROM TBL_AGREEMENT_MAIN a
                    INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                    INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
                    INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                    INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
                    WHERE a.YR = " + yr + @" " + strYrhfA + @" AND f.BR_ID=" + gazarid + @" AND d.BR_ID=" + heltesid + @" AND b.SUBMIT_D2=1
                ) 
                GROUP BY PLANYR_ID, ST_ID
              ) b ON a.PLANYR_ID=b.PLANYR_ID AND a.ST_ID=b.ST_ID 
              WHERE a.PLANYR_ID IS NULL 
            ) a
            LEFT JOIN TBL_AGREEMENT_MAIN b ON a.PLANYR_ID=b.PLANYR_ID AND a.ST_ID=b.ST_ID AND b.YR=" + yr + @" " + strYrhfA.Replace("a.", "b.") + @"
          ) a
          WHERE a.ISCANCEL=0

        ) a
        LEFT JOIN TBL_PLANYR_EVAL b ON a.PLANYR_ID = b.PLANYR_ID AND b.TP = 'month' AND b.INTERVAL IN(" + strMonthList + @")
        GROUP BY a.PLANYR_ID, a.ST_ID
      ) a
      LEFT JOIN TBL_AGREEMENT_MAIN b ON a.ST_ID=b.ST_ID AND a.PLANYR_ID=b.PLANYR_ID AND YR=" + yr + @" 
      LEFT JOIN TBL_AGREEMENT_MAIN_IMPL c ON b.ID=c.AGREEMENT_MAIN_ID AND c.YRHF=" + yrhf + @"
      GROUP BY a.ST_ID      
      
    ) b ON a.ST_ID = b.ST_ID
    LEFT JOIN(
    
      SELECT 
        a.ST_ID, 
        COUNT(a.PLANYR_ID) as TUSGAI_PLANCNT, 
        SUM(NVL2(c.IMPL,1,0)) as TUSGAI_IMPLCNT, 
        NVL(ROUND(AVG((NVL(a.TUSGAI_PER2AVG,0)+NVL(c.PER1,0))),3),0) as TUSGAI_PERAVG
      FROM (
        SELECT a.PLANYR_ID, a.ST_ID, ROUND(ROUND(NVL(AVG(b.EVAL), 0), 3) * 0.4, 3) as TUSGAI_PER2AVG
        FROM (

          SELECT a.PLANYR_ID, a.ST_ID
          FROM (
            SELECT a.PLANYR_ID, a.ST_ID, NVL(b.ISCANCEL,0) as ISCANCEL
            FROM (
              SELECT b.PLANYR_ID, b.ST_ID 
              FROM ( 
                SELECT a.PLANYR_ID, a.ST_ID 
                FROM TBL_AGREEMENT_MAIN a
                INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
                INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
                WHERE a.YR=" + yr + @" AND a.ISSPECIAL=1 AND f.BR_ID=" + gazarid + @" AND d.BR_ID=" + heltesid + @" " + strYrhfA + @" AND b.SUBMIT_D2=1
                GROUP BY a.PLANYR_ID, a.ST_ID
              ) a 
              INNER JOIN ( 
                SELECT PLANYR_ID, ST_ID 
                FROM (
                    SELECT b.PLANYR_ID, b.ST_ID
                    FROM ( 
                        SELECT a.PLANYR_ID, a.ST_ID 
                        FROM TBL_AGREEMENT_MAIN a
                        INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                        INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
                        INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                        INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
                        WHERE a.YR = " + yr + @" AND f.BR_ID=" + gazarid + @" AND d.BR_ID=" + heltesid + @" AND b.SUBMIT_D2=1
                    ) a
                    RIGHT JOIN (
                        SELECT a.ID as PLANYR_ID, b.ST_ID 
                        FROM TBL_PLANYR a 
                        INNER JOIN TBL_PLANYR_USER b ON a.ID=b.PLANYR_ID  
                        INNER JOIN TBL_FUNC_ACTION c ON a.FUNC_ACTION_ID=c.ID 
                        INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                        INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID 
                        WHERE a.YR=" + yr + @" AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1 AND f.BR_ID=" + gazarid + @" AND d.BR_ID=" + heltesid + @"
                            " + strMnthLike.Replace("b.BUDGET", "a.BUDGET") + @"
                        GROUP BY a.ID, b.ST_ID 
                    ) b ON a.PLANYR_ID=b.PLANYR_ID AND a.ST_ID=b.ST_ID
                    WHERE a.PLANYR_ID is null AND a.ST_ID is null
                    UNION ALL
                    SELECT a.PLANYR_ID, a.ST_ID 
                    FROM TBL_AGREEMENT_MAIN a
                    INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                    INNER JOIN TBL_FUNC_ACTION c ON b.FUNC_ACTION_ID=c.ID 
                    INNER JOIN TBL_FUNC_ACTION_BR d ON c.ID=d.FUNC_ACTION_ID 
                    INNER JOIN TBL_FUNC_STRAT f ON c.FUNC_STRAT_ID=f.ID
                    WHERE a.YR = " + yr + @" " + strYrhfA + @" AND f.BR_ID= " + gazarid + @" AND d.BR_ID= " + heltesid + @" AND b.SUBMIT_D2=1
                ) 
                GROUP BY PLANYR_ID, ST_ID
              ) b ON a.PLANYR_ID=b.PLANYR_ID AND a.ST_ID=b.ST_ID
            ) a
            LEFT JOIN TBL_AGREEMENT_MAIN b ON a.PLANYR_ID=b.PLANYR_ID AND a.ST_ID=b.ST_ID AND b.YR=" + yr + @" " + strYrhfA.Replace("a.", "b.") + @"
          ) a
          WHERE a.ISCANCEL=0
 
        ) a
        LEFT JOIN TBL_PLANYR_EVAL b ON a.PLANYR_ID = b.PLANYR_ID AND b.TP = 'month' AND b.INTERVAL IN(" + strMonthList + @")
        GROUP BY a.PLANYR_ID, a.ST_ID
      ) a
      LEFT JOIN TBL_AGREEMENT_MAIN b ON a.ST_ID=b.ST_ID AND a.PLANYR_ID=b.PLANYR_ID AND YR=" + yr + @" 
      LEFT JOIN TBL_AGREEMENT_MAIN_IMPL c ON b.ID=c.AGREEMENT_MAIN_ID AND c.YRHF=" + yrhf + @"
      GROUP BY a.ST_ID 
    
    ) c ON a.ST_ID = c.ST_ID
    LEFT JOIN(
    
      SELECT a.ST_ID, NVL(COUNT(a.ID), 0) as TAB2PLANCNT, NVL(SUM(NVL2(a.TAB2IMPLCNT, 1, 0)), 0) as TAB2IMPLCNT, NVL(ROUND(AVG(a.PER1), 3), 0) as TAB2PER1AVG
      FROM(
        SELECT a.ST_ID, a.ID, NVL2(c.IMPL, 1, 0) as TAB2IMPLCNT, NVL(c.PER1, 0) as PER1
        FROM(
          SELECT a.ST_ID, a.ID, MAX(d.YRHF) as YRHF
          FROM TBL_AGREEMENT_SKILL a
          INNER JOIN hrdbuser.ST_STBR b ON a.ST_ID=b.STAFFS_ID AND b.ISACTIVE=1
          INNER JOIN hrdbuser.ST_BRANCH c ON b.BRANCH_ID=c.ID
          LEFT JOIN TBL_AGREEMENT_SKILL_IMPL d ON a.ID = d.AGREEMENT_SKILL_ID AND d.YRHF IN(" + strYrhfB + @")
          WHERE a.YR = " + yr + @" " + strYrhfA + @" AND c.FATHER_ID=" + gazarid + @" AND c.ID=" + heltesid + @" AND b.POS_ID NOT IN (2010201, 2013201)
          GROUP BY a.ST_ID, a.ID
        ) a
        INNER JOIN TBL_AGREEMENT_SKILL b ON a.ID = b.ID
        LEFT JOIN TBL_AGREEMENT_SKILL_IMPL c ON a.ID = c.AGREEMENT_SKILL_ID AND a.YRHF = c.YRHF
        GROUP BY a.ST_ID, a.ID, NVL2(c.IMPL, 1, 0), NVL(c.PER1, 0)
      ) a
      GROUP BY a.ST_ID
      
    ) d ON a.ST_ID = d.ST_ID
    LEFT JOIN(
      
        SELECT a.ST_ID, CASE WHEN a.WORKDAY=0 THEN 0 ELSE NVL(ROUND(ROUND(((a.WORKDAY - (a.TASALSANDAYSUM + a.HOTSORSONDAYSUM + a.ERTDAYSUM)) / a.WORKDAY) * 100, 3) * 0.05, 3), 0) END as PER
        FROM(
        SELECT ST_ID,
            SUM(ISWORK) as WORKDAY,
            SUM(CHOLOODAY) as CHOLOODAYSUM,
            SUM(UWCHTEIDAY) as UWCHTEIDAYSUM,
            SUM(AMRALTDAY) as AMRALTDAYSUM,
            SUM(TOMILOLTDAY) as TOMILOLTDAYSUM,
            SUM(ISTASALSAN) as TASALSANDAYSUM,
            SUM(HOTSORSONMINUTE) as HOTSORSONMINUTESUM,
            SUM(HOTSORSONDAY) as HOTSORSONDAYSUM,
            SUM(ERTMINUTE) as ERTMINUTESUM,
            SUM(ERTDAY) as ERTDAYSUM,
            SUM(OROIMINUTE) as OROIMINUTESUM,
            SUM(OROIDAY) as OROIDAYSUM
        FROM(
        SELECT ST_ID, TP, DT, MINTM, MAXTM, ISWORK,
            CASE WHEN TP = 11 AND ISWORK = 1 OR TP = 12 THEN 1 ELSE 0 END as CHOLOODAY,
            CASE WHEN TP = 13 AND ISWORK = 1 THEN 1 ELSE 0 END as UWCHTEIDAY,
            CASE WHEN TP = 21 AND ISWORK = 1 THEN 1 ELSE 0 END as AMRALTDAY,
            CASE WHEN TP = 31 AND ISWORK = 1 THEN 1 ELSE 0 END as TOMILOLTDAY,
            CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM = MAXTM THEN 1 ELSE 0 END as ISTASALSAN,
            CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'hotsorson', 'minute') ELSE 0 END as HOTSORSONMINUTE,
            CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'hotsorson', 'day') ELSE 0 END as HOTSORSONDAY,
            CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'ert', 'minute') ELSE 0 END as ERTMINUTE,
            CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'ert', 'day') ELSE 0 END as ERTDAY,
            CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'oroi', 'minute') ELSE 0 END as OROIMINUTE,
            CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'oroi', 'day') ELSE 0 END as OROIDAY
        FROM(
            SELECT a.ST_ID, a.TP, a.DT, a.MINTM, a.MAXTM, CASE WHEN b.DT is null THEN a.ISWORK ELSE 0 END as ISWORK
            FROM(
            SELECT a.ST_ID, NVL(b.TP, 0) as TP, a.DT, a.MINTM, a.MAXTM, a.ISWORK
            FROM(
                SELECT a.ST_ID, a.DT, NVL(b.TP, 0) as TP, NVL(b.MINTM, '00:00:00') as MINTM, NVL(b.MAXTM, '00:00:00') as MAXTM, a.ISWORK
                FROM(
                SELECT a.STAFFS_ID as ST_ID, a.DT, CASE WHEN b.DT IS NULL THEN a.ISWORK ELSE 1 END as ISWORK
                FROM(
                    SELECT a.ID, b.STAFFS_ID, c.FATHER_ID as GAZAR_ID, c.ID as HELTES_ID, a.DT, CASE WHEN(MOD(TO_CHAR(a.DT, 'J'), 7) + 1) = 6 OR(MOD(TO_CHAR(a.DT, 'J'), 7) + 1) = 7 THEN 0 ELSE 1 END as ISWORK
                    FROM(
                    SELECT a.ID, a.BEGINDT, a.ENDDT, b.DT
                    FROM(
                        SELECT a.ID,
                        CASE
                            WHEN TO_DATE(a.DT, 'YYYY-MM-DD') > TO_DATE('" + yr + "-" + month + @"-01', 'YYYY-MM-DD')
                            THEN a.DT
                            ELSE '" + yr + "-" + month + @"-01'
                        END as BEGINDT,
                        CASE
                            --WHEN TO_DATE(CASE WHEN c.ACTIVE = 0 THEN NVL(a.ENDDT, a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE, 'YYYY-MM-DD')) END, 'YYYY-MM-DD') < LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'YYYY-MM-DD'))
                            --THEN CASE WHEN c.ACTIVE = 0 THEN NVL(a.ENDDT, a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE, 'YYYY-MM-DD')) END ELSE TO_CHAR(LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'YYYY-MM-DD')), 'YYYY-MM-DD') END as ENDDT
                            WHEN TO_DATE(CASE WHEN c.ACTIVE = 0 THEN TO_CHAR((TO_DATE(NVL(a.ENDDT, a.DT), 'YYYY-MM-DD') - 1), 'YYYY-MM-DD') ELSE NVL(TO_CHAR((TO_DATE(a.ENDDT, 'YYYY-MM-DD') - 1), 'YYYY-MM-DD'), TO_CHAR(SYSDATE, 'YYYY-MM-DD')) END, 'YYYY-MM-DD') < LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'YYYY-MM-DD'))
                            THEN CASE WHEN c.ACTIVE = 0 THEN TO_CHAR((TO_DATE(NVL(a.ENDDT, a.DT), 'YYYY-MM-DD') - 1), 'YYYY-MM-DD') ELSE NVL(TO_CHAR((TO_DATE(a.ENDDT, 'YYYY-MM-DD') - 1), 'YYYY-MM-DD'), TO_CHAR(SYSDATE, 'YYYY-MM-DD')) END ELSE TO_CHAR(LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'YYYY-MM-DD')), 'YYYY-MM-DD') END as ENDDT
                        FROM hrdbuser.ST_STBR a
                        INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID = b.ID AND b.ISACTIVE = 1
                        INNER JOIN hrdbuser.STN_MOVE c ON a.MOVE_ID = c.ID
                        WHERE a.POS_ID != 2020102 AND c.ACTIVE = 1
                        AND ((
                            TO_DATE('" + yr + "-" + month + @"-01','YYYY-MM-DD') 
                            BETWEEN TO_DATE(a.DT,'YYYY-MM-DD') AND TO_DATE(CASE WHEN c.ACTIVE=0 THEN NVL(a.ENDDT,a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE,'YYYY-MM-DD')) END,'YYYY-MM-DD')
                            OR 
                            LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01','YYYY-MM-DD')) 
                            BETWEEN TO_DATE(a.DT,'YYYY-MM-DD') AND TO_DATE(CASE WHEN c.ACTIVE=0 THEN NVL(a.ENDDT,a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE,'YYYY-MM-DD')) END,'YYYY-MM-DD')
                            ) OR 
                            (
                                TO_DATE('" + yr + "-" + month + @"-01','YYYY-MM-DD')<TO_DATE(a.DT,'YYYY-MM-DD') AND LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01','YYYY-MM-DD'))>TO_DATE(a.DT,'YYYY-MM-DD')
                            ))
                    ) a, (
                        SELECT DT
                        FROM(
                        SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                        FROM DUAL
                        CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                        )
                        WHERE DT BETWEEN TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') AND SYSDATE AND MOD(TO_CHAR(DT, 'J'), 7) + 1 IN(1, 2, 3, 4, 5, 6, 7)
                    ) b
                    ) a
                    INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.ID
                    INNER JOIN hrdbuser.ST_BRANCH c ON b.BRANCH_ID = c.ID AND c.ISACTIVE = 1
                    WHERE a.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD') AND b.POS_ID != 2020102 AND b.STAFFS_ID IN (
                      SELECT a.STAFFS_ID as ST_ID
                      FROM hrdbuser.ST_STBR a 
                      INNER JOIN hrdbuser.STN_MOVE b ON a.MOVE_ID=b.ID AND b.ACTIVE=1
                      INNER JOIN hrdbuser.ST_BRANCH c ON a.BRANCH_ID = c.ID AND c.ISACTIVE = 1
                      WHERE a.ISACTIVE=1 AND a.POS_ID NOT IN (2010201,2010301) AND c.FATHER_ID=" + gazarid + @" AND c.ID=" + heltesid + @"
                      GROUP BY a.STAFFS_ID)
                ) a
                LEFT JOIN(
                    SELECT TO_DATE(HOLDATE, 'YYYY-MM-DD') as DT FROM hrdbuser.ST_HOLIDAYISWORK WHERE TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'YYYY')) = " + yr + @" AND TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'MM')) IN(" + strMonthList + @")
                ) b ON a.DT = b.DT
                ) a
                LEFT JOIN(
                SELECT a.MONTH, a.INOUT as TP, b.ID as ST_ID, TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd') as DT, TO_CHAR(MIN(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY || ' ' || a.HOUR || ':' || a.MINUTE || ':' || a.SECOND, 'yyyy-mm-dd hh24:mi:ss')), 'hh24:mi:ss') as MINTM, TO_CHAR(MAX(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY || ' ' || a.HOUR || ':' || a.MINUTE || ':' || a.SECOND, 'yyyy-mm-dd hh24:mi:ss')), 'hh24:mi:ss') as MAXTM
                FROM STN_TRCDLOG a
                INNER JOIN hrdbuser.ST_STAFFS b ON a.ENO = b.FINGERID
                INNER JOIN hrdbuser.ST_STBR c ON b.ID = c.STAFFS_ID
                INNER JOIN hrdbuser.STN_MOVE d ON c.MOVE_ID = d.ID
                INNER JOIN hrdbuser.ST_BRANCH f ON c.BRANCH_ID = f.ID AND f.ISACTIVE = 1
                WHERE c.POS_ID != 2020102 AND a.INOUT = 0 AND a.YEAR = " + yr + @" AND a.MONTH IN(" + strMonthList + @") AND TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd') BETWEEN TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') AND SYSDATE AND MOD(TO_CHAR(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd'), 'J'), 7) + 1 IN(1, 2, 3, 4, 5, 6, 7)
                GROUP BY a.MONTH, a.INOUT, b.ID, TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd')
                ) b ON a.ST_ID = b.ST_ID AND a.DT = b.DT
            ) a
            LEFT JOIN(
                SELECT DT, STAFFS_ID, MAX(TP) as TP
                FROM(
                    SELECT b.DT, a.STAFFS_ID, 11 as TP
                    FROM hrdbuser.ST_CHULUUDAYF3 a,
                    (
                    SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                    FROM DUAL
                    CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                    ) b
                    WHERE
                    b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
                    UNION ALL
                    SELECT b.DT, a.STAFFS_ID, 12 as TP
                    FROM hrdbuser.ST_CHULUUDAYT2 a,
                    (
                    SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                    FROM DUAL
                    CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                    ) b
                    WHERE
                    a.ISRECEIVED = 1 AND
                    b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
                    UNION ALL
                    SELECT b.DT, a.STAFFS_ID, 13 as TP
                    FROM hrdbuser.ST_CHULUUSICK a,
                    (
                    SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                    FROM DUAL
                    CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                    ) b
                    WHERE
                    b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
                    UNION ALL
                    SELECT b.DT, a.STAFFS_ID, 21 as TP
                    FROM hrdbuser.ST_AMRALT a,
                    (
                    SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                    FROM DUAL
                    CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                    ) b
                    WHERE
                    a.TZISRECEIVED = 1 AND
                    b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
                    UNION ALL
                    SELECT b.DT, a.STAFFS_ID, 31 as TP
                    FROM hrdbuser.ST_TOMILOLT_STAFFS a
                    INNER JOIN hrdbuser.ST_TOMILOLT c ON a.TOMILOLT_ID = c.ID,
                    (
                    SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                    FROM DUAL
                    CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                    ) b
                    WHERE
                    b.DT BETWEEN TO_DATE(c.FROMDATE, 'YYYY-MM-DD') AND TO_DATE(c.TODATE, 'YYYY-MM-DD')
                )
                GROUP BY DT, STAFFS_ID
            ) b ON a.DT = b.DT AND a.ST_ID = b.STAFFS_ID
            ) a
            LEFT JOIN(
            SELECT TO_DATE('" + yr + @"-' || HOLMONTH || '-' || HOLDAY, 'YYYY-MM-DD') as DT
            FROM hrdbuser.ST_HOLIDAYOFFICIAL
            WHERE HOLMONTH IN(" + strMonthList + @")
            UNION ALL
            SELECT TO_DATE(HOLDATE, 'YYYY-MM-DD') as DT
            FROM hrdbuser.ST_HOLIDAYUNOFFICIAL
            WHERE TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'YYYY')) = " + yr + @" AND TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'MM')) IN(" + strMonthList + @")
            ) b ON a.DT = b.DT
            GROUP BY a.ST_ID, a.TP, a.DT, a.MINTM, a.MAXTM, CASE WHEN b.DT is null THEN a.ISWORK ELSE 0 END
        )
        )
        GROUP BY ST_ID
        ) a

    ) f ON a.ST_ID = f.ST_ID
    LEFT JOIN (
      SELECT c.ID as ST_ID, NVL(ROUND(ROUND(AVG(b.PER), 3) * 0.05, 3), 0) as AVGPNT
      FROM TBL_SRV a
      INNER JOIN TBL_SRV_ANSWER b ON a.SRV_ANSWER_ID = b.ID
      INNER JOIN hrdbuser.ST_STAFFS c ON a.TRGT_ID = c.ID
      INNER JOIN hrdbuser.ST_STBR d ON c.ID = d.STAFFS_ID AND d.ISACTIVE = 1
      INNER JOIN hrdbuser.ST_BRANCH f ON d.BRANCH_ID = f.ID AND f.ISACTIVE = 1
      INNER JOIN hrdbuser.ST_BRANCH g ON f.FATHER_ID = g.ID AND g.ISACTIVE = 1
      WHERE a.SRV_TYPE_ID = 3 AND a.YR = " + yr + @" AND a.YR_HF = " + yrhf + @" AND f.FATHER_ID=" + gazarid + @" AND f.ID=" + heltesid + @"
      GROUP BY c.ID
    ) g ON a.ST_ID = g.ST_ID
    LEFT JOIN (
      SELECT a.ST_ID, NVL(COUNT(a.ID), 0) as TAB3PLANCNT, NVL(SUM(NVL2(a.TAB3IMPLCNT, 1, 0)), 0) as TAB3IMPLCNT, NVL(ROUND(AVG(a.PER1), 3), 0) as TAB3PER1AVG
      FROM(
        SELECT a.ST_ID, a.ID, NVL2(c.IMPL, 1, 0) as TAB3IMPLCNT, NVL(c.PER1, 0) as PER1
        FROM(
          SELECT a.ST_ID, a.ID, MAX(d.YRHF) as YRHF
          FROM TBL_AGREEMENT_OTHER a
          INNER JOIN hrdbuser.ST_STBR b ON a.ST_ID=b.STAFFS_ID AND b.ISACTIVE=1
          INNER JOIN hrdbuser.ST_BRANCH c ON b.BRANCH_ID=c.ID
          LEFT JOIN TBL_AGREEMENT_OTHER_IMPL d ON a.ID = d.AGREEMENT_OTHER_ID AND d.YRHF IN(" + strYrhfB + @")
          WHERE a.YR = " + yr + @" " + strYrhfA + @"
          GROUP BY a.ST_ID, a.ID
        ) a
        INNER JOIN TBL_AGREEMENT_OTHER b ON a.ID = b.ID
        LEFT JOIN TBL_AGREEMENT_OTHER_IMPL c ON a.ID = c.AGREEMENT_OTHER_ID AND a.YRHF = c.YRHF
        GROUP BY a.ST_ID, a.ID, NVL2(c.IMPL, 1, 0), NVL(c.PER1, 0)
      ) a
      GROUP BY a.ST_ID
    ) h ON a.ST_ID = h.ST_ID

    ) a
    WHERE a.ST_ID=" + stid;

                return myObj.OracleExecuteScalar(strQry).ToString();
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AgreementIltgehHuudasLastPerHead(string yr, string yrhf, string stid)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string month = "", month2 = "", strMonthList = "";
            string strYrhfA = "", strYrhfB = "";
            string gazarid = "", heltesid = "";
            string strMnthLike = "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                if (yrhf == "1")
                {
                    strYrhfA = " AND a.YRHF1=1";
                    strYrhfB = "1";
                    month = "1";
                    month2 = "6";
                    strMnthLike = " AND (b.BUDGET IS NULL OR b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||b.BUDGET||',' LIKE '%,1,%' OR ','||b.BUDGET||',' LIKE '%,2,%' OR ','||b.BUDGET||',' LIKE '%,3,%' OR ','||b.BUDGET||',' LIKE '%,4,%' OR ','||b.BUDGET||',' LIKE '%,5,%' OR ','||b.BUDGET||',' LIKE '%,6,%')";
                }
                else if (yrhf == "2")
                {
                    strYrhfA = " AND (a.YRHF1=1 OR a.YRHF2=1)";
                    strYrhfB = "1,2";
                    month = "1";
                    month2 = "12";
                    strMnthLike = " AND (b.BUDGET IS NULL OR b.BUDGET='1,2,3,4,5,6,7,8,9,10,11,12' OR ','||b.BUDGET||',' LIKE '%,7,%' OR ','||b.BUDGET||',' LIKE '%,8,%' OR ','||b.BUDGET||',' LIKE '%,9,%' OR ','||b.BUDGET||',' LIKE '%,10,%' OR ','||b.BUDGET||',' LIKE '%,11,%' OR ','||b.BUDGET||',' LIKE '%,12,%')";
                }
                string strQry = @"SELECT c.ID as HELTESID, c.FATHER_ID as GAZARID 
FROM hrdbuser.ST_STAFFS a 
INNER JOIN hrdbuser.ST_STBR b ON a.ID=b.STAFFS_ID AND b.ISACTIVE=1
INNER JOIN hrdbuser.ST_BRANCH c ON b.BRANCH_ID=c.ID AND c.ISACTIVE=1
WHERE a.ID=" + stid;
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                gazarid = ds.Tables[0].Rows[0]["GAZARID"].ToString();
                heltesid = ds.Tables[0].Rows[0]["HELTESID"].ToString();
                for (int i = Int32.Parse(month); i <= Int32.Parse(month2); i++)
                {
                    if (strMonthList == "") strMonthList += i.ToString();
                    else strMonthList += "," + i.ToString();
                }
                strQry = @"SELECT 
      a.NIIT_PERAVG||'~'||a.TUSGAI_PERAVG||'~'||(a.TAB2PER1AVG+a.TAB2PERIRTS+a.TAB2PERHAMT)||'~'||a.SUMPER||'~'||a.NEWSUMPER as DATA
    FROM (
       
        SELECT a.ST_ID
      , b.NIIT_PLANCNT
      , b.NIIT_IMPLCNT
      , NVL(b.NIIT_PERAVG,0) as NIIT_PERAVG
      , c.TUSGAI_PLANCNT
      , c.TUSGAI_IMPLCNT
      , NVL(c.TUSGAI_PERAVG,0) as TUSGAI_PERAVG
      , d.TAB2PLANCNT
      , d.TAB2IMPLCNT
      , NVL(d.TAB2PER1AVG, 0) as TAB2PER1AVG
      , NVL(f.PER, 0) as TAB2PERIRTS
      , NVL(g.AVGPNT, 0) as TAB2PERHAMT
      , h.TAB3PLANCNT
      , h.TAB3IMPLCNT
      , h.TAB3PER1AVG
      , (NVL(b.NIIT_PLANCNT, 0) + NVL(h.TAB3PLANCNT, 0)) as NIITOTHER_PLANCNT
      , (NVL(b.NIIT_IMPLCNT, 0) + NVL(h.TAB3IMPLCNT, 0)) as NIITOTHER_IMPLCNT
      , CASE WHEN NVL(h.TAB3PER1AVG, 0) != 0 THEN ROUND((NVL(b.NIIT_PERAVG, 0) + NVL(h.TAB3PER1AVG, 0)) / 2, 3) ELSE NVL(b.NIIT_PERAVG, 0) END as NIITOTHER_PERAVG
      , (NVL(CASE WHEN NVL(h.TAB3PER1AVG, 0) != 0 THEN ROUND((NVL(b.NIIT_PERAVG, 0) + NVL(h.TAB3PER1AVG, 0)) / 2, 3) ELSE NVL(b.NIIT_PERAVG, 0) END, 0) + NVL(c.TUSGAI_PERAVG, 0) + NVL(d.TAB2PER1AVG, 0) + NVL(f.PER, 0) + NVL(g.AVGPNT, 0)) as SUMPER
      , (NVL(CASE WHEN NVL(h.TAB3PER1AVG, 0) != 0 THEN ROUND((NVL(b.NIIT_PERAVG, 0) + NVL(h.TAB3PER1AVG, 0)) / 2, 3) ELSE NVL(b.NIIT_PERAVG, 0) END, 0) + NVL(c.TUSGAI_PERAVG, 0) + NVL(d.TAB2PER1AVG, 0) + NVL(f.PER, 0) + NVL(g.AVGPNT, 0)) as NEWSUMPER
    FROM(
      SELECT a.ID as ST_ID
      FROM hrdbuser.ST_STAFFS a
      INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1
      INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID = c.ID AND c.ACTIVE = 1
      INNER JOIN hrdbuser.ST_BRANCH d ON b.BRANCH_ID = d.ID AND d.ISACTIVE = 1
      INNER JOIN hrdbuser.ST_BRANCH f ON d.FATHER_ID = f.ID AND f.ISACTIVE = 1
      INNER JOIN hrdbuser.STN_POS g ON b.POS_ID = g.ID
      --INNER JOIN TBL_AGREEMENTSUBMITSTAFF h ON a.ID=h.ST_ID AND h.YR=" + yr + @" AND h.HFYR=" + yrhf + @"
      WHERE b.POS_ID IN (2010201,2010301)
      GROUP BY a.ID
    ) a
    LEFT JOIN(
    
      SELECT 
        a.ST_ID, 
        COUNT(a.PLANYR_ID) as NIIT_PLANCNT, 
        SUM(NVL2(c.IMPL,1,0)) as NIIT_IMPLCNT, 
        NVL(ROUND(AVG((NVL(a.NIIT_PER2AVG,0)+NVL(c.PER1,0))),3),0) as NIIT_PERAVG
      FROM (
        SELECT a.PLANYR_ID, a.ST_ID, ROUND(ROUND(NVL(AVG(b.EVAL), 0), 3) * 0.3, 3) as NIIT_PER2AVG
        FROM (

          SELECT a.PLANYR_ID, a.ST_ID
          FROM (
            SELECT a.PLANYR_ID, a.ST_ID, NVL(b.ISCANCEL,0) as ISCANCEL
            FROM (
              SELECT b.PLANYR_ID, b.ST_ID 
              FROM ( 
                SELECT a.PLANYR_ID, a.ST_ID 
                FROM TBL_AGREEMENT_MAIN a
                INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                INNER JOIN hrdbuser.ST_STBR c ON a.ST_ID=c.STAFFS_ID AND c.ISACTIVE=1 AND c.POS_ID=2010301
                INNER JOIN hrdbuser.STN_MOVE d ON c.MOVE_ID=d.ID AND d.ACTIVE=1
                WHERE a.YR=" + yr + @" AND a.ISSPECIAL=1 " + strYrhfA + @" AND b.SUBMIT_D2=1
                GROUP BY a.PLANYR_ID, a.ST_ID
              ) a 
              RIGHT JOIN ( 
                SELECT PLANYR_ID, ST_ID 
                FROM (
                    SELECT b.PLANYR_ID, b.ST_ID
                    FROM ( 
                        SELECT a.PLANYR_ID, a.ST_ID 
                        FROM TBL_AGREEMENT_MAIN a
                        INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                        INNER JOIN hrdbuser.ST_STBR c ON a.ST_ID=c.STAFFS_ID AND c.ISACTIVE=1 AND c.POS_ID=2010301
                        INNER JOIN hrdbuser.STN_MOVE d ON c.MOVE_ID=d.ID AND d.ACTIVE=1
                        WHERE a.YR = " + yr + @" AND b.SUBMIT_D2=1
                    ) a
                    RIGHT JOIN (
                        SELECT a.ID as PLANYR_ID, d.ST_ID
                        FROM TBL_PLANYR a 
                        INNER JOIN TBL_FUNC_ACTION b ON a.FUNC_ACTION_ID=b.ID 
                        INNER JOIN TBL_FUNC_ACTION_BR c ON b.ID=c.FUNC_ACTION_ID
                        INNER JOIN (
                          SELECT a.STAFFS_ID as ST_ID, a.BRANCH_ID as BR_ID
                          FROM hrdbuser.ST_STBR a 
                          INNER JOIN hrdbuser.STN_MOVE b ON a.MOVE_ID=b.ID AND b.ACTIVE=1
                          WHERE a.ISACTIVE=1 AND a.POS_ID IN (2010301)
                          GROUP BY a.STAFFS_ID, a.BRANCH_ID
                        ) d ON c.BR_ID=d.BR_ID
                        WHERE a.YR=" + yr + @" AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1
                             " + strMnthLike.Replace("b.BUDGET", "a.BUDGET") + @"
                        GROUP BY a.ID, d.ST_ID
                    ) b ON a.PLANYR_ID=b.PLANYR_ID
                    WHERE a.PLANYR_ID is null
                    UNION ALL
                    SELECT a.PLANYR_ID, a.ST_ID 
                    FROM TBL_AGREEMENT_MAIN a
                    INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                    INNER JOIN hrdbuser.ST_STBR c ON a.ST_ID=c.STAFFS_ID AND c.ISACTIVE=1 AND c.POS_ID=2010301
                    INNER JOIN hrdbuser.STN_MOVE d ON c.MOVE_ID=d.ID AND d.ACTIVE=1
                    WHERE a.YR = " + yr + @" " + strYrhfA + @" AND b.SUBMIT_D2=1
                ) 
                GROUP BY PLANYR_ID, ST_ID
              ) b ON a.PLANYR_ID=b.PLANYR_ID AND a.ST_ID=b.ST_ID 
              WHERE a.PLANYR_ID IS NULL AND a.ST_ID IS NULL
            ) a
            LEFT JOIN TBL_AGREEMENT_MAIN b ON a.PLANYR_ID=b.PLANYR_ID AND a.ST_ID=b.ST_ID AND b.YR=" + yr+ @" " + strYrhfA.Replace("a.","b.") + @"
          ) a
          WHERE a.ISCANCEL=0
          
        ) a
        LEFT JOIN TBL_PLANYR_EVAL b ON a.PLANYR_ID = b.PLANYR_ID AND b.TP = 'month' AND b.INTERVAL IN(" + strMonthList + @")
        GROUP BY a.PLANYR_ID, a.ST_ID
      ) a
      LEFT JOIN TBL_AGREEMENT_MAIN b ON a.ST_ID=b.ST_ID AND a.PLANYR_ID=b.PLANYR_ID AND b.YR=" + yr + @"
      LEFT JOIN TBL_AGREEMENT_MAIN_IMPL c ON b.ID=c.AGREEMENT_MAIN_ID AND c.YRHF=" + yrhf + @"
      GROUP BY a.ST_ID 
      UNION ALL
      SELECT 
        a.ST_ID, 
        COUNT(a.PLANYR_ID) as NIIT_PLANCNT, 
        SUM(NVL2(c.IMPL,1,0)) as NIIT_IMPLCNT, 
        NVL(ROUND(AVG((NVL(a.NIIT_PER2AVG,0)+NVL(c.PER1,0))),3),0) as NIIT_PERAVG
      FROM (
        SELECT a.PLANYR_ID, a.ST_ID, ROUND(ROUND(NVL(AVG(b.EVAL), 0), 3) * 0.3, 3) as NIIT_PER2AVG
        FROM (
          
          SELECT a.PLANYR_ID, a.ST_ID
          FROM (
            SELECT a.PLANYR_ID, a.ST_ID, NVL(b.ISCANCEL,0) as ISCANCEL
            FROM (
              SELECT b.PLANYR_ID, b.ST_ID 
              FROM ( 
                SELECT a.PLANYR_ID, a.ST_ID 
                FROM TBL_AGREEMENT_MAIN a
                INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                INNER JOIN hrdbuser.ST_STBR c ON a.ST_ID=c.STAFFS_ID AND c.ISACTIVE=1 AND c.POS_ID=2010201
                INNER JOIN hrdbuser.STN_MOVE d ON c.MOVE_ID=d.ID AND d.ACTIVE=1
                WHERE a.YR=" + yr + @" AND a.ISSPECIAL=1 " + strYrhfA + @" AND b.SUBMIT_D2=1
                GROUP BY a.PLANYR_ID, a.ST_ID
              ) a 
              RIGHT JOIN ( 
                SELECT PLANYR_ID, ST_ID 
                FROM (
                    SELECT b.PLANYR_ID, b.ST_ID
                    FROM ( 
                        SELECT a.PLANYR_ID, a.ST_ID 
                        FROM TBL_AGREEMENT_MAIN a
                        INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                        INNER JOIN hrdbuser.ST_STBR c ON a.ST_ID=c.STAFFS_ID AND c.ISACTIVE=1 AND c.POS_ID=2010201
                        INNER JOIN hrdbuser.STN_MOVE d ON c.MOVE_ID=d.ID AND d.ACTIVE=1
                        WHERE a.YR = " + yr + @" AND b.SUBMIT_D2=1
                    ) a
                    RIGHT JOIN (
                        SELECT a.ID as PLANYR_ID, f.ST_ID
                        FROM TBL_PLANYR a 
                        INNER JOIN TBL_FUNC_ACTION b ON a.FUNC_ACTION_ID=b.ID 
                        INNER JOIN TBL_FUNC_ACTION_BR c ON b.ID=c.FUNC_ACTION_ID
                        INNER JOIN TBL_FUNC_STRAT d ON b.FUNC_STRAT_ID=d.ID
                        INNER JOIN (
                          SELECT a.STAFFS_ID as ST_ID, a.BRANCH_ID as BR_ID
                          FROM hrdbuser.ST_STBR a 
                          INNER JOIN hrdbuser.STN_MOVE b ON a.MOVE_ID=b.ID AND b.ACTIVE=1
                          WHERE a.ISACTIVE=1 AND a.POS_ID IN (2010201)
                          GROUP BY a.STAFFS_ID, a.BRANCH_ID
                        ) f ON d.BR_ID=f.BR_ID
                        WHERE a.YR=" + yr + @" AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1
                             " + strMnthLike.Replace("b.BUDGET", "a.BUDGET") + @"
                        GROUP BY a.ID, f.ST_ID
                    ) b ON a.PLANYR_ID=b.PLANYR_ID
                    WHERE a.PLANYR_ID is null
                    UNION ALL
                    SELECT a.PLANYR_ID, a.ST_ID 
                    FROM TBL_AGREEMENT_MAIN a
                    INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                    INNER JOIN hrdbuser.ST_STBR c ON a.ST_ID=c.STAFFS_ID AND c.ISACTIVE=1 AND c.POS_ID=2010201
                    INNER JOIN hrdbuser.STN_MOVE d ON c.MOVE_ID=d.ID AND d.ACTIVE=1
                    WHERE a.YR = " + yr + @" " + strYrhfA + @" AND b.SUBMIT_D2=1
                ) 
                GROUP BY PLANYR_ID, ST_ID
              ) b ON a.PLANYR_ID=b.PLANYR_ID AND a.ST_ID=b.ST_ID 
              WHERE a.PLANYR_ID IS NULL AND a.ST_ID IS NULL
            ) a
            LEFT JOIN TBL_AGREEMENT_MAIN b ON a.PLANYR_ID=b.PLANYR_ID AND a.ST_ID=b.ST_ID AND b.YR=" + yr + @" " + strYrhfA.Replace("a.","b.") + @"
          ) a
          WHERE a.ISCANCEL=0

        ) a
        LEFT JOIN TBL_PLANYR_EVAL b ON a.PLANYR_ID = b.PLANYR_ID AND b.TP = 'month' AND b.INTERVAL IN(" + strMonthList + @")
        GROUP BY a.PLANYR_ID, a.ST_ID
      ) a
      LEFT JOIN TBL_AGREEMENT_MAIN b ON a.ST_ID=b.ST_ID AND a.PLANYR_ID=b.PLANYR_ID AND b.YR=" + yr + @"
      LEFT JOIN TBL_AGREEMENT_MAIN_IMPL c ON b.ID=c.AGREEMENT_MAIN_ID AND c.YRHF=" + yrhf + @"
      GROUP BY a.ST_ID      
      
    ) b ON a.ST_ID = b.ST_ID
    LEFT JOIN(
    
      SELECT 
        a.ST_ID, 
        COUNT(a.PLANYR_ID) as TUSGAI_PLANCNT, 
        SUM(NVL2(c.IMPL,1,0)) as TUSGAI_IMPLCNT, 
        NVL(ROUND(AVG((NVL(a.TUSGAI_PER2AVG,0)+NVL(c.PER1,0))),3),0) as TUSGAI_PERAVG
      FROM (
        SELECT a.PLANYR_ID, a.ST_ID, ROUND(ROUND(NVL(AVG(b.EVAL), 0), 3) * 0.4, 3) as TUSGAI_PER2AVG
        FROM (

          SELECT a.PLANYR_ID, a.ST_ID
          FROM (
            SELECT a.PLANYR_ID, a.ST_ID, NVL(b.ISCANCEL,0) as ISCANCEL
            FROM (
              SELECT b.PLANYR_ID, b.ST_ID 
              FROM ( 
                SELECT a.PLANYR_ID, a.ST_ID 
                FROM TBL_AGREEMENT_MAIN a
                INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                INNER JOIN hrdbuser.ST_STBR c ON a.ST_ID=c.STAFFS_ID AND c.ISACTIVE=1 AND c.POS_ID=2010301
                INNER JOIN hrdbuser.STN_MOVE d ON c.MOVE_ID=d.ID AND d.ACTIVE=1
                WHERE a.YR=" + yr + @" AND a.ISSPECIAL=1 " + strYrhfA + @" AND b.SUBMIT_D2=1
                GROUP BY a.PLANYR_ID, a.ST_ID
              ) a 
              INNER JOIN ( 
                SELECT PLANYR_ID, ST_ID 
                FROM (
                    SELECT b.PLANYR_ID, b.ST_ID
                    FROM ( 
                        SELECT a.PLANYR_ID, a.ST_ID 
                        FROM TBL_AGREEMENT_MAIN a
                        INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                        INNER JOIN hrdbuser.ST_STBR c ON a.ST_ID=c.STAFFS_ID AND c.ISACTIVE=1 AND c.POS_ID=2010301
                        INNER JOIN hrdbuser.STN_MOVE d ON c.MOVE_ID=d.ID AND d.ACTIVE=1
                        WHERE a.YR = " + yr + @" AND b.SUBMIT_D2=1
                    ) a
                    RIGHT JOIN (
                        SELECT a.ID as PLANYR_ID, d.ST_ID
                        FROM TBL_PLANYR a 
                        INNER JOIN TBL_FUNC_ACTION b ON a.FUNC_ACTION_ID=b.ID 
                        INNER JOIN TBL_FUNC_ACTION_BR c ON b.ID=c.FUNC_ACTION_ID
                        INNER JOIN (
                          SELECT a.STAFFS_ID as ST_ID, a.BRANCH_ID as BR_ID
                          FROM hrdbuser.ST_STBR a 
                          INNER JOIN hrdbuser.STN_MOVE b ON a.MOVE_ID=b.ID AND b.ACTIVE=1
                          WHERE a.ISACTIVE=1 AND a.POS_ID IN (2010301)
                          GROUP BY a.STAFFS_ID, a.BRANCH_ID
                        ) d ON c.BR_ID=d.BR_ID
                        WHERE a.YR=" + yr + @" AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1
                             " + strMnthLike.Replace("b.BUDGET", "a.BUDGET") + @"
                        GROUP BY a.ID, d.ST_ID
                    ) b ON a.PLANYR_ID=b.PLANYR_ID
                    WHERE a.PLANYR_ID is null
                    UNION ALL
                    SELECT a.PLANYR_ID, a.ST_ID 
                    FROM TBL_AGREEMENT_MAIN a
                    INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                    INNER JOIN hrdbuser.ST_STBR c ON a.ST_ID=c.STAFFS_ID AND c.ISACTIVE=1 AND c.POS_ID=2010301
                    INNER JOIN hrdbuser.STN_MOVE d ON c.MOVE_ID=d.ID AND d.ACTIVE=1
                    WHERE a.YR = " + yr + @" " + strYrhfA + @" AND b.SUBMIT_D2=1
                ) 
                GROUP BY PLANYR_ID, ST_ID
              ) b ON a.PLANYR_ID=b.PLANYR_ID AND a.ST_ID=b.ST_ID
            ) a
            LEFT JOIN TBL_AGREEMENT_MAIN b ON a.PLANYR_ID=b.PLANYR_ID AND a.ST_ID=b.ST_ID AND b.YR=" + yr + @" " + strYrhfA.Replace("a.","b.") + @"
          ) a
          WHERE a.ISCANCEL=0

        ) a
        LEFT JOIN TBL_PLANYR_EVAL b ON a.PLANYR_ID = b.PLANYR_ID AND b.TP = 'month' AND b.INTERVAL IN(" + strMonthList + @")
        GROUP BY a.PLANYR_ID, a.ST_ID
      ) a
      LEFT JOIN TBL_AGREEMENT_MAIN b ON a.ST_ID=b.ST_ID AND a.PLANYR_ID=b.PLANYR_ID AND b.YR=" + yr + @" 
      LEFT JOIN TBL_AGREEMENT_MAIN_IMPL c ON b.ID=c.AGREEMENT_MAIN_ID AND c.YRHF=" + yrhf + @"
      GROUP BY a.ST_ID 
      UNION ALL
      SELECT 
        a.ST_ID, 
        COUNT(a.PLANYR_ID) as TUSGAI_PLANCNT, 
        SUM(NVL2(c.IMPL,1,0)) as TUSGAI_IMPLCNT, 
        NVL(ROUND(AVG((NVL(a.TUSGAI_PER2AVG,0)+NVL(c.PER1,0))),3),0) as TUSGAI_PERAVG
      FROM (
        SELECT a.PLANYR_ID, a.ST_ID, ROUND(ROUND(NVL(AVG(b.EVAL), 0), 3) * 0.4, 3) as TUSGAI_PER2AVG
        FROM (

          SELECT a.PLANYR_ID, a.ST_ID
          FROM (
            SELECT a.PLANYR_ID, a.ST_ID, NVL(b.ISCANCEL,0) as ISCANCEL
            FROM (
              SELECT b.PLANYR_ID, b.ST_ID 
              FROM ( 
                SELECT a.PLANYR_ID, a.ST_ID 
                FROM TBL_AGREEMENT_MAIN a
                INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                INNER JOIN hrdbuser.ST_STBR c ON a.ST_ID=c.STAFFS_ID AND c.ISACTIVE=1 AND c.POS_ID=2010201
                INNER JOIN hrdbuser.STN_MOVE d ON c.MOVE_ID=d.ID AND d.ACTIVE=1
                WHERE a.YR=" + yr + @" AND a.ISSPECIAL=1 " + strYrhfA + @" AND b.SUBMIT_D2=1
                GROUP BY a.PLANYR_ID, a.ST_ID
              ) a 
              INNER JOIN ( 
                SELECT PLANYR_ID, ST_ID 
                FROM (
                    SELECT b.PLANYR_ID, b.ST_ID
                    FROM ( 
                        SELECT a.PLANYR_ID, a.ST_ID 
                        FROM TBL_AGREEMENT_MAIN a
                        INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                        INNER JOIN hrdbuser.ST_STBR c ON a.ST_ID=c.STAFFS_ID AND c.ISACTIVE=1 AND c.POS_ID=2010201
                        INNER JOIN hrdbuser.STN_MOVE d ON c.MOVE_ID=d.ID AND d.ACTIVE=1
                        WHERE a.YR = " + yr + @" AND b.SUBMIT_D2=1
                    ) a
                    RIGHT JOIN (
                        SELECT a.ID as PLANYR_ID, f.ST_ID
                        FROM TBL_PLANYR a 
                        INNER JOIN TBL_FUNC_ACTION b ON a.FUNC_ACTION_ID=b.ID 
                        INNER JOIN TBL_FUNC_ACTION_BR c ON b.ID=c.FUNC_ACTION_ID
                        INNER JOIN TBL_FUNC_STRAT d ON b.FUNC_STRAT_ID=d.ID
                        INNER JOIN (
                          SELECT a.STAFFS_ID as ST_ID, a.BRANCH_ID as BR_ID
                          FROM hrdbuser.ST_STBR a 
                          INNER JOIN hrdbuser.STN_MOVE b ON a.MOVE_ID=b.ID AND b.ACTIVE=1
                          WHERE a.ISACTIVE=1 AND a.POS_ID IN (2010201)
                          GROUP BY a.STAFFS_ID, a.BRANCH_ID
                        ) f ON d.BR_ID=f.BR_ID
                        WHERE a.YR=" + yr + @" AND a.IS_PLANED IN (1,0,null) AND a.SUBMIT_D2=1
                             " + strMnthLike.Replace("b.BUDGET", "a.BUDGET") + @"
                        GROUP BY a.ID, f.ST_ID
                    ) b ON a.PLANYR_ID=b.PLANYR_ID
                    WHERE a.PLANYR_ID is null
                    UNION ALL
                    SELECT a.PLANYR_ID, a.ST_ID 
                    FROM TBL_AGREEMENT_MAIN a
                    INNER JOIN TBL_PLANYR b ON a.PLANYR_ID=b.ID
                    INNER JOIN hrdbuser.ST_STBR c ON a.ST_ID=c.STAFFS_ID AND c.ISACTIVE=1 AND c.POS_ID=2010201
                    INNER JOIN hrdbuser.STN_MOVE d ON c.MOVE_ID=d.ID AND d.ACTIVE=1
                    WHERE a.YR = " + yr + @" " + strYrhfA + @" AND b.SUBMIT_D2=1
                ) 
                GROUP BY PLANYR_ID, ST_ID
              ) b ON a.PLANYR_ID=b.PLANYR_ID AND a.ST_ID=b.ST_ID
            ) a
            LEFT JOIN TBL_AGREEMENT_MAIN b ON a.PLANYR_ID=b.PLANYR_ID AND a.ST_ID=b.ST_ID AND b.YR=" + yr + @" " + strYrhfA.Replace("a.", "b.") + @"
          ) a
          WHERE a.ISCANCEL=0
 
        ) a
        LEFT JOIN TBL_PLANYR_EVAL b ON a.PLANYR_ID = b.PLANYR_ID AND b.TP = 'month' AND b.INTERVAL IN(" + strMonthList + @")
        GROUP BY a.PLANYR_ID, a.ST_ID
      ) a
      LEFT JOIN TBL_AGREEMENT_MAIN b ON a.ST_ID=b.ST_ID AND a.PLANYR_ID=b.PLANYR_ID AND b.YR=" + yr + @"
      LEFT JOIN TBL_AGREEMENT_MAIN_IMPL c ON b.ID=c.AGREEMENT_MAIN_ID AND c.YRHF=" + yrhf + @"
      GROUP BY a.ST_ID 
    
    ) c ON a.ST_ID = c.ST_ID
    LEFT JOIN(
      
      SELECT a.ST_ID, NVL(COUNT(a.SRV_QUESTION_ID),0) as TAB2PLANCNT, NVL(COUNT(a.SRV_QUESTION_ID),0) as TAB2IMPLCNT, NVL(ROUND(AVG(a.AVGPNT), 3), 0) as TAB2PER1AVG
      FROM (
        SELECT a.TRGT_ID as ST_ID, a.SRV_QUESTION_ID, NVL(ROUND(ROUND(AVG(b.PER), 3) * 0.2, 3), 0) as AVGPNT
        FROM TBL_SRV a
        INNER JOIN TBL_SRV_ANSWER b ON a.SRV_ANSWER_ID = b.ID
        INNER JOIN hrdbuser.ST_STBR c ON a.TRGT_ID=c.STAFFS_ID AND c.ISACTIVE=1 AND c.POS_ID=2010201
        INNER JOIN hrdbuser.STN_MOVE d ON c.MOVE_ID=d.ID AND d.ACTIVE=1
        WHERE a.SRV_TYPE_ID = 1 AND a.YR = " + yr + @" AND a.YR_HF = " + yrhf + @"
        GROUP BY a.TRGT_ID, a.SRV_QUESTION_ID
      ) a
      GROUP BY a.ST_ID
      UNION ALL
      SELECT a.ST_ID, NVL(COUNT(a.SRV_QUESTION_ID),0) as TAB2PLANCNT, NVL(COUNT(a.SRV_QUESTION_ID),0) as TAB2IMPLCNT, NVL(ROUND(AVG(a.AVGPNT), 3), 0) as TAB2PER1AVG
      FROM (
        SELECT a.TRGT_ID as ST_ID, a.SRV_QUESTION_ID, NVL(ROUND(ROUND(AVG(b.PER), 3) * 0.2, 3), 0) as AVGPNT
        FROM TBL_SRV a
        INNER JOIN TBL_SRV_ANSWER b ON a.SRV_ANSWER_ID = b.ID
        INNER JOIN hrdbuser.ST_STBR c ON a.TRGT_ID=c.STAFFS_ID AND c.ISACTIVE=1 AND c.POS_ID=2010301
        INNER JOIN hrdbuser.STN_MOVE d ON c.MOVE_ID=d.ID AND d.ACTIVE=1
        WHERE a.SRV_TYPE_ID = 2 AND a.YR = " + yr + @" AND a.YR_HF = " + yrhf + @"
        GROUP BY a.TRGT_ID, a.SRV_QUESTION_ID
      ) a
      GROUP BY a.ST_ID
      
    ) d ON a.ST_ID = d.ST_ID
    LEFT JOIN(
      
        SELECT a.ST_ID, CASE WHEN a.WORKDAY=0 THEN 0 ELSE NVL(ROUND(ROUND(((a.WORKDAY - (a.TASALSANDAYSUM + a.HOTSORSONDAYSUM + a.ERTDAYSUM)) / a.WORKDAY) * 100, 3) * 0.05, 3), 0) END as PER
        FROM(
        SELECT ST_ID,
            SUM(ISWORK) as WORKDAY,
            SUM(CHOLOODAY) as CHOLOODAYSUM,
            SUM(UWCHTEIDAY) as UWCHTEIDAYSUM,
            SUM(AMRALTDAY) as AMRALTDAYSUM,
            SUM(TOMILOLTDAY) as TOMILOLTDAYSUM,
            SUM(ISTASALSAN) as TASALSANDAYSUM,
            SUM(HOTSORSONMINUTE) as HOTSORSONMINUTESUM,
            SUM(HOTSORSONDAY) as HOTSORSONDAYSUM,
            SUM(ERTMINUTE) as ERTMINUTESUM,
            SUM(ERTDAY) as ERTDAYSUM,
            SUM(OROIMINUTE) as OROIMINUTESUM,
            SUM(OROIDAY) as OROIDAYSUM
        FROM(
        SELECT ST_ID, TP, DT, MINTM, MAXTM, ISWORK,
            CASE WHEN TP = 11 AND ISWORK = 1 OR TP = 12 THEN 1 ELSE 0 END as CHOLOODAY,
            CASE WHEN TP = 13 AND ISWORK = 1 THEN 1 ELSE 0 END as UWCHTEIDAY,
            CASE WHEN TP = 21 AND ISWORK = 1 THEN 1 ELSE 0 END as AMRALTDAY,
            CASE WHEN TP = 31 AND ISWORK = 1 THEN 1 ELSE 0 END as TOMILOLTDAY,
            CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM = MAXTM THEN 1 ELSE 0 END as ISTASALSAN,
            CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'hotsorson', 'minute') ELSE 0 END as HOTSORSONMINUTE,
            CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'hotsorson', 'day') ELSE 0 END as HOTSORSONDAY,
            CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'ert', 'minute') ELSE 0 END as ERTMINUTE,
            CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'ert', 'day') ELSE 0 END as ERTDAY,
            CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'oroi', 'minute') ELSE 0 END as OROIMINUTE,
            CASE WHEN TP = 0 AND ISWORK = 1 AND MINTM != MAXTM THEN IS_CHECK_TSAG(TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MINTM, 'yyyy-mm-dd hh24:mi:ss'), TO_DATE(TO_CHAR(DT, 'yyyy-mm-dd') || ' ' || MAXTM, 'yyyy-mm-dd hh24:mi:ss'), 'oroi', 'day') ELSE 0 END as OROIDAY
        FROM(
            SELECT a.ST_ID, a.TP, a.DT, a.MINTM, a.MAXTM, CASE WHEN b.DT is null THEN a.ISWORK ELSE 0 END as ISWORK
            FROM(
            SELECT a.ST_ID, NVL(b.TP, 0) as TP, a.DT, a.MINTM, a.MAXTM, a.ISWORK
            FROM(
                SELECT a.ST_ID, a.DT, NVL(b.TP, 0) as TP, NVL(b.MINTM, '00:00:00') as MINTM, NVL(b.MAXTM, '00:00:00') as MAXTM, a.ISWORK
                FROM(
                SELECT a.STAFFS_ID as ST_ID, a.DT, CASE WHEN b.DT IS NULL THEN a.ISWORK ELSE 1 END as ISWORK
                FROM(
                    SELECT a.ID, b.STAFFS_ID, c.FATHER_ID as GAZAR_ID, c.ID as HELTES_ID, a.DT, CASE WHEN(MOD(TO_CHAR(a.DT, 'J'), 7) + 1) = 6 OR(MOD(TO_CHAR(a.DT, 'J'), 7) + 1) = 7 THEN 0 ELSE 1 END as ISWORK
                    FROM(
                    SELECT a.ID, a.BEGINDT, a.ENDDT, b.DT
                    FROM(
                        SELECT a.ID,
                        CASE
                            WHEN TO_DATE(a.DT, 'YYYY-MM-DD') > TO_DATE('" + yr + "-" + month + @"-01', 'YYYY-MM-DD')
                            THEN a.DT
                            ELSE '" + yr + "-" + month + @"-01'
                        END as BEGINDT,
                        CASE
                            --WHEN TO_DATE(CASE WHEN c.ACTIVE = 0 THEN NVL(a.ENDDT, a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE, 'YYYY-MM-DD')) END, 'YYYY-MM-DD') < LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'YYYY-MM-DD'))
                            --THEN CASE WHEN c.ACTIVE = 0 THEN NVL(a.ENDDT, a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE, 'YYYY-MM-DD')) END ELSE TO_CHAR(LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'YYYY-MM-DD')), 'YYYY-MM-DD') END as ENDDT
                            WHEN TO_DATE(CASE WHEN c.ACTIVE = 0 THEN TO_CHAR((TO_DATE(NVL(a.ENDDT, a.DT), 'YYYY-MM-DD') - 1), 'YYYY-MM-DD') ELSE NVL(TO_CHAR((TO_DATE(a.ENDDT, 'YYYY-MM-DD') - 1), 'YYYY-MM-DD'), TO_CHAR(SYSDATE, 'YYYY-MM-DD')) END, 'YYYY-MM-DD') < LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'YYYY-MM-DD'))
                            THEN CASE WHEN c.ACTIVE = 0 THEN TO_CHAR((TO_DATE(NVL(a.ENDDT, a.DT), 'YYYY-MM-DD') - 1), 'YYYY-MM-DD') ELSE NVL(TO_CHAR((TO_DATE(a.ENDDT, 'YYYY-MM-DD') - 1), 'YYYY-MM-DD'), TO_CHAR(SYSDATE, 'YYYY-MM-DD')) END ELSE TO_CHAR(LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'YYYY-MM-DD')), 'YYYY-MM-DD') END as ENDDT
                        FROM hrdbuser.ST_STBR a
                        INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID = b.ID AND b.ISACTIVE = 1
                        INNER JOIN hrdbuser.STN_MOVE c ON a.MOVE_ID = c.ID
                        WHERE a.POS_ID != 2020102 AND c.ACTIVE = 1
                        AND ((
                            TO_DATE('" + yr + "-" + month + @"-01','YYYY-MM-DD') 
                            BETWEEN TO_DATE(a.DT,'YYYY-MM-DD') AND TO_DATE(CASE WHEN c.ACTIVE=0 THEN NVL(a.ENDDT,a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE,'YYYY-MM-DD')) END,'YYYY-MM-DD')
                            OR 
                            LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01','YYYY-MM-DD')) 
                            BETWEEN TO_DATE(a.DT,'YYYY-MM-DD') AND TO_DATE(CASE WHEN c.ACTIVE=0 THEN NVL(a.ENDDT,a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE,'YYYY-MM-DD')) END,'YYYY-MM-DD')
                            ) OR 
                            (
                                TO_DATE('" + yr + "-" + month + @"-01','YYYY-MM-DD')<TO_DATE(a.DT,'YYYY-MM-DD') AND LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01','YYYY-MM-DD'))>TO_DATE(a.DT,'YYYY-MM-DD')
                            ))
                    ) a, (
                        SELECT DT
                        FROM(
                        SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                        FROM DUAL
                        CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                        )
                        WHERE DT BETWEEN TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') AND SYSDATE AND MOD(TO_CHAR(DT, 'J'), 7) + 1 IN(1, 2, 3, 4, 5, 6, 7)
                    ) b
                    ) a
                    INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.ID
                    INNER JOIN hrdbuser.ST_BRANCH c ON b.BRANCH_ID = c.ID AND c.ISACTIVE = 1
                    WHERE a.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD') AND b.POS_ID != 2020102 AND b.STAFFS_ID IN (SELECT a.STAFFS_ID as ST_ID
                      FROM hrdbuser.ST_STBR a 
                      INNER JOIN hrdbuser.STN_MOVE b ON a.MOVE_ID=b.ID AND b.ACTIVE=1
                      WHERE a.ISACTIVE=1 AND a.POS_ID IN (2010201,2010301)
                      GROUP BY a.STAFFS_ID)
                ) a
                LEFT JOIN(
                    SELECT TO_DATE(HOLDATE, 'YYYY-MM-DD') as DT FROM hrdbuser.ST_HOLIDAYISWORK WHERE TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'YYYY')) = " + yr + @" AND TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'MM')) IN(" + strMonthList + @")
                ) b ON a.DT = b.DT
                ) a
                LEFT JOIN(
                SELECT a.MONTH, a.INOUT as TP, b.ID as ST_ID, TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd') as DT, TO_CHAR(MIN(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY || ' ' || a.HOUR || ':' || a.MINUTE || ':' || a.SECOND, 'yyyy-mm-dd hh24:mi:ss')), 'hh24:mi:ss') as MINTM, TO_CHAR(MAX(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY || ' ' || a.HOUR || ':' || a.MINUTE || ':' || a.SECOND, 'yyyy-mm-dd hh24:mi:ss')), 'hh24:mi:ss') as MAXTM
                FROM STN_TRCDLOG a
                INNER JOIN hrdbuser.ST_STAFFS b ON a.ENO = b.FINGERID
                INNER JOIN hrdbuser.ST_STBR c ON b.ID = c.STAFFS_ID
                INNER JOIN hrdbuser.STN_MOVE d ON c.MOVE_ID = d.ID
                INNER JOIN hrdbuser.ST_BRANCH f ON c.BRANCH_ID = f.ID AND f.ISACTIVE = 1
                WHERE c.POS_ID != 2020102 AND a.INOUT = 0 AND a.YEAR = " + yr + @" AND a.MONTH IN(" + strMonthList + @") AND TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd') BETWEEN TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') AND SYSDATE AND MOD(TO_CHAR(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd'), 'J'), 7) + 1 IN(1, 2, 3, 4, 5, 6, 7)
                GROUP BY a.MONTH, a.INOUT, b.ID, TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd')
                ) b ON a.ST_ID = b.ST_ID AND a.DT = b.DT
            ) a
            LEFT JOIN(
                SELECT DT, STAFFS_ID, MAX(TP) as TP
                FROM(
                    SELECT b.DT, a.STAFFS_ID, 11 as TP
                    FROM hrdbuser.ST_CHULUUDAYF3 a,
                    (
                    SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                    FROM DUAL
                    CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                    ) b
                    WHERE
                    b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
                    UNION ALL
                    SELECT b.DT, a.STAFFS_ID, 12 as TP
                    FROM hrdbuser.ST_CHULUUDAYT2 a,
                    (
                    SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                    FROM DUAL
                    CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                    ) b
                    WHERE
                    a.ISRECEIVED = 1 AND
                    b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
                    UNION ALL
                    SELECT b.DT, a.STAFFS_ID, 13 as TP
                    FROM hrdbuser.ST_CHULUUSICK a,
                    (
                    SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                    FROM DUAL
                    CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                    ) b
                    WHERE
                    b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
                    UNION ALL
                    SELECT b.DT, a.STAFFS_ID, 21 as TP
                    FROM hrdbuser.ST_AMRALT a,
                    (
                    SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                    FROM DUAL
                    CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                    ) b
                    WHERE
                    a.TZISRECEIVED = 1 AND
                    b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
                    UNION ALL
                    SELECT b.DT, a.STAFFS_ID, 31 as TP
                    FROM hrdbuser.ST_TOMILOLT_STAFFS a
                    INNER JOIN hrdbuser.ST_TOMILOLT c ON a.TOMILOLT_ID = c.ID,
                    (
                    SELECT(TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                    FROM DUAL
                    CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + month2 + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + month + @"-01', 'yyyy-mm-dd')
                    ) b
                    WHERE
                    b.DT BETWEEN TO_DATE(c.FROMDATE, 'YYYY-MM-DD') AND TO_DATE(c.TODATE, 'YYYY-MM-DD')
                )
                GROUP BY DT, STAFFS_ID
            ) b ON a.DT = b.DT AND a.ST_ID = b.STAFFS_ID
            ) a
            LEFT JOIN(
            SELECT TO_DATE('" + yr + @"-' || HOLMONTH || '-' || HOLDAY, 'YYYY-MM-DD') as DT
            FROM hrdbuser.ST_HOLIDAYOFFICIAL
            WHERE HOLMONTH IN(" + strMonthList + @")
            UNION ALL
            SELECT TO_DATE(HOLDATE, 'YYYY-MM-DD') as DT
            FROM hrdbuser.ST_HOLIDAYUNOFFICIAL
            WHERE TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'YYYY')) = " + yr + @" AND TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'MM')) IN(" + strMonthList + @")
            ) b ON a.DT = b.DT
            GROUP BY a.ST_ID, a.TP, a.DT, a.MINTM, a.MAXTM, CASE WHEN b.DT is null THEN a.ISWORK ELSE 0 END
        )
        )
        GROUP BY ST_ID
        ) a

    ) f ON a.ST_ID = f.ST_ID
    LEFT JOIN (
      SELECT a.TRGT_ID as ST_ID, NVL(ROUND(ROUND(AVG(b.PER), 3) * 0.05, 3), 0) as AVGPNT
      FROM TBL_SRV a
      INNER JOIN TBL_SRV_ANSWER b ON a.SRV_ANSWER_ID = b.ID
      INNER JOIN hrdbuser.ST_STBR c ON a.TRGT_ID=c.STAFFS_ID AND c.ISACTIVE=1
      INNER JOIN hrdbuser.STN_MOVE d ON c.MOVE_ID=d.ID AND d.ACTIVE=1
      WHERE a.SRV_TYPE_ID = 3 AND a.YR = " + yr + @" AND a.YR_HF = " + yrhf + @"
      GROUP BY a.TRGT_ID
    ) g ON a.ST_ID = g.ST_ID
    LEFT JOIN (
      SELECT a.ST_ID, NVL(COUNT(a.ID), 0) as TAB3PLANCNT, NVL(SUM(NVL2(a.TAB3IMPLCNT, 1, 0)), 0) as TAB3IMPLCNT, NVL(ROUND(AVG(a.PER1), 3), 0) as TAB3PER1AVG
      FROM(
        SELECT a.ST_ID, a.ID, NVL2(c.IMPL, 1, 0) as TAB3IMPLCNT, NVL(c.PER1, 0) as PER1
        FROM(
          SELECT a.ST_ID, a.ID, MAX(d.YRHF) as YRHF
          FROM TBL_AGREEMENT_OTHER a
          INNER JOIN hrdbuser.ST_STBR b ON a.ST_ID=b.STAFFS_ID AND b.ISACTIVE=1
          INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID=c.ID AND c.ACTIVE=1
          LEFT JOIN TBL_AGREEMENT_OTHER_IMPL d ON a.ID = d.AGREEMENT_OTHER_ID AND d.YRHF IN(" + strYrhfB + @")
          WHERE a.YR = " + yr + @" " + strYrhfA + @"
          GROUP BY a.ST_ID, a.ID
        ) a
        INNER JOIN TBL_AGREEMENT_OTHER b ON a.ID = b.ID
        LEFT JOIN TBL_AGREEMENT_OTHER_IMPL c ON a.ID = c.AGREEMENT_OTHER_ID AND a.YRHF = c.YRHF
        GROUP BY a.ST_ID, a.ID, NVL2(c.IMPL, 1, 0), NVL(c.PER1, 0)
      ) a
      GROUP BY a.ST_ID
    ) h ON a.ST_ID = h.ST_ID

    ) a
    WHERE a.ST_ID=" + stid;

                return myObj.OracleExecuteScalar(strQry).ToString();
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }


        //*****auditexternal.aspx*****//
        public string AuditexternalTab1Datatable(string yr)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (yr != "") yr = " WHERE YR=" + yr;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT ROWNUM as ROWNO, a.* FROM ( SELECT ID, NO, NAME, FILENAME, FILENAME2, YR, MNTH, WHONAME FROM TBL_AUDITEXTERNAL_REPORT" + yr + " ORDER BY YR DESC, MNTH DESC, NO ) a");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }

        public string AuditexternalTab2Datatable()
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT ID, NO, NAME FROM TBL_AUDITEXTERNAL_TYPE ORDER BY NO");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AuditinternalTab2GazarListForSelect2(string selectedList, string yr)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = "SELECT a.BR_ID, a.DOMAIN_ORG, a.BR_TYPE1, a.BR_NAME, NVL2(b.BR_ID,' selected=\"selected\"',null) as ISSELECTED FROM ( SELECT BR_ID, DOMAIN_ORG, BR_TYPE1, BR_NAME FROM TBL_BRANCH WHERE (BR_TYPE1=5 OR BR_TYPE1=3) AND BR_ID!=9911 AND YR=" + yr + " ORDER BY BR_TYPE1 ) a LEFT JOIN ( SELECT TO_NUMBER(BR_ID) as BR_ID FROM ( select regexp_substr('" + selectedList + "','[^,]+', 1, level) AS BR_ID from dual connect by regexp_substr('" + selectedList + "', '[^,]+', 1, level) is not null ) a ) b ON a.BR_ID=b.BR_ID ORDER BY a.BR_TYPE1";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }

        public string AuditexternalTab3Datatable(string yr, string reportid, string gazar, string cat)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (yr != "") yr = " AND c.YR=" + yr;
            if (reportid != "") reportid = " AND a.AUDITEXTERNAL_REPORT_ID=" + reportid;
            if (gazar != "") gazar = " AND b.BR_ID=" + gazar;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = "SELECT ROWNUM as ROWNO, a.* FROM ( SELECT a.ID, b.AUDITEXTERNAL_REPORT_ID, c.NO as AUDITEXTERNAL_REPORT_NO, c.NAME as AUDITEXTERNAL_REPORT_NAME, b.AUDITEXTERNAL_TYPE_ID, d.NO as AUDITEXTERNAL_TYPE_NO, d.NAME as AUDITEXTERNAL_TYPE_NAME, b.NO, b.NAME, b.DT, a.BRLISTID, a.BRLISTNAME, a.BRLISTYR, a.BRLISTID2, a.BRLISTNAME2, a.BRLISTYR2, b.FILENAME, CASE WHEN b.ISCLOSED=0 THEN 'checked=\"checked\"' ELSE null END as ISCLOSED, CASE WHEN b.SUCCESSDATE is null THEN 'Байнга' ELSE b.SUCCESSDATE END as SUCCESSDATE FROM (";
                strQry+= @"SELECT a.ID, a.BRLISTID, a.BRLISTNAME, a.BRLISTYR, NVL(RTRIM(xmlagg(xmlelement(e, b.BR_ID || ',') ORDER BY c.SORT).extract('//text()'), ','), 'none') as BRLISTID2, NVL(RTRIM(xmlagg(xmlelement(e, c.DOMAIN_ORG || ',') ORDER BY c.SORT).extract('//text()'), ','), 'none') as BRLISTNAME2, b.YR as BRLISTYR2
    FROM(
      SELECT a.ID, NVL(RTRIM(xmlagg(xmlelement(e, a.BR_ID || ',') ORDER BY b.SORT).extract('//text()'), ','), 'none') as BRLISTID, NVL(RTRIM(xmlagg(xmlelement(e, b.DOMAIN_ORG || ',') ORDER BY b.SORT).extract('//text()'), ','), 'none') as BRLISTNAME, b.YR as BRLISTYR
      FROM(
        SELECT ID, BR_ID
        FROM(
          SELECT a.ID, b.BR_ID
          FROM TBL_AUDITEXTERNAL_RECOMMEND a
          LEFT JOIN TBL_AUDITEXTERNAL_REC_BR b ON a.ID = b.AUDITEXTERNAL_RECOMMEND_ID
          INNER JOIN TBL_AUDITEXTERNAL_REPORT c ON a.AUDITEXTERNAL_REPORT_ID = c.ID
          WHERE a.AUDITEXTERNAL_CAT_ID="+cat + yr + reportid + gazar + @"
          GROUP BY a.ID, b.BR_ID
          UNION ALL
          SELECT a.ID, b.BR_ID
          FROM TBL_AUDITEXTERNAL_RECOMMEND a
          LEFT JOIN TBL_AUDITEXTERNAL_REC_BR2 b ON a.ID = b.AUDITEXTERNAL_RECOMMEND_ID
          INNER JOIN TBL_AUDITEXTERNAL_REPORT c ON a.AUDITEXTERNAL_REPORT_ID = c.ID
          WHERE a.AUDITEXTERNAL_CAT_ID=" + cat + yr + reportid + gazar + @"
          GROUP BY a.ID, b.BR_ID
        )
        GROUP BY ID, BR_ID
      ) a
      LEFT JOIN TBL_BRANCH b ON a.BR_ID = b.BR_ID AND b.YR IN(SELECT YR FROM TBL_SYSSET WHERE ACTIVE = 1)
      WHERE a.BR_ID IS NOT NULL
      GROUP BY a.ID, b.YR
    ) a
    LEFT JOIN TBL_AUDITEXTERNAL_REC_BR2 b ON a.ID = b.AUDITEXTERNAL_RECOMMEND_ID
    LEFT JOIN TBL_BRANCH c ON b.BR_ID = c.BR_ID AND b.YR = c.YR GROUP BY a.ID, a.BRLISTID, a.BRLISTNAME, a.BRLISTYR, b.YR
  ) a
  INNER JOIN TBL_AUDITEXTERNAL_RECOMMEND b ON a.ID = b.ID
  INNER JOIN TBL_AUDITEXTERNAL_REPORT c ON b.AUDITEXTERNAL_REPORT_ID = c.ID
  INNER JOIN TBL_AUDITEXTERNAL_TYPE d ON b.AUDITEXTERNAL_TYPE_ID = d.ID
  ORDER BY c.NO, d.NO, b.NO
) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AuditexternalTab3ReportListForDDL()
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT ID, NO, NAME FROM TBL_AUDITEXTERNAL_REPORT ORDER BY YR DESC, MNTH DESC");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AuditexternalTab3ReportListRecForDDL()
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT a.AUDITEXTERNAL_REPORT_ID, b.NO, b.NAME FROM ( SELECT AUDITEXTERNAL_REPORT_ID FROM TBL_AUDITEXTERNAL_RECOMMEND WHERE AUDITEXTERNAL_CAT_ID=1 GROUP BY AUDITEXTERNAL_REPORT_ID ) a INNER JOIN TBL_AUDITEXTERNAL_REPORT b ON a.AUDITEXTERNAL_REPORT_ID = b.ID ORDER BY b.YR DESC, b.MNTH DESC");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AuditexternalTab3ReportListAktForDDL()
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT a.AUDITEXTERNAL_REPORT_ID, b.NO, b.NAME FROM ( SELECT AUDITEXTERNAL_REPORT_ID FROM TBL_AUDITEXTERNAL_RECOMMEND WHERE AUDITEXTERNAL_CAT_ID=2 GROUP BY AUDITEXTERNAL_REPORT_ID ) a INNER JOIN TBL_AUDITEXTERNAL_REPORT b ON a.AUDITEXTERNAL_REPORT_ID = b.ID ORDER BY b.YR DESC, b.MNTH DESC");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AuditexternalTab3TypeListForDDL()
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT ID, NO, NAME FROM TBL_AUDITEXTERNAL_TYPE ORDER BY NO");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void AuditexternalTab3Delete(string P_ID)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                string[] ParamName = new string[1], ParamValue = new string[1];
                ParamName[0] = "P_ID";
                ParamValue[0] = P_ID;
                myObj.SP_OracleExecuteNonQuery("AUDITEXTERNAL_RECOMMEND_DELETE", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void AuditexternalTab3Insert(string P_AUDITEXTERNAL_REPORT_ID, string P_AUDITEXTERNAL_TYPE_ID, string P_NO, string P_NAME, string P_DT, string P_BRANCHLIST, string P_STAFFID, string P_SUCCESSDATE, string P_FILENAME, string P_AUDITEXTERNAL_CAT_ID, string P_ISCLOSED)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[11], ParamValue = new string[11];
                ParamName[0] = "P_AUDITEXTERNAL_REPORT_ID";
                ParamName[1] = "P_AUDITEXTERNAL_TYPE_ID";
                ParamName[2] = "P_NO";
                ParamName[3] = "P_NAME";
                ParamName[4] = "P_DT";
                ParamName[5] = "P_BRANCHLIST";
                ParamName[6] = "P_STAFFID";
                ParamName[7] = "P_SUCCESSDATE";
                ParamName[8] = "P_FILENAME";
                ParamName[9] = "P_AUDITEXTERNAL_CAT_ID";
                ParamName[10] = "P_ISCLOSED";
                ParamValue[0] = P_AUDITEXTERNAL_REPORT_ID;
                ParamValue[1] = P_AUDITEXTERNAL_TYPE_ID;
                ParamValue[2] = P_NO;
                ParamValue[3] = P_NAME;
                ParamValue[4] = P_DT;
                ParamValue[5] = P_BRANCHLIST;
                ParamValue[6] = P_STAFFID;
                ParamValue[7] = P_SUCCESSDATE;
                ParamValue[8] = P_FILENAME;
                ParamValue[9] = P_AUDITEXTERNAL_CAT_ID;
                ParamValue[10] = P_ISCLOSED;
                myObj.SP_OracleExecuteNonQuery("AUDITEXTERNAL_RECOMMEND_INSERT", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void AuditexternalTab3Update(string P_ID, string P_AUDITEXTERNAL_REPORT_ID, string P_AUDITEXTERNAL_TYPE_ID, string P_NO, string P_NAME, string P_DT, string P_BRANCHLIST, string P_BRANCHLIST2, string P_BRANCHLIST2YR, string P_STAFFID, string P_SUCCESSDATE, string P_FILENAME, string P_AUDITEXTERNAL_CAT_ID, string P_ISCLOSED)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[14], ParamValue = new string[14];
                ParamName[0] = "P_ID";
                ParamName[1] = "P_AUDITEXTERNAL_REPORT_ID";
                ParamName[2] = "P_AUDITEXTERNAL_TYPE_ID";
                ParamName[3] = "P_NO";
                ParamName[4] = "P_NAME";
                ParamName[5] = "P_DT";
                ParamName[6] = "P_BRANCHLIST";
                ParamName[7] = "P_BRANCHLIST2";
                ParamName[8] = "P_BRANCHLIST2YR";
                ParamName[9] = "P_STAFFID";
                ParamName[10] = "P_SUCCESSDATE";
                ParamName[11] = "P_FILENAME";
                ParamName[12] = "P_AUDITEXTERNAL_CAT_ID";
                ParamName[13] = "P_ISCLOSED";
                ParamValue[0] = P_ID;
                ParamValue[1] = P_AUDITEXTERNAL_REPORT_ID;
                ParamValue[2] = P_AUDITEXTERNAL_TYPE_ID;
                ParamValue[3] = P_NO;
                ParamValue[4] = P_NAME;
                ParamValue[5] = P_DT;
                ParamValue[6] = P_BRANCHLIST;
                ParamValue[7] = P_BRANCHLIST2;
                ParamValue[8] = P_BRANCHLIST2YR;
                ParamValue[9] = P_STAFFID;
                ParamValue[10] = P_SUCCESSDATE;
                ParamValue[11] = P_FILENAME;
                ParamValue[12] = P_AUDITEXTERNAL_CAT_ID;
                ParamValue[13] = P_ISCLOSED;
                myObj.SP_OracleExecuteNonQuery("AUDITEXTERNAL_RECOMMEND_UPDATE", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        

        public string AuditexternalTab5Datatable(string yr, string qrtr, string reportid, string gazar, string cat)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (reportid != "") reportid = " AND c.AUDITEXTERNAL_REPORT_ID=" + reportid;
            if (gazar != "") gazar = " AND b.BR_ID=" + gazar;
            string strQry = "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                strQry = @"SELECT ROWNUM as ROWNO, a.* 
  FROM ( 
    SELECT
      a.ID, 
      c.AUDITEXTERNAL_REPORT_ID, 
      d.NO as AUDITEXTERNAL_REPORT_NO, 
      d.NAME as AUDITEXTERNAL_REPORT_NAME, 
      b.AUDITEXTERNAL_RECOMMEND_ID, 
      c.NO as AUDITEXTERNAL_REC_NO, 
      c.NAME as AUDITEXTERNAL_REC_NAME, 
      c.DT as AUDITEXTERNAL_REC_DT, 
      CASE WHEN c.SUCCESSDATE is null THEN 'Байнга' ELSE c.SUCCESSDATE END as AUDITEXTERNAL_REC_SUCCESSDATE, 
      b.NO,
      b.NAME, 
      a.BRLISTNAME, NVL2(f.IMPL,'glyphicon-check txt-color-green','glyphicon-edit txt-color-red') as ISIMPL, f.EVAL, f.FILENAME as FILENAME_IMPL
    FROM (
      SELECT a.ID, NVL(RTRIM(xmlagg(xmlelement(e, f.DOMAIN_ORG || ',') ORDER BY f.SORT).extract('//text()'), ','), 'none') as BRLISTNAME
      FROM TBL_AUDITEXTERNAL_PLAN a
      INNER JOIN TBL_AUDITEXTERNAL_RECOMMEND c ON a.AUDITEXTERNAL_RECOMMEND_ID = c.ID
      INNER JOIN TBL_AUDITEXTERNAL_REPORT d ON c.AUDITEXTERNAL_REPORT_ID = d.ID
      LEFT JOIN TBL_AUDITEXTERNAL_PLAN_BR b ON a.ID = b.AUDITEXTERNAL_PLAN_ID
      LEFT JOIN TBL_BRANCH f ON b.BR_ID = f.BR_ID AND TO_NUMBER(TO_CHAR(a.CREATED_DATE, 'YYYY')) = f.YR
      WHERE c.AUDITEXTERNAL_CAT_ID=" + cat + @" AND c.ISCLOSED=0 AND d.YR<="+yr+reportid+gazar+@"
      GROUP BY a.ID
    ) a
    INNER JOIN TBL_AUDITEXTERNAL_PLAN b ON a.ID = b.ID
    INNER JOIN TBL_AUDITEXTERNAL_RECOMMEND c ON b.AUDITEXTERNAL_RECOMMEND_ID = c.ID
    INNER JOIN TBL_AUDITEXTERNAL_REPORT d ON c.AUDITEXTERNAL_REPORT_ID = d.ID
    LEFT JOIN TBL_AUDITEXTERNAL_PLAN_IMPL f ON a.ID=f.AUDITEXTERNAL_PLAN_ID AND f.YR="+yr+" AND f.QRTR="+qrtr+@"
    ORDER BY d.NO, c.NO, b.NO, b.NAME 
  ) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AuditexternalTab6Datatable(string yr, string qrtr, string reportid, string gazar, string cat)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strPrevYear = "", strPrevQrtr = "";
            string strQry="";
            if (qrtr == "1")
            {
                strPrevQrtr = "4";
                strPrevYear = (Convert.ToInt32(yr) - 1).ToString();
            }
            else
            {
                strPrevQrtr = (Convert.ToInt32(qrtr) - 1).ToString();
                strPrevYear = yr;
            }
            if (reportid != "") reportid = " AND c.AUDITEXTERNAL_REPORT_ID=" + reportid;
            if (gazar != "") gazar = " AND b.BR_ID=" + gazar;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                strQry = @"SELECT ROWNUM as ROWNO, a.* 
FROM ( 
SELECT
      a.ID, 
      c.AUDITEXTERNAL_REPORT_ID, 
      d.NO as AUDITEXTERNAL_REPORT_NO, 
      d.NAME as AUDITEXTERNAL_REPORT_NAME, 
      b.AUDITEXTERNAL_RECOMMEND_ID, 
      c.NO as AUDITEXTERNAL_REC_NO, 
      c.NAME as AUDITEXTERNAL_REC_NAME, 
      c.DT as AUDITEXTERNAL_REC_DT, 
      CASE WHEN c.SUCCESSDATE is null THEN 'Байнга' ELSE c.SUCCESSDATE END as AUDITEXTERNAL_REC_SUCCESSDATE, 
      b.NO,
      b.NAME, 
      a.BRLISTNAME, f.IMPL, f.EVAL, NVL(TO_CHAR(g.EVAL),'-') as PREVEVAL
    FROM (
      SELECT a.ID, NVL(RTRIM(xmlagg(xmlelement(e, f.DOMAIN_ORG || ',') ORDER BY f.SORT).extract('//text()'), ','), 'none') as BRLISTNAME
      FROM TBL_AUDITEXTERNAL_PLAN a
      INNER JOIN TBL_AUDITEXTERNAL_RECOMMEND c ON a.AUDITEXTERNAL_RECOMMEND_ID = c.ID
      INNER JOIN TBL_AUDITEXTERNAL_REPORT d ON c.AUDITEXTERNAL_REPORT_ID = d.ID
      LEFT JOIN TBL_AUDITEXTERNAL_PLAN_BR b ON a.ID = b.AUDITEXTERNAL_PLAN_ID
      LEFT JOIN TBL_BRANCH f ON b.BR_ID = f.BR_ID AND TO_NUMBER(TO_CHAR(a.CREATED_DATE, 'YYYY')) = f.YR
      WHERE c.AUDITEXTERNAL_CAT_ID=" + cat + @" AND c.ISCLOSED=0 AND d.YR<=" + yr + reportid + gazar + @"
      GROUP BY a.ID
    ) a
    INNER JOIN TBL_AUDITEXTERNAL_PLAN b ON a.ID = b.ID
    INNER JOIN TBL_AUDITEXTERNAL_RECOMMEND c ON b.AUDITEXTERNAL_RECOMMEND_ID = c.ID
    INNER JOIN TBL_AUDITEXTERNAL_REPORT d ON c.AUDITEXTERNAL_REPORT_ID = d.ID
    LEFT JOIN TBL_AUDITEXTERNAL_PLAN_IMPL f ON a.ID=f.AUDITEXTERNAL_PLAN_ID AND f.YR=" + yr + " AND f.QRTR=" + qrtr + @"
    LEFT JOIN TBL_AUDITEXTERNAL_PLAN_IMPL g ON a.ID=g.AUDITEXTERNAL_PLAN_ID AND g.YR=" + strPrevYear + " AND g.QRTR=" + strPrevQrtr + @"
    ORDER BY d.NO, c.NO, b.NO, b.NAME
) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        
        
        public string AuditexternalTab9t1Datatable(string yr, string qrtr, string turul)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strQry = "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                if (turul == "1")
                {
                    strQry = @"SELECT 
  b.NO||'. '||b.NAME as TYPE_NAME, 
  COUNT(a.AUDITEXTERNAL_RECOMMEND_ID) as AUDITEXTERNAL_RECOMMEND_CNT, 
  NVL(TO_CHAR(SUM(a.EVAL100)),'-') as EVAL100, 
  NVL(TO_CHAR(SUM(a.EVAL90)),'-') as EVAL90,
  NVL(TO_CHAR(SUM(a.EVAL80)),'-') as EVAL80,
  NVL(TO_CHAR(SUM(a.EVAL70)),'-') as EVAL70,
  NVL(TO_CHAR(SUM(a.EVAL50)),'-') as EVAL50, 
  NVL(TO_CHAR(SUM(a.EVAL30)),'-') as EVAL30, 
  NVL(TO_CHAR(SUM(a.EVAL10)),'-') as EVAL10, 
  NVL(TO_CHAR(SUM(a.EVAL0)),'-') as EVAL0, 
  NVL(TO_CHAR(SUM(a.EVALNONE)),'-') as EVALNONE, 
  ROUND((((NVL(SUM(a.EVAL100),0)*100)+ (NVL(SUM(a.EVAL90),0)*90)+ (NVL(SUM(a.EVAL80),0)*80)+ (NVL(SUM(a.EVAL70),0)*70)+ (NVL(SUM(a.EVAL50),0)*50)+ (NVL(SUM(a.EVAL30),0)*30)+ (NVL(SUM(a.EVAL10),0)*10)+ (NVL(SUM(a.EVAL0),0)*0))/CASE WHEN ((NVL(SUM(a.EVAL100),0)+NVL(SUM(a.EVAL90),0)+NVL(SUM(a.EVAL80),0)+NVL(SUM(a.EVAL70),0)+NVL(SUM(a.EVAL50),0)+NVL(SUM(a.EVAL30),0)+NVL(SUM(a.EVAL10),0)+NVL(SUM(a.EVAL0),0))*100)=0 THEN 1 ELSE ((NVL(SUM(a.EVAL100),0)+NVL(SUM(a.EVAL90),0)+NVL(SUM(a.EVAL80),0)+NVL(SUM(a.EVAL70),0)+NVL(SUM(a.EVAL50),0)+NVL(SUM(a.EVAL30),0)+NVL(SUM(a.EVAL10),0)+NVL(SUM(a.EVAL0),0))*100) END)*100,1) as PERAVG 
FROM ( 
  SELECT 
    a.AUDITEXTERNAL_REPORT_ID, 
    a.AUDITEXTERNAL_RECOMMEND_ID, 
    CASE WHEN a.AVGEVAL>90 AND a.AVGEVAL<=100 THEN 1 END as EVAL100, 
    CASE WHEN a.AVGEVAL>80 AND a.AVGEVAL<=90 THEN 1 END as EVAL90, 
    CASE WHEN a.AVGEVAL>70 AND a.AVGEVAL<=80 THEN 1 END as EVAL80, 
    CASE WHEN a.AVGEVAL>50 AND a.AVGEVAL<=70 THEN 1 END as EVAL70, 
    CASE WHEN a.AVGEVAL>30 AND a.AVGEVAL<=50 THEN 1 END as EVAL50, 
    CASE WHEN a.AVGEVAL>10 AND a.AVGEVAL<=30 THEN 1 END as EVAL30, 
    CASE WHEN a.AVGEVAL>0 AND a.AVGEVAL<=10 THEN 1 END as EVAL10, 
    CASE WHEN a.AVGEVAL=0 THEN 1 END as EVAL0, 
    CASE WHEN a.AVGEVAL is null THEN 1 END as EVALNONE 
  FROM (
    SELECT 
      a.AUDITEXTERNAL_REPORT_ID, 
      a.ID as AUDITEXTERNAL_RECOMMEND_ID, 
      AVG(c.EVAL) as AVGEVAL
    FROM TBL_AUDITEXTERNAL_RECOMMEND a 
    INNER JOIN TBL_AUDITEXTERNAL_PLAN b ON a.ID=b.AUDITEXTERNAL_RECOMMEND_ID
    INNER JOIN TBL_AUDITEXTERNAL_PLAN_IMPL c ON b.ID=c.AUDITEXTERNAL_PLAN_ID AND c.YR="+yr+@" AND c.QRTR="+qrtr+@" AND c.IMPL IS NOT NULL 
    WHERE a.AUDITEXTERNAL_CAT_ID=1 AND a.ISCLOSED=0 OR c.EVAL IS NOT NULL 
    GROUP BY a.AUDITEXTERNAL_REPORT_ID, a.ID
  ) a
) a 
INNER JOIN TBL_AUDITEXTERNAL_REPORT b ON a.AUDITEXTERNAL_REPORT_ID=b.ID 
GROUP BY b.NO||'. '||b.NAME 
ORDER BY b.NO||'. '||b.NAME";
                }
                else if (turul == "2")
                {
                    strQry = @"SELECT 
  b.NO||'. '||b.NAME as TYPE_NAME, 
  COUNT(a.AUDITEXTERNAL_RECOMMEND_ID) as AUDITEXTERNAL_RECOMMEND_CNT, 
  NVL(TO_CHAR(SUM(a.EVAL100)),'-') as EVAL100, 
  NVL(TO_CHAR(SUM(a.EVAL90)),'-') as EVAL90,
  NVL(TO_CHAR(SUM(a.EVAL80)),'-') as EVAL80,
  NVL(TO_CHAR(SUM(a.EVAL70)),'-') as EVAL70,
  NVL(TO_CHAR(SUM(a.EVAL50)),'-') as EVAL50, 
  NVL(TO_CHAR(SUM(a.EVAL30)),'-') as EVAL30, 
  NVL(TO_CHAR(SUM(a.EVAL10)),'-') as EVAL10, 
  NVL(TO_CHAR(SUM(a.EVAL0)),'-') as EVAL0, 
  NVL(TO_CHAR(SUM(a.EVALNONE)),'-') as EVALNONE, 
  ROUND((((NVL(SUM(a.EVAL100),0)*100)+ (NVL(SUM(a.EVAL90),0)*90)+ (NVL(SUM(a.EVAL80),0)*80)+ (NVL(SUM(a.EVAL70),0)*70)+ (NVL(SUM(a.EVAL50),0)*50)+ (NVL(SUM(a.EVAL30),0)*30)+ (NVL(SUM(a.EVAL10),0)*10)+ (NVL(SUM(a.EVAL0),0)*0))/CASE WHEN ((NVL(SUM(a.EVAL100),0)+NVL(SUM(a.EVAL90),0)+NVL(SUM(a.EVAL80),0)+NVL(SUM(a.EVAL70),0)+NVL(SUM(a.EVAL50),0)+NVL(SUM(a.EVAL30),0)+NVL(SUM(a.EVAL10),0)+NVL(SUM(a.EVAL0),0))*100)=0 THEN 1 ELSE ((NVL(SUM(a.EVAL100),0)+NVL(SUM(a.EVAL90),0)+NVL(SUM(a.EVAL80),0)+NVL(SUM(a.EVAL70),0)+NVL(SUM(a.EVAL50),0)+NVL(SUM(a.EVAL30),0)+NVL(SUM(a.EVAL10),0)+NVL(SUM(a.EVAL0),0))*100) END)*100,1) as PERAVG 
FROM ( 
  SELECT 
    a.AUDITEXTERNAL_REPORT_ID, 
    a.AUDITEXTERNAL_RECOMMEND_ID, 
    CASE WHEN a.AVGEVAL>90 AND a.AVGEVAL<=100 THEN 1 END as EVAL100, 
    CASE WHEN a.AVGEVAL>80 AND a.AVGEVAL<=90 THEN 1 END as EVAL90, 
    CASE WHEN a.AVGEVAL>70 AND a.AVGEVAL<=80 THEN 1 END as EVAL80, 
    CASE WHEN a.AVGEVAL>50 AND a.AVGEVAL<=70 THEN 1 END as EVAL70, 
    CASE WHEN a.AVGEVAL>30 AND a.AVGEVAL<=50 THEN 1 END as EVAL50, 
    CASE WHEN a.AVGEVAL>10 AND a.AVGEVAL<=30 THEN 1 END as EVAL30, 
    CASE WHEN a.AVGEVAL>0 AND a.AVGEVAL<=10 THEN 1 END as EVAL10, 
    CASE WHEN a.AVGEVAL=0 THEN 1 END as EVAL0, 
    CASE WHEN a.AVGEVAL is null THEN 1 END as EVALNONE 
  FROM (
    SELECT 
      a.AUDITEXTERNAL_REPORT_ID, 
      a.ID as AUDITEXTERNAL_RECOMMEND_ID, 
      AVG(c.EVAL) as AVGEVAL
    FROM TBL_AUDITEXTERNAL_RECOMMEND a 
    INNER JOIN TBL_AUDITEXTERNAL_PLAN b ON a.ID=b.AUDITEXTERNAL_RECOMMEND_ID
    INNER JOIN TBL_AUDITEXTERNAL_PLAN_IMPL c ON b.ID=c.AUDITEXTERNAL_PLAN_ID AND c.YR=" + yr + @" AND c.QRTR=" + qrtr + @" AND c.IMPL IS NOT NULL 
    WHERE a.AUDITEXTERNAL_CAT_ID=2 AND a.ISCLOSED=0 OR c.EVAL IS NOT NULL 
    GROUP BY a.AUDITEXTERNAL_REPORT_ID, a.ID
  ) a
) a 
INNER JOIN TBL_AUDITEXTERNAL_REPORT b ON a.AUDITEXTERNAL_REPORT_ID=b.ID 
GROUP BY b.NO||'. '||b.NAME 
ORDER BY b.NO||'. '||b.NAME";
                }
                else if (turul == "3")
                {
                    strQry = @"SELECT 
  b.NO||'. '||b.NAME as TYPE_NAME, 
  COUNT(a.AUDITEXTERNAL_RECOMMEND_ID) as AUDITEXTERNAL_RECOMMEND_CNT, 
  NVL(TO_CHAR(SUM(a.EVAL100)),'-') as EVAL100, 
  NVL(TO_CHAR(SUM(a.EVAL90)),'-') as EVAL90,
  NVL(TO_CHAR(SUM(a.EVAL80)),'-') as EVAL80,
  NVL(TO_CHAR(SUM(a.EVAL70)),'-') as EVAL70,
  NVL(TO_CHAR(SUM(a.EVAL50)),'-') as EVAL50, 
  NVL(TO_CHAR(SUM(a.EVAL30)),'-') as EVAL30, 
  NVL(TO_CHAR(SUM(a.EVAL10)),'-') as EVAL10, 
  NVL(TO_CHAR(SUM(a.EVAL0)),'-') as EVAL0, 
  NVL(TO_CHAR(SUM(a.EVALNONE)),'-') as EVALNONE, 
  ROUND((((NVL(SUM(a.EVAL100),0)*100)+ (NVL(SUM(a.EVAL90),0)*90)+ (NVL(SUM(a.EVAL80),0)*80)+ (NVL(SUM(a.EVAL70),0)*70)+ (NVL(SUM(a.EVAL50),0)*50)+ (NVL(SUM(a.EVAL30),0)*30)+ (NVL(SUM(a.EVAL10),0)*10)+ (NVL(SUM(a.EVAL0),0)*0))/CASE WHEN ((NVL(SUM(a.EVAL100),0)+NVL(SUM(a.EVAL90),0)+NVL(SUM(a.EVAL80),0)+NVL(SUM(a.EVAL70),0)+NVL(SUM(a.EVAL50),0)+NVL(SUM(a.EVAL30),0)+NVL(SUM(a.EVAL10),0)+NVL(SUM(a.EVAL0),0))*100)=0 THEN 1 ELSE ((NVL(SUM(a.EVAL100),0)+NVL(SUM(a.EVAL90),0)+NVL(SUM(a.EVAL80),0)+NVL(SUM(a.EVAL70),0)+NVL(SUM(a.EVAL50),0)+NVL(SUM(a.EVAL30),0)+NVL(SUM(a.EVAL10),0)+NVL(SUM(a.EVAL0),0))*100) END)*100,1) as PERAVG 
FROM ( 
  SELECT 
    a.AUDITEXTERNAL_REPORT_ID, 
    a.ID as AUDITEXTERNAL_RECOMMEND_ID, 
    CASE WHEN c.EVAL=100 THEN 1 END as EVAL100,
    CASE WHEN c.EVAL=90 THEN 1 END as EVAL90, 
    CASE WHEN c.EVAL=80 THEN 1 END as EVAL80, 
    CASE WHEN c.EVAL=70 THEN 1 END as EVAL70, 
    CASE WHEN c.EVAL=50 THEN 1 END as EVAL50, 
    CASE WHEN c.EVAL=30 THEN 1 END as EVAL30, 
    CASE WHEN c.EVAL=10 THEN 1 END as EVAL10, 
    CASE WHEN c.EVAL=0 THEN 1 END as EVAL0, 
    CASE WHEN c.EVAL is null THEN 1 END as EVALNONE 
  FROM TBL_AUDITEXTERNAL_RECOMMEND a 
  INNER JOIN TBL_AUDITEXTERNAL_PLAN b ON a.ID=b.AUDITEXTERNAL_RECOMMEND_ID
  INNER JOIN TBL_AUDITEXTERNAL_PLAN_IMPL c ON b.ID=c.AUDITEXTERNAL_PLAN_ID AND c.YR="+yr+ @" AND c.QRTR=" + qrtr + @" AND c.IMPL IS NOT NULL 
  WHERE a.AUDITEXTERNAL_CAT_ID=1 AND a.ISCLOSED=0 OR c.EVAL IS NOT NULL 
) a 
INNER JOIN TBL_AUDITEXTERNAL_REPORT b ON a.AUDITEXTERNAL_REPORT_ID=b.ID 
GROUP BY b.NO||'. '||b.NAME 
ORDER BY b.NO||'. '||b.NAME";
                }
                else if (turul == "4")
                {
                    strQry = @"SELECT 
  b.NO||'. '||b.NAME as TYPE_NAME, 
  COUNT(a.AUDITEXTERNAL_RECOMMEND_ID) as AUDITEXTERNAL_RECOMMEND_CNT, 
  NVL(TO_CHAR(SUM(a.EVAL100)),'-') as EVAL100, 
  NVL(TO_CHAR(SUM(a.EVAL90)),'-') as EVAL90,
  NVL(TO_CHAR(SUM(a.EVAL80)),'-') as EVAL80,
  NVL(TO_CHAR(SUM(a.EVAL70)),'-') as EVAL70,
  NVL(TO_CHAR(SUM(a.EVAL50)),'-') as EVAL50, 
  NVL(TO_CHAR(SUM(a.EVAL30)),'-') as EVAL30, 
  NVL(TO_CHAR(SUM(a.EVAL10)),'-') as EVAL10, 
  NVL(TO_CHAR(SUM(a.EVAL0)),'-') as EVAL0, 
  NVL(TO_CHAR(SUM(a.EVALNONE)),'-') as EVALNONE, 
  ROUND((((NVL(SUM(a.EVAL100),0)*100)+ (NVL(SUM(a.EVAL90),0)*90)+ (NVL(SUM(a.EVAL80),0)*80)+ (NVL(SUM(a.EVAL70),0)*70)+ (NVL(SUM(a.EVAL50),0)*50)+ (NVL(SUM(a.EVAL30),0)*30)+ (NVL(SUM(a.EVAL10),0)*10)+ (NVL(SUM(a.EVAL0),0)*0))/CASE WHEN ((NVL(SUM(a.EVAL100),0)+NVL(SUM(a.EVAL90),0)+NVL(SUM(a.EVAL80),0)+NVL(SUM(a.EVAL70),0)+NVL(SUM(a.EVAL50),0)+NVL(SUM(a.EVAL30),0)+NVL(SUM(a.EVAL10),0)+NVL(SUM(a.EVAL0),0))*100)=0 THEN 1 ELSE ((NVL(SUM(a.EVAL100),0)+NVL(SUM(a.EVAL90),0)+NVL(SUM(a.EVAL80),0)+NVL(SUM(a.EVAL70),0)+NVL(SUM(a.EVAL50),0)+NVL(SUM(a.EVAL30),0)+NVL(SUM(a.EVAL10),0)+NVL(SUM(a.EVAL0),0))*100) END)*100,1) as PERAVG 
FROM ( 
  SELECT 
    a.AUDITEXTERNAL_REPORT_ID, 
    a.ID as AUDITEXTERNAL_RECOMMEND_ID, 
    CASE WHEN c.EVAL=100 THEN 1 END as EVAL100,
    CASE WHEN c.EVAL=90 THEN 1 END as EVAL90, 
    CASE WHEN c.EVAL=80 THEN 1 END as EVAL80, 
    CASE WHEN c.EVAL=70 THEN 1 END as EVAL70, 
    CASE WHEN c.EVAL=50 THEN 1 END as EVAL50, 
    CASE WHEN c.EVAL=30 THEN 1 END as EVAL30, 
    CASE WHEN c.EVAL=10 THEN 1 END as EVAL10, 
    CASE WHEN c.EVAL=0 THEN 1 END as EVAL0, 
    CASE WHEN c.EVAL is null THEN 1 END as EVALNONE 
  FROM TBL_AUDITEXTERNAL_RECOMMEND a 
  INNER JOIN TBL_AUDITEXTERNAL_PLAN b ON a.ID=b.AUDITEXTERNAL_RECOMMEND_ID
  INNER JOIN TBL_AUDITEXTERNAL_PLAN_IMPL c ON b.ID=c.AUDITEXTERNAL_PLAN_ID AND c.YR=" + yr + @" AND c.QRTR=" + qrtr + @" AND c.IMPL IS NOT NULL 
  WHERE a.AUDITEXTERNAL_CAT_ID=2 AND a.ISCLOSED=0 OR c.EVAL IS NOT NULL 
) a 
INNER JOIN TBL_AUDITEXTERNAL_REPORT b ON a.AUDITEXTERNAL_REPORT_ID=b.ID 
GROUP BY b.NO||'. '||b.NAME 
ORDER BY b.NO||'. '||b.NAME";
                }
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AuditexternalTab9t2Datatable(string yr, string qrtr, string turul)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strQry = "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                if (turul == "1")
                {
                    strQry = @"SELECT 
  b.BR_NAME, 
  COUNT(a.AUDITEXTERNAL_RECOMMEND_ID) as AUDITEXTERNAL_RECOMMEND_CNT, 
  NVL(TO_CHAR(SUM(a.EVAL100)), '-') as EVAL100, 
  NVL(TO_CHAR(SUM(a.EVAL90)), '-') as EVAL90, 
  NVL(TO_CHAR(SUM(a.EVAL80)), '-') as EVAL80, 
  NVL(TO_CHAR(SUM(a.EVAL70)), '-') as EVAL70, 
  NVL(TO_CHAR(SUM(a.EVAL50)), '-') as EVAL50, 
  NVL(TO_CHAR(SUM(a.EVAL30)), '-') as EVAL30, 
  NVL(TO_CHAR(SUM(a.EVAL10)), '-') as EVAL10, 
  NVL(TO_CHAR(SUM(a.EVAL0)), '-') as EVAL0, 
  NVL(TO_CHAR(SUM(a.EVALNONE)), '-') as EVALNONE, 
  ROUND((((NVL(SUM(a.EVAL100), 0) * 100) + (NVL(SUM(a.EVAL90), 0) * 90) + (NVL(SUM(a.EVAL80), 0) * 80) + (NVL(SUM(a.EVAL70), 0) * 70) + (NVL(SUM(a.EVAL50), 0) * 50) + (NVL(SUM(a.EVAL30), 0) * 30) + (NVL(SUM(a.EVAL10), 0) * 10) + (NVL(SUM(a.EVAL0), 0) * 0)) / CASE WHEN((NVL(SUM(a.EVAL100), 0) + NVL(SUM(a.EVAL90), 0) + NVL(SUM(a.EVAL80), 0) + NVL(SUM(a.EVAL70), 0) + NVL(SUM(a.EVAL50), 0) + NVL(SUM(a.EVAL30), 0) + NVL(SUM(a.EVAL10), 0) + NVL(SUM(a.EVAL0), 0)) * 100) = 0 THEN 1 ELSE((NVL(SUM(a.EVAL100), 0) + NVL(SUM(a.EVAL90), 0) + NVL(SUM(a.EVAL80), 0) + NVL(SUM(a.EVAL70), 0) + NVL(SUM(a.EVAL50), 0) + NVL(SUM(a.EVAL30), 0) + NVL(SUM(a.EVAL10), 0) + NVL(SUM(a.EVAL0), 0)) * 100) END) * 100,1) as PERAVG, 
  b.SORT
FROM(
  SELECT
    a.BR_ID,
    a.AUDITEXTERNAL_RECOMMEND_ID,
    CASE WHEN a.AVGEVAL > 90 AND a.AVGEVAL <= 100 THEN 1 END as EVAL100,
    CASE WHEN a.AVGEVAL > 80 AND a.AVGEVAL <= 90 THEN 1 END as EVAL90,
    CASE WHEN a.AVGEVAL > 70 AND a.AVGEVAL <= 80 THEN 1 END as EVAL80,
    CASE WHEN a.AVGEVAL > 50 AND a.AVGEVAL <= 70 THEN 1 END as EVAL70,
    CASE WHEN a.AVGEVAL > 30 AND a.AVGEVAL <= 50 THEN 1 END as EVAL50,
    CASE WHEN a.AVGEVAL > 10 AND a.AVGEVAL <= 30 THEN 1 END as EVAL30,
    CASE WHEN a.AVGEVAL > 0 AND a.AVGEVAL <= 10 THEN 1 END as EVAL10,
    CASE WHEN a.AVGEVAL = 0 THEN 1 END as EVAL0,
    CASE WHEN a.AVGEVAL is null THEN 1 END as EVALNONE
  FROM(
    SELECT
      d.BR_ID,
      a.ID as AUDITEXTERNAL_RECOMMEND_ID,
      AVG(c.EVAL) as AVGEVAL
    FROM TBL_AUDITEXTERNAL_RECOMMEND a
    INNER JOIN TBL_AUDITEXTERNAL_PLAN b ON a.ID = b.AUDITEXTERNAL_RECOMMEND_ID
    INNER JOIN TBL_AUDITEXTERNAL_PLAN_IMPL c ON b.ID = c.AUDITEXTERNAL_PLAN_ID AND c.YR = " + yr + @" AND c.QRTR = " + qrtr + @" AND c.IMPL IS NOT NULL
    INNER JOIN TBL_AUDITEXTERNAL_PLAN_BR d ON b.ID = d.AUDITEXTERNAL_PLAN_ID
    WHERE a.AUDITEXTERNAL_CAT_ID = 1 AND a.ISCLOSED = 0 OR c.EVAL IS NOT NULL
    GROUP BY d.BR_ID, a.ID
  ) a
) a
INNER JOIN TBL_BRANCH b ON a.BR_ID = b.BR_ID AND b.YR = " + yr + @"
GROUP BY b.BR_NAME, b.SORT
ORDER BY b.SORT";
                }
                else if (turul == "3")
                {
                    strQry = @"SELECT 
  b.BR_NAME, 
  COUNT(a.AUDITEXTERNAL_RECOMMEND_ID) as AUDITEXTERNAL_RECOMMEND_CNT, 
  NVL(TO_CHAR(SUM(a.EVAL100)),'-') as EVAL100, 
  NVL(TO_CHAR(SUM(a.EVAL90)),'-') as EVAL90, 
  NVL(TO_CHAR(SUM(a.EVAL80)),'-') as EVAL80, 
  NVL(TO_CHAR(SUM(a.EVAL70)),'-') as EVAL70, 
  NVL(TO_CHAR(SUM(a.EVAL50)),'-') as EVAL50, 
  NVL(TO_CHAR(SUM(a.EVAL30)),'-') as EVAL30, 
  NVL(TO_CHAR(SUM(a.EVAL10)),'-') as EVAL10, 
  NVL(TO_CHAR(SUM(a.EVAL0)),'-') as EVAL0, 
  NVL(TO_CHAR(SUM(a.EVALNONE)),'-') as EVALNONE, 
  ROUND((((NVL(SUM(a.EVAL100),0)*100)+ (NVL(SUM(a.EVAL90),0)*90)+ (NVL(SUM(a.EVAL80),0)*80)+ (NVL(SUM(a.EVAL70),0)*70)+ (NVL(SUM(a.EVAL50),0)*50)+ (NVL(SUM(a.EVAL30),0)*30)+ (NVL(SUM(a.EVAL10),0)*10)+ (NVL(SUM(a.EVAL0),0)*0))/CASE WHEN ((NVL(SUM(a.EVAL100),0)+NVL(SUM(a.EVAL90),0)+NVL(SUM(a.EVAL80),0)+NVL(SUM(a.EVAL70),0)+NVL(SUM(a.EVAL50),0)+NVL(SUM(a.EVAL30),0)+NVL(SUM(a.EVAL10),0)+NVL(SUM(a.EVAL0),0))*100)=0 THEN 1 ELSE ((NVL(SUM(a.EVAL100),0)+NVL(SUM(a.EVAL90),0)+NVL(SUM(a.EVAL80),0)+NVL(SUM(a.EVAL70),0)+NVL(SUM(a.EVAL50),0)+NVL(SUM(a.EVAL30),0)+NVL(SUM(a.EVAL10),0)+NVL(SUM(a.EVAL0),0))*100) END)*100,1) as PERAVG, 
  b.SORT 
FROM( 
  SELECT 
    d.BR_ID, 
    a.ID as AUDITEXTERNAL_RECOMMEND_ID, 
    CASE WHEN c.EVAL=100 THEN 1 END as EVAL100,
    CASE WHEN c.EVAL=90 THEN 1 END as EVAL90, 
    CASE WHEN c.EVAL=80 THEN 1 END as EVAL80, 
    CASE WHEN c.EVAL=70 THEN 1 END as EVAL70, 
    CASE WHEN c.EVAL=50 THEN 1 END as EVAL50, 
    CASE WHEN c.EVAL=30 THEN 1 END as EVAL30, 
    CASE WHEN c.EVAL=10 THEN 1 END as EVAL10, 
    CASE WHEN c.EVAL=0 THEN 1 END as EVAL0, 
    CASE WHEN c.EVAL is null THEN 1 END as EVALNONE 
  FROM TBL_AUDITEXTERNAL_RECOMMEND a 
  INNER JOIN TBL_AUDITEXTERNAL_PLAN b ON a.ID=b.AUDITEXTERNAL_RECOMMEND_ID
  INNER JOIN TBL_AUDITEXTERNAL_PLAN_IMPL c ON b.ID=c.AUDITEXTERNAL_PLAN_ID AND c.YR="+yr+ @" AND c.QRTR=" + qrtr + @" AND c.IMPL IS NOT NULL 
  INNER JOIN TBL_AUDITEXTERNAL_PLAN_BR d ON b.ID = d.AUDITEXTERNAL_PLAN_ID 
  WHERE a.AUDITEXTERNAL_CAT_ID=1 AND a.ISCLOSED=0 OR c.EVAL IS NOT NULL
) a 
INNER JOIN TBL_BRANCH b ON a.BR_ID = b.BR_ID AND b.YR = " + yr + @" 
GROUP BY b.BR_NAME, b.SORT 
ORDER BY b.SORT";
                }
                else if (turul == "2")
                {
                    strQry = @"SELECT 
  b.BR_NAME, 
  COUNT(a.AUDITEXTERNAL_RECOMMEND_ID) as AUDITEXTERNAL_RECOMMEND_CNT, 
  NVL(TO_CHAR(SUM(a.EVAL100)), '-') as EVAL100, 
  NVL(TO_CHAR(SUM(a.EVAL90)), '-') as EVAL90, 
  NVL(TO_CHAR(SUM(a.EVAL80)), '-') as EVAL80, 
  NVL(TO_CHAR(SUM(a.EVAL70)), '-') as EVAL70, 
  NVL(TO_CHAR(SUM(a.EVAL50)), '-') as EVAL50, 
  NVL(TO_CHAR(SUM(a.EVAL30)), '-') as EVAL30, 
  NVL(TO_CHAR(SUM(a.EVAL10)), '-') as EVAL10, 
  NVL(TO_CHAR(SUM(a.EVAL0)), '-') as EVAL0, 
  NVL(TO_CHAR(SUM(a.EVALNONE)), '-') as EVALNONE, 
  ROUND((((NVL(SUM(a.EVAL100), 0) * 100) + (NVL(SUM(a.EVAL90), 0) * 90) + (NVL(SUM(a.EVAL80), 0) * 80) + (NVL(SUM(a.EVAL70), 0) * 70) + (NVL(SUM(a.EVAL50), 0) * 50) + (NVL(SUM(a.EVAL30), 0) * 30) + (NVL(SUM(a.EVAL10), 0) * 10) + (NVL(SUM(a.EVAL0), 0) * 0)) / CASE WHEN((NVL(SUM(a.EVAL100), 0) + NVL(SUM(a.EVAL90), 0) + NVL(SUM(a.EVAL80), 0) + NVL(SUM(a.EVAL70), 0) + NVL(SUM(a.EVAL50), 0) + NVL(SUM(a.EVAL30), 0) + NVL(SUM(a.EVAL10), 0) + NVL(SUM(a.EVAL0), 0)) * 100) = 0 THEN 1 ELSE((NVL(SUM(a.EVAL100), 0) + NVL(SUM(a.EVAL90), 0) + NVL(SUM(a.EVAL80), 0) + NVL(SUM(a.EVAL70), 0) + NVL(SUM(a.EVAL50), 0) + NVL(SUM(a.EVAL30), 0) + NVL(SUM(a.EVAL10), 0) + NVL(SUM(a.EVAL0), 0)) * 100) END) * 100,1) as PERAVG, 
  b.SORT
FROM(
  SELECT
    a.BR_ID,
    a.AUDITEXTERNAL_RECOMMEND_ID,
    CASE WHEN a.AVGEVAL > 90 AND a.AVGEVAL <= 100 THEN 1 END as EVAL100,
    CASE WHEN a.AVGEVAL > 80 AND a.AVGEVAL <= 90 THEN 1 END as EVAL90,
    CASE WHEN a.AVGEVAL > 70 AND a.AVGEVAL <= 80 THEN 1 END as EVAL80,
    CASE WHEN a.AVGEVAL > 50 AND a.AVGEVAL <= 70 THEN 1 END as EVAL70,
    CASE WHEN a.AVGEVAL > 30 AND a.AVGEVAL <= 50 THEN 1 END as EVAL50,
    CASE WHEN a.AVGEVAL > 10 AND a.AVGEVAL <= 30 THEN 1 END as EVAL30,
    CASE WHEN a.AVGEVAL > 0 AND a.AVGEVAL <= 10 THEN 1 END as EVAL10,
    CASE WHEN a.AVGEVAL = 0 THEN 1 END as EVAL0,
    CASE WHEN a.AVGEVAL is null THEN 1 END as EVALNONE
  FROM(
    SELECT
      d.BR_ID,
      a.ID as AUDITEXTERNAL_RECOMMEND_ID,
      AVG(c.EVAL) as AVGEVAL
    FROM TBL_AUDITEXTERNAL_RECOMMEND a
    INNER JOIN TBL_AUDITEXTERNAL_PLAN b ON a.ID = b.AUDITEXTERNAL_RECOMMEND_ID
    INNER JOIN TBL_AUDITEXTERNAL_PLAN_IMPL c ON b.ID = c.AUDITEXTERNAL_PLAN_ID AND c.YR = " + yr + @" AND c.QRTR = " + qrtr + @" AND c.IMPL IS NOT NULL
    INNER JOIN TBL_AUDITEXTERNAL_PLAN_BR d ON b.ID = d.AUDITEXTERNAL_PLAN_ID
    WHERE a.AUDITEXTERNAL_CAT_ID = 2 AND a.ISCLOSED = 0 OR c.EVAL IS NOT NULL
    GROUP BY d.BR_ID, a.ID
  ) a
) a
INNER JOIN TBL_BRANCH b ON a.BR_ID = b.BR_ID AND b.YR = " + yr + @"
GROUP BY b.BR_NAME, b.SORT
ORDER BY b.SORT";
                }
                else if (turul == "4")
                {
                    strQry = @"SELECT 
  b.BR_NAME, 
  COUNT(a.AUDITEXTERNAL_RECOMMEND_ID) as AUDITEXTERNAL_RECOMMEND_CNT, 
  NVL(TO_CHAR(SUM(a.EVAL100)),'-') as EVAL100, 
  NVL(TO_CHAR(SUM(a.EVAL90)),'-') as EVAL90, 
  NVL(TO_CHAR(SUM(a.EVAL80)),'-') as EVAL80, 
  NVL(TO_CHAR(SUM(a.EVAL70)),'-') as EVAL70, 
  NVL(TO_CHAR(SUM(a.EVAL50)),'-') as EVAL50, 
  NVL(TO_CHAR(SUM(a.EVAL30)),'-') as EVAL30, 
  NVL(TO_CHAR(SUM(a.EVAL10)),'-') as EVAL10, 
  NVL(TO_CHAR(SUM(a.EVAL0)),'-') as EVAL0, 
  NVL(TO_CHAR(SUM(a.EVALNONE)),'-') as EVALNONE, 
  ROUND((((NVL(SUM(a.EVAL100),0)*100)+ (NVL(SUM(a.EVAL90),0)*90)+ (NVL(SUM(a.EVAL80),0)*80)+ (NVL(SUM(a.EVAL70),0)*70)+ (NVL(SUM(a.EVAL50),0)*50)+ (NVL(SUM(a.EVAL30),0)*30)+ (NVL(SUM(a.EVAL10),0)*10)+ (NVL(SUM(a.EVAL0),0)*0))/CASE WHEN ((NVL(SUM(a.EVAL100),0)+NVL(SUM(a.EVAL90),0)+NVL(SUM(a.EVAL80),0)+NVL(SUM(a.EVAL70),0)+NVL(SUM(a.EVAL50),0)+NVL(SUM(a.EVAL30),0)+NVL(SUM(a.EVAL10),0)+NVL(SUM(a.EVAL0),0))*100)=0 THEN 1 ELSE ((NVL(SUM(a.EVAL100),0)+NVL(SUM(a.EVAL90),0)+NVL(SUM(a.EVAL80),0)+NVL(SUM(a.EVAL70),0)+NVL(SUM(a.EVAL50),0)+NVL(SUM(a.EVAL30),0)+NVL(SUM(a.EVAL10),0)+NVL(SUM(a.EVAL0),0))*100) END)*100,1) as PERAVG, 
  b.SORT 
FROM( 
  SELECT 
    d.BR_ID, 
    a.ID as AUDITEXTERNAL_RECOMMEND_ID, 
    CASE WHEN c.EVAL=100 THEN 1 END as EVAL100,
    CASE WHEN c.EVAL=90 THEN 1 END as EVAL90, 
    CASE WHEN c.EVAL=80 THEN 1 END as EVAL80, 
    CASE WHEN c.EVAL=70 THEN 1 END as EVAL70, 
    CASE WHEN c.EVAL=50 THEN 1 END as EVAL50, 
    CASE WHEN c.EVAL=30 THEN 1 END as EVAL30, 
    CASE WHEN c.EVAL=10 THEN 1 END as EVAL10, 
    CASE WHEN c.EVAL=0 THEN 1 END as EVAL0, 
    CASE WHEN c.EVAL is null THEN 1 END as EVALNONE 
  FROM TBL_AUDITEXTERNAL_RECOMMEND a 
  INNER JOIN TBL_AUDITEXTERNAL_PLAN b ON a.ID=b.AUDITEXTERNAL_RECOMMEND_ID
  INNER JOIN TBL_AUDITEXTERNAL_PLAN_IMPL c ON b.ID=c.AUDITEXTERNAL_PLAN_ID AND c.YR=" + yr + @" AND c.QRTR=" + qrtr + @" AND c.IMPL IS NOT NULL 
  INNER JOIN TBL_AUDITEXTERNAL_PLAN_BR d ON b.ID = d.AUDITEXTERNAL_PLAN_ID 
  WHERE a.AUDITEXTERNAL_CAT_ID=2 AND a.ISCLOSED=0 OR c.EVAL IS NOT NULL
) a 
INNER JOIN TBL_BRANCH b ON a.BR_ID = b.BR_ID AND b.YR = " + yr + @" 
GROUP BY b.BR_NAME, b.SORT 
ORDER BY b.SORT";
                }
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AuditexternalTab9t3Datatable(string yr, string qrtr, string reportid, string gazar, string isimpl, string turul)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strQry = "";
            if (reportid != "") reportid = " AND b.AUDITEXTERNAL_REPORT_ID=" + reportid;
            if (gazar != "") gazar = " AND b.BR_ID=" + gazar;
            string isimpljoin = "LEFT";
            if (isimpl != "")
            {
                if (isimpl == "1")
                {
                    isimpljoin = "INNER";
                    isimpl = " AND f.IMPL IS NOT NULL";
                }
                else isimpl = " AND f.IMPL IS NULL";
            }
            strQry = @"SELECT ROWNUM as ROWNO, a.* 
FROM ( 
  SELECT 
    a.ID, 
    b.AUDITEXTERNAL_REPORT_ID, 
    c.NO as AUDITEXTERNAL_REPORT_NO, 
    c.NAME as AUDITEXTERNAL_REPORT_NAME, 
    b.AUDITEXTERNAL_TYPE_ID, 
    d.NO as AUDITEXTERNAL_TYPE_NO, 
    d.NAME as AUDITEXTERNAL_TYPE_NAME, 
    b.NO as AUDITEXTERNAL_RECOMMEND_NO, 
    b.NAME as AUDITEXTERNAL_RECOMMEND_NAME, 
    b.DT, 
    g.NO,
    g.NAME, 
    a.BRLISTID, 
    a.BRLISTNAME, 
    a.BRLISTYR, 
    b.FILENAME, 
    f.IMPL, 
    f.EVAL 
  FROM ( 
    SELECT 
      a.ID, 
      NVL(RTRIM(xmlagg (xmlelement (e, b.BR_ID || ',') ORDER BY d.SORT).extract('//text()'), ','),'none') as BRLISTID, 
      NVL(RTRIM(xmlagg (xmlelement (e, ' '||d.DOMAIN_ORG || ',') ORDER BY d.SORT).extract('//text()'), ','),'none') as BRLISTNAME, 
      TO_CHAR(a.CREATED_DATE,'YYYY') as BRLISTYR 
    FROM TBL_AUDITEXTERNAL_PLAN a 
    LEFT JOIN TBL_AUDITEXTERNAL_PLAN_BR b ON a.ID=b.AUDITEXTERNAL_PLAN_ID 
    INNER JOIN TBL_AUDITEXTERNAL_RECOMMEND f ON a.AUDITEXTERNAL_RECOMMEND_ID=f.ID
    INNER JOIN TBL_AUDITEXTERNAL_REPORT c ON f.AUDITEXTERNAL_REPORT_ID=c.ID 
    LEFT JOIN TBL_BRANCH d ON b.BR_ID=d.BR_ID AND TO_NUMBER(TO_CHAR(a.CREATED_DATE,'YYYY'))=d.YR 
    WHERE f.AUDITEXTERNAL_CAT_ID="+turul + gazar + @"
    GROUP BY a.ID, TO_CHAR(a.CREATED_DATE,'YYYY') 
  ) a 
  INNER JOIN TBL_AUDITEXTERNAL_PLAN g ON a.ID=g.ID
  INNER JOIN TBL_AUDITEXTERNAL_RECOMMEND b ON g.AUDITEXTERNAL_RECOMMEND_ID=b.ID 
  INNER JOIN TBL_AUDITEXTERNAL_REPORT c ON b.AUDITEXTERNAL_REPORT_ID = c.ID 
  INNER JOIN TBL_AUDITEXTERNAL_TYPE d ON b.AUDITEXTERNAL_TYPE_ID = d.ID 
  " + isimpljoin + @" JOIN TBL_AUDITEXTERNAL_PLAN_IMPL f ON a.ID=f.AUDITEXTERNAL_PLAN_ID AND f.YR=" + yr + @" AND f.QRTR=" + qrtr + isimpl + @" 
  WHERE (b.ISCLOSED=0 OR f.EVAL IS NOT NULL)" + reportid + @"
  ORDER BY f.EVAL DESC, c.NO, d.NO, b.NO 
) a";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        
        public string AuditexternalTab9t5Datatable(string yr, string qrtr, string reportid, string gazar, string isimpl, string turul)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strQry = "";
            if (reportid != "") reportid = " AND b.AUDITEXTERNAL_REPORT_ID=" + reportid;
            if (gazar != "") gazar = " AND b.BR_ID=" + gazar;
            string isimpljoin = "LEFT";
            if (isimpl != "")
            {
                if (isimpl == "1")
                {
                    isimpljoin = "INNER";
                    isimpl = " AND f.IMPL IS NOT NULL";
                }
                else isimpl = " AND f.IMPL IS NULL";
            }
            strQry = @"SELECT ROWNUM as ROWNO, a.* 
FROM ( 
  SELECT 
    a.ID, 
    b.AUDITEXTERNAL_REPORT_ID, 
    c.NO as AUDITEXTERNAL_REPORT_NO, 
    c.NAME as AUDITEXTERNAL_REPORT_NAME, 
    b.AUDITEXTERNAL_TYPE_ID, 
    d.NO as AUDITEXTERNAL_TYPE_NO, 
    d.NAME as AUDITEXTERNAL_TYPE_NAME, 
    b.NO as AUDITEXTERNAL_RECOMMEND_NO, 
    b.NAME as AUDITEXTERNAL_RECOMMEND_NAME, 
    b.DT, 
    g.NO,
    g.NAME, 
    a.BRLISTID, 
    a.BRLISTNAME, 
    a.BRLISTYR, 
    b.FILENAME, 
    f.IMPL, 
    f.EVAL 
  FROM ( 
    SELECT 
      a.ID, 
      NVL(RTRIM(xmlagg (xmlelement (e, b.BR_ID || ',') ORDER BY d.SORT).extract('//text()'), ','),'none') as BRLISTID, 
      NVL(RTRIM(xmlagg (xmlelement (e, ' '||d.DOMAIN_ORG || ',') ORDER BY d.SORT).extract('//text()'), ','),'none') as BRLISTNAME, 
      TO_CHAR(a.CREATED_DATE,'YYYY') as BRLISTYR 
    FROM TBL_AUDITEXTERNAL_PLAN a 
    LEFT JOIN TBL_AUDITEXTERNAL_PLAN_BR b ON a.ID=b.AUDITEXTERNAL_PLAN_ID 
    INNER JOIN TBL_AUDITEXTERNAL_RECOMMEND f ON a.AUDITEXTERNAL_RECOMMEND_ID=f.ID
    INNER JOIN TBL_AUDITEXTERNAL_REPORT c ON f.AUDITEXTERNAL_REPORT_ID=c.ID 
    LEFT JOIN TBL_BRANCH d ON b.BR_ID=d.BR_ID AND TO_NUMBER(TO_CHAR(a.CREATED_DATE,'YYYY'))=d.YR 
    WHERE f.AUDITEXTERNAL_CAT_ID=" + turul + gazar + @"
    GROUP BY a.ID, TO_CHAR(a.CREATED_DATE,'YYYY') 
  ) a 
  INNER JOIN TBL_AUDITEXTERNAL_PLAN g ON a.ID=g.ID
  INNER JOIN TBL_AUDITEXTERNAL_RECOMMEND b ON g.AUDITEXTERNAL_RECOMMEND_ID=b.ID 
  INNER JOIN TBL_AUDITEXTERNAL_REPORT c ON b.AUDITEXTERNAL_REPORT_ID = c.ID 
  INNER JOIN TBL_AUDITEXTERNAL_TYPE d ON b.AUDITEXTERNAL_TYPE_ID = d.ID 
  " + isimpljoin + @" JOIN TBL_AUDITEXTERNAL_PLAN_IMPL f ON a.ID=f.AUDITEXTERNAL_PLAN_ID AND f.YR=" + yr + @" AND f.QRTR=" + qrtr + isimpl + @" 
  WHERE (b.ISCLOSED=0 OR f.EVAL IS NOT NULL)" + reportid + @"
  ORDER BY c.NO, d.NO, b.NO 
) a";

            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }

        public string AuditexternalTab1t5Datatable(string yr, string reportid, string gazar, string cat)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (yr != "") yr = " AND (d.YR=" + yr+ " OR c.ISCLOSED != 1)";
            if (reportid != "") reportid = " AND c.AUDITEXTERNAL_REPORT_ID=" + reportid;
            if (gazar != "") gazar = " AND b.BR_ID=" + gazar;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = @"SELECT ROWNUM as ROWNO, a.* 
  FROM(
    SELECT
      a.ID,
      c.AUDITEXTERNAL_REPORT_ID,
      d.NO as AUDITEXTERNAL_REPORT_NO,
      d.NAME as AUDITEXTERNAL_REPORT_NAME,
      b.AUDITEXTERNAL_RECOMMEND_ID,
      c.NO as AUDITEXTERNAL_REC_NO,
      c.NAME as AUDITEXTERNAL_REC_NAME,
      c.DT as AUDITEXTERNAL_REC_DT,
      CASE WHEN c.SUCCESSDATE is null THEN 'Байнга' ELSE c.SUCCESSDATE END as AUDITEXTERNAL_REC_SUCCESSDATE,
      b.NO,
      b.NAME,
      a.BRLISTID,
      a.BRLISTNAME
    FROM(
      SELECT a.ID, NVL(RTRIM(xmlagg(xmlelement(e, b.BR_ID || ',') ORDER BY f.SORT).extract('//text()'), ','), 'none') as BRLISTID, NVL(RTRIM(xmlagg(xmlelement(e, f.DOMAIN_ORG || ',') ORDER BY f.SORT).extract('//text()'), ','), 'none') as BRLISTNAME
      FROM TBL_AUDITEXTERNAL_PLAN a
      LEFT JOIN TBL_AUDITEXTERNAL_PLAN_BR b ON a.ID = b.AUDITEXTERNAL_PLAN_ID
      INNER JOIN TBL_AUDITEXTERNAL_RECOMMEND c ON a.AUDITEXTERNAL_RECOMMEND_ID = c.ID
      INNER JOIN TBL_AUDITEXTERNAL_REPORT d ON c.AUDITEXTERNAL_REPORT_ID = d.ID
      LEFT JOIN TBL_BRANCH f ON b.BR_ID = f.BR_ID AND TO_NUMBER(TO_CHAR(a.CREATED_DATE, 'YYYY')) = f.YR
      WHERE c.ISCLOSED!=1 AND c.AUDITEXTERNAL_CAT_ID = " + cat+ yr+ reportid+ gazar + @"
      GROUP BY a.ID, TO_CHAR(a.CREATED_DATE, 'YYYY')
    ) a
    INNER JOIN TBL_AUDITEXTERNAL_PLAN b ON a.ID = b.ID
    INNER JOIN TBL_AUDITEXTERNAL_RECOMMEND c ON b.AUDITEXTERNAL_RECOMMEND_ID = c.ID
    INNER JOIN TBL_AUDITEXTERNAL_REPORT d ON c.AUDITEXTERNAL_REPORT_ID = d.ID
    ORDER BY d.NO, c.NO, b.NO, b.NAME
  ) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AuditexternalTab1t5GazarListForSelect2(string selectedList, string recid)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = "SELECT a.BR_ID, a.DOMAIN_ORG, CASE WHEN a.BR_TYPE1=3 THEN 'Дотоод нэгжүүд' WHEN a.BR_TYPE1=5 THEN 'Бусад' END as BR_TYPE1, a.BR_NAME, NVL2(b.BR_ID,' selected=\"selected\"',null) as ISSELECTED  FROM( SELECT a.BR_ID, b.DOMAIN_ORG, b.BR_TYPE1, b.BR_NAME FROM( SELECT b.BR_ID, TO_NUMBER(TO_CHAR(a.CREATED_DATE, 'YYYY')) as YR FROM TBL_AUDITEXTERNAL_RECOMMEND a INNER JOIN TBL_AUDITEXTERNAL_REC_BR b ON a.ID = b.AUDITEXTERNAL_RECOMMEND_ID WHERE a.ID = " + recid + @" UNION ALL SELECT BR_ID, YR FROM TBL_AUDITEXTERNAL_REC_BR2 WHERE AUDITEXTERNAL_RECOMMEND_ID = " + recid + @" ) a INNER JOIN TBL_BRANCH b ON a.BR_ID = b.BR_ID AND a.YR = b.YR ORDER BY b.BR_TYPE1 ) a LEFT JOIN( SELECT TO_NUMBER(BR_ID) as BR_ID FROM( select regexp_substr('" + selectedList + "', '[^,]+', 1, level) AS BR_ID from dual connect by regexp_substr('" + selectedList + "', '[^,]+', 1, level) is not null ) a ) b ON a.BR_ID = b.BR_ID ORDER BY a.BR_TYPE1";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AuditexternalTab1t5RecommendListForDDL(string reportid, string cat)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT ID, NO, NAME FROM TBL_AUDITEXTERNAL_RECOMMEND WHERE AUDITEXTERNAL_REPORT_ID=" + reportid + " AND AUDITEXTERNAL_CAT_ID="+cat+" AND ISCLOSED=0 ORDER BY NO, NAME");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void AuditexternalTab1t5Delete(string P_ID)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                string[] ParamName = new string[1], ParamValue = new string[1];
                ParamName[0] = "P_ID";
                ParamValue[0] = P_ID;
                myObj.SP_OracleExecuteNonQuery("AUDITEXTERNAL_PLAN_DELETE", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void AuditexternalTab1t5Insert(string P_AUDITEXTERNAL_RECOMMEND_ID, string P_NO, string P_NAME, string P_BRANCHLIST, string P_STAFFID)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[5], ParamValue = new string[5];
                ParamName[0] = "P_AUDITEXTERNAL_RECOMMEND_ID";
                ParamName[1] = "P_NO";
                ParamName[2] = "P_NAME";
                ParamName[3] = "P_BRANCHLIST";
                ParamName[4] = "P_STAFFID";
                ParamValue[0] = P_AUDITEXTERNAL_RECOMMEND_ID;
                ParamValue[1] = P_NO;
                ParamValue[2] = P_NAME;
                ParamValue[3] = P_BRANCHLIST;
                ParamValue[4] = P_STAFFID;
                myObj.SP_OracleExecuteNonQuery("AUDITEXTERNAL_PLAN_INSERT", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void AuditexternalTab1t5Update(string P_ID, string P_AUDITEXTERNAL_RECOMMEND_ID, string P_NO, string P_NAME, string P_BRANCHLIST, string P_STAFFID)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[6], ParamValue = new string[6];
                ParamName[0] = "P_ID";
                ParamName[1] = "P_AUDITEXTERNAL_RECOMMEND_ID";
                ParamName[2] = "P_NO";
                ParamName[3] = "P_NAME";
                ParamName[4] = "P_BRANCHLIST";
                ParamName[5] = "P_STAFFID";
                ParamValue[0] = P_ID;
                ParamValue[1] = P_AUDITEXTERNAL_RECOMMEND_ID;
                ParamValue[2] = P_NO;
                ParamValue[3] = P_NAME;
                ParamValue[4] = P_BRANCHLIST;
                ParamValue[5] = P_STAFFID;
                myObj.SP_OracleExecuteNonQuery("AUDITEXTERNAL_PLAN_UPDATE", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }


        //*****jobdesc.aspx*****//
        public string JobdescTab1SelectStaffListForDDL(string yr, string gazar, string heltes)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            DataSet ds = null;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                if (gazar == heltes) ds = myObj.OracleExecuteDataSet(@"SELECT a.BR_ID, a.JOBTYPE_ID, a.NUM, a.ST_NAME, a.ST_ID, a.NEGJNAME
FROM(
  SELECT a.BR_ID
    , a.JOBTYPE_ID
    , a.NUM
    , d.NAME || '-' || a.NUM || ' | ' || CASE WHEN f.ST_ID is not null THEN TO_CHAR(SUBSTR(g.LNAME, 0, 1) || '.' || SUBSTR(g.FNAME, 1, 1) || LOWER(SUBSTR(g.FNAME, 2))) ELSE TO_CHAR('-') END as ST_NAME
    , f.ST_ID
    , c.SORT as GAZARSORT
    , b.SORT as HELTESSORT
    , CASE WHEN b.BR_MAIN_ID1 = b.BR_ID THEN b.DOMAIN_ORG ELSE c.DOMAIN_ORG || '-' || b.DOMAIN_ORG END as NEGJNAME
  FROM TBL_JOBCAPACITYNUM a
  INNER JOIN TBL_BRANCH b ON a.BR_ID = b.BR_ID AND a.YR = b.YR
  INNER JOIN TBL_BRANCH c ON b.BR_MAIN_ID1 = c.BR_ID AND a.YR = c.YR
  INNER JOIN TBL_JOBTYPE d ON a.JOBTYPE_ID = d.ID
  LEFT JOIN TBL_JOBCAPACITYNUM_STAFFS f ON a.YR = f.YR AND a.BR_ID = f.BR_ID AND a.JOBTYPE_ID = f.JOBTYPE_ID AND a.NUM = f.NUM
  LEFT JOIN hrdbuser.ST_STAFFS g ON f.ST_ID = g.ID
  WHERE a.YR = " + yr + " AND b.BR_ID = " + heltes + @"
) a
ORDER BY a.GAZARSORT, a.HELTESSORT, a.JOBTYPE_ID, a.NUM");
                else ds = myObj.OracleExecuteDataSet(@"SELECT a.BR_ID, a.JOBTYPE_ID, a.NUM, a.ST_NAME, a.ST_ID, a.NEGJNAME
FROM ( 
  SELECT a.BR_ID, a.JOBTYPE_ID, a.NUM
    , d.NAME||'-'||a.NUM||' | '||CASE WHEN f.ST_ID is not null THEN TO_CHAR(SUBSTR(g.LNAME,0,1)||'.'||SUBSTR(g.FNAME,1,1)||LOWER(SUBSTR(g.FNAME,2))) ELSE TO_CHAR('-') END as ST_NAME
    , f.ST_ID
    , c.SORT as GAZARSORT
    , b.SORT as HELTESSORT 
    , CASE WHEN b.BR_MAIN_ID1=b.BR_ID THEN b.DOMAIN_ORG ELSE c.DOMAIN_ORG||'-'||b.DOMAIN_ORG END as NEGJNAME
  FROM TBL_JOBCAPACITYNUM a 
  INNER JOIN TBL_BRANCH b ON a.BR_ID=b.BR_ID AND a.YR=b.YR 
  INNER JOIN TBL_BRANCH c ON b.BR_MAIN_ID1=c.BR_ID AND a.YR=c.YR 
  INNER JOIN TBL_JOBTYPE d ON a.JOBTYPE_ID=d.ID 
  LEFT JOIN TBL_JOBCAPACITYNUM_STAFFS f ON a.YR=f.YR AND a.BR_ID=f.BR_ID AND a.JOBTYPE_ID=f.JOBTYPE_ID AND a.NUM=f.NUM 
  LEFT JOIN hrdbuser.ST_STAFFS g ON f.ST_ID = g.ID
  WHERE a.YR=" + yr+" AND b.BR_ID="+gazar+ @" 
  UNION ALL 
  SELECT a.BR_ID, a.JOBTYPE_ID, a.NUM
    , d.NAME||'-'||a.NUM||' | '||CASE WHEN f.ST_ID is not null THEN TO_CHAR(SUBSTR(g.LNAME,0,1)||'.'||SUBSTR(g.FNAME,1,1)||LOWER(SUBSTR(g.FNAME,2))) ELSE TO_CHAR('-') END as ST_NAME
    , f.ST_ID
    , c.SORT as GAZARSORT
    , b.SORT as HELTESSORT 
    , CASE WHEN b.BR_MAIN_ID1=b.BR_ID THEN b.DOMAIN_ORG ELSE c.DOMAIN_ORG||'-'||b.DOMAIN_ORG END as NEGJNAME
  FROM TBL_JOBCAPACITYNUM a 
  INNER JOIN TBL_BRANCH b ON a.BR_ID=b.BR_ID AND a.YR=b.YR 
  INNER JOIN TBL_BRANCH c ON b.BR_MAIN_ID1=c.BR_ID AND a.YR=c.YR 
  INNER JOIN TBL_JOBTYPE d ON a.JOBTYPE_ID=d.ID 
  LEFT JOIN TBL_JOBCAPACITYNUM_STAFFS f ON a.YR=f.YR AND a.BR_ID=f.BR_ID AND a.JOBTYPE_ID=f.JOBTYPE_ID AND a.NUM=f.NUM 
  LEFT JOIN hrdbuser.ST_STAFFS g ON f.ST_ID = g.ID 
  WHERE a.YR=" + yr + " AND b.BR_ID=" + heltes + @" 
) a 
ORDER BY a.GAZARSORT, a.HELTESSORT, a.JOBTYPE_ID, a.NUM");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string JobdescTab1D2Datatable(string yr, string num, string brid, string jobtypeid)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT a.FUNC_ACTION_ID, c.NO||'.'||b.NO||'. '||b.NAME as NAME FROM TBL_JOBDESC_D2 a INNER JOIN TBL_FUNC_ACTION b ON a.FUNC_ACTION_ID = b.ID INNER JOIN TBL_FUNC_STRAT c ON b.FUNC_STRAT_ID=c.ID AND c.YR=" + yr + " WHERE a.BR_ID=" + brid + " AND a.JOBTYPE_ID=" + jobtypeid + " AND a.NUM=" + num + " AND a.YR=" + yr + " ORDER BY c.NO, b.NO");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string JobdescTab1ZoriltDatatable(string yr, string num, string brid, string jobtypeid)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT ROWNUM as ROWNO, a.* FROM ( SELECT a.ID, a.LAWZORILT_ID, NVL(a.PERSONDAY,0)||'/'||c.SUMPERSONDAY as PERSONDAY, c.ZAALTLIST, a.CRITERIA_D4, a.ZORILT_D3 FROM TBL_JOBDESC_LAWZORILT a LEFT JOIN TBL_LAWZORILT b ON a.LAWZORILT_ID=b.ID LEFT JOIN ( SELECT a.ID as LAWZORILT_ID, SUM(NVL(c.PERSONDAY,0)) as SUMPERSONDAY, RTRIM(xmlagg (xmlelement (e, ' ' || f.NO||'.'||d.NO||'.'||c.NO || ',') ORDER BY f.NO, d.NO, c.NO).extract('//text()'), ',') ZAALTLIST FROM TBL_LAWZORILT a LEFT JOIN TBL_LAWZORILT_LAWZAALT b ON a.ID=b.LAWZORILT_ID LEFT JOIN TBL_LAWZAALT c ON b.LAWZAALT_ID=c.ID LEFT JOIN TBL_LAW d ON c.LAW_ID=d.ID LEFT JOIN TBL_LAW_TYPE f ON d.LAW_TYPE_ID=f.ID WHERE a.YR=" + yr + " GROUP BY a.ID ) c ON b.ID=c.LAWZORILT_ID WHERE a.BR_ID=" + brid + " AND a.JOBTYPE_ID=" + jobtypeid + " AND a.NUM=" + num + " AND a.YR=" + yr + " ORDER BY a.ID ) a");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string JobdescTab1WorkDatatable(string yr, string num, string brid, string jobtypeid)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT ID, JOBDESC_LAWZORILT_ID, WORK_D5, TM_D6 FROM TBL_JOBDESC_LAWWORK WHERE BR_ID=" + brid + " AND JOBTYPE_ID=" + jobtypeid + " AND NUM=" + num + " AND YR=" + yr + " ORDER BY JOBDESC_LAWZORILT_ID, WORK_D5");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string JobdescTab2ZoriltDatatable(string yr, string num, string brid, string jobtypeid)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT a.ID, a.LAWZORILT_ID, NVL(a.PERSONDAY,0)||'/'||c.SUMPERSONDAY as PERSONDAY, c.ZAALTLIST, a.CRITERIA_D4, a.ZORILT_D3 FROM TBL_JOBDESC_LAWZORILT a LEFT JOIN TBL_LAWZORILT b ON a.LAWZORILT_ID=b.ID LEFT JOIN ( SELECT a.ID as LAWZORILT_ID, SUM(NVL(c.PERSONDAY,0)) as SUMPERSONDAY, RTRIM(xmlagg (xmlelement (e, ' ' || f.NO||'.'||d.NO||'.'||c.NO || ',') ORDER BY f.NO, d.NO, c.NO).extract('//text()'), ',') ZAALTLIST FROM TBL_LAWZORILT a LEFT JOIN TBL_LAWZORILT_LAWZAALT b ON a.ID=b.LAWZORILT_ID LEFT JOIN TBL_LAWZAALT c ON b.LAWZAALT_ID=c.ID LEFT JOIN TBL_LAW d ON c.LAW_ID=d.ID LEFT JOIN TBL_LAW_TYPE f ON d.LAW_TYPE_ID=f.ID WHERE a.YR=" + yr + " GROUP BY a.ID ) c ON b.ID=c.LAWZORILT_ID WHERE a.BR_ID=" + brid + " AND a.JOBTYPE_ID=" + jobtypeid + " AND a.NUM=" + num + " AND a.YR=" + yr + " ORDER BY a.ID");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string JobdescTab2ZoriltListForDDL(string yr, string brid)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT a.ID, a.NO, a.NAME, SUM(NVL(c.PERSONDAY,0)) as SUMPERSONDAY FROM TBL_LAWZORILT a LEFT JOIN TBL_LAWZORILT_LAWZAALT b ON a.ID=b.LAWZORILT_ID LEFT JOIN TBL_LAWZAALT c ON b.LAWZAALT_ID=c.ID WHERE a.YR=" + yr + " AND a.BR_ID=" + brid + " GROUP BY a.ID, a.NO, a.NAME ORDER BY a.NO");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void JOBDESC_LAWZORILT_INSERT(string P_BR_ID, string P_JOBTYPE_ID, string P_NUM, string P_YR, string P_LAWZORILT_ID, string P_PERSONDAY, string P_CRITERIA_D4, string P_ZORILT_D3)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[8], ParamValue = new string[8];
                ParamName[0] = "P_BR_ID";
                ParamName[1] = "P_JOBTYPE_ID";
                ParamName[2] = "P_NUM";
                ParamName[3] = "P_YR";
                ParamName[4] = "P_LAWZORILT_ID";
                ParamName[5] = "P_PERSONDAY";
                ParamName[6] = "P_CRITERIA_D4";
                ParamName[7] = "P_ZORILT_D3";
                ParamValue[0] = P_BR_ID;
                ParamValue[1] = P_JOBTYPE_ID;
                ParamValue[2] = P_NUM;
                ParamValue[3] = P_YR;
                ParamValue[4] = P_LAWZORILT_ID;
                ParamValue[5] = P_PERSONDAY;
                ParamValue[6] = P_CRITERIA_D4;
                ParamValue[7] = P_ZORILT_D3;
                myObj.SP_OracleExecuteNonQuery("JOBDESC_LAWZORILT_INSERT", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string JobdescTab2WorkDatatable(string yr, string num, string brid, string jobtypeid)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT ID, JOBDESC_LAWZORILT_ID, WORK_D5, TM_D6 FROM TBL_JOBDESC_LAWWORK WHERE BR_ID=" + brid + " AND JOBTYPE_ID=" + jobtypeid + " AND NUM=" + num + " AND YR=" + yr + " ORDER BY JOBDESC_LAWZORILT_ID, WORK_D5");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string JobdescTab2JobdescZoriltListForDDL(string yr, string num, string brid, string jobtypeid)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT ID, ZORILT_D3 as NAME FROM TBL_JOBDESC_LAWZORILT WHERE BR_ID=" + brid + " AND JOBTYPE_ID=" + jobtypeid + " AND NUM=" + num + " AND YR=" + yr + " ORDER BY ID");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string JobdescTab3S1Datatable()
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT ROWNUM as ROWNO, a.* FROM ( SELECT ID, NAME FROM TBL_JOBTYPE ORDER BY ID ) a");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string JobdescTab3TypeListForDDL()
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT ID, NAME FROM TBL_JOBTYPE ORDER BY ID");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string JobdescTab3S2Datatable(string yr)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT ROWNUM as ROWNO, a.* FROM ( SELECT a.BR_ID, a.JOBTYPE_ID, CASE WHEN b.BR_MAIN_ID1=b.BR_ID THEN b.DOMAIN_ORG ELSE c.DOMAIN_ORG||'-'||b.DOMAIN_ORG END AS NEGJ, d.NAME as JOBTYPE_NAME, MAX(a.NUM) as MAXNUM, c.SORT as SORTGAZAR, b.SORT as SORTHELTES FROM TBL_JOBCAPACITYNUM a INNER JOIN TBL_BRANCH b ON a.BR_ID=b.BR_ID AND b.YR=" + yr + " INNER JOIN TBL_BRANCH c ON b.BR_MAIN_ID1=c.BR_ID AND b.YR=" + yr + " INNER JOIN TBL_JOBTYPE d ON a.JOBTYPE_ID=d.ID WHERE a.YR=" + yr + " GROUP BY a.BR_ID, a.JOBTYPE_ID, CASE WHEN b.BR_MAIN_ID1=b.BR_ID THEN b.DOMAIN_ORG ELSE c.DOMAIN_ORG||'-'||b.DOMAIN_ORG END, d.NAME, c.SORT, b.SORT ORDER BY c.SORT, b.SORT, a.JOBTYPE_ID ) a");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void JOBCAPACITYNUM_INSERT(string P_YR, string P_BR_ID, string P_JOBTYPE_ID, string P_NUMLIST)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[7], ParamValue = new string[7];
                ParamName[0] = "P_YR";
                ParamName[1] = "P_BR_ID";
                ParamName[2] = "P_JOBTYPE_ID";
                ParamName[3] = "P_NUMLIST";
                ParamValue[0] = P_YR;
                ParamValue[1] = P_BR_ID;
                ParamValue[2] = P_JOBTYPE_ID;
                ParamValue[3] = P_NUMLIST;
                myObj.SP_OracleExecuteNonQuery("JOBCAPACITYNUM_INSERT", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string JobdescTab3S3Datatable(string yr, string gazar, string heltes)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (gazar != "") gazar = " AND b.BR_MAIN_ID1=" + gazar;
            if (heltes != "") heltes = " AND b.BR_ID=" + heltes;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet(@"SELECT ROWNUM as ROWNO, a.* 
FROM ( 
  SELECT 
    CASE WHEN b.BR_MAIN_ID1=b.BR_ID THEN b.DOMAIN_ORG ELSE c.DOMAIN_ORG||'-'||b.DOMAIN_ORG END AS NEGJ
    , d.NAME as JOBTYPE_NAME
    , SUBSTR(f.LNAME,0,1)||'.'||SUBSTR(f.FNAME,1,1)||LOWER(SUBSTR(f.FNAME,2)) as ST_NAME
    , a.DESCRIPTION
    , a.JOBTYPE_ID
    , a.BR_ID
    , a.NUM
    , a.ST_ID
    , NVL(g.MAXNUM,0) as MAXNUM 
  FROM TBL_JOBCAPACITYNUM_STAFFS a 
  INNER JOIN TBL_BRANCH b ON a.BR_ID=b.BR_ID AND b.YR=" + yr + @" 
  INNER JOIN TBL_BRANCH c ON b.BR_MAIN_ID1 = c.BR_ID AND c.YR = " + yr + @"
  INNER JOIN TBL_JOBTYPE d ON a.JOBTYPE_ID = d.ID
  INNER JOIN hrdbuser.ST_STAFFS f ON a.ST_ID = f.ID
  LEFT JOIN(
    SELECT YR, BR_ID, JOBTYPE_ID, MAX(NUM) as MAXNUM
    FROM TBL_JOBCAPACITYNUM a
    WHERE YR = " + yr + @"
    GROUP BY YR, BR_ID, JOBTYPE_ID
  ) g ON a.YR = g.YR AND a.BR_ID = g.BR_ID AND a.JOBTYPE_ID = g.JOBTYPE_ID
  WHERE a.YR = " + yr + gazar + heltes + @"
  ORDER BY c.SORT, b.SORT, a.JOBTYPE_ID, a.NUM
) a");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }




        //*****lw.aspx*****//
        public string LwTab2TypeListForDDL()
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT ID, NAME FROM TBL_LAW_TYPE ORDER BY ID");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string LwTab1Datatable()
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT ID, NAME FROM TBL_LAW_TYPE ORDER BY NAME");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string LwTab2Datatable(string tp)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (tp != "") tp = " AND a.LAW_TYPE_ID=" + tp;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT a.ID, a.LAW_TYPE_ID, a.NAME as NAME, NVL(a.DT,'1900-01-01') as DT, a.FILENAME, CASE WHEN a.ISCLOSED=0 THEN 'checked=\"checked\"' ELSE null END as ISCLOSED FROM TBL_LAW a INNER JOIN TBL_LAW_TYPE b ON a.LAW_TYPE_ID=b.ID WHERE 1=1" + tp + " ORDER BY a.NAME");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string LwTab2ImportTushaal(string tushaaltype)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            DataSet ds = null;
            string strTushaalType = "", strErrMsg = "", strReturn = "";
            int intRownum = 1, intSuccessRowCount = 0;
            if (tushaaltype == "6") strTushaalType = "3";
            else if (tushaaltype == "7") strTushaalType = "2";
            try
            {
                ds = myObj.OracleExecuteDataSet("SELECT ID, TUSHAAL_NUMBER as NO, TUSHAAL_NUMBER||'. '||TUSHAAL_NAME as NAME, SUCCESS_DATE FROM TBL_TUSHAAL WHERE ISIMPORTEDLAW=0 AND TUSHAAL_TYPE=" + strTushaalType);
                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    try
                    {
                        intRownum++;
                        myObj.OracleExecuteNonQuery("INSERT INTO TBL_LAW (ID, LAW_TYPE_ID, NAME, DT, TUSHAAL_ID) VALUES (TBLLASTID('TBL_LAW'), " + tushaaltype + ", '" + dr["NAME"].ToString() + "', '" + dr["SUCCESS_DATE"].ToString() + "', " + dr["ID"].ToString() + ")");
                        myObj.OracleExecuteNonQuery("UPDATE TBL_TUSHAAL SET ISIMPORTEDLAW=1 WHERE ID = " + dr["ID"].ToString());
                        intSuccessRowCount++;
                    }
                    catch (Exception ex)
                    {
                        if (strErrMsg != "") strErrMsg += ", ";
                        strErrMsg += dr["NO"].ToString();
                    }

                }
                strReturn = "Нийт " + ds.Tables[0].Rows.Count.ToString() + " мөрнөөс " + intSuccessRowCount.ToString() + " амжилттай хадгалагдлаа. Алдаатай тушаалын дугаар: " + strErrMsg;
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
            }
            return strReturn;
        }
        public string LwTab3LawListForDDL(string tp)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT a.ID, a.NAME FROM TBL_LAW a INNER JOIN TBL_LAW_TYPE b ON a.LAW_TYPE_ID=b.ID WHERE a.LAW_TYPE_ID=" + tp + " ORDER BY a.NAME");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string LwTab3Datatable(string tp, string law, string yr, string gazar, string heltes)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (tp != "") tp = " AND d.LAW_TYPE_ID=" + tp;
            if (law != "") law = " AND a.LAW_ID=" + law;
            if (gazar != "") gazar = " AND c.BR_MAIN_ID1=" + gazar;
            if (heltes != "") heltes = " AND c.BR_ID=" + heltes;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = @"SELECT a.LAWZAALT_ID, c.LAW_ID, d.LAW_TYPE_ID, f.NO||'.'||d.NO||'. '||d.NAME as LAW, c.NO, c.NAME, a.NEGJLISTID, a.NEGJLISTNAME, c.PERSONDAY, CASE WHEN c.ISJOBDESC=1 THEN '&#x2714;' ELSE null END as ISJOBDESC, CASE WHEN c.ISPLANYR=1 THEN '&#x2714;' ELSE null END as ISPLANYR, a.INDEX1LISTID, a.INDEX1LISTNO, a.INDEX2LISTID, a.INDEX2LISTNO, a.INDEX3LISTID, a.INDEX3LISTNO
FROM ( 
  SELECT a.LAWZAALT_ID, a.NEGJLISTID, a.NEGJLISTNAME, a.INDEX1LISTID, a.INDEX1LISTNO, a.INDEX2LISTID, a.INDEX2LISTNO
    , RTRIM(xmlagg (xmlelement (e, c.ID || ',')).extract('//text()'), ',') as INDEX3LISTID
    , RTRIM(xmlagg (xmlelement (e, c.NO || ' ,')).extract('//text()'), ' ,') as INDEX3LISTNO
  FROM (
    SELECT a.LAWZAALT_ID, a.NEGJLISTID, a.NEGJLISTNAME, a.INDEX1LISTID, a.INDEX1LISTNO
      , RTRIM(xmlagg (xmlelement (e, c.ID || ',')).extract('//text()'), ',') as INDEX2LISTID
      , RTRIM(xmlagg (xmlelement (e, c.NO || ' ,')).extract('//text()'), ' ,') as INDEX2LISTNO
    FROM (
      SELECT a.LAWZAALT_ID, a.NEGJLISTID, a.NEGJLISTNAME
        , RTRIM(xmlagg (xmlelement (e, c.ID || ',')).extract('//text()'), ',') as INDEX1LISTID
        , RTRIM(xmlagg (xmlelement (e, c.NO || ' ,')).extract('//text()'), ' ,') as INDEX1LISTNO
      FROM (
        SELECT a.LAWZAALT_ID
          , RTRIM(xmlagg (xmlelement (e, c.BR_ID || ',')).extract('//text()'), ',') as NEGJLISTID
          , RTRIM(xmlagg (xmlelement (e, ' '||CASE WHEN c.BR_ID=c.BR_MAIN_ID1 THEN c.DOMAIN_ORG ELSE d.DOMAIN_ORG||'-'||c.DOMAIN_ORG END || ',')).extract('//text()'), ',') as NEGJLISTNAME 
        FROM ( 
          SELECT a.ID as LAWZAALT_ID 
          FROM TBL_LAWZAALT a 
          LEFT JOIN TBL_LAWZAALT_BR b ON a.ID=b.LAWZAALT_ID 
          LEFT JOIN TBL_BRANCH c ON b.BR_ID=c.BR_ID AND c.YR=" + yr + @" 
          INNER JOIN TBL_LAW d ON a.LAW_ID=d.ID 
          WHERE 1=1" + tp + law + gazar + heltes + @" 
          GROUP BY a.ID 
        ) a 
        LEFT JOIN TBL_LAWZAALT_BR b ON a.LAWZAALT_ID=b.LAWZAALT_ID 
        LEFT JOIN TBL_BRANCH c ON b.BR_ID=c.BR_ID AND c.YR=" + yr + @"  
        LEFT JOIN TBL_BRANCH d ON c.BR_MAIN_ID1=d.BR_ID AND d.YR=" + yr + @"  
        GROUP BY a.LAWZAALT_ID   
      ) a 
      LEFT JOIN TBL_LAWZAALT_INDEX b ON a.LAWZAALT_ID=b.LAWZAALT_ID AND b.INDEXTYPE=1
      LEFT JOIN TBL_LAWZAALTINDEX c ON b.LAWZAALTINDEX_ID=c.ID
      GROUP BY a.LAWZAALT_ID, a.NEGJLISTID, a.NEGJLISTNAME
    ) a
    LEFT JOIN TBL_LAWZAALT_INDEX b ON a.LAWZAALT_ID=b.LAWZAALT_ID AND b.INDEXTYPE=2
    LEFT JOIN TBL_LAWZAALTINDEX c ON b.LAWZAALTINDEX_ID=c.ID
    GROUP BY a.LAWZAALT_ID, a.NEGJLISTID, a.NEGJLISTNAME, a.INDEX1LISTID, a.INDEX1LISTNO
  ) a
  LEFT JOIN TBL_LAWZAALT_INDEX b ON a.LAWZAALT_ID=b.LAWZAALT_ID AND b.INDEXTYPE=3
  LEFT JOIN TBL_LAWZAALTINDEX c ON b.LAWZAALTINDEX_ID=c.ID
  GROUP BY a.LAWZAALT_ID, a.NEGJLISTID, a.NEGJLISTNAME, a.INDEX1LISTID, a.INDEX1LISTNO, a.INDEX2LISTID, a.INDEX2LISTNO
) a 
INNER JOIN TBL_LAWZAALT c ON a.LAWZAALT_ID=c.ID 
INNER JOIN TBL_LAW d ON c.LAW_ID=d.ID 
INNER JOIN TBL_LAW_TYPE f ON d.LAW_TYPE_ID=f.ID 
ORDER BY c.NO, c.NAME";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void LAWZAALT_DELETE(string P_ID)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[1], ParamValue = new string[1];
                ParamName[0] = "P_ID";
                ParamValue[0] = P_ID;
                myObj.SP_OracleExecuteNonQuery("LAWZAALT_DELETE", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string LwTab3IndexListForSelect2(string tp, string selectedList)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT a.ID, a.NO||'. '||a.NAME as NAME, NVL2(b.ID,' selected=\"selected\"',null) as ISSELECTED FROM TBL_LAWZAALTINDEX a LEFT JOIN ( SELECT TO_NUMBER(ID) as ID FROM ( select regexp_substr('" + selectedList + "','[^,]+', 1, level) AS ID from dual connect by regexp_substr('" + selectedList + "', '[^,]+', 1, level) is not null ) a ) b ON a.ID=b.ID WHERE a.INDEXTYPE=" + tp + " ORDER BY a.NO");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void LAWZAALT_INSERT(string P_LAW_ID, string P_NO, string P_NAME, string P_PERSONDAY, string P_BRLIST, string P_ISJOBDESC, string P_ISPLANYR, string P_DESCRIPTION, string P_INDEXLIST)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[9], ParamValue = new string[9];
                ParamName[0] = "P_LAW_ID";
                ParamName[1] = "P_NO";
                ParamName[2] = "P_NAME";
                ParamName[3] = "P_PERSONDAY";
                ParamName[4] = "P_BRLIST";
                ParamName[5] = "P_ISJOBDESC";
                ParamName[6] = "P_ISPLANYR";
                ParamName[7] = "P_DESCRIPTION";
                ParamName[8] = "P_INDEXLIST";
                ParamValue[0] = P_LAW_ID;
                ParamValue[1] = P_NO;
                ParamValue[2] = P_NAME;
                ParamValue[3] = P_PERSONDAY;
                ParamValue[4] = P_BRLIST;
                ParamValue[5] = P_ISJOBDESC;
                ParamValue[6] = P_ISPLANYR;
                ParamValue[7] = P_DESCRIPTION;
                ParamValue[8] = P_INDEXLIST;
                myObj.SP_OracleExecuteNonQuery("LAWZAALT_INSERT", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void LAWZAALT_UPDATE(string P_ID, string P_LAW_ID, string P_NO, string P_NAME, string P_PERSONDAY, string P_BRLIST, string P_ISJOBDESC, string P_ISPLANYR, string P_DESCRIPTION, string P_INDEXLIST)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[10], ParamValue = new string[10];
                ParamName[0] = "P_ID";
                ParamName[1] = "P_LAW_ID";
                ParamName[2] = "P_NO";
                ParamName[3] = "P_NAME";
                ParamName[4] = "P_PERSONDAY";
                ParamName[5] = "P_BRLIST";
                ParamName[6] = "P_ISJOBDESC";
                ParamName[7] = "P_ISPLANYR";
                ParamName[8] = "P_DESCRIPTION";
                ParamName[9] = "P_INDEXLIST";
                ParamValue[0] = P_ID;
                ParamValue[1] = P_LAW_ID;
                ParamValue[2] = P_NO;
                ParamValue[3] = P_NAME;
                ParamValue[4] = P_PERSONDAY;
                ParamValue[5] = P_BRLIST;
                ParamValue[6] = P_ISJOBDESC;
                ParamValue[7] = P_ISPLANYR;
                ParamValue[8] = P_DESCRIPTION;
                ParamValue[9] = P_INDEXLIST;
                myObj.SP_OracleExecuteNonQuery("LAWZAALT_UPDATE", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string LwExcelBulkUpload(string lawid)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            DataSet ds = null;
            string xConnStr = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + HttpContext.Current.Server.MapPath("~") + "files\\importexcel\\LawZaaltRecords.xls;Extended Properties=Excel 8.0;";
            int intRownum = 1, intSuccessRowCount = 0;
            string strErrMsg = "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                using (OleDbConnection connection = new OleDbConnection(xConnStr))
                {
                    OleDbCommand command = new OleDbCommand("Select * FROM [Sheet1$]", connection);
                    connection.Open();
                    using (OleDbDataAdapter adapter = new OleDbDataAdapter(command))
                    {
                        adapter.Fill(ds);
                    }
                    if (ds.Tables[0].Rows.Count != 0)
                    {
                        intRownum = 1; intSuccessRowCount = 0;
                        strErrMsg = "";
                        foreach (DataRow dr in ds.Tables[0].Rows)
                        {
                            try
                            {
                                intRownum++;
                                myObj.OracleExecuteNonQuery("INSERT INTO TBL_LAWZAALT (ID, LAW_ID, NO, NAME) VALUES (TBLLASTID('TBL_LAWZAALT'), " + lawid + ", " + dr["NO"].ToString() + ", '" + dr["NAME"].ToString() + "')");
                                intSuccessRowCount++;
                            }
                            catch (Exception ex)
                            {
                                if (strErrMsg != "") strErrMsg += ", ";
                                strErrMsg += intRownum.ToString();
                            }

                        }
                    }
                }
                return "Нийт " + ds.Tables[0].Rows.Count.ToString() + " мөрнөөс " + intSuccessRowCount.ToString() + " амжилттай хадгалагдлаа. Алдаатай мөрийн дугаар: " + strErrMsg;
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            
        }
        public string LwTab3ImportTushaalZaalt(string tushaaltype)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            DataSet ds = null;
            string strTushaalType = "";
            string strErrMsg = "";
            int intRownum = 1, intSuccessRowCount = 0;
            if (tushaaltype == "6") strTushaalType = "3";
            else if (tushaaltype == "7") strTushaalType = "2";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                ds = myObj.OracleExecuteDataSet("SELECT a.ID, a.TUSHAAL_ID, a.NAME FROM TBL_TUSHAAL_ZAALT a INNER JOIN TBL_TUSHAAL b ON a.TUSHAAL_ID=b.ID INNER JOIN TBL_LAW c ON a.TUSHAAL_ID=c.TUSHAAL_ID WHERE a.ISIMPORTEDLAW=0 AND b.TUSHAAL_TYPE=" + strTushaalType);
                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    try
                    {
                        intRownum++;
                        myObj.OracleExecuteNonQuery("INSERT INTO TBL_LAWZAALT (ID, LAW_ID, NO, NAME) VALUES (TBLLASTID('TBL_LAWZAALT'), (SELECT MIN(ID) as ID FROM TBL_LAW WHERE TUSHAAL_ID=" + dr["ID"].ToString() + " GROUP BY ID), 1, '" + dr["NAME"].ToString() + "')");
                        myObj.OracleExecuteNonQuery("UPDATE TBL_TUSHAAL_ZAALT SET ISIMPORTEDLAW=1 WHERE ID = " + dr["ID"].ToString());
                        intSuccessRowCount++;
                    }
                    catch (Exception ex)
                    {
                        if (strErrMsg != "") strErrMsg += ", ";
                        strErrMsg += dr["NAME"].ToString();
                    }

                }
                return "Нийт " + ds.Tables[0].Rows.Count.ToString() + " мөрнөөс " + intSuccessRowCount.ToString() + " амжилттай хадгалагдлаа. Алдаатай тушаалын дугаар: " + strErrMsg;
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string LwTab4ZaaltListForDDL(string lw)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT a.ID, c.NO||'.'||b.NO||'.'||a.NO||'. '||a.NAME as NAME FROM TBL_LAWZAALT a INNER JOIN TBL_LAW b ON a.LAW_ID=b.ID INNER JOIN TBL_LAW_TYPE c ON b.LAW_TYPE_ID=c.ID WHERE a.LAW_ID=" + lw + " ORDER BY c.NO, b.NO, a.NO");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string LwTab4Datatable(string tp, string yr, string gazar, string heltes)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (tp != "") tp = " AND d.LAW_TYPE_ID=" + tp;
            if (gazar != "") gazar = " AND d.BR_ID=" + gazar;
            if (heltes != "") heltes = " AND c.BR_ID=" + heltes;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT a.LAWZAALTDESC_ID, b.LAWZAALT_ID, c.LAW_ID, d.LAW_TYPE_ID, f.NO||'.'||d.NO||'. '||d.NAME as LAW, f.NO||'.'||d.NO||'.'||c.NO||'. '||c.NAME as LAWZAALT, b.NO, b.NAME, a.GAZAR_ID, a.GAZAR_NAME, a.HELTES_ID, a.HELTES_NAME FROM ( SELECT a.LAWZAALTDESC_ID, a.GAZAR_ID, a.GAZAR_NAME, NVL(RTRIM(xmlagg (xmlelement (e, c.BR_ID || ',')).extract('//text()'), ','),'none') as HELTES_ID, NVL(RTRIM(xmlagg (xmlelement (e, ' '||c.DOMAIN_ORG || ',')).extract('//text()'), ','),'none') as HELTES_NAME FROM ( SELECT LAWZAALTDESC_ID, NVL(RTRIM(xmlagg (xmlelement (e, GAZAR_ID || ',')).extract('//text()'), ','),'none') as GAZAR_ID, NVL(RTRIM(xmlagg (xmlelement (e, ' '||GAZAR_NAME || ',')).extract('//text()'), ','),'none') as GAZAR_NAME FROM ( SELECT a.ID as LAWZAALTDESC_ID, d.BR_ID as GAZAR_ID, d.DOMAIN_ORG as GAZAR_NAME FROM TBL_LAWZAALTDESC a LEFT JOIN TBL_LAWZAALTDESC_BR b ON a.ID=b.LAWZAALTDESC_ID LEFT JOIN TBL_BRANCH c ON c.YR=" + yr + " AND b.BR_ID=c.BR_ID LEFT JOIN TBL_BRANCH d ON d.YR=" + yr + " AND c.BR_MAIN_ID1=d.BR_ID WHERE 1=1" + gazar + heltes + " GROUP BY a.ID, d.BR_ID, d.DOMAIN_ORG ) GROUP BY LAWZAALTDESC_ID ) a LEFT JOIN TBL_LAWZAALTDESC_BR b ON a.LAWZAALTDESC_ID=b.LAWZAALTDESC_ID LEFT JOIN TBL_BRANCH c ON c.YR=" + yr + " AND b.BR_ID=c.BR_ID GROUP BY a.LAWZAALTDESC_ID, a.GAZAR_ID, a.GAZAR_NAME ) a INNER JOIN TBL_LAWZAALTDESC b ON a.LAWZAALTDESC_ID=b.ID INNER JOIN TBL_LAWZAALT c ON b.LAWZAALT_ID=c.ID INNER JOIN TBL_LAW d ON c.LAW_ID=d.ID INNER JOIN TBL_LAW_TYPE f ON d.LAW_TYPE_ID=f.ID WHERE d.YR=" + yr + tp + " ORDER BY f.NO, d.NO, c.NO, b.NO");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void LAWZAALTDESC_DELETE(string P_ID)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[1], ParamValue = new string[1];
                ParamName[0] = "P_ID";
                ParamValue[0] = P_ID;
                myObj.SP_OracleExecuteNonQuery("LAWZAALTDESC_DELETE", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void LAWZAALTDESC_INSERT(string P_LAWZAALT_ID, string P_NO, string P_NAME, string P_BRLIST)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[4], ParamValue = new string[4];
                ParamName[0] = "P_LAWZAALT_ID";
                ParamName[1] = "P_NO";
                ParamName[2] = "P_NAME";
                ParamName[3] = "P_BRLIST";
                ParamValue[0] = P_LAWZAALT_ID;
                ParamValue[1] = P_NO;
                ParamValue[2] = P_NAME;
                ParamValue[3] = P_BRLIST;
                myObj.SP_OracleExecuteNonQuery("LAWZAALTDESC_INSERT", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void LAWZAALTDESC_UPDATE(string P_ID, string P_LAWZAALT_ID, string P_NO, string P_NAME, string P_BRLIST)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[5], ParamValue = new string[5];
                ParamName[0] = "P_ID";
                ParamName[1] = "P_LAWZAALT_ID";
                ParamName[2] = "P_NO";
                ParamName[3] = "P_NAME";
                ParamName[4] = "P_BRLIST";
                ParamValue[0] = P_ID;
                ParamValue[1] = P_LAWZAALT_ID;
                ParamValue[2] = P_NO;
                ParamValue[3] = P_NAME;
                ParamValue[4] = P_BRLIST;
                myObj.SP_OracleExecuteNonQuery("LAWZAALTDESC_UPDATE", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string LwTab5t1Datatable(string tp, string yr, string gazar, string heltes)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (tp != "") tp = " AND d.LAW_TYPE_ID=" + tp;
            if (gazar != "") gazar = " AND d.BR_ID=" + gazar;
            if (heltes != "") heltes = " AND c.BR_ID=" + heltes;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT a.LAWZAALTDESC_ID, b.LAWZAALT_ID, c.LAW_ID, d.LAW_TYPE_ID, f.NO||'.'||d.NO||'. '||d.NAME as LAW, f.NO||'.'||d.NO||'.'||c.NO||'. '||c.NAME as LAWZAALT, b.NO, b.NAME, a.GAZAR_ID, a.GAZAR_NAME, a.HELTES_ID, a.HELTES_NAME FROM ( SELECT a.LAWZAALTDESC_ID, a.GAZAR_ID, a.GAZAR_NAME, NVL(RTRIM(xmlagg (xmlelement (e, c.BR_ID || ',')).extract('//text()'), ','),'none') as HELTES_ID, NVL(RTRIM(xmlagg (xmlelement (e, ' '||c.DOMAIN_ORG || ',')).extract('//text()'), ','),'none') as HELTES_NAME FROM ( SELECT LAWZAALTDESC_ID, NVL(RTRIM(xmlagg (xmlelement (e, GAZAR_ID || ',')).extract('//text()'), ','),'none') as GAZAR_ID, NVL(RTRIM(xmlagg (xmlelement (e, ' '||GAZAR_NAME || ',')).extract('//text()'), ','),'none') as GAZAR_NAME FROM ( SELECT a.ID as LAWZAALTDESC_ID, d.BR_ID as GAZAR_ID, d.DOMAIN_ORG as GAZAR_NAME FROM TBL_LAWZAALTDESC a LEFT JOIN TBL_LAWZAALTDESC_BR b ON a.ID=b.LAWZAALTDESC_ID LEFT JOIN TBL_BRANCH c ON c.YR=" + yr + " AND b.BR_ID=c.BR_ID LEFT JOIN TBL_BRANCH d ON d.YR=" + yr + " AND c.BR_MAIN_ID1=d.BR_ID WHERE 1=1" + gazar + heltes + " GROUP BY a.ID, d.BR_ID, d.DOMAIN_ORG ) GROUP BY LAWZAALTDESC_ID ) a LEFT JOIN TBL_LAWZAALTDESC_BR b ON a.LAWZAALTDESC_ID=b.LAWZAALTDESC_ID LEFT JOIN TBL_BRANCH c ON c.YR=" + yr + " AND b.BR_ID=c.BR_ID GROUP BY a.LAWZAALTDESC_ID, a.GAZAR_ID, a.GAZAR_NAME ) a INNER JOIN TBL_LAWZAALTDESC b ON a.LAWZAALTDESC_ID=b.ID INNER JOIN TBL_LAWZAALT c ON b.LAWZAALT_ID=c.ID INNER JOIN TBL_LAW d ON c.LAW_ID=d.ID INNER JOIN TBL_LAW_TYPE f ON d.LAW_TYPE_ID=f.ID WHERE TO_NUMBER(TO_CHAR(TO_DATE(d.DT,'yyyy-mm-dd'),'yyyy'))=" + yr + tp + " ORDER BY f.NO, d.NO, c.NO, b.NO");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string LwTab5t2Datatable(string yr)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet(@"SELECT a.BR_ID, CASE WHEN a.BR_ID=a.BR_MAIN_ID1 THEN a.DOMAIN_ORG ELSE b.DOMAIN_ORG||'-'||a.DOMAIN_ORG END as NEGJNAME, NVL(c.ZAALTCNT,0) as ZAALTCNT
FROM TBL_BRANCH a 
INNER JOIN TBL_BRANCH b ON a.BR_MAIN_ID1=b.BR_ID AND b.YR=" + yr + @"
LEFT JOIN (
  SELECT BR_ID, COUNT(LAWZAALT_ID) as ZAALTCNT
  FROM TBL_LAWZAALT_BR 
  GROUP BY BR_ID
) c ON a.BR_ID=c.BR_ID
WHERE a.BR_TYPE1 IN (2,3) AND a.YR=" + yr + @"
ORDER BY a.SORT");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string LwTab5t3Datatable(string yr, string gazar, string heltes)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (gazar != "") gazar = " AND b.BR_MAIN_ID1=" + gazar;
            if (heltes != "") heltes = " AND a.BR_ID=" + heltes;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet(@"SELECT ROWNUM as ROWNO, a.*
FROM (
  SELECT a.ID as ZORILT_ID, CASE WHEN b.BR_ID=b.BR_MAIN_ID1 THEN b.DOMAIN_ORG ELSE c.DOMAIN_ORG||'-'||b.DOMAIN_ORG END as NEGJNAME, a.NO||'. '||a.NAME as ZORILT_DATA, f.ID as LAWZAALT_ID, f.NAME as LAWZAALT_NAME
  FROM TBL_LAWZORILT a
  INNER JOIN TBL_BRANCH b ON a.BR_ID=b.BR_ID AND b.YR=" + yr + @"
  INNER JOIN TBL_BRANCH c ON b.BR_MAIN_ID1=c.BR_ID AND c.YR=" + yr + @"
  LEFT JOIN TBL_LAWZORILT_LAWZAALT d ON a.ID=d.LAWZORILT_ID
  LEFT JOIN TBL_LAWZAALT f ON d.LAWZAALT_ID=f.ID
  WHERE a.YR=" + yr + gazar + heltes + @"
  ORDER BY a.NO||'. '||a.NAME, f.NAME
) a");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string LwTab6Datatable(string yr, string gazar, string heltes)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (gazar != "") gazar = " AND b.BR_MAIN_ID1=" + gazar;
            if (heltes != "") heltes = " AND b.BR_ID=" + heltes;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = "SELECT a.ID as LAWZORILT_ID, a.YR, b.BR_ID, CASE WHEN b.BR_ID=b.BR_MAIN_ID1 THEN b.DOMAIN_ORG ELSE c.DOMAIN_ORG||'-'||b.DOMAIN_ORG END AS NEGJ, a.NO, a.NAME, NVL(RTRIM(xmlagg (xmlelement (e, d.LAWZAALT_ID || ',') ORDER BY h.NO, g.NO, f.NO).extract('//text()'), ','),'none') as ZAALTIDLIST, NVL(RTRIM(xmlagg (xmlelement (e, ' ' || h.NO||'.'||g.NO||'.'||f.NO || ',') ORDER BY h.NO, g.NO, f.NO).extract('//text()'), ','),'none') as ZAALTNOLIST FROM TBL_LAWZORILT a INNER JOIN TBL_BRANCH b ON a.BR_ID=b.BR_ID AND b.YR=a.YR INNER JOIN TBL_BRANCH c ON b.BR_MAIN_ID1=c.BR_ID AND c.YR=a.YR LEFT JOIN TBL_LAWZORILT_LAWZAALT d ON a.ID=d.LAWZORILT_ID LEFT JOIN TBL_LAWZAALT f ON d.LAWZAALT_ID=f.ID LEFT JOIN TBL_LAW g ON f.LAW_ID=g.ID LEFT JOIN TBL_LAW_TYPE h ON g.LAW_TYPE_ID=h.ID WHERE a.YR=" + yr + gazar + heltes + " GROUP BY a.ID, a.YR, b.BR_ID, CASE WHEN b.BR_ID=b.BR_MAIN_ID1 THEN b.DOMAIN_ORG ELSE c.DOMAIN_ORG||'-'||b.DOMAIN_ORG END, a.NO, a.NAME";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void LAWZORILT_INSERT(string P_YR, string P_BR_ID, string P_NO, string P_NAME, string P_LAWZAALT_LIST)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[5], ParamValue = new string[5];
                ParamName[0] = "P_YR";
                ParamName[1] = "P_BR_ID";
                ParamName[2] = "P_NO";
                ParamName[3] = "P_NAME";
                ParamName[4] = "P_LAWZAALT_LIST";
                ParamValue[0] = P_YR;
                ParamValue[1] = P_BR_ID;
                ParamValue[2] = P_NO;
                ParamValue[3] = P_NAME;
                ParamValue[4] = P_LAWZAALT_LIST;
                myObj.SP_OracleExecuteNonQuery("LAWZORILT_INSERT", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void LAWZORILT_UPDATE(string P_ID, string P_YR, string P_BR_ID, string P_NO, string P_NAME, string P_LAWZAALT_LIST)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[6], ParamValue = new string[6];
                ParamName[0] = "P_ID";
                ParamName[1] = "P_YR";
                ParamName[2] = "P_BR_ID";
                ParamName[3] = "P_NO";
                ParamName[4] = "P_NAME";
                ParamName[5] = "P_LAWZAALT_LIST";
                ParamValue[0] = P_ID;
                ParamValue[1] = P_YR;
                ParamValue[2] = P_BR_ID;
                ParamValue[3] = P_NO;
                ParamValue[4] = P_NAME;
                ParamValue[5] = P_LAWZAALT_LIST;
                myObj.SP_OracleExecuteNonQuery("LAWZORILT_UPDATE", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void LAWZORILT_DELETE(string P_ID)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[1], ParamValue = new string[1];
                ParamName[0] = "P_ID";
                ParamValue[0] = P_ID;
                myObj.SP_OracleExecuteNonQuery("LAWZORILT_DELETE", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string LwTab6ModalLawListForDDL(string tp, string yr, string gazar, string heltes)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (gazar != "") gazar = " AND f.BR_MAIN_ID1=" + gazar;
            if (heltes != "") heltes = " AND f.BR_ID=" + heltes;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT ID, LAW_NAME as NAME FROM ( SELECT a.ID, b.NO as LAWTYPE_NO, a.NO as LAW_NO, a.NAME as LAW_NAME FROM TBL_LAW a INNER JOIN TBL_LAW_TYPE b ON a.LAW_TYPE_ID=b.ID INNER JOIN TBL_LAWZAALT c ON a.ID=c.LAW_ID LEFT JOIN TBL_LAWZAALT_BR d ON c.ID=d.LAWZAALT_ID LEFT JOIN TBL_BRANCH f ON d.BR_ID=f.BR_ID AND f.YR=" + yr + " WHERE a.LAW_TYPE_ID=" + tp + gazar + heltes + " GROUP BY a.ID, b.NO, a.NO, a.NAME ) ORDER BY LAW_NAME");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string LwTab6ModalZaaltDatatable(string law)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (law != "") law = " AND a.LAW_ID=" + law;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT a.ID, c.NO||'.'||b.NO||'.'||a.NO as NO, a.NO||'. '||a.NAME as NAME FROM TBL_LAWZAALT a INNER JOIN TBL_LAW b ON a.LAW_ID=b.ID INNER JOIN TBL_LAW_TYPE c ON b.LAW_TYPE_ID=c.ID WHERE 1=1" + law + " ORDER BY c.NO, b.NO, a.NO");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string LwTab6ImportPrevYear(string yr)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            DataSet ds = null;
            string strErrMsg = "", strTotalCnt = "";
            int intRownum = 1, intSuccessRowCount = 0;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                ds = myObj.OracleExecuteDataSet("SELECT ID, YR, BR_ID, NVL(NO,1) as NO, NAME, PREVYEAR_ID FROM TBL_LAWZORILT WHERE YR=" + (Int32.Parse(yr) - 1).ToString());
                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    try
                    {
                        intRownum++;
                        myObj.OracleExecuteNonQuery("INSERT INTO TBL_LAWZORILT (ID, YR, BR_ID, NO, NAME, PREVYEAR_ID) VALUES (TBLLASTID('TBL_LAWZORILT'), " + yr + ", " + dr["BR_ID"].ToString() + ", " + dr["NO"].ToString() + ", '" + dr["NAME"].ToString() + "', " + dr["ID"].ToString() + ")");
                        intSuccessRowCount++;
                    }
                    catch (Exception ex)
                    {
                        if (strErrMsg != "") strErrMsg += ", ";
                        strErrMsg += dr["NO"].ToString();
                    }

                }
                strTotalCnt = ds.Tables[0].Rows.Count.ToString();
                ds = myObj.OracleExecuteDataSet("SELECT * FROM TBL_LAWZORILT_LAWZAALT WHERE LAWZORILT_ID IN ( SELECT ID FROM TBL_LAWZORILT WHERE YR=" + (Int32.Parse(yr) - 1).ToString() + " )");
                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    myObj.OracleExecuteNonQuery("INSERT INTO TBL_LAWZORILT_LAWZAALT (LAWZORILT_ID, LAWZAALT_ID) VALUES ((SELECT ID FROM TBL_LAWZORILT WHERE PREVYEAR_ID=" + dr["LAWZORILT_ID"].ToString() + "), " + dr["LAWZAALT_ID"].ToString() + ")");
                }
                return "Нийт " + strTotalCnt + " мөрнөөс " + intSuccessRowCount.ToString() + " амжилттай хадгалагдлаа. Алдаатай дугаар: " + strErrMsg;
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string LwTab7Datatable(string yr, string gazar, string heltes)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (gazar != "") gazar = " AND c.BR_MAIN_ID1=" + gazar;
            if (heltes != "") heltes = " AND c.BR_ID=" + heltes;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = "SELECT a.ID, a.LAWZORILT_ID, CASE WHEN c.BR_MAIN_ID1=c.BR_ID THEN c.DOMAIN_ORG ELSE d.DOMAIN_ORG||'-'||c.DOMAIN_ORG END AS NEGJ, b.NO||'.'||a.NO||'. '||a.NAME as NAME, c.BR_ID as HELTESID, c.BR_MAIN_ID1 as GAZARID FROM TBL_LAWWORK a INNER JOIN TBL_LAWZORILT b ON a.LAWZORILT_ID=b.ID INNER JOIN TBL_BRANCH c ON b.BR_ID=c.BR_ID AND c.YR=b.YR INNER JOIN TBL_BRANCH d ON c.BR_MAIN_ID1=d.BR_ID AND d.YR=b.YR WHERE b.YR=" + yr + gazar + heltes + " ORDER BY b.NO, a.NO";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string LwTab7ModalZoriltListForDDL(string yr, string gazar, string heltes)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (gazar != "") gazar = " AND b.BR_MAIN_ID1=" + gazar;
            if (heltes != "") heltes = " AND b.BR_ID=" + heltes;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT a.ID, b.BR_ID as NEGJID, CASE WHEN b.BR_MAIN_ID1=b.BR_ID THEN b.DOMAIN_ORG ELSE c.DOMAIN_ORG||'-'||b.DOMAIN_ORG END as NEGJNAME, a.NO||'. '||a.NAME as NAME FROM TBL_LAWZORILT a INNER JOIN TBL_BRANCH b ON a.BR_ID=b.BR_ID AND b.YR=a.YR INNER JOIN TBL_BRANCH c ON b.BR_MAIN_ID1=c.BR_ID AND c.YR=a.YR WHERE a.YR=" + yr + gazar + heltes + " ORDER BY c.SORT, b.SORT, a.NO");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string LwTab7ImportPrevYear(string yr)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            DataSet ds = null;
            string strErrMsg = "";
            int intRownum = 1, intSuccessRowCount = 0;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                ds = myObj.OracleExecuteDataSet(@"SELECT a.ID, a.LAWZORILT_ID, a.NO, a.NAME
FROM TBL_LAWWORK a
INNER JOIN TBL_LAWZORILT b ON a.LAWZORILT_ID = b.ID
WHERE b.YR = " + (Int32.Parse(yr) - 1).ToString() + @"
ORDER BY a.ID");
                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    try
                    {
                        intRownum++;
                        myObj.OracleExecuteNonQuery("INSERT INTO TBL_LAWWORK (ID, LAWZORILT_ID, NO, NAME) VALUES (TBLLASTID('TBL_LAWWORK'), (SELECT ID FROM TBL_LAWZORILT WHERE PREVYEAR_ID=" + dr["ID"].ToString() + "), " + dr["NO"].ToString() + ", '" + dr["NAME"].ToString() + "')");
                        intSuccessRowCount++;
                    }
                    catch (Exception ex)
                    {
                        if (strErrMsg != "") strErrMsg += ", ";
                        strErrMsg += dr["NO"].ToString();
                    }

                }
                return "Нийт " + ds.Tables[0].Rows.Count.ToString() + " мөрнөөс " + intSuccessRowCount.ToString() + " амжилттай хадгалагдлаа. Алдаатай дугаар: " + strErrMsg;
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string LwTab8Datatable(string tp)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (tp != "") tp = " WHERE INDEXTYPE=" + tp;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT ID, INDEXTYPE, NO, NAME FROM TBL_LAWZAALTINDEX" + tp + " ORDER BY INDEXTYPE, NO");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string LwTab6ImportStratZorilt(string yr, string gazar, string heltes)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            DataSet ds = null;
            string strErrMsg = "", strTotalCnt = "";
            int intRownum = 1, intSuccessRowCount = 0;
            if (gazar != "") gazar = " AND c.BR_ID=" + gazar;
            if (heltes != "") heltes = " AND b.BR_ID=" + heltes;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                ds = myObj.OracleExecuteDataSet(@"SELECT c.YR, b.BR_ID, a.NO, a.NAME
FROM TBL_FUNC_ACTION a
INNER JOIN TBL_FUNC_ACTION_BR b ON a.ID = b.FUNC_ACTION_ID
INNER JOIN TBL_FUNC_STRAT c ON a.FUNC_STRAT_ID = c.ID
WHERE a.IS_PLANED=1 AND c.YR = " + yr+ gazar+heltes);
                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    try
                    {
                        intRownum++;
                        myObj.OracleExecuteNonQuery("INSERT INTO TBL_LAWZORILT (ID, YR, BR_ID, NO, NAME) VALUES (TBLLASTID('TBL_LAWZORILT'), " + dr["YR"].ToString() + ", " + dr["BR_ID"].ToString() + ", " + dr["NO"].ToString() + ", '" + dr["NAME"].ToString() + "')");
                        intSuccessRowCount++;
                    }
                    catch (Exception ex)
                    {
                        if (strErrMsg != "") strErrMsg += ", ";
                        strErrMsg += dr["NO"].ToString();
                    }

                }
                strTotalCnt = ds.Tables[0].Rows.Count.ToString();
                return "Нийт " + strTotalCnt + " мөрнөөс " + intSuccessRowCount.ToString() + " амжилттай хадгалагдлаа. Алдаатай дугаар: " + strErrMsg;
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }




        //*****auditinternal.aspx*****//
        public string AuditinternalTab1Datatable(string yr)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (yr != "") yr = " WHERE YR=" + yr;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT ROWNUM as ROWNO, a.* FROM ( SELECT ID, NO, NAME, FILENAME, FILENAME2, YR, MNTH, WHONAME FROM TBL_AUDITINTERNAL_REPORT" + yr + " ORDER BY YR DESC, MNTH DESC, NO ) a");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AuditinternalTab2Datatable(string yr, string reportid, string gazar)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (yr != "") yr = " AND c.YR=" + yr;
            if (reportid != "") reportid = " AND a.AUDITINTERNAL_REPORT_ID=" + reportid;
            if (gazar != "") gazar = " AND b.BR_ID=" + gazar;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT ROWNUM as ROWNO, a.* FROM ( SELECT a.ID, b.AUDITINTERNAL_REPORT_ID, c.NO as AUDITINTERNAL_REPORT_NO, c.NAME as AUDITINTERNAL_REPORT_NAME, b.NO, b.NAME, b.DT, a.BRLISTID, a.BRLISTNAME, a.BRLISTYR, a.BRLISTID2, a.BRLISTNAME2, a.BRLISTYR2, b.FILENAME, CASE WHEN b.ISCLOSED=0 THEN 'checked=\"checked\"' ELSE null END as ISCLOSED, CASE WHEN b.SUCCESSDATE is null THEN 'Байнга' ELSE b.SUCCESSDATE END as SUCCESSDATE FROM ( SELECT a.ID, a.BRLISTID, a.BRLISTNAME, a.BRLISTYR, NVL(RTRIM(xmlagg (xmlelement (e, b.BR_ID || ',') ORDER BY c.SORT).extract('//text()'), ','),'none') as BRLISTID2, NVL(RTRIM(xmlagg (xmlelement (e, c.DOMAIN_ORG || ',') ORDER BY c.SORT).extract('//text()'), ','),'none') as BRLISTNAME2, b.YR as BRLISTYR2 FROM ( SELECT a.ID, NVL(RTRIM(xmlagg (xmlelement (e, b.BR_ID || ',') ORDER BY d.SORT).extract('//text()'), ','),'none') as BRLISTID, NVL(RTRIM(xmlagg (xmlelement (e, d.DOMAIN_ORG || ',') ORDER BY d.SORT).extract('//text()'), ','),'none') as BRLISTNAME, TO_CHAR(a.CREATED_DATE,'YYYY') as BRLISTYR FROM TBL_AUDITINTERNAL_RECOMMEND a LEFT JOIN TBL_AUDITINTERNAL_REC_BR b ON a.ID=b.AUDITINTERNAL_RECOMMEND_ID INNER JOIN TBL_AUDITINTERNAL_REPORT c ON a.AUDITINTERNAL_REPORT_ID=c.ID LEFT JOIN TBL_BRANCH d ON b.BR_ID=d.BR_ID AND TO_NUMBER(TO_CHAR(a.CREATED_DATE,'YYYY'))=d.YR WHERE 1=1" + yr + reportid + gazar + " GROUP BY a.ID, TO_CHAR(a.CREATED_DATE,'YYYY') ) a LEFT JOIN TBL_AUDITINTERNAL_REC_BR2 b ON a.ID=b.AUDITINTERNAL_RECOMMEND_ID LEFT JOIN TBL_BRANCH c ON b.BR_ID=c.BR_ID AND b.YR=c.YR GROUP BY a.ID, a.BRLISTID, a.BRLISTNAME, a.BRLISTYR, b.YR ) a INNER JOIN TBL_AUDITINTERNAL_RECOMMEND b ON a.ID=b.ID INNER JOIN TBL_AUDITINTERNAL_REPORT c ON b.AUDITINTERNAL_REPORT_ID = c.ID ORDER BY c.NO, b.NO ) a");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void AuditinternalTab2Delete(string P_ID)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                string[] ParamName = new string[1], ParamValue = new string[1];
                ParamName[0] = "P_ID";
                ParamValue[0] = P_ID;
                myObj.SP_OracleExecuteNonQuery("AUDITINTERNAL_RECOMMEND_DELETE", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void AuditinternalTab2Insert(string P_AUDITINTERNAL_REPORT_ID, string P_NO, string P_NAME, string P_DT, string P_BRANCHLIST, string P_STAFFID, string P_SUCCESSDATE, string P_ISCLOSED)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[8], ParamValue = new string[8];
                ParamName[0] = "P_AUDITINTERNAL_REPORT_ID";
                ParamName[1] = "P_NO";
                ParamName[2] = "P_NAME";
                ParamName[3] = "P_DT";
                ParamName[4] = "P_BRANCHLIST";
                ParamName[5] = "P_STAFFID";
                ParamName[6] = "P_SUCCESSDATE";
                ParamName[7] = "P_ISCLOSED";
                ParamValue[0] = P_AUDITINTERNAL_REPORT_ID;
                ParamValue[1] = P_NO;
                ParamValue[2] = P_NAME;
                ParamValue[3] = P_DT;
                ParamValue[4] = P_BRANCHLIST;
                ParamValue[5] = P_STAFFID;
                ParamValue[6] = P_SUCCESSDATE;
                ParamValue[7] = P_ISCLOSED;
                myObj.SP_OracleExecuteNonQuery("AUDITINTERNAL_RECOMMEND_INSERT", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void AuditinternalTab2Update(string P_ID, string P_AUDITINTERNAL_REPORT_ID, string P_NO, string P_NAME, string P_DT, string P_BRANCHLIST, string P_BRANCHLIST2, string P_BRANCHLIST2YR, string P_STAFFID, string P_SUCCESSDATE, string P_ISCLOSED)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[11], ParamValue = new string[11];
                ParamName[0] = "P_ID";
                ParamName[1] = "P_AUDITINTERNAL_REPORT_ID";
                ParamName[2] = "P_NO";
                ParamName[3] = "P_NAME";
                ParamName[4] = "P_DT";
                ParamName[5] = "P_BRANCHLIST";
                ParamName[6] = "P_BRANCHLIST2";
                ParamName[7] = "P_BRANCHLIST2YR";
                ParamName[8] = "P_STAFFID";
                ParamName[9] = "P_SUCCESSDATE";
                ParamName[10] = "P_ISCLOSED";
                ParamValue[0] = P_ID;
                ParamValue[1] = P_AUDITINTERNAL_REPORT_ID;
                ParamValue[2] = P_NO;
                ParamValue[3] = P_NAME;
                ParamValue[4] = P_DT;
                ParamValue[5] = P_BRANCHLIST;
                ParamValue[6] = P_BRANCHLIST2;
                ParamValue[7] = P_BRANCHLIST2YR;
                ParamValue[8] = P_STAFFID;
                ParamValue[9] = P_SUCCESSDATE;
                ParamValue[10] = P_ISCLOSED;
                myObj.SP_OracleExecuteNonQuery("AUDITINTERNAL_RECOMMEND_UPDATE", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AuditinternalTab2ReportListRecForDDL()
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT a.AUDITINTERNAL_REPORT_ID, b.NO, b.NAME FROM ( SELECT AUDITINTERNAL_REPORT_ID FROM TBL_AUDITINTERNAL_RECOMMEND GROUP BY AUDITINTERNAL_REPORT_ID ) a INNER JOIN TBL_AUDITINTERNAL_REPORT b ON a.AUDITINTERNAL_REPORT_ID = b.ID ORDER BY b.YR DESC, b.MNTH DESC");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AuditinternalTab3Datatable(string yr, string qrtr, string reportid, string gazar)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (reportid != "") reportid = " AND c.AUDITINTERNAL_REPORT_ID=" + reportid;
            if (gazar != "") gazar = " AND b.BR_ID=" + gazar;
            string strQry = "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                strQry = @"SELECT ROWNUM as ROWNO, a.* FROM ( SELECT
      a.ID, 
      c.AUDITINTERNAL_REPORT_ID, 
      d.NO as AUDITINTERNAL_REPORT_NO, 
      d.NAME as AUDITINTERNAL_REPORT_NAME, 
      b.AUDITINTERNAL_RECOMMEND_ID, 
      c.NO as AUDITINTERNAL_REC_NO, 
      c.NAME as AUDITINTERNAL_REC_NAME, 
      c.DT as AUDITINTERNAL_REC_DT, 
      CASE WHEN c.SUCCESSDATE is null THEN 'Байнга' ELSE c.SUCCESSDATE END as AUDITINTERNAL_REC_SUCCESSDATE, 
      b.NO,
      b.NAME, 
      a.BRLISTNAME, NVL2(f.IMPL,'glyphicon-check txt-color-green','glyphicon-edit txt-color-red') as ISIMPL, f.EVAL
    FROM (
      SELECT a.ID, NVL(RTRIM(xmlagg(xmlelement(e, f.DOMAIN_ORG || ',') ORDER BY f.SORT).extract('//text()'), ','), 'none') as BRLISTNAME
      FROM TBL_AUDITINTERNAL_PLAN a
      INNER JOIN TBL_AUDITINTERNAL_PLAN_BR b ON a.ID = b.AUDITINTERNAL_PLAN_ID
      INNER JOIN TBL_AUDITINTERNAL_RECOMMEND c ON a.AUDITINTERNAL_RECOMMEND_ID = c.ID
      INNER JOIN TBL_AUDITINTERNAL_REPORT d ON c.AUDITINTERNAL_REPORT_ID = d.ID
      LEFT JOIN TBL_BRANCH f ON b.BR_ID = f.BR_ID AND TO_NUMBER(TO_CHAR(a.CREATED_DATE, 'YYYY')) = f.YR
      WHERE c.ISCLOSED=0 AND d.YR<=" + yr + reportid + gazar + @"
      GROUP BY a.ID
    ) a
    INNER JOIN TBL_AUDITINTERNAL_PLAN b ON a.ID = b.ID
    INNER JOIN TBL_AUDITINTERNAL_RECOMMEND c ON b.AUDITINTERNAL_RECOMMEND_ID = c.ID
    INNER JOIN TBL_AUDITINTERNAL_REPORT d ON c.AUDITINTERNAL_REPORT_ID = d.ID
    LEFT JOIN TBL_AUDITINTERNAL_PLAN_IMPL f ON a.ID=f.AUDITINTERNAL_PLAN_ID AND f.YR="+yr+" AND f.QRTR="+qrtr+ @"
    ORDER BY d.NO, c.NO, b.NO, b.NAME ) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AuditinternalTab4Datatable(string yr, string qrtr, string reportid, string gazar)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strPrevYear = "", strPrevQrtr = "";
            string strQry = "";
            if (qrtr == "1")
            {
                strPrevQrtr = "4";
                strPrevYear = (Convert.ToInt32(yr) - 1).ToString();
            }
            else
            {
                strPrevQrtr = (Convert.ToInt32(qrtr) - 1).ToString();
                strPrevYear = yr;
            }
            if (reportid != "") reportid = " AND c.AUDITINTERNAL_REPORT_ID=" + reportid;
            if (gazar != "") gazar = " AND b.BR_ID=" + gazar;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                strQry = @"SELECT
      a.ID, 
      c.AUDITINTERNAL_REPORT_ID, 
      d.NO as AUDITINTERNAL_REPORT_NO, 
      d.NAME as AUDITINTERNAL_REPORT_NAME, 
      b.AUDITINTERNAL_RECOMMEND_ID, 
      c.NO as AUDITINTERNAL_REC_NO, 
      c.NAME as AUDITINTERNAL_REC_NAME, 
      c.DT as AUDITINTERNAL_REC_DT, 
      CASE WHEN c.SUCCESSDATE is null THEN 'Байнга' ELSE c.SUCCESSDATE END as AUDITINTERNAL_REC_SUCCESSDATE, 
      b.NO,
      b.NAME, 
      a.BRLISTNAME, f.IMPL, f.EVAL, NVL(TO_CHAR(g.EVAL),'-') as PREVEVAL
    FROM (
      SELECT a.ID, NVL(RTRIM(xmlagg(xmlelement(e, f.DOMAIN_ORG || ',') ORDER BY f.SORT).extract('//text()'), ','), 'none') as BRLISTNAME
      FROM TBL_AUDITINTERNAL_PLAN a
      INNER JOIN TBL_AUDITINTERNAL_PLAN_BR b ON a.ID = b.AUDITINTERNAL_PLAN_ID
      INNER JOIN TBL_AUDITINTERNAL_RECOMMEND c ON a.AUDITINTERNAL_RECOMMEND_ID = c.ID
      INNER JOIN TBL_AUDITINTERNAL_REPORT d ON c.AUDITINTERNAL_REPORT_ID = d.ID
      LEFT JOIN TBL_BRANCH f ON b.BR_ID = f.BR_ID AND TO_NUMBER(TO_CHAR(a.CREATED_DATE, 'YYYY')) = f.YR
      WHERE c.ISCLOSED=0 AND d.YR<=" + yr + reportid + gazar + @"
      GROUP BY a.ID
    ) a
    INNER JOIN TBL_AUDITINTERNAL_PLAN b ON a.ID = b.ID
    INNER JOIN TBL_AUDITINTERNAL_RECOMMEND c ON b.AUDITINTERNAL_RECOMMEND_ID = c.ID
    INNER JOIN TBL_AUDITINTERNAL_REPORT d ON c.AUDITINTERNAL_REPORT_ID = d.ID
    LEFT JOIN TBL_AUDITINTERNAL_PLAN_IMPL f ON a.ID=f.AUDITINTERNAL_PLAN_ID AND f.YR="+yr+" AND f.QRTR="+qrtr+ @"
    LEFT JOIN TBL_AUDITINTERNAL_PLAN_IMPL g ON a.ID=g.AUDITINTERNAL_PLAN_ID AND g.YR=" + strPrevYear+" AND g.QRTR="+strPrevQrtr+@"
    ORDER BY d.NO, c.NO, b.NO, b.NAME";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AuditinternalTab5t1Datatable(string yr, string qrtr, string turul)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strQry = "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                if (turul == "1")
                {
                    strQry = @"SELECT 
  b.BR_NAME, 
  COUNT(a.AUDITINTERNAL_RECOMMEND_ID) as AUDITINTERNAL_RECOMMEND_CNT, 
  NVL(TO_CHAR(SUM(a.EVAL100)),'-') as EVAL100, 
  NVL(TO_CHAR(SUM(a.EVAL90)),'-') as EVAL90, 
  NVL(TO_CHAR(SUM(a.EVAL80)),'-') as EVAL80, 
  NVL(TO_CHAR(SUM(a.EVAL70)),'-') as EVAL70, 
  NVL(TO_CHAR(SUM(a.EVAL50)),'-') as EVAL50, 
  NVL(TO_CHAR(SUM(a.EVAL30)),'-') as EVAL30, 
  NVL(TO_CHAR(SUM(a.EVAL10)),'-') as EVAL10, 
  NVL(TO_CHAR(SUM(a.EVAL0)),'-') as EVAL0, 
  NVL(TO_CHAR(SUM(a.EVALNONE)),'-') as EVALNONE, 
  ROUND((((NVL(SUM(a.EVAL100),0)*100)+ (NVL(SUM(a.EVAL90),0)*90)+ (NVL(SUM(a.EVAL80),0)*80)+ (NVL(SUM(a.EVAL70),0)*70)+ (NVL(SUM(a.EVAL50),0)*50)+ (NVL(SUM(a.EVAL30),0)*30)+ (NVL(SUM(a.EVAL10),0)*10)+ (NVL(SUM(a.EVAL0),0)*0))/CASE WHEN ((NVL(SUM(a.EVAL100),0)+NVL(SUM(a.EVAL90),0)+NVL(SUM(a.EVAL80),0)+NVL(SUM(a.EVAL70),0)+NVL(SUM(a.EVAL50),0)+NVL(SUM(a.EVAL30),0)+NVL(SUM(a.EVAL10),0)+NVL(SUM(a.EVAL0),0))*100)=0 THEN 1 ELSE ((NVL(SUM(a.EVAL100),0)+NVL(SUM(a.EVAL90),0)+NVL(SUM(a.EVAL80),0)+NVL(SUM(a.EVAL70),0)+NVL(SUM(a.EVAL50),0)+NVL(SUM(a.EVAL30),0)+NVL(SUM(a.EVAL10),0)+NVL(SUM(a.EVAL0),0))*100) END)*100,1) as PERAVG, 
  b.SORT 
FROM( 
  SELECT 
    a.BR_ID, 
    a.AUDITINTERNAL_RECOMMEND_ID, 
    CASE WHEN a.AVGEVAL>90 AND a.AVGEVAL<=100 THEN 1 END as EVAL100, 
    CASE WHEN a.AVGEVAL>80 AND a.AVGEVAL<=90 THEN 1 END as EVAL90, 
    CASE WHEN a.AVGEVAL>70 AND a.AVGEVAL<=80 THEN 1 END as EVAL80, 
    CASE WHEN a.AVGEVAL>50 AND a.AVGEVAL<=70 THEN 1 END as EVAL70, 
    CASE WHEN a.AVGEVAL>30 AND a.AVGEVAL<=50 THEN 1 END as EVAL50, 
    CASE WHEN a.AVGEVAL>10 AND a.AVGEVAL<=30 THEN 1 END as EVAL30, 
    CASE WHEN a.AVGEVAL>0 AND a.AVGEVAL<=10 THEN 1 END as EVAL10, 
    CASE WHEN a.AVGEVAL=0 THEN 1 END as EVAL0, 
    CASE WHEN a.AVGEVAL is null THEN 1 END as EVALNONE 
  FROM (
    SELECT 
      d.BR_ID, 
      a.ID as AUDITINTERNAL_RECOMMEND_ID, 
      AVG(c.EVAL) as AVGEVAL
    FROM TBL_AUDITINTERNAL_RECOMMEND a 
    INNER JOIN TBL_AUDITINTERNAL_PLAN b ON a.ID=b.AUDITINTERNAL_RECOMMEND_ID
    INNER JOIN TBL_AUDITINTERNAL_PLAN_IMPL c ON b.ID=c.AUDITINTERNAL_PLAN_ID AND c.YR=" + yr + @" AND c.QRTR="+qrtr+@" AND c.IMPL IS NOT NULL 
    INNER JOIN TBL_AUDITINTERNAL_PLAN_BR d ON b.ID = d.AUDITINTERNAL_PLAN_ID 
    WHERE a.ISCLOSED=0 OR c.EVAL IS NOT NULL 
    GROUP BY d.BR_ID, a.ID
  ) a
) a 
INNER JOIN TBL_BRANCH b ON a.BR_ID = b.BR_ID AND b.YR = " + yr + @" 
GROUP BY b.BR_NAME, b.SORT 
ORDER BY b.SORT";
                }
                else if (turul == "2") {
                    strQry = @"SELECT 
  b.BR_NAME, 
  COUNT(a.AUDITINTERNAL_RECOMMEND_ID) as AUDITINTERNAL_RECOMMEND_CNT, 
  NVL(TO_CHAR(SUM(a.EVAL100)),'-') as EVAL100, 
  NVL(TO_CHAR(SUM(a.EVAL90)),'-') as EVAL90, 
  NVL(TO_CHAR(SUM(a.EVAL80)),'-') as EVAL80, 
  NVL(TO_CHAR(SUM(a.EVAL70)),'-') as EVAL70, 
  NVL(TO_CHAR(SUM(a.EVAL50)),'-') as EVAL50, 
  NVL(TO_CHAR(SUM(a.EVAL30)),'-') as EVAL30, 
  NVL(TO_CHAR(SUM(a.EVAL10)),'-') as EVAL10, 
  NVL(TO_CHAR(SUM(a.EVAL0)),'-') as EVAL0, 
  NVL(TO_CHAR(SUM(a.EVALNONE)),'-') as EVALNONE, 
  ROUND((((NVL(SUM(a.EVAL100),0)*100)+ (NVL(SUM(a.EVAL90),0)*90)+ (NVL(SUM(a.EVAL80),0)*80)+ (NVL(SUM(a.EVAL70),0)*70)+ (NVL(SUM(a.EVAL50),0)*50)+ (NVL(SUM(a.EVAL30),0)*30)+ (NVL(SUM(a.EVAL10),0)*10)+ (NVL(SUM(a.EVAL0),0)*0))/CASE WHEN ((NVL(SUM(a.EVAL100),0)+NVL(SUM(a.EVAL90),0)+NVL(SUM(a.EVAL80),0)+NVL(SUM(a.EVAL70),0)+NVL(SUM(a.EVAL50),0)+NVL(SUM(a.EVAL30),0)+NVL(SUM(a.EVAL10),0)+NVL(SUM(a.EVAL0),0))*100)=0 THEN 1 ELSE ((NVL(SUM(a.EVAL100),0)+NVL(SUM(a.EVAL90),0)+NVL(SUM(a.EVAL80),0)+NVL(SUM(a.EVAL70),0)+NVL(SUM(a.EVAL50),0)+NVL(SUM(a.EVAL30),0)+NVL(SUM(a.EVAL10),0)+NVL(SUM(a.EVAL0),0))*100) END)*100,1) as PERAVG, 
  b.SORT 
FROM( 
  SELECT 
    d.BR_ID, 
    a.ID as AUDITINTERNAL_RECOMMEND_ID, 
    CASE WHEN c.EVAL=100 THEN 1 END as EVAL100,
    CASE WHEN c.EVAL=90 THEN 1 END as EVAL90, 
    CASE WHEN c.EVAL=80 THEN 1 END as EVAL80, 
    CASE WHEN c.EVAL=70 THEN 1 END as EVAL70, 
    CASE WHEN c.EVAL=50 THEN 1 END as EVAL50, 
    CASE WHEN c.EVAL=30 THEN 1 END as EVAL30, 
    CASE WHEN c.EVAL=10 THEN 1 END as EVAL10, 
    CASE WHEN c.EVAL=0 THEN 1 END as EVAL0, 
    CASE WHEN c.EVAL is null THEN 1 END as EVALNONE 
  FROM TBL_AUDITINTERNAL_RECOMMEND a 
  INNER JOIN TBL_AUDITINTERNAL_PLAN b ON a.ID=b.AUDITINTERNAL_RECOMMEND_ID
  INNER JOIN TBL_AUDITINTERNAL_PLAN_IMPL c ON b.ID=c.AUDITINTERNAL_PLAN_ID AND c.YR="+yr+@" AND c.QRTR="+qrtr+ @" AND c.IMPL IS NOT NULL 
  INNER JOIN TBL_AUDITINTERNAL_PLAN_BR d ON b.ID = d.AUDITINTERNAL_PLAN_ID 
  WHERE a.ISCLOSED=0 OR c.EVAL IS NOT NULL
) a 
INNER JOIN TBL_BRANCH b ON a.BR_ID = b.BR_ID AND b.YR = " + yr + @" 
GROUP BY b.BR_NAME, b.SORT 
ORDER BY b.SORT";
                }
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AuditinternalTab5t2Datatable(string yr, string qrtr, string reportid, string gazar, string isimpl)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strQry = "";
            string isimpljoin = "LEFT";
            if (reportid != "") reportid = " AND b.AUDITINTERNAL_REPORT_ID=" + reportid;
            if (gazar != "") gazar = " AND b.BR_ID=" + gazar;
            if (isimpl != "")
            {
                if (isimpl == "1")
                {
                    isimpljoin = "INNER";
                    isimpl = " AND f.IMPL IS NOT NULL";
                }
                else isimpl = " AND f.IMPL IS NULL";
            }
            strQry = @"SELECT ROWNUM as ROWNO, a.* 
FROM ( 
  SELECT 
    a.ID, 
    b.AUDITINTERNAL_REPORT_ID, 
    c.NO as AUDITINTERNAL_REPORT_NO, 
    c.NAME as AUDITINTERNAL_REPORT_NAME, 
    b.NO as AUDITINTERNAL_RECOMMEND_NO, 
    b.NAME as AUDITINTERNAL_RECOMMEND_NAME, 
    b.DT, 
    g.NO,
    g.NAME, 
    a.BRLISTID, 
    a.BRLISTNAME, 
    a.BRLISTYR, 
    b.FILENAME, 
    f.IMPL, 
    f.EVAL 
  FROM ( 
    SELECT 
      a.ID, 
      NVL(RTRIM(xmlagg (xmlelement (e, b.BR_ID || ',') ORDER BY d.SORT).extract('//text()'), ','),'none') as BRLISTID, 
      NVL(RTRIM(xmlagg (xmlelement (e, ' '||d.DOMAIN_ORG || ',') ORDER BY d.SORT).extract('//text()'), ','),'none') as BRLISTNAME, 
      TO_CHAR(a.CREATED_DATE,'YYYY') as BRLISTYR 
    FROM TBL_AUDITINTERNAL_PLAN a 
    LEFT JOIN TBL_AUDITINTERNAL_PLAN_BR b ON a.ID=b.AUDITINTERNAL_PLAN_ID 
    INNER JOIN TBL_AUDITINTERNAL_RECOMMEND f ON a.AUDITINTERNAL_RECOMMEND_ID=f.ID
    INNER JOIN TBL_AUDITINTERNAL_REPORT c ON f.AUDITINTERNAL_REPORT_ID=c.ID 
    LEFT JOIN TBL_BRANCH d ON b.BR_ID=d.BR_ID AND TO_NUMBER(TO_CHAR(a.CREATED_DATE,'YYYY'))=d.YR 
    WHERE 1=1" + gazar + @"
    GROUP BY a.ID, TO_CHAR(a.CREATED_DATE,'YYYY') 
  ) a 
  INNER JOIN TBL_AUDITINTERNAL_PLAN g ON a.ID=g.ID
  INNER JOIN TBL_AUDITINTERNAL_RECOMMEND b ON g.AUDITINTERNAL_RECOMMEND_ID=b.ID 
  INNER JOIN TBL_AUDITINTERNAL_REPORT c ON b.AUDITINTERNAL_REPORT_ID = c.ID 
  " + isimpljoin + @" JOIN TBL_AUDITINTERNAL_PLAN_IMPL f ON a.ID=f.AUDITINTERNAL_PLAN_ID AND f.YR=" + yr + @" AND f.QRTR=" + qrtr + isimpl + @" 
  WHERE (b.ISCLOSED=0 OR f.EVAL IS NOT NULL)" + reportid + @"
  ORDER BY f.EVAL DESC, c.NO, b.NO 
) a";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AuditinternalTab5t3Datatable(string yr, string qrtr, string reportid, string gazar, string isimpl)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strQry = "";
            string isimpljoin = "LEFT";
            if (reportid != "") reportid = " AND b.AUDITINTERNAL_REPORT_ID=" + reportid;
            if (gazar != "") gazar = " AND b.BR_ID=" + gazar;
            if (isimpl != "")
            {
                if (isimpl == "1")
                {
                    isimpljoin = "INNER";
                    isimpl = " AND f.IMPL IS NOT NULL";
                }
                else isimpl = " AND f.IMPL IS NULL";

            }
            strQry = @"SELECT ROWNUM as ROWNO, a.* 
FROM ( 
  SELECT 
    a.ID, 
    b.AUDITINTERNAL_REPORT_ID, 
    c.NO as AUDITINTERNAL_REPORT_NO, 
    c.NAME as AUDITINTERNAL_REPORT_NAME, 
    b.NO as AUDITINTERNAL_RECOMMEND_NO, 
    b.NAME as AUDITINTERNAL_RECOMMEND_NAME, 
    b.DT, 
    g.NO,
    g.NAME, 
    a.BRLISTID, 
    a.BRLISTNAME, 
    a.BRLISTYR, 
    b.FILENAME, 
    f.IMPL, 
    f.EVAL 
  FROM ( 
    SELECT 
      a.ID, 
      NVL(RTRIM(xmlagg (xmlelement (e, b.BR_ID || ',') ORDER BY d.SORT).extract('//text()'), ','),'none') as BRLISTID, 
      NVL(RTRIM(xmlagg (xmlelement (e, ' '||d.DOMAIN_ORG || ',') ORDER BY d.SORT).extract('//text()'), ','),'none') as BRLISTNAME, 
      TO_CHAR(a.CREATED_DATE,'YYYY') as BRLISTYR 
    FROM TBL_AUDITINTERNAL_PLAN a 
    LEFT JOIN TBL_AUDITINTERNAL_PLAN_BR b ON a.ID=b.AUDITINTERNAL_PLAN_ID 
    INNER JOIN TBL_AUDITINTERNAL_RECOMMEND f ON a.AUDITINTERNAL_RECOMMEND_ID=f.ID
    INNER JOIN TBL_AUDITINTERNAL_REPORT c ON f.AUDITINTERNAL_REPORT_ID=c.ID 
    LEFT JOIN TBL_BRANCH d ON b.BR_ID=d.BR_ID AND TO_NUMBER(TO_CHAR(a.CREATED_DATE,'YYYY'))=d.YR 
    WHERE 1=1" + gazar + @"
    GROUP BY a.ID, TO_CHAR(a.CREATED_DATE,'YYYY') 
  ) a 
  INNER JOIN TBL_AUDITINTERNAL_PLAN g ON a.ID=g.ID
  INNER JOIN TBL_AUDITINTERNAL_RECOMMEND b ON g.AUDITINTERNAL_RECOMMEND_ID=b.ID 
  INNER JOIN TBL_AUDITINTERNAL_REPORT c ON b.AUDITINTERNAL_REPORT_ID = c.ID 
  " + isimpljoin + @" JOIN TBL_AUDITINTERNAL_PLAN_IMPL f ON a.ID=f.AUDITINTERNAL_PLAN_ID AND f.YR=" + yr + @" AND f.QRTR=" + qrtr + isimpl + @" 
  WHERE (b.ISCLOSED=0 OR f.EVAL IS NOT NULL)" + reportid + @"
  ORDER BY c.NO, b.NO 
) a";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }

        public string AuditinternalTab1t3Datatable(string yr, string reportid, string gazar)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (yr != "") yr = " AND (d.YR=" + yr + " OR c.ISCLOSED != 1)";
            if (reportid != "") reportid = " AND c.AUDITINTERNAL_REPORT_ID=" + reportid;
            if (gazar != "") gazar = " AND b.BR_ID=" + gazar;
            string strQry = "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                strQry = @"SELECT ROWNUM as ROWNO, a.* FROM ( SELECT
      a.ID, 
      c.AUDITINTERNAL_REPORT_ID, 
      d.NO as AUDITINTERNAL_REPORT_NO, 
      d.NAME as AUDITINTERNAL_REPORT_NAME, 
      b.AUDITINTERNAL_RECOMMEND_ID, 
      c.NO as AUDITINTERNAL_REC_NO, 
      c.NAME as AUDITINTERNAL_REC_NAME, 
      c.DT as AUDITINTERNAL_REC_DT, 
      CASE WHEN c.SUCCESSDATE is null THEN 'Байнга' ELSE c.SUCCESSDATE END as AUDITINTERNAL_REC_SUCCESSDATE, 
      b.NO,
      b.NAME, 
      a.BRLISTID, 
      a.BRLISTNAME
    FROM (
      SELECT a.ID, NVL(RTRIM(xmlagg(xmlelement(e, b.BR_ID || ',') ORDER BY f.SORT).extract('//text()'), ','), 'none') as BRLISTID, NVL(RTRIM(xmlagg(xmlelement(e, f.DOMAIN_ORG || ',') ORDER BY f.SORT).extract('//text()'), ','), 'none') as BRLISTNAME
      FROM TBL_AUDITINTERNAL_PLAN a
      INNER JOIN TBL_AUDITINTERNAL_PLAN_BR b ON a.ID = b.AUDITINTERNAL_PLAN_ID
      INNER JOIN TBL_AUDITINTERNAL_RECOMMEND c ON a.AUDITINTERNAL_RECOMMEND_ID = c.ID
      INNER JOIN TBL_AUDITINTERNAL_REPORT d ON c.AUDITINTERNAL_REPORT_ID = d.ID
      LEFT JOIN TBL_BRANCH f ON b.BR_ID = f.BR_ID AND TO_NUMBER(TO_CHAR(a.CREATED_DATE, 'YYYY')) = f.YR
      WHERE 1 = 1"+yr+reportid+gazar+@"
      GROUP BY a.ID, TO_CHAR(a.CREATED_DATE, 'YYYY')
    ) a
    INNER JOIN TBL_AUDITINTERNAL_PLAN b ON a.ID = b.ID
    INNER JOIN TBL_AUDITINTERNAL_RECOMMEND c ON b.AUDITINTERNAL_RECOMMEND_ID = c.ID
    INNER JOIN TBL_AUDITINTERNAL_REPORT d ON c.AUDITINTERNAL_REPORT_ID = d.ID
    ORDER BY d.NO, c.NO, b.NO, b.NAME ) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AuditinternalTab1t3GazarListForSelect2(string selectedList, string recid)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = "SELECT a.BR_ID, a.DOMAIN_ORG, CASE WHEN a.BR_TYPE1=3 THEN 'Дотоод нэгжүүд' WHEN a.BR_TYPE1=5 THEN 'Бусад' END as BR_TYPE1, a.BR_NAME, NVL2(b.BR_ID,' selected=\"selected\"',null) as ISSELECTED  FROM( SELECT a.BR_ID, b.DOMAIN_ORG, b.BR_TYPE1, b.BR_NAME FROM( SELECT b.BR_ID, TO_NUMBER(TO_CHAR(a.CREATED_DATE, 'YYYY')) as YR FROM TBL_AUDITINTERNAL_RECOMMEND a INNER JOIN TBL_AUDITINTERNAL_REC_BR b ON a.ID = b.AUDITINTERNAL_RECOMMEND_ID WHERE a.ID = "+recid+@" UNION ALL SELECT BR_ID, YR FROM TBL_AUDITINTERNAL_REC_BR2 WHERE AUDITINTERNAL_RECOMMEND_ID = "+recid+@" ) a INNER JOIN TBL_BRANCH b ON a.BR_ID = b.BR_ID AND a.YR = b.YR ORDER BY b.BR_TYPE1 ) a LEFT JOIN( SELECT TO_NUMBER(BR_ID) as BR_ID FROM( select regexp_substr('" + selectedList + "', '[^,]+', 1, level) AS BR_ID from dual connect by regexp_substr('" + selectedList + "', '[^,]+', 1, level) is not null ) a ) b ON a.BR_ID = b.BR_ID ORDER BY a.BR_TYPE1";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string AuditinternalTab1t3RecommendListForDDL(string reportid)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT ID, NO, NAME FROM TBL_AUDITINTERNAL_RECOMMEND WHERE AUDITINTERNAL_REPORT_ID=" + reportid + " AND ISCLOSED=0 ORDER BY NO, NAME");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void AuditinternalTab1t3Delete(string P_ID)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                string[] ParamName = new string[1], ParamValue = new string[1];
                ParamName[0] = "P_ID";
                ParamValue[0] = P_ID;
                myObj.SP_OracleExecuteNonQuery("AUDITINTERNAL_PLAN_DELETE", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void AuditinternalTab1t3Insert(string P_AUDITINTERNAL_RECOMMEND_ID, string P_NO, string P_NAME, string P_BRANCHLIST, string P_STAFFID)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[5], ParamValue = new string[5];
                ParamName[0] = "P_AUDITINTERNAL_RECOMMEND_ID";
                ParamName[1] = "P_NO";
                ParamName[2] = "P_NAME";
                ParamName[3] = "P_BRANCHLIST";
                ParamName[4] = "P_STAFFID";
                ParamValue[0] = P_AUDITINTERNAL_RECOMMEND_ID;
                ParamValue[1] = P_NO;
                ParamValue[2] = P_NAME;
                ParamValue[3] = P_BRANCHLIST;
                ParamValue[4] = P_STAFFID;
                myObj.SP_OracleExecuteNonQuery("AUDITINTERNAL_PLAN_INSERT", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void AuditinternalTab1t3Update(string P_ID, string P_AUDITINTERNAL_RECOMMEND_ID, string P_NO, string P_NAME, string P_BRANCHLIST, string P_STAFFID)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[6], ParamValue = new string[6];
                ParamName[0] = "P_ID";
                ParamName[1] = "P_AUDITINTERNAL_RECOMMEND_ID";
                ParamName[2] = "P_NO";
                ParamName[3] = "P_NAME";
                ParamName[4] = "P_BRANCHLIST";
                ParamName[5] = "P_STAFFID";
                ParamValue[0] = P_ID;
                ParamValue[1] = P_AUDITINTERNAL_RECOMMEND_ID;
                ParamValue[2] = P_NO;
                ParamValue[3] = P_NAME;
                ParamValue[4] = P_BRANCHLIST;
                ParamValue[5] = P_STAFFID;
                myObj.SP_OracleExecuteNonQuery("AUDITINTERNAL_PLAN_UPDATE", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }



        //*****brset.aspx*****//
        public string BrsetTab1ImportModalDatatable()
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT ID, NAME, BRANCH_TYPE_ID, FATHER_ID, SORT, INITNAME FROM hrdbuser.ST_BRANCH WHERE ISACTIVE=1 ORDER BY SORT");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string BrsetTab1Datatable(string yr)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT BR_ID, BR_NAME, BR_TYPE1, BR_MAIN_ID1, SORT, DOMAIN_ORG FROM TBL_BRANCH WHERE YR=" + yr + " ORDER BY BR_TYPE1, SORT");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }




        //*****lawakt.aspx*****//
        public string LawaktTabTypeListForDDL()
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT ID, NAME FROM TBL_LAWAKTTYPE ORDER BY NAME");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string LawaktTab1Datatable(string isactive, string tp)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (isactive != "") isactive = " AND a.ISACTIVE=" + isactive;
            if (tp != "") tp = " AND a.LAWAKTTYPE_ID=" + tp;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT ROWNUM as ROWNO, a.* FROM ( SELECT a.ID, a.SUCCESSDATE, a.NO, a.NAME, a.LAWAKTTYPE_ID, b.NAME as LAWAKTTYPE_NAME, CASE WHEN a.ISACTIVE = 1 THEN 'checked=\"checked\"' ELSE null END as ISACTIVE, a.FILENAME, a.DESCRIPTION FROM TBL_LAWAKT a INNER JOIN TBL_LAWAKTTYPE b ON a.LAWAKTTYPE_ID = b.ID WHERE 1=1" + isactive + tp + " ORDER BY a.ISACTIVE DESC, a.SUCCESSDATE DESC, a.NO ) a");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string LawaktTab2Datatable()
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT ROWNUM as ROWNO, a.* FROM ( SELECT ID, NAME FROM TBL_LAWAKTTYPE ORDER BY SORT ) a");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }




        //*****letter.aspx*****//
        public string LetterTab1Datatable1(string startdate, string enddate, string gazar)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (gazar != "") gazar = " AND b.BR_MAIN_ID1='" + gazar + "'";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry0 = "";
                strQry0 = @"SELECT b.BR_NAME, SUM(a.D1) AS D1, SUM(a.D2) AS D2, SUM(a.D3) AS D3, SUM(a.D4) AS D4 
FROM ( 
  SELECT b.BR_MAIN_ID1, COUNT(a.PKID) AS D1, 0 AS D2, 0 AS D3, 0 AS D4 
  FROM MOFDMS2016.dbo.Document a 
  INNER JOIN OPENQUERY(CMCDBBT,'SELECT INITNAME as DOMAIN_ORG, ID as BR_ID, BRANCH_TYPE_ID as BR_TYPE1, FATHER_ID as BR_MAIN_ID1, NAME as BR_NAME FROM hrdbuser.ST_BRANCH WHERE ISACTIVE=1') b ON A.TOBRID = b.BR_ID 
  WHERE a.DOCUMENTTYPE = 'I' AND a.DOCNOTEPKID != 51 AND a.PKID NOT IN ( SELECT PARENTPKID FROM MOFDMS2016.dbo.Document WITH(NOLOCK) WHERE PARENTPKID IS NOT NULL) AND a.REGDATE BETWEEN '" + startdate.Split('-')[0] + "-01-01 00:00:01' AND '" + enddate + " 23:59:59' AND b.BR_TYPE1 IN (1,2,3) " + gazar + @" 
  GROUP BY b.BR_MAIN_ID1
  UNION ALL
  SELECT b.BR_MAIN_ID1, 0 AS D1, COUNT(a.PKID)AS D2, 0 AS D3, 0 AS D4
  FROM MOFDMS2016.dbo.Document a
  INNER JOIN OPENQUERY(CMCDBBT, 'SELECT INITNAME as DOMAIN_ORG, ID as BR_ID, BRANCH_TYPE_ID as BR_TYPE1, FATHER_ID as BR_MAIN_ID1, NAME as BR_NAME FROM hrdbuser.ST_BRANCH WHERE ISACTIVE=1') b ON A.TOBRID = b.BR_ID
  WHERE a.DOCUMENTTYPE = 'I' AND a.DOCNOTEPKID != 51 AND a.PKID NOT IN(SELECT PARENTPKID FROM MOFDMS2016.dbo.Document WITH(NOLOCK) WHERE PARENTPKID IS NOT NULL) AND a.REGDATE BETWEEN '" + startdate.Split('-')[0] + "-01-01 00:00:01' AND '" + enddate + " 23:59:59' AND b.BR_TYPE1 IN (1,2,3) AND a.CONTROLNUM IS NOT NULL" + gazar + @"
  GROUP BY b.BR_MAIN_ID1
  UNION ALL
  SELECT b.BR_MAIN_ID1, 0 AS D1, 0 AS D2, COUNT(a.PKID) AS D3, 0 AS D4
  FROM MOFDMS2016.dbo.Document a
  INNER JOIN OPENQUERY(CMCDBBT, 'SELECT INITNAME as DOMAIN_ORG, ID as BR_ID, BRANCH_TYPE_ID as BR_TYPE1, FATHER_ID as BR_MAIN_ID1, NAME as BR_NAME FROM hrdbuser.ST_BRANCH WHERE ISACTIVE=1') b ON A.TOBRID = b.BR_ID
  WHERE a.DOCUMENTTYPE = 'I' AND a.DOCNOTEPKID != 51 AND a.PKID NOT IN(SELECT PARENTPKID FROM MOFDMS2016.dbo.Document WITH(NOLOCK) WHERE PARENTPKID IS NOT NULL) AND a.REGDATE BETWEEN '" + startdate + " 00:00:01' AND '" + enddate + " 23:59:59' AND b.BR_TYPE1 IN (1,2,3) " + gazar + @"
  GROUP BY b.BR_MAIN_ID1
  UNION ALL
  SELECT b.BR_MAIN_ID1, 0 AS D1, 0 AS D2, 0 AS D3, COUNT(a.PKID) AS D4
  FROM MOFDMS2016.dbo.Document a
  INNER JOIN OPENQUERY(CMCDBBT, 'SELECT INITNAME as DOMAIN_ORG, ID as BR_ID, BRANCH_TYPE_ID as BR_TYPE1, FATHER_ID as BR_MAIN_ID1, NAME as BR_NAME FROM hrdbuser.ST_BRANCH WHERE ISACTIVE=1') b ON A.TOBRID = b.BR_ID
  WHERE a.DOCUMENTTYPE = 'I' AND a.DOCNOTEPKID != 51 AND a.PKID NOT IN(SELECT PARENTPKID FROM MOFDMS2016.dbo.Document WITH(NOLOCK) WHERE PARENTPKID IS NOT NULL) AND a.REGDATE BETWEEN '" + startdate + " 00:00:01' AND '" + enddate + " 23:59:59' AND b.BR_TYPE1 IN (1,2,3) AND a.CONTROLNUM IS NOT NULL" + gazar + @"
  GROUP BY b.BR_MAIN_ID1
) a
INNER JOIN OPENQUERY(CMCDBBT,'SELECT INITNAME as DOMAIN_ORG, ID as BR_ID, FATHER_ID as BR_TYPE1, FATHER_ID as BR_MAIN_ID1, NAME as BR_NAME FROM hrdbuser.ST_BRANCH WHERE ISACTIVE=1') b ON b.BR_ID = a.BR_MAIN_ID1
GROUP BY b.BR_NAME";
                DataSet ds = myObj.ExecuteDataSet(strQry0);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string LetterTab1Datatable2(string startdate, string enddate, string gazar)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (gazar != "") gazar = " AND b.BR_MAIN_ID1='" + gazar + "'";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry1 = "";
                strQry1 = @"SELECT b.BR_NAME, SUM(a.D21) AS D21, SUM(a.D22) AS D22, SUM(a.D23) AS D23, SUM(a.D31) AS D31, SUM(a.D32) AS D32, SUM(a.D33) AS D33 
FROM ( 
  SELECT b.BR_MAIN_ID1, COUNT(a.PKID) AS D21, 0 AS D22, 0 AS D23, 0 as D31, 0 as D32, 0 as D33 
  FROM MOFDMS2016.dbo.Document a 
  INNER JOIN OPENQUERY(CMCDBBT,'SELECT INITNAME as DOMAIN_ORG, ID as BR_ID, BRANCH_TYPE_ID as BR_TYPE1, FATHER_ID as BR_MAIN_ID1, NAME as BR_NAME FROM hrdbuser.ST_BRANCH WHERE ISACTIVE=1 ') b ON A.TOBRID = b.BR_ID 
  WHERE a.DOCUMENTTYPE = 'I' AND a.DOCNOTEPKID != 51 AND a.PKID NOT IN (SELECT PARENTPKID FROM MOFDMS2016.dbo.Document WITH(NOLOCK) WHERE PARENTPKID IS NOT NULL) AND b.BR_TYPE1 IN (1,2,3) AND a.CONTROLNUM IS NOT NULL AND a.ISREPLYDOC='Y' AND a.STATUS = 'N' AND a.CLOSEDDATE IS NOT NULL AND a.CLOSEDDATE BETWEEN '" + startdate + " 00:00:01' AND '" + enddate + " 23:59:59' AND a.RETURNDATE >= a.CLOSEDDATE" + gazar + @" 
  GROUP BY b.BR_MAIN_ID1
  UNION ALL
  SELECT b.BR_MAIN_ID1, 0 AS D21, COUNT(a.PKID)AS D22, 0 AS D23, 0 as D31, 0 as D32, 0 as D33
  FROM MOFDMS2016.dbo.Document a
  INNER JOIN OPENQUERY(CMCDBBT, 'SELECT INITNAME as DOMAIN_ORG, ID as BR_ID, BRANCH_TYPE_ID as BR_TYPE1, FATHER_ID as BR_MAIN_ID1, NAME as BR_NAME FROM hrdbuser.ST_BRANCH WHERE ISACTIVE=1 ') b ON A.TOBRID = b.BR_ID
  WHERE a.DOCUMENTTYPE = 'I' AND a.DOCNOTEPKID != 51 AND a.PKID NOT IN(SELECT PARENTPKID FROM MOFDMS2016.dbo.Document WITH(NOLOCK) WHERE PARENTPKID IS NOT NULL) AND b.BR_TYPE1 IN (1,2,3) AND a.CONTROLNUM IS NOT NULL AND a.ISREPLYDOC = 'Y' AND a.STATUS = 'N' AND a.CLOSEDDATE IS NOT NULL AND LEFT(a.RETURNDATE, 10) + ' 23:59:59' < a.CLOSEDDATE AND a.CLOSEDDATE BETWEEN '" + startdate + " 00:00:01' AND '" + enddate + " 23:59:59'" + gazar + @"
  GROUP BY b.BR_MAIN_ID1
  UNION ALL
  SELECT b.BR_MAIN_ID1, 0 AS D21, 0 AS D22, COUNT(a.PKID) AS D23, 0 as D31, 0 as D32, 0 as D33
  FROM MOFDMS2016.dbo.Document a
  INNER JOIN OPENQUERY(CMCDBBT, 'SELECT INITNAME as DOMAIN_ORG, ID as BR_ID, BRANCH_TYPE_ID as BR_TYPE1, FATHER_ID as BR_MAIN_ID1, NAME as BR_NAME FROM hrdbuser.ST_BRANCH WHERE ISACTIVE=1 ') b ON A.TOBRID = b.BR_ID
  WHERE a.DOCUMENTTYPE = 'I' AND a.DOCNOTEPKID != 51 AND a.PKID NOT IN(SELECT PARENTPKID FROM MOFDMS2016.dbo.Document WITH(NOLOCK) WHERE PARENTPKID IS NOT NULL) AND b.BR_TYPE1 IN (1,2,3) AND a.CONTROLNUM IS NOT NULL AND a.RETURNDATE <= '" + enddate + " 23:59:59' AND(a.CLOSEDDATE > '" + enddate + " 23:59:59' OR a.CLOSEDDATE IS NULL)" + gazar + @"
  GROUP BY b.BR_MAIN_ID1
  UNION ALL
  SELECT b.BR_MAIN_ID1, 0 AS D21, 0 AS D22, 0 AS D23, COUNT(a.PKID) as D31, 0 as D32, 0 as D33
  FROM MOFDMS2016.dbo.Document a
  INNER JOIN OPENQUERY(CMCDBBT, 'SELECT INITNAME as DOMAIN_ORG, ID as BR_ID, BRANCH_TYPE_ID as BR_TYPE1, FATHER_ID as BR_MAIN_ID1, NAME as BR_NAME FROM hrdbuser.ST_BRANCH WHERE ISACTIVE=1 ') b ON A.TOBRID = b.BR_ID
  WHERE a.DOCUMENTTYPE = 'I' AND a.DOCNOTEPKID != 51 AND a.PKID NOT IN(SELECT PARENTPKID FROM MOFDMS2016.dbo.Document WITH(NOLOCK) WHERE PARENTPKID IS NOT NULL) AND b.BR_TYPE1 IN (1,2,3) AND a.CONTROLNUM IS NOT NULL AND a.ISREPLYDOC = 'Y' AND a.RETURNDATE >= '" + enddate + " 23:59:59' AND a.REGDATE <= '" + enddate + " 23:59:59' AND (a.CLOSEDDATE > '" + enddate + " 23:59:59' OR a.CLOSEDDATE IS NULL)" + gazar + @"
  GROUP BY b.BR_MAIN_ID1
  UNION ALL
  SELECT b.BR_MAIN_ID1, 0 AS D21, 0 AS D22, 0 AS D23, 0 as D31, COUNT(a.PKID) as D32, 0 as D33
  FROM MOFDMS2016.dbo.Document a
  INNER JOIN OPENQUERY(CMCDBBT, 'SELECT INITNAME as DOMAIN_ORG, ID as BR_ID, BRANCH_TYPE_ID as BR_TYPE1, FATHER_ID as BR_MAIN_ID1, NAME as BR_NAME FROM hrdbuser.ST_BRANCH WHERE ISACTIVE=1 ') b ON A.TOBRID = b.BR_ID
  WHERE a.DOCUMENTTYPE = 'I' AND a.DOCNOTEPKID != 51 AND a.PKID NOT IN(SELECT PARENTPKID FROM MOFDMS2016.dbo.Document WITH(NOLOCK) WHERE PARENTPKID IS NOT NULL) AND b.BR_TYPE1 IN (1,2,3) AND a.CONTROLNUM IS NOT NULL AND a.ISREPLYDOC = 'Y' AND a.CLOSEDDATE IS NULL" + gazar + @"
  GROUP BY b.BR_MAIN_ID1
  UNION ALL
  SELECT b.BR_MAIN_ID1, 0 AS D21, 0 AS D22, 0 AS D23, 0 as D31, 0 as D32, COUNT(a.PKID) as D33
  FROM MOFDMS2016.dbo.Document a
  INNER JOIN OPENQUERY(CMCDBBT, 'SELECT INITNAME as DOMAIN_ORG, ID as BR_ID, BRANCH_TYPE_ID as BR_TYPE1, FATHER_ID as BR_MAIN_ID1, NAME as BR_NAME FROM hrdbuser.ST_BRANCH WHERE ISACTIVE=1 ') b ON A.TOBRID = b.BR_ID
  WHERE a.DOCUMENTTYPE = 'I' AND a.DOCNOTEPKID != 51 AND a.PKID NOT IN(SELECT PARENTPKID FROM MOFDMS2016.dbo.Document WITH(NOLOCK) WHERE PARENTPKID IS NOT NULL) AND b.BR_TYPE1 IN (1,2,3) AND a.CONTROLNUM IS NOT NULL AND a.ISREPLYDOC = 'Y' AND a.CLOSEDDATE IS NULL AND a.RETURNDATE <= GETDATE()" + gazar + @"
  GROUP BY b.BR_MAIN_ID1
) a
INNER JOIN OPENQUERY(CMCDBBT,'SELECT INITNAME as DOMAIN_ORG, ID as BR_ID, BRANCH_TYPE_ID as BR_TYPE1, FATHER_ID as BR_MAIN_ID1, NAME as BR_NAME FROM hrdbuser.ST_BRANCH WHERE ISACTIVE=1 ') b ON b.BR_ID = a.BR_MAIN_ID1
GROUP BY b.BR_NAME";
                DataSet ds = myObj.ExecuteDataSet(strQry1);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string LetterTab2Datatable(string startdate, string enddate, string gazar)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (gazar != "") gazar = " AND n.BR_ID=" + gazar + "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = @"SELECT CONVERT(DATETIME, a.REGDATE ,110) AS REGDATE, CONVERT(DATETIME, a.DOCDATE ,110) AS DOCDATE, a.DOCNUM, a.INFROMWHO, a.SHORTDESC, a.CLOSEDDATE, a.RETURNDATE, SUBSTRING(s.MNAME, 1, 1) as MNAME, s.LNAME, n.DOMAIN_ORG, SUBSTRING(m.MNAME, 1, 1) as MNAME, m.LNAME, a.CONTROLDIRECTION, c.NAME as ORGNAME 
FROM MOFDMS2016.dbo.Document a 
INNER JOIN OPENQUERY(CMCDBBT,'SELECT INITNAME as DOMAIN_ORG, ID as BR_ID, BRANCH_TYPE_ID as BR_TYPE1, FATHER_ID as BR_MAIN_ID1, NAME as BR_NAME FROM hrdbuser.ST_BRANCH WHERE ISACTIVE=1') b ON A.TOBRID = b.BR_ID 
INNER JOIN OPENQUERY(CMCDBBT,'SELECT INITNAME as DOMAIN_ORG, ID as BR_ID, BRANCH_TYPE_ID as BR_TYPE1, FATHER_ID as BR_MAIN_ID1, NAME as BR_NAME FROM hrdbuser.ST_BRANCH WHERE ISACTIVE=1') n ON n.BR_ID = b.BR_MAIN_ID1 
LEFT JOIN OPENQUERY(CMCDBBT,'SELECT LNAME AS MNAME, FNAME AS LNAME, ID AS ST_ID FROM hrdbuser.ST_STAFFS') s ON s.ST_ID = a.STAFFID 
LEFT JOIN OPENQUERY(CMCDBBT,'SELECT LNAME AS MNAME, FNAME AS LNAME, ID AS ST_ID FROM hrdbuser.ST_STAFFS') m ON m.ST_ID = a.TOSTAFFID 
INNER JOIN MOFDMS2016.dbo.OrganizationType c ON a.ORGANIZATIONTYPEPKID=c.PKID 
WHERE a.DOCUMENTTYPE = 'I' AND a.DOCNOTEPKID != 51 AND a.PKID NOT IN ( SELECT PARENTPKID FROM MOFDMS2016.dbo.Document WITH(NOLOCK) WHERE PARENTPKID IS NOT NULL ) AND b.BR_TYPE1 IN (1,2,3) AND a.CONTROLNUM IS NOT NULL AND a.ISREPLYDOC='Y' AND a.STATUS = 'N' AND a.CLOSEDDATE IS NOT NULL AND LEFT(a.RETURNDATE,10)+' 23:59:59' < a.CLOSEDDATE AND a.CLOSEDDATE BETWEEN '" + startdate + " 00:00:01' AND '" + enddate + " 23:59:59' "+gazar;
                DataSet ds = myObj.ExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string LetterTab3Datatable(string startdate, string enddate, string gazar)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (gazar != "") gazar = " AND n.BR_ID=" + gazar + "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = @"SELECT CONVERT(DATETIME, a.REGDATE ,110) AS REGDATE, CONVERT(DATETIME, a.DOCDATE ,110) AS DOCDATE, a.DOCNUM, a.INFROMWHO, a.SHORTDESC, a.CLOSEDDATE, a.RETURNDATE, SUBSTRING(s.MNAME, 1, 1) as MNAME, s.LNAME, n.DOMAIN_ORG, SUBSTRING(m.MNAME, 1, 1) as MNAME, m.LNAME, a.CONTROLDIRECTION, c.NAME as ORGNAME 
FROM MOFDMS2016.dbo.Document a 
INNER JOIN OPENQUERY(CMCDBBT,'SELECT INITNAME as DOMAIN_ORG, ID as BR_ID, BRANCH_TYPE_ID as BR_TYPE1, FATHER_ID as BR_MAIN_ID1, NAME as BR_NAME FROM hrdbuser.ST_BRANCH WHERE ISACTIVE=1') b ON A.TOBRID = b.BR_ID 
INNER JOIN OPENQUERY(CMCDBBT,'SELECT INITNAME as DOMAIN_ORG, ID as BR_ID, BRANCH_TYPE_ID as BR_TYPE1, FATHER_ID as BR_MAIN_ID1, NAME as BR_NAME FROM hrdbuser.ST_BRANCH WHERE ISACTIVE=1') n ON n.BR_ID = b.BR_MAIN_ID1 
LEFT JOIN OPENQUERY(CMCDBBT,'SELECT LNAME AS MNAME, FNAME AS LNAME, ID AS ST_ID FROM hrdbuser.ST_STAFFS') s ON s.ST_ID = a.STAFFID 
LEFT JOIN OPENQUERY(CMCDBBT,'SELECT LNAME AS MNAME, FNAME AS LNAME, ID AS ST_ID FROM hrdbuser.ST_STAFFS') m ON m.ST_ID = a.TOSTAFFID 
INNER JOIN MOFDMS2016.dbo.OrganizationType c ON a.ORGANIZATIONTYPEPKID=c.PKID 
WHERE a.DOCUMENTTYPE = 'I' AND a.DOCNOTEPKID != 51 AND a.PKID NOT IN ( SELECT PARENTPKID FROM MOFDMS2016.dbo.Document WITH(NOLOCK) WHERE PARENTPKID IS NOT NULL ) AND b.BR_TYPE1 IN (1,2,3) AND a.CONTROLNUM IS NOT NULL AND a.RETURNDATE <= '" + enddate + " 23:59:59' AND ( a.CLOSEDDATE > '" + enddate + " 23:59:59' OR a.CLOSEDDATE IS NULL )" + gazar;
                DataSet ds = myObj.ExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }




        //*****risk.aspx*****//
        public string RiskTab1Datatable(string startdate, string enddate, string gazarid, string classid)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (gazarid != "") gazarid = " AND b.BR_ID=" + gazarid;
            if (classid != "") classid = " AND RISK_CLASS_ID=" + classid;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT ROWNUM as ROWNO, a.* FROM ( SELECT a.RISK_ID, b.CONFIRM_DT, c.ID as RISK_CLASS_NO, c.ID||'. '||c.NAME as RISK_CLASS_NAME, a.BRLISTID, a.BRLISTNAME, b.NO as RISK_NO, b.NAME as RISK_NAME, b.PROBABILITY, b.IMPACT, b.PROBABILITY*b.IMPACT as NIILBER, CASE WHEN b.PROBABILITY*b.IMPACT < 9 THEN 'Бага' WHEN b.PROBABILITY*b.IMPACT > 8 AND b.PROBABILITY*b.IMPACT < 18 THEN 'Дунд' WHEN b.PROBABILITY*b.IMPACT > 17 THEN 'Их' END as RATE, b.STATUS as STATUS_ID, d.NAME as STATUS_NAME, b.DESC1, b.DESC2, b.DESC3, b.DESC4, NVL2(b.FILE_NAME,1,0) as ISFILE, b.FILE_NAME FROM ( SELECT a.RISK_ID, NVL(RTRIM(xmlagg (xmlelement (e, c.BR_ID || ',') ORDER BY c.SORT).extract('//text()'), ','),'none') as BRLISTID, NVL(RTRIM(xmlagg (xmlelement (e, c.DOMAIN_ORG || ',') ORDER BY c.SORT).extract('//text()'), ','),'none') as BRLISTNAME FROM ( SELECT b.RISK_ID FROM TBL_RISK a INNER JOIN TBL_RISK_BR b ON a.ID=b.RISK_ID WHERE TO_DATE(a.CONFIRM_DT, 'yyyy-mm-dd') BETWEEN TO_DATE('" + startdate + "','yyyy-mm-dd') AND TO_DATE('" + enddate + "','yyyy-mm-dd')" + gazarid + classid + " GROUP BY b.RISK_ID ) a INNER JOIN TBL_RISK_BR b ON a.RISK_ID=b.RISK_ID INNER JOIN TBL_BRANCH c ON b.BR_ID=c.BR_ID AND c.YR=(SELECT YR FROM TBL_SYSSET WHERE ACTIVE=1) GROUP BY a.RISK_ID ) a INNER JOIN TBL_RISK b ON a.RISK_ID=b.ID INNER JOIN TBL_RISK_CLASS c ON b.RISK_CLASS_ID=c.ID INNER JOIN TBL_RISK_STATUS d ON b.STATUS=d.ID ORDER BY b.NO ) a");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void RISK_INSERT(string P_CONFIRM_DT, string P_RISK_CLASS_ID, string P_NO, string P_NAME, string P_PROBABILITY, string P_IMPACT, string P_STATUS, string P_DESC1, string P_DESC2, string P_DESC3, string P_DESC4, string P_FILE_NAME, string P_BRLIST, string P_STAFFID)
        {
            GetTableData myObjGetTableData = new GetTableData();
            ModifyDB myObj = new ModifyDB();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[14], ParamValue = new string[14];
                ParamName[0] = "P_CONFIRM_DT";
                ParamName[1] = "P_RISK_CLASS_ID";
                ParamName[2] = "P_NO";
                ParamName[3] = "P_NAME";
                ParamName[4] = "P_PROBABILITY";
                ParamName[5] = "P_IMPACT";
                ParamName[6] = "P_STATUS";
                ParamName[7] = "P_DESC1";
                ParamName[8] = "P_DESC2";
                ParamName[9] = "P_DESC3";
                ParamName[10] = "P_DESC4";
                ParamName[11] = "P_FILE_NAME";
                ParamName[12] = "P_BRLIST";
                ParamName[13] = "P_STAFFID";
                ParamValue[0] = P_CONFIRM_DT;
                ParamValue[1] = P_RISK_CLASS_ID;
                ParamValue[2] = P_NO;
                ParamValue[3] = P_NAME;
                ParamValue[4] = P_PROBABILITY;
                ParamValue[5] = P_IMPACT;
                ParamValue[6] = P_STATUS;
                ParamValue[7] = P_DESC1;
                ParamValue[8] = P_DESC2;
                ParamValue[9] = P_DESC3;
                ParamValue[10] = P_DESC4;
                ParamValue[11] = P_FILE_NAME;
                ParamValue[12] = P_BRLIST;
                ParamValue[13] = P_STAFFID;
                myObj.SP_OracleExecuteNonQuery("RISK_INSERT", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void RISK_UPDATE(string P_ID, string P_CONFIRM_DT, string P_RISK_CLASS_ID, string P_NO, string P_NAME, string P_PROBABILITY, string P_IMPACT, string P_STATUS, string P_DESC1, string P_DESC2, string P_DESC3, string P_DESC4, string P_FILE_NAME, string P_BRLIST, string P_STAFFID)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[15], ParamValue = new string[15];
                ParamName[0] = "P_ID";
                ParamName[1] = "P_CONFIRM_DT";
                ParamName[2] = "P_RISK_CLASS_ID";
                ParamName[3] = "P_NO";
                ParamName[4] = "P_NAME";
                ParamName[5] = "P_PROBABILITY";
                ParamName[6] = "P_IMPACT";
                ParamName[7] = "P_STATUS";
                ParamName[8] = "P_DESC1";
                ParamName[9] = "P_DESC2";
                ParamName[10] = "P_DESC3";
                ParamName[11] = "P_DESC4";
                ParamName[12] = "P_FILE_NAME";
                ParamName[13] = "P_BRLIST";
                ParamName[14] = "P_STAFFID";
                ParamValue[0] = P_ID;
                ParamValue[1] = P_CONFIRM_DT;
                ParamValue[2] = P_RISK_CLASS_ID;
                ParamValue[3] = P_NO;
                ParamValue[4] = P_NAME;
                ParamValue[5] = P_PROBABILITY;
                ParamValue[6] = P_IMPACT;
                ParamValue[7] = P_STATUS;
                ParamValue[8] = P_DESC1;
                ParamValue[9] = P_DESC2;
                ParamValue[10] = P_DESC3;
                ParamValue[11] = P_DESC4;
                ParamValue[12] = P_FILE_NAME;
                ParamValue[13] = P_BRLIST;
                ParamValue[14] = P_STAFFID;
                myObj.SP_OracleExecuteNonQuery("RISK_UPDATE", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void RISK_DELETE(string P_ID)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[1], ParamValue = new string[1];
                ParamName[0] = "P_ID";
                ParamValue[0] = P_ID;
                myObj.SP_OracleExecuteNonQuery("RISK_DELETE", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }




        //*****setrole.aspx*****//
        public string SetroleTab1Datatable(string gazar, string heltes)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (gazar != "")  gazar = " AND f.BR_ID=" + gazar;
            if (heltes != "") heltes = " AND d.BR_ID=" + heltes;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT ROWNUM as ROWNO, a.* FROM( SELECT a.ID as ST_ID, SUBSTR(a.FNAME, 0, 1) || LOWER(SUBSTR(a.FNAME, 2)) as FNAME, SUBSTR(a.LNAME, 0, 1) || LOWER(SUBSTR(a.LNAME, 2)) as LNAME, NVL(g.POS_NAME, '-') as POS_NAME, f.DOMAIN_ORG as GAZARNAME, d.DOMAIN_ORG as HELTESNAME, NVL(c.ROLES, 'none') as ROLES FROM hrdbuser.ST_STAFFS a INNER JOIN hrdbuser.ST_STBR b ON a.ID = b.STAFFS_ID AND b.ISACTIVE = 1 INNER JOIN hrdbuser.STN_MOVE h ON b.MOVE_ID=h.ID AND h.ACTIVE=1 LEFT JOIN( SELECT USER_ID as ST_ID, NVL(RTRIM(xmlagg(xmlelement(e, ROLE_ID || ',') ORDER BY ROLE_ID).extract('//text()'), ','), 'none') as ROLES FROM TBL_USER_ROLE GROUP BY USER_ID ) c ON a.ID = c.ST_ID INNER JOIN TBL_BRANCH d ON b.BRANCH_ID = d.BR_ID AND d.YR = (SELECT YR FROM TBL_SYSSET WHERE ACTIVE = 1) INNER JOIN TBL_BRANCH f ON d.BR_MAIN_ID1 = f.BR_ID AND f.YR = (SELECT YR FROM TBL_SYSSET WHERE ACTIVE = 1) LEFT JOIN ST_POS g ON b.POS_ID = g.POS_ID WHERE 1=1" + gazar + heltes + " ORDER BY f.SORT, d.SORT, g.SORT ) a");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void ROLE_USER(string USER_ID, string ROLE_ID)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[2], ParamValue = new string[2];
                ParamName[0] = "R_USER_ID";
                ParamName[1] = "R_ROLE_LIST";
                ParamValue[0] = USER_ID;
                ParamValue[1] = ROLE_ID; ;
                myObj.SP_OracleExecuteNonQuery("ROLE_USER", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }




        //*****sysset.aspx*****//
        public void Sysset_SaveMainSet(string yr, string hyr, string qrtr, string month)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                myObj.OracleExecuteNonQuery("UPDATE TBL_SYSSET SET ACTIVE=0");
                myObj.OracleExecuteNonQuery("UPDATE TBL_SYSSET SET ACTIVE=1 WHERE YR=" + yr + " AND YR_H=" + hyr + " AND QRTR=" + qrtr + " AND MONTH=" + month);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }



        //*****timeinfo.aspx*****//
        public string TimeinfoTab1Calendar(string yr)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strTableVal = "[";
                DataSet ds = myObj.OracleExecuteDataSet("SELECT TO_NUMBER(TO_CHAR(DT,'MM')) as MNTH, TO_NUMBER(TO_CHAR(DT,'DD')) as D FROM TBL_TIMEINFO WHERE TO_CHAR(DT,'YYYY') = '" + yr + "'");
                if (ds.Tables[0].Rows.Count != 0)
                {
                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {
                        strTableVal += "[" + dr[0].ToString() + "," + dr[1].ToString() + "],";
                    }
                }
                if (strTableVal != "[") strTableVal = strTableVal.Remove(strTableVal.Length - 1);
                strTableVal += "]";
                return strTableVal;
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string TimeinfoDateListForDDL(string yr, string mnth)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT TO_CHAR(DT,'DD') as D, TO_CHAR(DT,'YYYY-MM-DD') as DT FROM TBL_TIMEINFO WHERE TO_NUMBER(TO_CHAR(DT,'YYYY'))=" + yr + " AND TO_NUMBER(TO_CHAR(DT,'MM'))=" + mnth + " ORDER BY DT");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string TimeinfoTab2Datatable(string yr, string mnth, string day, string gazar, string heltes)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (gazar != "") gazar = " AND d.BR_MAIN_ID1=" + gazar;
            if (heltes != "") heltes = " AND d.BR_ID=" + heltes;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = @"SELECT ROWNUM as ROWNO, " + mnth + " as mnth, '" + yr + "-" + mnth + "-" + day + @"' dt, a.NEGJ, a.POSNAME, a.STAFFNAME, a.ST_ID, a.TP, a.TPNAME, a.ISCAME 
FROM ( 
  SELECT 
    CASE WHEN f.BR_ID=f.BR_MAIN_ID1 THEN f.DOMAIN_ORG ELSE g.DOMAIN_ORG||'-'||f.DOMAIN_ORG END as NEGJ
    , d.NAME as POSNAME
    , a.ST_ID
    , (SUBSTR(b.LNAME,0,1)||'.'||SUBSTR(b.FNAME,0,1)||LOWER(SUBSTR(b.FNAME,2))) as STAFFNAME
    , a.TP
    , CASE WHEN a.TP=11 OR a.TP=12 THEN 'Чөлөөтэй' WHEN a.TP=13 THEN 'Өвчтэй' WHEN a.TP=21 THEN 'Ээлжийн амралттай' WHEN a.TP=31 THEN 'Албан томилолт' END as TPNAME
    , a.ISCAME 
  FROM ( 
    SELECT a.ST_ID, a.TP, COUNT(b.ST_ID) as ISCAME 
    FROM ( 
      SELECT a.ST_ID, b.TP 
      FROM ( 
        SELECT a.ID as ST_ID
        FROM hrdbuser.ST_STAFFS a
        INNER JOIN hrdbuser.ST_STBR b ON a.ID=b.STAFFS_ID AND b.ISACTIVE=1
        INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID=c.ID AND c.ACTIVE=1
        INNER JOIN TBL_BRANCH d ON b.BRANCH_ID=d.BR_ID AND d.YR=" + yr + @"
        WHERE b.POS_ID != 2020102" + gazar + heltes + @"
        GROUP BY a.ID
      ) a 
      LEFT JOIN ( 
        SELECT DT, STAFFS_ID as ST_ID, MAX(TP) as TP
        FROM (
          SELECT b.DT, a.STAFFS_ID, 11 as TP
          FROM hrdbuser.ST_CHULUUDAYF3 a,
          (
            SELECT TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD')+(ROWNUM-1) DT FROM DUAL
            CONNECT BY LEVEL<=TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD')-TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD') 
          ) b
          WHERE 
            TO_DATE(a.BEGINDT, 'YYYY-MM-DD') <= TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD')
            AND 
            TO_DATE(a.ENDDT, 'YYYY-MM-DD') >= TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD')
          UNION ALL
          SELECT b.DT, a.STAFFS_ID, 12 as TP
          FROM hrdbuser.ST_CHULUUDAYT2 a,
          (
            SELECT TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD')+(ROWNUM-1) DT FROM DUAL
            CONNECT BY LEVEL<=TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD')-TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD')  
          ) b
          WHERE 
            a.ISRECEIVED=1 AND
            TO_DATE(a.BEGINDT, 'YYYY-MM-DD') <= TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD')
            AND 
            TO_DATE(a.ENDDT, 'YYYY-MM-DD') >= TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD')
          UNION ALL
          SELECT b.DT, a.STAFFS_ID, 13 as TP
          FROM hrdbuser.ST_CHULUUSICK a,
          (
            SELECT TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD')+(ROWNUM-1) DT FROM DUAL
            CONNECT BY LEVEL<=TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD')-TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD')  
          ) b
          WHERE 
            TO_DATE(a.BEGINDT, 'YYYY-MM-DD') <= TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD')
            AND 
            TO_DATE(a.ENDDT, 'YYYY-MM-DD') >= TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD')
          UNION ALL
          SELECT b.DT, a.STAFFS_ID, 21 as TP
          FROM hrdbuser.ST_AMRALT a,
          (
            SELECT TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD')+(ROWNUM-1) DT FROM DUAL
            CONNECT BY LEVEL<=TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD')-TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD')  
          ) b
          WHERE 
            a.TZISRECEIVED=1 AND
            TO_DATE(a.BEGINDT, 'YYYY-MM-DD') <= TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD')
            AND 
            TO_DATE(a.ENDDT, 'YYYY-MM-DD') >= TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD')
          UNION ALL 
          SELECT b.DT, a.STAFFS_ID, 31 as TP
          FROM hrdbuser.ST_TOMILOLT_STAFFS a
          INNER JOIN hrdbuser.ST_TOMILOLT c ON a.TOMILOLT_ID=c.ID,
          (
            SELECT TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD')+(ROWNUM-1) DT FROM DUAL
            CONNECT BY LEVEL<=TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD')-TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD')  
          ) b
          WHERE 
            TO_DATE(c.FROMDATE, 'YYYY-MM-DD') <= TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD')
            AND 
            TO_DATE(c.TODATE, 'YYYY-MM-DD') >= TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD')    
        )
        GROUP BY DT, STAFFS_ID
      ) b ON a.ST_ID=b.ST_ID 
    ) a 
    LEFT JOIN TBL_TIMEINFO_ATTEN b ON a.ST_ID=b.ST_ID AND b.DT=TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD') 
    GROUP BY a.ST_ID, a.TP 
  ) a 
  INNER JOIN hrdbuser.ST_STAFFS b ON a.ST_ID=b.ID
  INNER JOIN hrdbuser.ST_STBR c ON b.ID=c.STAFFS_ID AND c.ISACTIVE=1
  LEFT JOIN hrdbuser.STN_POS d ON c.POS_ID=d.ID
  INNER JOIN TBL_BRANCH f ON c.BRANCH_ID=f.BR_ID AND f.YR=" + yr + @"
  INNER JOIN TBL_BRANCH g ON f.BR_MAIN_ID1=g.BR_ID AND g.YR= " + yr + @"
  ORDER BY g.SORT, f.SORT, d.SORT 
) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string TimeinfoTab3Datatable(string yr, string mnth, string dates)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string percolor = "";
                string[] arrdates;
                string strmnth = "";
                if (Int32.Parse(mnth) < 10) strmnth = "0" + mnth;
                else strmnth = mnth;
                arrdates = dates.Split(',');
                int[] arrDatas = new int[arrdates.Length * 3];
                int cnt = 0;
                string strTableVal = "";
                string qry = "";
                qry = "SELECT ROWNUM as ROWNO, a.* FROM ( SELECT SORT, GAZARNAME, ROUND(AVG(PER),1) as PER, ROUND(AVG(POINT),2) as POINT";
                if (dates != "")
                {
                    for (int i = 0; i < arrdates.Length; i++)
                    {
                        qry += ", SUM(CASE WHEN DT='" + yr + "-" + strmnth + "-" + arrdates[i] + "' THEN CNTST ELSE 0 END) as M" + i + "CNTST, SUM(CASE WHEN DT='" + yr + "-" + strmnth + "-" + arrdates[i] + "' THEN CNTISCOME ELSE 0 END) as M" + i + "ISCOME, SUM(CASE WHEN DT='" + yr + "-" + strmnth + "-" + arrdates[i] + "' THEN CNTISCAME ELSE 0 END) as M" + i + "ISCAME ";
                    }
                }
                qry += @" FROM ( SELECT b.SORT, b.NAME as GAZARNAME, TO_CHAR(a.DT,'YYYY-MM-DD') as DT, a.CNTST, a.CNTISCOME, a.CNTISCAME, CASE WHEN CNTISCOME=0 THEN 100 ELSE ROUND((a.CNTISCAME/a.CNTISCOME)*100,1) END as PER, CASE WHEN CNTISCOME=0 THEN 6 ELSE ROUND((ROUND((a.CNTISCAME/a.CNTISCOME)*100,1)/100)*6,2) END as POINT
FROM (
  SELECT a.FATHER_ID, a.DT, COUNT(a.ST_ID) as CNTST, SUM(a.ISCOME) as CNTISCOME, SUM(a.ISCAME) as CNTISCAME
  FROM (
    SELECT a.FATHER_ID, a.ST_ID, a.TP, a.DT, COUNT(b.ST_ID) as ISCAME, CASE WHEN a.TP=0 THEN 1 ELSE 0 END as ISCOME
    FROM (
      SELECT a.FATHER_ID, a.ST_ID, NVL(b.TP, 0) as TP, a.DT
      FROM(
        SELECT a.FATHER_ID, a.ST_ID, a.DT, NVL(b.TP, 0) as TP, NVL(b.MINTM, '00:00:00') as MINTM, NVL(b.MAXTM, '00:00:00') as MAXTM, a.ISWORK
        FROM(
          SELECT a.FATHER_ID, a.STAFFS_ID as ST_ID, a.DT, CASE WHEN b.DT IS NULL THEN a.ISWORK ELSE 1 END as ISWORK
          FROM ( 
            SELECT a.ID, c.FATHER_ID, b.STAFFS_ID, c.FATHER_ID as GAZAR_ID, c.ID as HELTES_ID, a.DT, CASE WHEN(MOD(TO_CHAR(a.DT, 'J'), 7) + 1) = 6 OR(MOD(TO_CHAR(a.DT, 'J'), 7) + 1) = 7 THEN 0 ELSE 1 END as ISWORK
            FROM (
              SELECT a.ID, a.BEGINDT, a.ENDDT, b.DT
              FROM (
                SELECT a.ID, 
                  CASE 
                    WHEN TO_DATE(a.DT,'YYYY-MM-DD')>TO_DATE('" + yr+"-"+ strmnth + @"-01','YYYY-MM-DD') 
                    THEN a.DT 
                    ELSE '"+yr+"-"+ strmnth + @"-01' 
                  END as BEGINDT, 
                  CASE 
                    --WHEN TO_DATE(CASE WHEN c.ACTIVE=0 THEN NVL(a.ENDDT,a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE,'YYYY-MM-DD')) END,'YYYY-MM-DD')<LAST_DAY(TO_DATE('"+yr+"-"+ strmnth + @"-01','YYYY-MM-DD')) 
                    --THEN CASE WHEN c.ACTIVE=0 THEN NVL(a.ENDDT,a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE,'YYYY-MM-DD')) END ELSE TO_CHAR(LAST_DAY(TO_DATE('"+yr+"-"+ strmnth + @"-01','YYYY-MM-DD')),'YYYY-MM-DD') END as ENDDT
                    WHEN TO_DATE(CASE WHEN c.ACTIVE=0 THEN TO_CHAR((TO_DATE(NVL(a.ENDDT,a.DT),'YYYY-MM-DD')-1),'YYYY-MM-DD') ELSE NVL(TO_CHAR((TO_DATE(a.ENDDT,'YYYY-MM-DD')-1),'YYYY-MM-DD'), TO_CHAR(SYSDATE,'YYYY-MM-DD')) END,'YYYY-MM-DD')<LAST_DAY(TO_DATE('"+yr+"-"+ strmnth + @"-01','YYYY-MM-DD')) 
                    THEN CASE WHEN c.ACTIVE=0 THEN TO_CHAR((TO_DATE(NVL(a.ENDDT,a.DT),'YYYY-MM-DD')-1),'YYYY-MM-DD') ELSE NVL(TO_CHAR((TO_DATE(a.ENDDT,'YYYY-MM-DD')-1),'YYYY-MM-DD'), TO_CHAR(SYSDATE,'YYYY-MM-DD')) END ELSE TO_CHAR(LAST_DAY(TO_DATE('"+yr+"-"+ strmnth + @"-01','YYYY-MM-DD')),'YYYY-MM-DD') END as ENDDT
                FROM hrdbuser.ST_STBR a
                INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID=b.ID AND b.ISACTIVE=1
                INNER JOIN hrdbuser.STN_MOVE c ON a.MOVE_ID=c.ID
                WHERE a.POS_ID!=2020102 AND c.ACTIVE=1
                AND ((
                    TO_DATE('" + yr + "-" + strmnth + @"-01','YYYY-MM-DD') 
                    BETWEEN TO_DATE(a.DT,'YYYY-MM-DD') AND TO_DATE(CASE WHEN c.ACTIVE=0 THEN NVL(a.ENDDT,a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE,'YYYY-MM-DD')) END,'YYYY-MM-DD')
                    OR 
                    LAST_DAY(TO_DATE('" + yr + "-" + strmnth + @"-01','YYYY-MM-DD')) 
                    BETWEEN TO_DATE(a.DT,'YYYY-MM-DD') AND TO_DATE(CASE WHEN c.ACTIVE=0 THEN NVL(a.ENDDT,a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE,'YYYY-MM-DD')) END,'YYYY-MM-DD')
                    ) OR 
                    (
                        TO_DATE('" + yr + "-" + strmnth + @"-01','YYYY-MM-DD')<TO_DATE(a.DT,'YYYY-MM-DD') AND LAST_DAY(TO_DATE('" + yr + "-" + strmnth + @"-01','YYYY-MM-DD'))>TO_DATE(a.DT,'YYYY-MM-DD')
                    ))
              ) a, (
                SELECT DT
                FROM(
                  SELECT(TO_DATE('" + yr+"-"+ strmnth + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                  FROM DUAL
                  CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('"+yr+"-"+ strmnth + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('"+yr+"-"+ strmnth + @"-01', 'yyyy-mm-dd')
                )
                WHERE DT BETWEEN TO_DATE('"+yr+"-"+ strmnth + @"-01', 'yyyy-mm-dd') AND SYSDATE AND MOD(TO_CHAR(DT, 'J'), 7) + 1 IN(1, 2, 3, 4, 5, 6, 7)
              ) b
            ) a
            INNER JOIN hrdbuser.ST_STBR b ON a.ID=b.ID
            INNER JOIN hrdbuser.ST_BRANCH c ON b.BRANCH_ID=c.ID AND c.ISACTIVE=1
            WHERE a.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD') AND b.POS_ID!=2020102
          ) a
          LEFT JOIN(
            SELECT TO_DATE(HOLDATE, 'YYYY-MM-DD') as DT FROM hrdbuser.ST_HOLIDAYISWORK WHERE TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'YYYY')) = " + yr + @" AND TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'MM')) IN(1,2,3,4)
          ) b ON a.DT = b.DT  
        ) a
        LEFT JOIN(
          SELECT a.MONTH, a.INOUT as TP, b.ID as ST_ID, TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd') as DT, TO_CHAR(MIN(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY || ' ' || a.HOUR || ':' || a.MINUTE || ':' || a.SECOND, 'yyyy-mm-dd hh24:mi:ss')), 'hh24:mi:ss') as MINTM, TO_CHAR(MAX(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY || ' ' || a.HOUR || ':' || a.MINUTE || ':' || a.SECOND, 'yyyy-mm-dd hh24:mi:ss')), 'hh24:mi:ss') as MAXTM
          FROM STN_TRCDLOG a
          INNER JOIN hrdbuser.ST_STAFFS b ON a.ENO = b.FINGERID
          INNER JOIN hrdbuser.ST_STBR c ON b.ID = c.STAFFS_ID
          INNER JOIN hrdbuser.STN_MOVE d ON c.MOVE_ID = d.ID
          INNER JOIN hrdbuser.ST_BRANCH f ON c.BRANCH_ID = f.ID AND f.ISACTIVE = 1
          WHERE c.POS_ID!=2020102 AND a.INOUT = 0 AND a.YEAR = " + yr+ @" AND a.MONTH IN(" + mnth + @") AND TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd') BETWEEN TO_DATE('" + yr+"-"+ strmnth + @"-01', 'yyyy-mm-dd') AND SYSDATE AND MOD(TO_CHAR(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd'), 'J'), 7) + 1 IN(1, 2, 3, 4, 5, 6, 7)
          GROUP BY a.MONTH, a.INOUT, b.ID, TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd')
        ) b ON a.ST_ID = b.ST_ID AND a.DT = b.DT  
      ) a
      LEFT JOIN(
        SELECT DT, STAFFS_ID, MAX(TP) as TP
            FROM(
              SELECT b.DT, a.STAFFS_ID, 11 as TP
              FROM hrdbuser.ST_CHULUUDAYF3 a,
              (
                SELECT(TO_DATE('" + yr + "-" + strmnth + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                FROM DUAL
                CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + strmnth + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + strmnth + @"-01', 'yyyy-mm-dd')
              ) b
              WHERE
                b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
              UNION ALL
              SELECT b.DT, a.STAFFS_ID, 12 as TP
              FROM hrdbuser.ST_CHULUUDAYT2 a,
              (
                SELECT(TO_DATE('" + yr + "-" + strmnth + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                FROM DUAL
                CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + strmnth + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + strmnth + @"-01', 'yyyy-mm-dd')
              ) b
              WHERE
                a.ISRECEIVED = 1 AND
                b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
              UNION ALL
              SELECT b.DT, a.STAFFS_ID, 13 as TP
              FROM hrdbuser.ST_CHULUUSICK a,
              (
                SELECT(TO_DATE('" + yr + "-" + strmnth + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                FROM DUAL
                CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + strmnth + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + strmnth + @"-01', 'yyyy-mm-dd')
              ) b
              WHERE
                b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
              UNION ALL
              SELECT b.DT, a.STAFFS_ID, 21 as TP
              FROM hrdbuser.ST_AMRALT a,
              (
                SELECT(TO_DATE('" + yr + "-" + strmnth + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                FROM DUAL
                CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + strmnth + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + strmnth + @"-01', 'yyyy-mm-dd')
              ) b
              WHERE
                a.TZISRECEIVED = 1 AND
                b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
              UNION ALL
              SELECT b.DT, a.STAFFS_ID, 31 as TP
              FROM hrdbuser.ST_TOMILOLT_STAFFS a
              INNER JOIN hrdbuser.ST_TOMILOLT c ON a.TOMILOLT_ID = c.ID,
              (
                SELECT(TO_DATE('" + yr + "-" + strmnth + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                FROM DUAL
                CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + strmnth + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + strmnth + @"-01', 'yyyy-mm-dd')
              ) b
              WHERE
                b.DT BETWEEN TO_DATE(c.FROMDATE, 'YYYY-MM-DD') AND TO_DATE(c.TODATE, 'YYYY-MM-DD')
            )
            GROUP BY DT, STAFFS_ID
      ) b ON a.DT = b.DT AND a.ST_ID = b.STAFFS_ID
      WHERE a.DT IN (
        SELECT TO_DATE(TO_CHAR(DT,'YYYY')||'-'||TO_CHAR(DT,'MM')||'-'||TO_CHAR(DT,'DD'),'YYYY-MM-DD') as DT 
        FROM TBL_TIMEINFO 
        WHERE TO_NUMBER(TO_CHAR(DT,'YYYY'))=" + yr + @" AND TO_NUMBER(TO_CHAR(DT, 'MM'))="+mnth+@"
      )
    ) a
    LEFT JOIN TBL_TIMEINFO_ATTEN b ON a.ST_ID=b.ST_ID AND a.DT=b.DT 
    GROUP BY a.FATHER_ID, a.ST_ID, a.TP, a.DT, CASE WHEN a.TP=0 THEN 1 ELSE 0 END
  ) a
  GROUP BY a.FATHER_ID, a.DT
) a
INNER JOIN hrdbuser.ST_BRANCH b ON a.FATHER_ID = b.ID AND b.ISACTIVE = 1
ORDER BY b.SORT ) GROUP BY SORT, GAZARNAME ORDER BY SORT ) a";


                strTableVal += "<table id=\"timeinfoTab3Datatable\" style=\"border: 1px solid #000; border-collapse: collapse; font: 11pt arial, sans-serif; width: 100%;\"><thead style=\"background-color:C6D9F1;\"><tr><th rowspan=\"2\" style=\"border: 1px solid #000; padding:5px; text-align:center;\">#</th><th rowspan=\"2\" style=\"border: 1px solid #000; padding:5px; text-align:center;\">Газруудын нэр</th>";
                if (dates != "")
                {
                    for (int i = 0; i < arrdates.Length; i++)
                    {
                        strTableVal += "<th colspan=\"3\" style=\"border: 1px solid #000; padding:5px; text-align:center;\">Мэдээллийн цаг (" + yr + "-" + mnth + "-" + arrdates[i] + ")</th>";
                    }
                }
                strTableVal += "<th rowspan=\"2\" style=\"border: 1px solid #000; padding:5px; text-align:center;\">Оролцоот хувь</th><th rowspan=\"2\" style=\"border: 1px solid #000; padding:5px; text-align:center;\">Авсан оноо</th></tr>";
                strTableVal += "<tr>";
                if (dates != "")
                {
                    for (int i = 0; i < arrdates.Length; i++)
                    {
                        strTableVal += "<th style=\"border: 1px solid #000; padding:5px; text-align:center;\">Ажилтаны тоо</th>";
                        strTableVal += "<th style=\"border: 1px solid #000; padding:5px; text-align:center;\">Оролцох ажилтаны тоо</th>";
                        strTableVal += "<th style=\"border: 1px solid #000; padding:5px; text-align:center;\">Оролцсон ажилтаны тоо</th>";
                    }
                }
                strTableVal += "</tr>";
                strTableVal += "</thead><tbody>";
                if (dates != "")
                {
                    DataSet ds = myObj.OracleExecuteDataSet(qry);
                    if (ds.Tables[0].Rows.Count != 0)
                    {
                        foreach (DataRow dr in ds.Tables[0].Rows)
                        {
                            if (Convert.ToDouble(dr[3].ToString()) >= 0 && Convert.ToDouble(dr[3].ToString()) <= 49) { percolor = "bg-color-red"; }
                            else if (Convert.ToDouble(dr[3].ToString()) >= 50 && Convert.ToDouble(dr[3].ToString()) <= 79) { percolor = "bg-color-orange"; }
                            else if (Convert.ToDouble(dr[3].ToString()) >= 80 && Convert.ToDouble(dr[3].ToString()) <= 100) { percolor = "bg-color-greenLight"; }
                            strTableVal += "<tr>";
                            strTableVal += "<td style=\"border: 1px solid #000; padding:5px; text-align:center;\">" + dr[0].ToString() + "</td>";
                            strTableVal += "<td style=\"border: 1px solid #000; padding:5px;\">" + dr[2].ToString() + "</td>";

                            for (int i = 0; i < arrdates.Length * 3; i++)
                            {
                                strTableVal += "<td style=\"border: 1px solid #000; padding:5px; text-align:center;\">" + dr[i + 5].ToString() + "</td>";
                                arrDatas[i] += Int32.Parse(dr[i + 5].ToString());
                            }

                            strTableVal += "<td style=\"border: 1px solid #000; padding:5px; text-align:center;\"><span class=\"badge " + percolor + "\">" + Math.Round(Convert.ToDouble(dr[3].ToString()), 1).ToString() + "</span></td>";
                            strTableVal += "<td style=\"border: 1px solid #000; padding:5px; text-align:center;\">" + dr[4].ToString() + "</td>";
                            strTableVal += "</tr>";
                            cnt++;
                        }
                    }
                }
                strTableVal += "</tbody>";
                int active = 0, came = 0;
                if (dates != "")
                {
                    strTableVal += "<tfoot style=\"background-color:C6D9F1;\">";
                    strTableVal += "<tr>";
                    strTableVal += "<td colspan=\"2\" style=\"border: 1px solid #000; padding:5px; text-align:center; font-weight:bold;\">НИЙТ</td>";
                    int loopi = 0;
                    for (int i = 0; i < arrdates.Length; i++)
                    {
                        strTableVal += "<td style=\"border: 1px solid #000; padding:5px; text-align:center; font-weight:bold;\">" + arrDatas[i + loopi].ToString() + "</td>";
                        strTableVal += "<td style=\"border: 1px solid #000; padding:5px; text-align:center; font-weight:bold;\">" + arrDatas[i + 1 + loopi].ToString() + "</td>";
                        active += arrDatas[i + 1 + loopi];
                        strTableVal += "<td style=\"border: 1px solid #000; padding:5px; text-align:center; font-weight:bold;\">" + arrDatas[i + 2 + loopi].ToString() + "</td>";
                        came += arrDatas[i + 2 + loopi];
                        loopi += 2;

                    }
                    strTableVal += "<td style=\"border: 1px solid #000; padding:5px; text-align:center; font-weight:bold;\">" + Math.Round((Convert.ToDouble(came) / Convert.ToDouble(active)) * 100, 2).ToString() + "</td>";
                    strTableVal += "<td style=\"border: 1px solid #000; padding:5px; text-align:center; font-weight:bold;\">-</td>";
                    strTableVal += "</tr>";
                    strTableVal += "</tfoot>";
                }
                strTableVal += "</table>";
                return strTableVal;
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }



        //*****timeqmeet.aspx*****//
        public string TimeqmeetTab1Calendar(string yr)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strTableVal = "[";
                OracleDataReader rdr = myObj.OracleExecuteReader("SELECT TO_NUMBER(TO_CHAR(DT,'MM')) as MNTH, TO_NUMBER(TO_CHAR(DT,'DD')) as D FROM TBL_TIMEQMEET WHERE TO_CHAR(DT,'YYYY') = '" + yr + "'");
                if (rdr.HasRows)
                {
                    while (rdr.Read())
                    {
                        strTableVal += "[" + rdr[0].ToString() + "," + rdr[1].ToString() + "],";
                    }
                }
                if (strTableVal != "[") strTableVal = strTableVal.Remove(strTableVal.Length - 1);
                strTableVal += "]";
                rdr.Close();
                myObj.DBDisconnect();
                return strTableVal;
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string TimeqmeetDateListForDDL(string yr, string mnth)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT TO_CHAR(DT,'DD') as D, TO_CHAR(DT,'YYYY-MM-DD') as DT FROM TBL_TIMEQMEET WHERE TO_NUMBER(TO_CHAR(DT,'YYYY'))=" + yr + " AND TO_NUMBER(TO_CHAR(DT,'MM'))=" + mnth + " ORDER BY DT");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string TimeqmeetTab2Datatable(string yr, string mnth, string day, string gazar, string heltes)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (gazar != "") gazar = " AND d.BR_MAIN_ID1=" + gazar;
            if (heltes != "") heltes = " AND d.BR_ID=" + heltes;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = @"SELECT ROWNUM as ROWNO, " + mnth + " as mnth, '" + yr + "-" + mnth + "-" + day + @"' dt, a.NEGJ, a.POSNAME, a.STAFFNAME, a.ST_ID, a.TP, a.TPNAME, a.ISCAME 
FROM ( 
  SELECT 
    CASE WHEN f.BR_ID=f.BR_MAIN_ID1 THEN f.DOMAIN_ORG ELSE g.DOMAIN_ORG||'-'||f.DOMAIN_ORG END as NEGJ
    , d.NAME as POSNAME
    , a.ST_ID
    , (SUBSTR(b.LNAME,0,1)||'.'||SUBSTR(b.FNAME,0,1)||LOWER(SUBSTR(b.FNAME,2))) as STAFFNAME
    , a.TP
    , CASE WHEN a.TP=11 OR a.TP=12 THEN 'Чөлөөтэй' WHEN a.TP=13 THEN 'Өвчтэй' WHEN a.TP=21 THEN 'Ээлжийн амралттай' WHEN a.TP=31 THEN 'Албан томилолт' END as TPNAME
    , a.ISCAME 
  FROM ( 
    SELECT a.ST_ID, a.TP, COUNT(b.ST_ID) as ISCAME 
    FROM ( 
      SELECT a.ST_ID, b.TP 
      FROM ( 
        SELECT a.ID as ST_ID
        FROM hrdbuser.ST_STAFFS a
        INNER JOIN hrdbuser.ST_STBR b ON a.ID=b.STAFFS_ID AND b.ISACTIVE=1
        INNER JOIN hrdbuser.STN_MOVE c ON b.MOVE_ID=c.ID AND c.ACTIVE=1
        INNER JOIN TBL_BRANCH d ON b.BRANCH_ID=d.BR_ID AND d.YR=" + yr + @"
        WHERE b.POS_ID IN (2010301, 2010201)" + gazar + heltes + @"
        GROUP BY a.ID
      ) a 
      LEFT JOIN ( 
        SELECT DT, STAFFS_ID as ST_ID, MAX(TP) as TP
        FROM (
          SELECT b.DT, a.STAFFS_ID, 11 as TP
          FROM hrdbuser.ST_CHULUUDAYF3 a,
          (
            SELECT TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD')+(ROWNUM-1) DT FROM DUAL
            CONNECT BY LEVEL<=TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD')-TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD') 
          ) b
          WHERE 
            TO_DATE(a.BEGINDT, 'YYYY-MM-DD') <= TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD')
            AND 
            TO_DATE(a.ENDDT, 'YYYY-MM-DD') >= TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD')
          UNION ALL
          SELECT b.DT, a.STAFFS_ID, 12 as TP
          FROM hrdbuser.ST_CHULUUDAYT2 a,
          (
            SELECT TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD')+(ROWNUM-1) DT FROM DUAL
            CONNECT BY LEVEL<=TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD')-TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD')  
          ) b
          WHERE 
            a.ISRECEIVED=1 AND
            TO_DATE(a.BEGINDT, 'YYYY-MM-DD') <= TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD')
            AND 
            TO_DATE(a.ENDDT, 'YYYY-MM-DD') >= TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD')
          UNION ALL
          SELECT b.DT, a.STAFFS_ID, 13 as TP
          FROM hrdbuser.ST_CHULUUSICK a,
          (
            SELECT TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD')+(ROWNUM-1) DT FROM DUAL
            CONNECT BY LEVEL<=TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD')-TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD')  
          ) b
          WHERE 
            TO_DATE(a.BEGINDT, 'YYYY-MM-DD') <= TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD')
            AND 
            TO_DATE(a.ENDDT, 'YYYY-MM-DD') >= TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD')
          UNION ALL
          SELECT b.DT, a.STAFFS_ID, 21 as TP
          FROM hrdbuser.ST_AMRALT a,
          (
            SELECT TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD')+(ROWNUM-1) DT FROM DUAL
            CONNECT BY LEVEL<=TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD')-TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD')  
          ) b
          WHERE 
            a.TZISRECEIVED=1 AND
            TO_DATE(a.BEGINDT, 'YYYY-MM-DD') <= TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD')
            AND 
            TO_DATE(a.ENDDT, 'YYYY-MM-DD') >= TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD')
          UNION ALL 
          SELECT b.DT, a.STAFFS_ID, 31 as TP
          FROM hrdbuser.ST_TOMILOLT_STAFFS a
          INNER JOIN hrdbuser.ST_TOMILOLT c ON a.TOMILOLT_ID=c.ID,
          (
            SELECT TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD')+(ROWNUM-1) DT FROM DUAL
            CONNECT BY LEVEL<=TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD')-TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD')  
          ) b
          WHERE 
            TO_DATE(c.FROMDATE, 'YYYY-MM-DD') <= TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD')
            AND 
            TO_DATE(c.TODATE, 'YYYY-MM-DD') >= TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD')    
        )
        GROUP BY DT, STAFFS_ID
      ) b ON a.ST_ID=b.ST_ID 
    ) a 
    LEFT JOIN TBL_TIMEQMEET_ATTEN b ON a.ST_ID=b.ST_ID AND b.DT=TO_DATE('" + yr + "-" + mnth + "-" + day + @"','YYYY-MM-DD') 
    GROUP BY a.ST_ID, a.TP 
  ) a 
  INNER JOIN hrdbuser.ST_STAFFS b ON a.ST_ID=b.ID
  INNER JOIN hrdbuser.ST_STBR c ON b.ID=c.STAFFS_ID AND c.ISACTIVE=1
  LEFT JOIN hrdbuser.STN_POS d ON c.POS_ID=d.ID
  INNER JOIN TBL_BRANCH f ON c.BRANCH_ID=f.BR_ID AND f.YR=" + yr + @"
  INNER JOIN TBL_BRANCH g ON f.BR_MAIN_ID1=g.BR_ID AND g.YR= " + yr + @"
  ORDER BY g.SORT, f.SORT, d.SORT 
) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string TimeqmeetTab3Datatable(string yr, string mnth, string dates)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string percolor = "";
                string[] arrdates;
                string strmnth = "";
                if (Int32.Parse(mnth) < 10) strmnth = "0" + mnth;
                else strmnth = mnth;
                arrdates = dates.Split(',');
                int[] arrDatas = new int[arrdates.Length * 3];
                int cnt = 0;
                string strTableVal = "";
                string qry = "";
                qry = "SELECT ROWNUM as RowNo, a.* FROM ( SELECT SORT, GAZARNAME, ROUND(AVG(PER),1) as PER, ROUND(AVG(POINT),2) as POINT";
                if (dates != "")
                {
                    for (int i = 0; i < arrdates.Length; i++)
                    {
                        qry += ", SUM(CASE WHEN DT='" + yr + "-" + strmnth + "-" + arrdates[i] + "' THEN CNTST ELSE 0 END) as M" + i + "CNTST, SUM(CASE WHEN DT='" + yr + "-" + strmnth + "-" + arrdates[i] + "' THEN CNTISCOME ELSE 0 END) as M" + i + "ISCOME, SUM(CASE WHEN DT='" + yr + "-" + strmnth + "-" + arrdates[i] + "' THEN CNTISCAME ELSE 0 END) as M" + i + "ISCAME ";
                    }
                }
                qry += @" FROM ( SELECT b.SORT, b.NAME as GAZARNAME, TO_CHAR(a.DT,'YYYY-MM-DD') as DT, a.CNTST, a.CNTISCOME, a.CNTISCAME, CASE WHEN CNTISCOME=0 THEN 100 ELSE ROUND((a.CNTISCAME/a.CNTISCOME)*100,1) END as PER, CASE WHEN CNTISCOME=0 THEN 6 ELSE ROUND((ROUND((a.CNTISCAME/a.CNTISCOME)*100,1)/100)*6,2) END as POINT
FROM (
  SELECT a.FATHER_ID, a.DT, COUNT(a.ST_ID) as CNTST, SUM(a.ISCOME) as CNTISCOME, SUM(a.ISCAME) as CNTISCAME
  FROM (
    SELECT a.FATHER_ID, a.ST_ID, a.TP, a.DT, COUNT(b.ST_ID) as ISCAME, CASE WHEN a.TP=0 THEN 1 ELSE 0 END as ISCOME
    FROM (
      SELECT a.FATHER_ID, a.ST_ID, NVL(b.TP, 0) as TP, a.DT
      FROM(
        SELECT a.FATHER_ID, a.ST_ID, a.DT, NVL(b.TP, 0) as TP, NVL(b.MINTM, '00:00:00') as MINTM, NVL(b.MAXTM, '00:00:00') as MAXTM, a.ISWORK
        FROM(
          SELECT a.FATHER_ID, a.STAFFS_ID as ST_ID, a.DT, CASE WHEN b.DT IS NULL THEN a.ISWORK ELSE 1 END as ISWORK
          FROM ( 
            SELECT a.ID, c.FATHER_ID, b.STAFFS_ID, c.FATHER_ID as GAZAR_ID, c.ID as HELTES_ID, a.DT, CASE WHEN(MOD(TO_CHAR(a.DT, 'J'), 7) + 1) = 6 OR(MOD(TO_CHAR(a.DT, 'J'), 7) + 1) = 7 THEN 0 ELSE 1 END as ISWORK
            FROM (
              SELECT a.ID, a.BEGINDT, a.ENDDT, b.DT
              FROM (
                SELECT a.ID, 
                  CASE 
                    WHEN TO_DATE(a.DT,'YYYY-MM-DD')>TO_DATE('" + yr + "-" + strmnth + @"-01','YYYY-MM-DD') 
                    THEN a.DT 
                    ELSE '" + yr + "-" + strmnth + @"-01' 
                  END as BEGINDT, 
                  CASE 
                    --WHEN TO_DATE(CASE WHEN c.ACTIVE=0 THEN NVL(a.ENDDT,a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE,'YYYY-MM-DD')) END,'YYYY-MM-DD')<LAST_DAY(TO_DATE('" + yr + "-" + strmnth + @"-01','YYYY-MM-DD')) 
                    --THEN CASE WHEN c.ACTIVE=0 THEN NVL(a.ENDDT,a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE,'YYYY-MM-DD')) END ELSE TO_CHAR(LAST_DAY(TO_DATE('" + yr + "-" + strmnth + @"-01','YYYY-MM-DD')),'YYYY-MM-DD') END as ENDDT
                    WHEN TO_DATE(CASE WHEN c.ACTIVE=0 THEN TO_CHAR((TO_DATE(NVL(a.ENDDT,a.DT),'YYYY-MM-DD')-1),'YYYY-MM-DD') ELSE NVL(TO_CHAR((TO_DATE(a.ENDDT,'YYYY-MM-DD')-1),'YYYY-MM-DD'), TO_CHAR(SYSDATE,'YYYY-MM-DD')) END,'YYYY-MM-DD')<LAST_DAY(TO_DATE('" + yr + "-" + strmnth + @"-01','YYYY-MM-DD')) 
                    THEN CASE WHEN c.ACTIVE=0 THEN TO_CHAR((TO_DATE(NVL(a.ENDDT,a.DT),'YYYY-MM-DD')-1),'YYYY-MM-DD') ELSE NVL(TO_CHAR((TO_DATE(a.ENDDT,'YYYY-MM-DD')-1),'YYYY-MM-DD'), TO_CHAR(SYSDATE,'YYYY-MM-DD')) END ELSE TO_CHAR(LAST_DAY(TO_DATE('" + yr + "-" + strmnth + @"-01','YYYY-MM-DD')),'YYYY-MM-DD') END as ENDDT
                FROM hrdbuser.ST_STBR a
                INNER JOIN hrdbuser.ST_BRANCH b ON a.BRANCH_ID=b.ID AND b.ISACTIVE=1
                INNER JOIN hrdbuser.STN_MOVE c ON a.MOVE_ID=c.ID
                WHERE a.POS_ID IN (2010201, 2010301) AND c.ACTIVE=1
                AND ((
                    TO_DATE('" + yr + "-" + strmnth + @"-01','YYYY-MM-DD') 
                    BETWEEN TO_DATE(a.DT,'YYYY-MM-DD') AND TO_DATE(CASE WHEN c.ACTIVE=0 THEN NVL(a.ENDDT,a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE,'YYYY-MM-DD')) END,'YYYY-MM-DD')
                    OR 
                    LAST_DAY(TO_DATE('" + yr + "-" + strmnth + @"-01','YYYY-MM-DD')) 
                    BETWEEN TO_DATE(a.DT,'YYYY-MM-DD') AND TO_DATE(CASE WHEN c.ACTIVE=0 THEN NVL(a.ENDDT,a.DT) ELSE NVL(a.ENDDT, TO_CHAR(SYSDATE,'YYYY-MM-DD')) END,'YYYY-MM-DD')
                    ) OR 
                    (
                        TO_DATE('" + yr + "-" + strmnth + @"-01','YYYY-MM-DD')<TO_DATE(a.DT,'YYYY-MM-DD') AND LAST_DAY(TO_DATE('" + yr + "-" + strmnth + @"-01','YYYY-MM-DD'))>TO_DATE(a.DT,'YYYY-MM-DD')
                    ))
              ) a, (
                SELECT DT
                FROM(
                  SELECT(TO_DATE('" + yr + "-" + strmnth + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
                  FROM DUAL
                  CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + strmnth + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + strmnth + @"-01', 'yyyy-mm-dd')
                )
                WHERE DT BETWEEN TO_DATE('" + yr + "-" + strmnth + @"-01', 'yyyy-mm-dd') AND SYSDATE AND MOD(TO_CHAR(DT, 'J'), 7) + 1 IN(1, 2, 3, 4, 5, 6, 7)
              ) b
            ) a
            INNER JOIN hrdbuser.ST_STBR b ON a.ID=b.ID
            INNER JOIN hrdbuser.ST_BRANCH c ON b.BRANCH_ID=c.ID AND c.ISACTIVE=1
            WHERE a.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD') AND b.POS_ID IN (2010201, 2010301)
          ) a
          LEFT JOIN(
            SELECT TO_DATE(HOLDATE, 'YYYY-MM-DD') as DT FROM hrdbuser.ST_HOLIDAYISWORK WHERE TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'YYYY')) = " + yr + @" AND TO_NUMBER(TO_CHAR(TO_DATE(HOLDATE, 'YYYY-MM-DD'), 'MM')) IN(1,2,3,4)
          ) b ON a.DT = b.DT  
        ) a
        LEFT JOIN(
          SELECT a.MONTH, a.INOUT as TP, b.ID as ST_ID, TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd') as DT, TO_CHAR(MIN(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY || ' ' || a.HOUR || ':' || a.MINUTE || ':' || a.SECOND, 'yyyy-mm-dd hh24:mi:ss')), 'hh24:mi:ss') as MINTM, TO_CHAR(MAX(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY || ' ' || a.HOUR || ':' || a.MINUTE || ':' || a.SECOND, 'yyyy-mm-dd hh24:mi:ss')), 'hh24:mi:ss') as MAXTM
          FROM STN_TRCDLOG a
          INNER JOIN hrdbuser.ST_STAFFS b ON a.ENO = b.FINGERID
          INNER JOIN hrdbuser.ST_STBR c ON b.ID = c.STAFFS_ID
          INNER JOIN hrdbuser.STN_MOVE d ON c.MOVE_ID = d.ID
          INNER JOIN hrdbuser.ST_BRANCH f ON c.BRANCH_ID = f.ID AND f.ISACTIVE = 1
          WHERE c.POS_ID IN (2010201, 2010301) AND a.INOUT = 0 AND a.YEAR = " + yr + @" AND a.MONTH IN(" + mnth + @") AND TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd') BETWEEN TO_DATE('" + yr + "-" + strmnth + @"-01', 'yyyy-mm-dd') AND SYSDATE AND MOD(TO_CHAR(TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd'), 'J'), 7) + 1 IN(1, 2, 3, 4, 5, 6, 7)
          GROUP BY a.MONTH, a.INOUT, b.ID, TO_DATE(a.YEAR || '-' || a.MONTH || '-' || a.DAY, 'yyyy-mm-dd')
        ) b ON a.ST_ID = b.ST_ID AND a.DT = b.DT  
      ) a
      LEFT JOIN(
        SELECT DT, STAFFS_ID, MAX(TP) as TP
        FROM(
            SELECT b.DT, a.STAFFS_ID, 11 as TP
            FROM hrdbuser.ST_CHULUUDAYF3 a,
            (
            SELECT(TO_DATE('" + yr + "-" + strmnth + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
            FROM DUAL
            CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + strmnth + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + strmnth + @"-01', 'yyyy-mm-dd')
            ) b
            WHERE
            b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
            UNION ALL
            SELECT b.DT, a.STAFFS_ID, 12 as TP
            FROM hrdbuser.ST_CHULUUDAYT2 a,
            (
            SELECT(TO_DATE('" + yr + "-" + strmnth + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
            FROM DUAL
            CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + strmnth + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + strmnth + @"-01', 'yyyy-mm-dd')
            ) b
            WHERE
            a.ISRECEIVED = 1 AND
            b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
            UNION ALL
            SELECT b.DT, a.STAFFS_ID, 13 as TP
            FROM hrdbuser.ST_CHULUUSICK a,
            (
            SELECT(TO_DATE('" + yr + "-" + strmnth + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
            FROM DUAL
            CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + strmnth + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + strmnth + @"-01', 'yyyy-mm-dd')
            ) b
            WHERE
            b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
            UNION ALL
            SELECT b.DT, a.STAFFS_ID, 21 as TP
            FROM hrdbuser.ST_AMRALT a,
            (
            SELECT(TO_DATE('" + yr + "-" + strmnth + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
            FROM DUAL
            CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + strmnth + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + strmnth + @"-01', 'yyyy-mm-dd')
            ) b
            WHERE
            a.TZISRECEIVED = 1 AND
            b.DT BETWEEN TO_DATE(a.BEGINDT, 'YYYY-MM-DD') AND TO_DATE(a.ENDDT, 'YYYY-MM-DD')
            UNION ALL
            SELECT b.DT, a.STAFFS_ID, 31 as TP
            FROM hrdbuser.ST_TOMILOLT_STAFFS a
            INNER JOIN hrdbuser.ST_TOMILOLT c ON a.TOMILOLT_ID = c.ID,
            (
            SELECT(TO_DATE('" + yr + "-" + strmnth + @"-01', 'yyyy-mm-dd') - 1) + ROWNUM DT
            FROM DUAL
            CONNECT BY LEVEL <= (LAST_DAY(TO_DATE('" + yr + "-" + strmnth + @"-01', 'yyyy-mm-dd')) + 1) - TO_DATE('" + yr + "-" + strmnth + @"-01', 'yyyy-mm-dd')
            ) b
            WHERE
            b.DT BETWEEN TO_DATE(c.FROMDATE, 'YYYY-MM-DD') AND TO_DATE(c.TODATE, 'YYYY-MM-DD')
        )
        GROUP BY DT, STAFFS_ID
      ) b ON a.DT = b.DT AND a.ST_ID = b.STAFFS_ID
      WHERE a.DT IN (
        SELECT TO_DATE(TO_CHAR(DT,'YYYY')||'-'||TO_CHAR(DT,'MM')||'-'||TO_CHAR(DT,'DD'),'YYYY-MM-DD') as DT 
        FROM TBL_TIMEQMEET 
        WHERE TO_NUMBER(TO_CHAR(DT,'YYYY'))=" + yr + @" AND TO_NUMBER(TO_CHAR(DT, 'MM'))=" + mnth + @"
      )
    ) a
    LEFT JOIN TBL_TIMEQMEET_ATTEN b ON a.ST_ID=b.ST_ID AND a.DT=b.DT 
    GROUP BY a.FATHER_ID, a.ST_ID, a.TP, a.DT, CASE WHEN a.TP=0 THEN 1 ELSE 0 END
  ) a
  GROUP BY a.FATHER_ID, a.DT
) a
INNER JOIN hrdbuser.ST_BRANCH b ON a.FATHER_ID = b.ID AND b.ISACTIVE = 1
ORDER BY b.SORT ) GROUP BY SORT, GAZARNAME ORDER BY SORT ) a";
                strTableVal += "<table id=\"timeqmeetTab3Datatable\" style=\"border: 1px solid #000; border-collapse: collapse; font: 11pt arial, sans-serif; width: 100%;\"><thead style=\"background-color:C6D9F1;\"><tr><th rowspan=\"2\" style=\"border: 1px solid #000; padding:5px; text-align:center;\">#</th><th rowspan=\"2\" style=\"border: 1px solid #000; padding:5px; text-align:center;\">Газруудын нэр</th>";
                if (dates != "")
                {
                    for (int i = 0; i < arrdates.Length; i++)
                    {
                        strTableVal += "<th colspan=\"3\" style=\"border: 1px solid #000; padding:5px; text-align:center;\">Шуурхай хуралдаан (" + yr + "-" + mnth + "-" + arrdates[i] + ")</th>";
                    }
                }
                strTableVal += "<th rowspan=\"2\" style=\"border: 1px solid #000; padding:5px; text-align:center;\">Оролцоот хувь</th><th rowspan=\"2\" style=\"border: 1px solid #000; padding:5px; text-align:center;\">Авсан оноо</th></tr>";
                strTableVal += "<tr>";
                if (dates != "")
                {
                    for (int i = 0; i < arrdates.Length; i++)
                    {
                        strTableVal += "<th style=\"border: 1px solid #000; padding:5px; text-align:center;\">Ажилтаны тоо</th>";
                        strTableVal += "<th style=\"border: 1px solid #000; padding:5px; text-align:center;\">Оролцох ажилтаны тоо</th>";
                        strTableVal += "<th style=\"border: 1px solid #000; padding:5px; text-align:center;\">Оролцсон ажилтаны тоо</th>";
                    }
                }
                strTableVal += "</tr>";
                strTableVal += "</thead><tbody>";
                if (dates != "")
                {
                    DataSet ds = myObj.OracleExecuteDataSet(qry);
                    if (ds.Tables[0].Rows.Count != 0)
                    {
                        foreach (DataRow dr in ds.Tables[0].Rows)
                        {
                            if (Convert.ToDouble(dr[3].ToString()) >= 0 && Convert.ToDouble(dr[3].ToString()) <= 49) { percolor = "bg-color-red"; }
                            else if (Convert.ToDouble(dr[3].ToString()) >= 50 && Convert.ToDouble(dr[3].ToString()) <= 79) { percolor = "bg-color-orange"; }
                            else if (Convert.ToDouble(dr[3].ToString()) >= 80 && Convert.ToDouble(dr[3].ToString()) <= 100) { percolor = "bg-color-greenLight"; }
                            strTableVal += "<tr>";
                            strTableVal += "<td style=\"border: 1px solid #000; padding:5px; text-align:center;\">" + dr[0].ToString() + "</td>";
                            strTableVal += "<td style=\"border: 1px solid #000; padding:5px;\">" + dr[2].ToString() + "</td>";

                            for (int i = 0; i < arrdates.Length * 3; i++)
                            {
                                strTableVal += "<td style=\"border: 1px solid #000; padding:5px; text-align:center;\">" + dr[i + 5].ToString() + "</td>";
                                arrDatas[i] += Int32.Parse(dr[i + 5].ToString());
                            }

                            strTableVal += "<td style=\"border: 1px solid #000; padding:5px; text-align:center;\"><span class=\"badge " + percolor + "\">" + Math.Round(Convert.ToDouble(dr[3].ToString()), 1).ToString() + "</span></td>";
                            strTableVal += "<td style=\"border: 1px solid #000; padding:5px; text-align:center;\">" + dr[4].ToString() + "</td>";
                            strTableVal += "</tr>";
                            cnt++;
                        }
                    }
                }
                strTableVal += "</tbody>";
                int active = 0, came = 0;
                if (dates != "")
                {
                    strTableVal += "<tfoot style=\"background-color:C6D9F1;\">";
                    strTableVal += "<tr>";
                    strTableVal += "<td colspan=\"2\" style=\"border: 1px solid #000; padding:5px; text-align:center; font-weight:bold;\">НИЙТ</td>";
                    int loopi = 0;
                    for (int i = 0; i < arrdates.Length; i++)
                    {
                        strTableVal += "<td style=\"border: 1px solid #000; padding:5px; text-align:center; font-weight:bold;\">" + arrDatas[i + loopi].ToString() + "</td>";
                        strTableVal += "<td style=\"border: 1px solid #000; padding:5px; text-align:center; font-weight:bold;\">" + arrDatas[i + 1 + loopi].ToString() + "</td>";
                        active += arrDatas[i + 1 + loopi];
                        strTableVal += "<td style=\"border: 1px solid #000; padding:5px; text-align:center; font-weight:bold;\">" + arrDatas[i + 2 + loopi].ToString() + "</td>";
                        came += arrDatas[i + 2 + loopi];
                        loopi += 2;

                    }
                    strTableVal += "<td style=\"border: 1px solid #000; padding:5px; text-align:center; font-weight:bold;\">" + Math.Round((Convert.ToDouble(came) / Convert.ToDouble(active)) * 100, 2).ToString() + "</td>";
                    strTableVal += "<td style=\"border: 1px solid #000; padding:5px; text-align:center; font-weight:bold;\">-</td>";
                    strTableVal += "</tr>";
                    strTableVal += "</tfoot>";
                }
                strTableVal += "</table>";
                return strTableVal;
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }



        //*****togtool.aspx*****//
        public string TogtoolTypeListForDDL()
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT ID, NAME FROM TBL_TOGTOOL_TYPE ORDER BY NAME");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string TogtoolTab1Datatable(string yr, string type, string brid)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (type != "") type = " AND a.TOGTOOL_TYPE_ID=" + type;
            if (brid != "") brid = " AND b.BR_ID=" + brid;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = "SELECT ROWNUM AS ROWNO, a.* FROM ( SELECT a.ID as TOGTOOL_ID, a.AKT_NAME, NVL2(a.FILE_NAME,1,0) as IS_FILE, a.FILE_NAME, a.SUCCES_DATE, a.NO, b.BRIDLIST, b.BRNAMELIST, a.RECEIVE_DATE, a.DONE_DATE, a.TOGTOOL_TYPE_ID, d.NAME as TOGTOOL_TYPE_NAME, TO_CHAR(a.CREATED_DATE,'YYYY-MM-DD') as CREATED_DATE, NVL(a.IS_SENTMAIL,0) as IS_SENTMAIL, d.SORTABLE FROM TBL_TOGTOOL a INNER JOIN ( SELECT a.TOGTOOL_ID, NVL(RTRIM(xmlagg (xmlelement (e, c.BR_ID || ',') ORDER BY c.SORT).extract('//text()'), ','),'none') as BRIDLIST, NVL(RTRIM(xmlagg (xmlelement (e, c.DOMAIN_ORG || ', ') ORDER BY c.SORT).extract('//text()'), ', '),'none') as BRNAMELIST FROM ( SELECT a.ID as TOGTOOL_ID FROM TBL_TOGTOOL a INNER JOIN TBL_TOGTOOL_BR b ON a.ID=b.TOGTOOL_ID WHERE TO_NUMBER(TO_CHAR(TO_DATE(a.SUCCES_DATE,'yyyy-mm-dd'),'yyyy'))=" + yr + type + brid + " ) a INNER JOIN TBL_TOGTOOL_BR b ON a.TOGTOOL_ID=b.TOGTOOL_ID INNER JOIN TBL_BRANCH c ON b.BR_ID=c.BR_ID AND c.YR=" + yr + " INNER JOIN TBL_TOGTOOL d ON a.TOGTOOL_ID=d.ID GROUP BY a.TOGTOOL_ID ) b ON a.ID=b.TOGTOOL_ID INNER JOIN TBL_TOGTOOL_TYPE d ON a.TOGTOOL_TYPE_ID=d.ID ORDER BY d.SORTABLE, a.SUCCES_DATE DESC ) a ";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void TOGTOOL_INSERT(string P_TOGTOOL_TYPE_ID, string P_AKT_NAME, string P_SUCCESS_DATE, string P_NO, string P_RECEIVE_DATE, string P_DONE_DATE, string P_FILE_NAME, string P_BRANCHLIST, string P_STAFFID)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[9], ParamValue = new string[9];
                ParamName[0] = "P_TOGTOOL_TYPE_ID";
                ParamName[1] = "P_AKT_NAME";
                ParamName[2] = "P_SUCCESS_DATE";
                ParamName[3] = "P_NO";
                ParamName[4] = "P_RECEIVE_DATE";
                ParamName[5] = "P_DONE_DATE";
                ParamName[6] = "P_FILE_NAME";
                ParamName[7] = "P_BRANCHLIST";
                ParamName[8] = "P_STAFFID";
                ParamValue[0] = P_TOGTOOL_TYPE_ID;
                ParamValue[1] = P_AKT_NAME;
                ParamValue[2] = P_SUCCESS_DATE;
                ParamValue[3] = P_NO;
                ParamValue[4] = P_RECEIVE_DATE;
                ParamValue[5] = P_DONE_DATE;
                ParamValue[6] = P_FILE_NAME;
                ParamValue[7] = P_BRANCHLIST;
                ParamValue[8] = P_STAFFID;
                myObj.SP_OracleExecuteNonQuery("TOGTOOL_INSERT", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void TOGTOOL_UPDATE(string P_TOGTOOL_ID, string P_AKT_NAME, string P_SUCCESS_DATE, string P_NO, string P_RECEIVE_DATE, string P_DONE_DATE, string P_FILE_NAME, string P_BRANCHLIST, string P_STAFFID)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[9], ParamValue = new string[9];
                ParamName[0] = "P_TOGTOOL_ID";
                ParamName[1] = "P_AKT_NAME";
                ParamName[2] = "P_SUCCESS_DATE";
                ParamName[3] = "P_NO";
                ParamName[4] = "P_RECEIVE_DATE";
                ParamName[5] = "P_DONE_DATE";
                ParamName[6] = "P_FILE_NAME";
                ParamName[7] = "P_BRANCHLIST";
                ParamName[8] = "P_STAFFID";
                ParamValue[0] = P_TOGTOOL_ID;
                ParamValue[1] = P_AKT_NAME;
                ParamValue[2] = P_SUCCESS_DATE;
                ParamValue[3] = P_NO;
                ParamValue[4] = P_RECEIVE_DATE;
                ParamValue[5] = P_DONE_DATE;
                ParamValue[6] = P_FILE_NAME;
                ParamValue[7] = P_BRANCHLIST;
                ParamValue[8] = P_STAFFID;
                myObj.SP_OracleExecuteNonQuery("TOGTOOL_UPDATE", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void TOGTOOL_DELETE(string P_TOGTOOL_ID)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[1], ParamValue = new string[1];
                ParamName[0] = "P_TOGTOOL_ID";
                ParamValue[0] = P_TOGTOOL_ID;
                myObj.SP_OracleExecuteNonQuery("TOGTOOL_DELETE", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void TogtoolSendMail(string togtoolid)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strBody = "", strZaalt = "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                //string[] arrStrIsAttach = new string[2];
                DataSet ds = myObj.OracleExecuteDataSet("SELECT NAME FROM TBL_ZAALT WHERE TOGTOOL_ID=" + togtoolid + " ORDER BY NO");
                if (ds.Tables[0].Rows.Count != 0)
                {
                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {
                        strZaalt += dr["NAME"].ToString() + "<br/>";
                    }
                }
                MailMessage mail = new MailMessage();
                mail.From = new MailAddress("lmonitoring@mof.gov.mn");
                mail.To.Add("all@mof.gov.mn");
                mail.Subject = myObj.OracleExecuteScalar("SELECT b.NAME as TOGTOOL_TYPE_NAME FROM TBL_TOGTOOL a INNER JOIN TBL_TOGTOOL_TYPE b ON a.TOGTOOL_TYPE_ID=b.ID WHERE a.ID=" + togtoolid).ToString();
                strBody = myObj.OracleExecuteScalar("SELECT TOGTOOL_ID||'~'||TOGTOOL_TYPE_NAME||'~'||AKT_NAME||'~'||SUCCES_DATE||'~'||NO||'~'||GAZARNAMELIST||'~'||NVL(RECEIVE_DATE,'-') ||'~'||NVL(DONE_DATE,'-') FROM ( SELECT a.TOGTOOL_ID, a.TOGTOOL_TYPE_NAME, a.AKT_NAME, a.SUCCES_DATE, a.NO, a.GAZARNAMELIST, a.RECEIVE_DATE, a.DONE_DATE FROM ( SELECT a.ID as TOGTOOL_ID,b.NAME as TOGTOOL_TYPE_NAME, a.AKT_NAME, a.SUCCES_DATE, a.NO, NVL(RTRIM(xmlagg (xmlelement (e, d.DOMAIN_ORG || ',') ORDER BY d.SORT).extract('//text()'), ','),'none') as GAZARNAMELIST, a.RECEIVE_DATE, a.DONE_DATE FROM TBL_TOGTOOL a INNER JOIN TBL_TOGTOOL_TYPE b ON a.TOGTOOL_TYPE_ID=b.ID INNER JOIN TBL_TOGTOOL_BR c ON a.ID=c.TOGTOOL_ID INNER JOIN TBL_BRANCH d ON c.BR_ID=d.BR_ID AND d.YR=(SELECT YR FROM TBL_SYSSET WHERE ACTIVE=1) WHERE a.ID=" + togtoolid + " GROUP BY a.ID, b.NAME, a.AKT_NAME, a.SUCCES_DATE, a.NO, a.RECEIVE_DATE, a.DONE_DATE ) a )").ToString();
                mail.Body += "<table style=\"border:none;font: 12px arial, sans-serif;\"><tbody><tr style=\"vertical-align: top;height: 40px;\"><td colspan=\"2\">" + strBody.Split('~')[1] + " шинээр нэмэгдлээ</td></tr><tr><td style=\"font-weight: bold; width: 200px; vertical-align:top;\">Эрх зүйн актын нэр:</td><td>" + myObjGetTableData.getReplaceDatabaseToDisplay(strBody.Split('~')[2]) + "</td></tr> <tr><td style=\"font-weight: bold; width: 200px;\">Батлагдсан огноо:</td><td>" + strBody.Split('~')[3] + "</td></tr><tr><td style=\"font-weight: bold; width: 200px;\">Дугаар:</td><td>" + strBody.Split('~')[4] + "</td></tr><tr><td style=\"font-weight: bold; width: 200px; vertical-align:top;\">Хариуцах газар:</td><td>" + strBody.Split('~')[5] + "</td></tr><tr><td style=\"font-weight: bold; width: 200px; vertical-align:top;\">Хяналтанд авсан заалт:</td><td>" + myObjGetTableData.getReplaceDatabaseToDisplay(strZaalt) + "</td></tr><tr><td style=\"font-weight: bold; width: 200px;\">Хүлээн авсан огноо:</td><td>" + strBody.Split('~')[6] + "</td></tr> <tr><td style=\"font-weight: bold; width: 200px;\">Биелүүлэх хугацаа:</td><td>" + strBody.Split('~')[7] + "</td></tr><tr><td style=\"font-weight: bold; width: 200px;\">Холбоос:</td><td><a href=\"http://lm.mof.gov.mn/#pg/togtool.aspx?id=" + strBody.Split('~')[0] + "\">http://lm.mof.gov.mn/#pg/togtool.aspx</a></td></tr></tbody><table>";
                mail.IsBodyHtml = true;
                //arrStrIsAttach = myObj.OracleExecuteScalar("SELECT NVL2(FILE_NAME,1,0)||'~'||NVL(FILE_NAME,'-') FROM TBL_TOGTOOL WHERE ID=" + togtoolid).ToString().Split('~');
                //if (arrStrIsAttach[0] == "1")
                //{
                //    System.Net.Mail.Attachment attachment;
                //    attachment = new System.Net.Mail.Attachment(HttpContext.Current.Server.MapPath("~/files/togtool/" + arrStrIsAttach[1]));
                //    mail.Attachments.Add(attachment);
                //}
                SmtpClient SmtpServer = new SmtpClient();
                SmtpServer.Host = "mail.mof.gov.mn";
                SmtpServer.Port = 25;
                SmtpServer.UseDefaultCredentials = false;
                SmtpServer.Credentials = new System.Net.NetworkCredential("lmonitoring@mof.gov.mn", "m0f@dmin2o14*");
                SmtpServer.EnableSsl = false;
                SmtpServer.Send(mail);
                myObj.OracleExecuteNonQuery("UPDATE TBL_TOGTOOL SET IS_SENTMAIL=1 WHERE ID=" + togtoolid);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string TogtoolTab2Datatable(string yr, string type, string brid, string isclosed)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strQry = "";
            if (type != "") type = " AND a.TOGTOOL_TYPE_ID=" + type;
            if (brid != "") brid = " AND b.BR_ID=" + brid;
            if (isclosed != "") isclosed = " WHERE a.IS_IMPL=" + isclosed;
            strQry = "SELECT ROWNUM AS ROWNO, a.* FROM( SELECT a.ID as ZAALT_ID, b.TOGTOOL_TYPE_ID, c.NAME as TOGTOOL_TYPE_NAME, a.TOGTOOL_ID, b.NO as TOGTOOL_NO, b.AKT_NAME as TOGTOOL_NAME, a.NAME as ZAALT, b.SUCCES_DATE, d.BRNAMELIST, b.RECEIVE_DATE, b.DONE_DATE, CASE WHEN a.IS_IMPL=1 THEN 'checked=\"checked\"' ELSE null END as ISCLOSED, a.ENDDATE, CASE WHEN a.ENDDATE IS NOT NULL THEN CASE WHEN TO_DATE(a.ENDDATE, 'YYYY-MM-DD')<SYSDATE THEN 'warning' ELSE null END ELSE null END as ENDDATECOLOR ";
            strQry+=@"FROM TBL_ZAALT a 
    INNER JOIN( 
        SELECT a.TOGTOOL_ID, NVL(RTRIM(xmlagg(xmlelement(e, c.DOMAIN_ORG || ', ') ORDER BY c.SORT).extract('//text()'), ', '), 'none') as BRNAMELIST 
        FROM( 
            SELECT a.ID as TOGTOOL_ID FROM TBL_TOGTOOL a INNER JOIN TBL_TOGTOOL_BR b ON a.ID = b.TOGTOOL_ID WHERE TO_NUMBER(TO_CHAR(TO_DATE(a.SUCCES_DATE, 'yyyy-mm-dd'), 'yyyy')) = " + yr + type + brid + @" 
        ) a 
        INNER JOIN TBL_TOGTOOL_BR b ON a.TOGTOOL_ID = b.TOGTOOL_ID 
        INNER JOIN TBL_BRANCH c ON b.BR_ID = c.BR_ID AND c.YR = " + yr + @" 
        GROUP BY a.TOGTOOL_ID 
   ) d ON a.TOGTOOL_ID = d.TOGTOOL_ID 
    INNER JOIN TBL_TOGTOOL b ON d.TOGTOOL_ID = b.ID 
    INNER JOIN TBL_TOGTOOL_TYPE c ON b.TOGTOOL_TYPE_ID = c.ID"+ isclosed + @"
    ORDER BY b.SUCCES_DATE DESC 
) a";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string TogtoolListForDDL(string yr, string type)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT ID, TO_CHAR(NO||'. '||AKT_NAME) as TOGTOOL_NAME FROM TBL_TOGTOOL WHERE TO_NUMBER(TO_CHAR(TO_DATE(SUCCES_DATE,'yyyy-mm-dd'),'yyyy'))=" + yr + " AND TOGTOOL_TYPE_ID=" + type + " ORDER BY NO");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string TogtoolTypeDatatable()
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT ROWNUM as ROWNO, a.ID, a.NAME FROM ( SELECT ID, NAME FROM TBL_TOGTOOL_TYPE ORDER BY NAME ) a");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string TogtoolTab3Datatable(string yr, string yrhf, string type, string brid)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (type != "") type = " AND a.TOGTOOL_TYPE_ID=" + type;
            if (brid != "") brid = " AND b.BR_ID=" + brid;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT ROWNUM AS ROWNO, a.* FROM( SELECT a.ID as ZAALT_ID, b.TOGTOOL_TYPE_ID, c.NAME as TOGTOOL_TYPE_NAME, a.TOGTOOL_ID, b.NO as TOGTOOL_NO, b.AKT_NAME as TOGTOOL_NAME, a.NAME as ZAALT, b.SUCCES_DATE, d.BRNAMELIST, b.RECEIVE_DATE, b.DONE_DATE, CASE WHEN a.IS_IMPL=1 THEN 'checked=\"checked\"' ELSE null END as ISCLOSED, NVL2(d.IMPL,'glyphicon glyphicon-check txt-color-green font-xl','glyphicon glyphicon-edit txt-color-red font-xl') as ISIMPL, d.FILENAME, NVL2(d.EVAL,1,0) as ISEVAL FROM TBL_ZAALT a INNER JOIN( SELECT a.TOGTOOL_ID, NVL(RTRIM(xmlagg(xmlelement(e, c.DOMAIN_ORG || ', ') ORDER BY c.SORT).extract('//text()'), ', '), 'none') as BRNAMELIST FROM( SELECT a.ID as TOGTOOL_ID FROM TBL_TOGTOOL a INNER JOIN TBL_TOGTOOL_BR b ON a.ID = b.TOGTOOL_ID WHERE TO_NUMBER(TO_CHAR(TO_DATE(a.SUCCES_DATE, 'yyyy-mm-dd'), 'yyyy')) <= " + yr + type + brid + " ) a INNER JOIN TBL_TOGTOOL_BR b ON a.TOGTOOL_ID = b.TOGTOOL_ID INNER JOIN TBL_BRANCH c ON b.BR_ID = c.BR_ID AND c.YR = " + yr + " GROUP BY a.TOGTOOL_ID ) d ON a.TOGTOOL_ID = d.TOGTOOL_ID INNER JOIN TBL_TOGTOOL b ON d.TOGTOOL_ID = b.ID INNER JOIN TBL_TOGTOOL_TYPE c ON b.TOGTOOL_TYPE_ID = c.ID LEFT JOIN TBL_ZAALT_IMPL d ON a.ID=d.ZAALT_ID AND d.YR=" + yr + " AND d.YR_HF=" + yrhf + " WHERE a.IS_IMPL=1 ORDER BY b.SUCCES_DATE DESC ) a");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string TogtoolTab5Datatable(string yr, string yrhf, string type, string brid)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strPrevYear = "", strPrevYrhf = "";
            if (type != "") type = " AND a.TOGTOOL_TYPE_ID=" + type;
            if (brid != "") brid = " AND b.BR_ID=" + brid;
            if (yrhf == "1")
            {
                strPrevYear = (Convert.ToInt32(yr) - 1).ToString();
                strPrevYrhf = "2";
            }
            else if (yrhf == "2")
            {
                strPrevYrhf = "1";
                strPrevYear = yr;
            }
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT ROWNUM AS ROWNO, a.* FROM( SELECT a.ID as ZAALT_ID, b.TOGTOOL_TYPE_ID, c.NAME as TOGTOOL_TYPE_NAME, a.TOGTOOL_ID, b.NO as TOGTOOL_NO, b.AKT_NAME as TOGTOOL_NAME, a.NAME as ZAALT, b.SUCCES_DATE, d.BRNAMELIST, b.RECEIVE_DATE, b.DONE_DATE, CASE WHEN a.IS_IMPL=1 THEN 'checked=\"checked\"' ELSE null END as ISCLOSED, d.IMPL, d.EVAL, NVL(TO_CHAR(f.EVAL),'-') as PREVEVAL FROM TBL_ZAALT a INNER JOIN( SELECT a.TOGTOOL_ID, NVL(RTRIM(xmlagg(xmlelement(e, c.DOMAIN_ORG || ', ') ORDER BY c.SORT).extract('//text()'), ', '), 'none') as BRNAMELIST FROM( SELECT a.ID as TOGTOOL_ID FROM TBL_TOGTOOL a INNER JOIN TBL_TOGTOOL_BR b ON a.ID = b.TOGTOOL_ID WHERE TO_NUMBER(TO_CHAR(TO_DATE(a.SUCCES_DATE, 'yyyy-mm-dd'), 'yyyy')) = " + yr + type + brid + " ) a INNER JOIN TBL_TOGTOOL_BR b ON a.TOGTOOL_ID = b.TOGTOOL_ID INNER JOIN TBL_BRANCH c ON b.BR_ID = c.BR_ID AND c.YR = " + yr + " GROUP BY a.TOGTOOL_ID ) d ON a.TOGTOOL_ID = d.TOGTOOL_ID INNER JOIN TBL_TOGTOOL b ON d.TOGTOOL_ID = b.ID INNER JOIN TBL_TOGTOOL_TYPE c ON b.TOGTOOL_TYPE_ID = c.ID LEFT JOIN TBL_ZAALT_IMPL d ON a.ID=d.ZAALT_ID AND d.YR=" + yr + " AND d.YR_HF=" + yrhf + " LEFT JOIN TBL_ZAALT_IMPL f ON a.ID=f.ZAALT_ID AND f.YR=" + strPrevYear + " AND f.YR_HF=" + strPrevYrhf + " WHERE a.IS_IMPL=1 ORDER BY b.SUCCES_DATE DESC ) a");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string TogtoolTab4t1Datatable(string yr, string yr2, string yrhf)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = "";
                strQry = "SELECT RWNO, REPLACE(RWNAME,'999','Хугацаа болоогүй') as RWNAME, SUM(CNT) as CNT, SUM(CASE WHEN TOGTOOL_TYPE_ID=1 THEN CNT ELSE 0 END) T1, SUM(CASE WHEN TOGTOOL_TYPE_ID=2 THEN CNT ELSE 0 END) T2, SUM(CASE WHEN TOGTOOL_TYPE_ID=3 THEN CNT ELSE 0 END) T3, SUM(CASE WHEN TOGTOOL_TYPE_ID=4 THEN CNT ELSE 0 END) T4, SUM(CASE WHEN TOGTOOL_TYPE_ID=5 THEN CNT ELSE 0 END) T5, SUM(CASE WHEN TOGTOOL_TYPE_ID=6 THEN CNT ELSE 0 END) T6, SUM(CASE WHEN TOGTOOL_TYPE_ID=7 THEN CNT ELSE 0 END) T7, SUM(CASE WHEN TOGTOOL_TYPE_ID=8 THEN CNT ELSE 0 END) T8 FROM ( SELECT 1 as RWNO, 'Хяналтанд авсан нийт шийдвэрийн тоо' as RWNAME, TOGTOOL_TYPE_ID, SUM(CNT) as CNT FROM ( SELECT TOGTOOL_TYPE_ID, COUNT(TOGTOOL_TYPE_ID) as CNT FROM TBL_TOGTOOL WHERE TO_NUMBER(TO_CHAR(TO_DATE(SUCCES_DATE,'yyyy-mm-dd'),'yyyy')) BETWEEN " + yr + " AND " + yr2 + " GROUP BY TOGTOOL_TYPE_ID UNION ALL SELECT ID as TOGTOOL_TYPE_ID, 0 as CNT FROM TBL_TOGTOOL_TYPE ) GROUP BY TOGTOOL_TYPE_ID UNION ALL SELECT 2 as RWNO, 'Хяналтанд авсан нийт зүйл, заалтын тоо' as RWNAME, TOGTOOL_TYPE_ID, SUM(CNT) as CNT FROM ( SELECT b.TOGTOOL_TYPE_ID, COUNT(a.ID) as CNT FROM TBL_ZAALT a INNER JOIN TBL_TOGTOOL b ON a.TOGTOOL_ID=b.ID WHERE a.IS_IMPL=1 AND TO_NUMBER(TO_CHAR(TO_DATE(b.SUCCES_DATE,'yyyy-mm-dd'),'yyyy')) BETWEEN " + yr + " AND " + yr2 + " GROUP BY b.TOGTOOL_TYPE_ID UNION ALL SELECT ID as TOGTOOL_TYPE_ID, 0 as CNT FROM TBL_TOGTOOL_TYPE ) GROUP BY TOGTOOL_TYPE_ID UNION ALL SELECT CASE EVAL WHEN 100 THEN 3 WHEN 90 THEN 4 WHEN 80 THEN 5 WHEN 70 THEN 6 WHEN 50 THEN 7 WHEN 30 THEN 8 WHEN 10 THEN 9 WHEN 0 THEN 10 WHEN 999 THEN 11 END RWNO, TO_CHAR(EVAL) as RWNAME, TOGTOOL_TYPE_ID, SUM(CNT) as CNT FROM ( SELECT c.EVAL, b.TOGTOOL_TYPE_ID, COUNT(a.ID) as CNT FROM TBL_ZAALT a INNER JOIN TBL_TOGTOOL b ON a.TOGTOOL_ID=b.ID INNER JOIN TBL_ZAALT_IMPL c ON a.ID=c.ZAALT_ID AND c.YR BETWEEN " + yr + " AND " + yr2 + " AND c.YR_HF=" + yrhf + " WHERE a.IS_IMPL=1 AND TO_NUMBER(TO_CHAR(TO_DATE(b.SUCCES_DATE,'yyyy-mm-dd'),'yyyy')) BETWEEN " + yr + " AND " + yr2 + " AND c.EVAL IS NOT NULL GROUP BY b.TOGTOOL_TYPE_ID, c.EVAL UNION ALL SELECT a.EVAL, b.TOGTOOL_TYPE_ID, b. CNT FROM ( SELECT 0 as EVAL FROM DUAL UNION ALL SELECT 10 as EVAL FROM DUAL UNION ALL SELECT 30 as EVAL FROM DUAL UNION ALL SELECT 50 as EVAL FROM DUAL UNION ALL SELECT 70 as EVAL FROM DUAL UNION ALL SELECT 80 as EVAL FROM DUAL UNION ALL SELECT 90 as EVAL FROM DUAL UNION ALL SELECT 100 as EVAL FROM DUAL UNION ALL SELECT 999 as EVAL FROM DUAL ) a, ( SELECT ID as TOGTOOL_TYPE_ID, 0 as CNT FROM TBL_TOGTOOL_TYPE ) b ) GROUP BY EVAL, TOGTOOL_TYPE_ID UNION ALL SELECT 11 as RWNO, 'Үнэлээгүй' as RWNAME, TOGTOOL_TYPE_ID, SUM(CNT) as CNT FROM ( SELECT b.TOGTOOL_TYPE_ID, COUNT(a.ID) as CNT FROM TBL_ZAALT a INNER JOIN TBL_TOGTOOL b ON a.TOGTOOL_ID=b.ID INNER JOIN TBL_ZAALT_IMPL c ON a.ID=c.ZAALT_ID AND c.YR BETWEEN " + yr + " AND " + yr2 + " AND c.YR_HF=" + yrhf + " AND c.EVAL IS NULL WHERE a.IS_IMPL=1 AND TO_NUMBER(TO_CHAR(TO_DATE(b.SUCCES_DATE,'yyyy-mm-dd'),'yyyy')) BETWEEN " + yr + " AND " + yr2 + " GROUP BY b.TOGTOOL_TYPE_ID UNION ALL SELECT ID as TOGTOOL_TYPE_ID, 0 as CNT FROM TBL_TOGTOOL_TYPE ) GROUP BY TOGTOOL_TYPE_ID ) GROUP BY RWNO, RWNAME ORDER BY RWNO";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string TogtoolTab4t2Datatable(string yr, string yr2, string yrhf, string type, string eval)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (type != "") type = " AND b.TOGTOOL_TYPE_ID=" + type;
            if (eval == "all") eval = "";
            else if (eval == "-") eval = " AND c.EVAL is null";
            else eval = " AND c.EVAL=" + eval;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = "";
                strQry = "SELECT ROWNUM as ROWNO, a.* FROM ( SELECT d.SORTABLE, d.NAME as TOGTOOL_TYPE_NAME, b.SUCCES_DATE, b.NO as TOGTOOL_NO, a.NO as ZAALT_NO, NVL(b.DONE_DATE,'-') as DONE_DATE, NVL(TO_CHAR(c.EVAL),'-') as EVAL FROM TBL_ZAALT a INNER JOIN TBL_TOGTOOL b ON a.TOGTOOL_ID=b.ID LEFT JOIN TBL_ZAALT_IMPL c ON a.ID=c.ZAALT_ID AND c.YR BETWEEN " + yr + " AND " + yr2 + " AND c.YR_HF=" + yrhf + " INNER JOIN TBL_TOGTOOL_TYPE d ON b.TOGTOOL_TYPE_ID=d.ID WHERE a.IS_IMPL=1 AND TO_NUMBER(TO_CHAR(TO_DATE(b.SUCCES_DATE,'yyyy-mm-dd'),'yyyy')) BETWEEN " + yr + " AND " + yr2 + type + eval + " ORDER BY d.SORTABLE, b.SUCCES_DATE ) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string TogtoolTab4t3Datatable(string yr, string yr2, string yrhf, string type)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (type != "") type = " AND d.TOGTOOL_TYPE_ID=" + type;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = "";
                strQry = "SELECT ROWNUM as ROWNO, a.* FROM ( SELECT f.SORTABLE, f.NAME as TOGTOOL_TYPE_NAME, g.CNT, d.ID as TOGTOOL_ID, d.SUCCES_DATE, d.NO as TOGTOOL_NO, d.AKT_NAME, a.NO as ZAALT_NO, a.NAME, c.IMPL,c.IMPL1,c.IMPL2,c.IMPL3,c.IMPL4,c.IMPL5 FROM TBL_ZAALT a INNER JOIN TBL_ZAALT_IMPL b ON a.ID=b.ZAALT_ID AND b.YR BETWEEN " + yr + " AND " + yr2 + " AND b.YR_HF=" + yrhf + " AND b.IS_LATE=1 LEFT JOIN TBL_ZAALT_IMPL_IMPL c ON b.ID=c.ZAALT_IMPL_ID INNER JOIN TBL_TOGTOOL d ON a.TOGTOOL_ID=d.ID INNER JOIN TBL_TOGTOOL_TYPE f ON d.TOGTOOL_TYPE_ID=f.ID INNER JOIN ( SELECT d.TOGTOOL_TYPE_ID, COUNT(d.TOGTOOL_TYPE_ID) as CNT FROM TBL_ZAALT a INNER JOIN TBL_ZAALT_IMPL b ON a.ID=b.ZAALT_ID AND b.YR BETWEEN " + yr + " AND " + yr2 + " AND b.YR_HF=" + yrhf + " AND b.IS_LATE=1 INNER JOIN TBL_TOGTOOL d ON a.TOGTOOL_ID=d.ID WHERE a.IS_IMPL=1 AND b.YR BETWEEN " + yr + " AND " + yr2 + " AND b.YR_HF=" + yrhf + type + " GROUP BY d.TOGTOOL_TYPE_ID ) g ON d.TOGTOOL_TYPE_ID=g.TOGTOOL_TYPE_ID WHERE a.IS_IMPL=1 AND b.YR BETWEEN " + yr + " AND " + yr2 + " AND b.YR_HF=" + yrhf + type + " ORDER BY f.SORTABLE ) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string TogtoolTab4t4Datatable(string yr, string yr2, string yrhf, string type, string eval, string isimpl)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (type != "") type = " AND a.TOGTOOL_TYPE_ID=" + type;
            if (eval == "all") eval = "";
            else if (eval == "-") eval = " AND b.EVAL is null";
            else eval = " AND b.EVAL=" + eval;
            if (isimpl == "all") isimpl = "";
            else if (isimpl == "1") isimpl = " AND c.IMPL is not null";
            else if (isimpl == "0") isimpl = " AND c.IMPL is null";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = "";
                strQry = "SELECT ROWNUM as ROWNO, a.* FROM ( SELECT a.SORTABLE, a.TOGTOOL_TYPE_ID, a.TOGTOOL_TYPE_NAME, a.CNT, a.TOGTOOL_ID, a.SUCCES_DATE, a.TOGTOOL_NO, a.AKT_NAME, a.ZAALT_NO, a.ZAALT_NAME, NVL(TO_CHAR(b.EVAL),'-') AS EVAL, b.IMPL, a.IMPL_TYPE, a.ZAALT_ID FROM ( SELECT d.SORTABLE, d.ID as TOGTOOL_TYPE_ID, d.NAME as TOGTOOL_TYPE_NAME, c.CNT, a.ID as TOGTOOL_ID, a.SUCCES_DATE, a.NO as TOGTOOL_NO, a.AKT_NAME, b.NO as ZAALT_NO, b.NAME as ZAALT_NAME, g.IMPL_TYPE, b.ID as ZAALT_ID FROM TBL_TOGTOOL a INNER JOIN TBL_ZAALT b ON a.ID=b.TOGTOOL_ID INNER JOIN ( SELECT a.ID as TOGTOOL_ID, COUNT(b.ID) as CNT FROM TBL_TOGTOOL a INNER JOIN TBL_ZAALT b ON a.ID=b.TOGTOOL_ID WHERE b.IS_IMPL=1 AND TO_NUMBER(TO_CHAR(TO_DATE(a.SUCCES_DATE,'yyyy-mm-dd'),'yyyy')) BETWEEN " + yr + " AND " + yr2 + " GROUP BY a.ID ) c ON a.ID=c.TOGTOOL_ID INNER JOIN TBL_TOGTOOL_TYPE d ON a.TOGTOOL_TYPE_ID=d.ID, ( SELECT LEVEL as IMPL_TYPE FROM DUAL CONNECT BY LEVEL < 3 + 1 ) g WHERE b.IS_IMPL=1 AND TO_NUMBER(TO_CHAR(TO_DATE(a.SUCCES_DATE,'yyyy-mm-dd'),'yyyy')) BETWEEN " + yr + " AND " + yr2 + " ORDER BY d.SORTABLE, a.ID, a.SUCCES_DATE DESC, b.ID, g.IMPL_TYPE ) a LEFT JOIN TBL_ZAALT_IMPL b ON a.ZAALT_ID=b.ZAALT_ID AND b.YR BETWEEN " + yr + " AND " + yr2 + " AND b.YR_HF=" + yrhf + " WHERE 1=1" + type + eval + isimpl + " ORDER BY a.SORTABLE, a.TOGTOOL_ID, a.SUCCES_DATE DESC, a.ZAALT_ID, a.IMPL_TYPE ) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string TogtoolTab4t5Datatable(string yr, string yr2, string yrhf)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = "";
                //strQry = "SELECT ROWNUM as ROWNO, a.* FROM ( SELECT b.BR_NAME, a.CNT1, a.CNT2, a.CNT100, a.CNT90, a.CNT80, a.CNT70, a.CNT50, a.CNT30, a.CNT10, a.CNT0, a.CNTNONE, a.CNT999, a.AVGPER FROM ( SELECT BR_ID, SUM(CNT1) as CNT1, SUM(CNT2) as CNT2, SUM(CNT100) as CNT100, SUM(CNT90) as CNT90, SUM(CNT80) as CNT80, SUM(CNT70) as CNT70, SUM(CNT50) as CNT50, SUM(CNT30) as CNT30, SUM(CNT10) as CNT10, SUM(CNT0) as CNT0, SUM(CNTNONE) as CNTNONE, SUM(CNT999) as CNT999, ROUND(((SUM(CNT100)*100+SUM(CNT90)*90+SUM(CNT80)*80+SUM(CNT70)*70+SUM(CNT50)*50+SUM(CNT30)*30+SUM(CNT10)*10)/CASE WHEN ((SUM(CNT2)-SUM(CNTNONE)-SUM(CNT999))*100)=0 THEN 1 ELSE ((SUM(CNT2)-SUM(CNTNONE)-SUM(CNT999))*100) END)*100,1) as AVGPER FROM ( SELECT b.BR_ID, COUNT(a.ID) as CNT1, 0 as CNT2, 0 as CNT100, 0 as CNT90, 0 as CNT80, 0 as CNT70, 0 as CNT50, 0 as CNT30, 0 as CNT10, 0 as CNT0, 0 as CNTNONE, 0 as CNT999 FROM TBL_TOGTOOL a INNER JOIN TBL_TOGTOOL_BR b ON a.ID=b.TOGTOOL_ID WHERE TO_NUMBER(TO_CHAR(TO_DATE(a.SUCCES_DATE,'yyyy-mm-dd'),'yyyy')) BETWEEN " + yr + " AND " + yr2 + " GROUP BY b.BR_ID UNION ALL SELECT c.BR_ID, 0 as CNT1, COUNT(b.ID) as CNT2, 0 as CNT100, 0 as CNT90, 0 as CNT80, 0 as CNT70, 0 as CNT50, 0 as CNT30, 0 as CNT10, 0 as CNT0, 0 as CNTNONE, 0 as CNT999 FROM TBL_ZAALT a INNER JOIN TBL_TOGTOOL b ON a.TOGTOOL_ID=b.ID INNER JOIN TBL_TOGTOOL_BR c ON b.ID=c.TOGTOOL_ID WHERE a.IS_IMPL=1 AND TO_NUMBER(TO_CHAR(TO_DATE(b.SUCCES_DATE,'yyyy-mm-dd'),'yyyy')) BETWEEN " + yr + " AND " + yr2 + " GROUP BY c.BR_ID UNION ALL SELECT BR_ID, 0 as CNT1, 0 as CNT2, CNT100, CNT90, CNT80, CNT70, CNT50, CNT30, CNT10, CNT0, 0 as CNTNONE, CNT999 FROM ( SELECT * FROM ( SELECT BR_ID, EVAL, SUM(EVALCNT) as EVALCNT FROM ( SELECT d.BR_ID, c.EVAL, COUNT(c.EVAL) as EVALCNT FROM TBL_ZAALT a INNER JOIN TBL_TOGTOOL b ON a.TOGTOOL_ID=b.ID INNER JOIN TBL_ZAALT_IMPL c ON a.ID=c.ZAALT_ID AND c.YR BETWEEN " + yr + " AND " + yr2 + " AND c.YR_HF=" + yrhf + " INNER JOIN TBL_TOGTOOL_BR d ON b.ID=d.TOGTOOL_ID WHERE a.IS_IMPL=1 AND TO_NUMBER(TO_CHAR(TO_DATE(b.SUCCES_DATE,'yyyy-mm-dd'),'yyyy')) BETWEEN " + yr + " AND " + yr2 + " AND c.EVAL IS NOT NULL GROUP BY d.BR_ID, c.EVAL UNION ALL SELECT b.BR_ID, a.EVAL, 0 as EVALCNT FROM ( SELECT 0 as EVAL FROM DUAL UNION ALL SELECT 10 as EVAL FROM DUAL UNION ALL SELECT 30 as EVAL FROM DUAL UNION ALL SELECT 50 as EVAL FROM DUAL UNION ALL SELECT 70 as EVAL FROM DUAL UNION ALL SELECT 80 as EVAL FROM DUAL UNION ALL SELECT 90 as EVAL FROM DUAL UNION ALL SELECT 100 as EVAL FROM DUAL UNION ALL SELECT 999 as EVAL FROM DUAL ) a, ( SELECT BR_ID, 0 as CNT FROM TBL_BRANCH WHERE YR="+yr+" AND BR_TYPE1=3 AND BR_ID!=9911 ) b ) GROUP BY BR_ID, EVAL ) PIVOT( SUM(EVALCNT) FOR EVAL IN (100 as CNT100,90 as CNT90,80 as CNT80,70 as CNT70,50 as CNT50,30 as CNT30,10 as CNT10,0 as CNT0,999 as CNT999) ) ) UNION ALL SELECT d.BR_ID, 0 as CNT1, 0 as CNT2, 0 as CNT100, 0 as CNT90, 0 as CNT80, 0 as CNT70, 0 as CNT50, 0 as CNT30, 0 as CNT10, 0 as CNT0, COUNT(a.ID) as CNTNONE, 0 as CNT999 FROM TBL_ZAALT a INNER JOIN TBL_TOGTOOL b ON a.TOGTOOL_ID=b.ID INNER JOIN TBL_ZAALT_IMPL c ON a.ID=c.ZAALT_ID AND c.YR BETWEEN " + yr + " AND " + yr2 + " AND c.YR_HF=" + yrhf + " AND c.EVAL IS NULL INNER JOIN TBL_TOGTOOL_BR d ON b.ID=d.TOGTOOL_ID WHERE a.IS_IMPL=1 AND TO_NUMBER(TO_CHAR(TO_DATE(b.SUCCES_DATE,'yyyy-mm-dd'),'yyyy')) BETWEEN " + yr + " AND " + yr2 + " GROUP BY d.BR_ID UNION ALL SELECT BR_ID, 0 as CNT1, 0 as CNT2, 0 as CNT100, 0 as CNT90, 0 as CNT80, 0 as CNT70, 0 as CNT50, 0 as CNT30, 0 as CNT10, 0 as CNT0, 0 as CNTNONE, 0 as CNT999 FROM TBL_BRANCH WHERE YR="+yr+" AND BR_TYPE1=3 AND BR_ID!=9911 ) GROUP BY BR_ID ) a INNER JOIN TBL_BRANCH b ON a.BR_ID=b.BR_ID AND b.YR="+yr+" ORDER BY b.SORT ) a";
                strQry = @"SELECT ROWNUM as ROWNO, a.* 
FROM ( 
  SELECT b.BR_NAME, a.CNT1, a.CNT2, a.CNT100, a.CNT90, a.CNT80, a.CNT70, a.CNT50, a.CNT30, a.CNT10, a.CNT0, a.CNTNONE, a.CNT999, a.AVGPER 
  FROM ( 
    SELECT BR_ID, SUM(CNT1) as CNT1, SUM(CNT2) as CNT2, SUM(CNT100) as CNT100, SUM(CNT90) as CNT90, SUM(CNT80) as CNT80, SUM(CNT70) as CNT70, SUM(CNT50) as CNT50, SUM(CNT30) as CNT30, SUM(CNT10) as CNT10, SUM(CNT0) as CNT0, SUM(CNTNONE) as CNTNONE, SUM(CNT999) as CNT999, ROUND(((SUM(CNT100)*100+SUM(CNT90)*90+SUM(CNT80)*80+SUM(CNT70)*70+SUM(CNT50)*50+SUM(CNT30)*30+SUM(CNT10)*10)/CASE WHEN ((SUM(CNT2)-SUM(CNTNONE)-SUM(CNT999))*100)=0 THEN 1 ELSE ((SUM(CNT2)-SUM(CNTNONE)-SUM(CNT999))*100) END)*100,1) as AVGPER 
    FROM ( 
      SELECT TO_NUMBER(b.BR_ID) as BR_ID, COUNT(a.ID) as CNT1, 0 as CNT2, 0 as CNT100, 0 as CNT90, 0 as CNT80, 0 as CNT70, 0 as CNT50, 0 as CNT30, 0 as CNT10, 0 as CNT0, 0 as CNTNONE, 0 as CNT999 
      FROM TBL_TOGTOOL a 
      INNER JOIN TBL_TOGTOOL_BR b ON a.ID=b.TOGTOOL_ID 
      WHERE TO_NUMBER(TO_CHAR(TO_DATE(a.SUCCES_DATE,'yyyy-mm-dd'),'yyyy')) BETWEEN "+yr+" AND "+yr2+@" 
      GROUP BY b.BR_ID 
      UNION ALL 
      SELECT TO_NUMBER(c.BR_ID) as BR_ID, 0 as CNT1, COUNT(b.ID) as CNT2, 0 as CNT100, 0 as CNT90, 0 as CNT80, 0 as CNT70, 0 as CNT50, 0 as CNT30, 0 as CNT10, 0 as CNT0, 0 as CNTNONE, 0 as CNT999 
      FROM TBL_ZAALT a 
      INNER JOIN TBL_TOGTOOL b ON a.TOGTOOL_ID=b.ID 
      INNER JOIN TBL_TOGTOOL_BR c ON b.ID=c.TOGTOOL_ID 
      WHERE a.IS_IMPL=1 AND TO_NUMBER(TO_CHAR(TO_DATE(b.SUCCES_DATE,'yyyy-mm-dd'),'yyyy')) BETWEEN "+yr+" AND "+yr2+@" 
      GROUP BY c.BR_ID 
      UNION ALL 
      SELECT TO_NUMBER(BR_ID) as BR_ID, 0 as CNT1, 0 as CNT2, CNT100, CNT90, CNT80, CNT70, CNT50, CNT30, CNT10, CNT0, 0 as CNTNONE, CNT999 
      FROM ( 
        SELECT * 
        FROM ( 
          SELECT BR_ID, EVAL, SUM(EVALCNT) as EVALCNT 
          FROM ( 
            SELECT TO_NUMBER(d.BR_ID) as BR_ID, TO_NUMBER(c.EVAL) as EVAL, TO_NUMBER(COUNT(c.EVAL)) as EVALCNT 
            FROM TBL_ZAALT a 
            INNER JOIN TBL_TOGTOOL b ON a.TOGTOOL_ID=b.ID 
            INNER JOIN TBL_ZAALT_IMPL c ON a.ID=c.ZAALT_ID AND c.YR BETWEEN "+yr+" AND "+yr2+@" AND c.YR_HF="+ yrhf + @" 
            INNER JOIN TBL_TOGTOOL_BR d ON b.ID=d.TOGTOOL_ID 
            WHERE a.IS_IMPL=1 AND TO_NUMBER(TO_CHAR(TO_DATE(b.SUCCES_DATE,'yyyy-mm-dd'),'yyyy')) BETWEEN "+yr+" AND "+yr2+@" AND c.EVAL IS NOT NULL 
            GROUP BY d.BR_ID, c.EVAL 
            UNION ALL 
            SELECT TO_NUMBER(b.BR_ID) as BR_ID, TO_NUMBER(a.EVAL) as EVAL, TO_NUMBER(0) as EVALCNT 
            FROM ( 
              SELECT 0 as EVAL 
              FROM DUAL 
              UNION ALL 
              SELECT 10 as EVAL FROM DUAL 
              UNION ALL 
              SELECT 30 as EVAL FROM DUAL 
              UNION ALL 
              SELECT 50 as EVAL FROM DUAL UNION ALL 
              SELECT 70 as EVAL FROM DUAL UNION ALL
              SELECT 80 as EVAL FROM DUAL UNION ALL 
              SELECT 90 as EVAL FROM DUAL UNION ALL 
              SELECT 100 as EVAL FROM DUAL UNION ALL 
              SELECT 999 as EVAL FROM DUAL 
            ) a, ( 
              SELECT BR_ID, 0 as CNT 
              FROM TBL_BRANCH 
              WHERE YR="+yr+@" AND BR_TYPE1=3 AND BR_ID!=9911 
            ) b 
          ) 
          GROUP BY BR_ID, EVAL 
        ) 
        PIVOT( 
          SUM(EVALCNT) FOR EVAL IN (100 as CNT100,90 as CNT90,80 as CNT80,70 as CNT70,50 as CNT50,30 as CNT30,10 as CNT10,0 as CNT0,999 as CNT999) 
        ) 
      ) 
      UNION ALL 
      SELECT TO_NUMBER(d.BR_ID) as BR_ID, 0 as CNT1, 0 as CNT2, 0 as CNT100, 0 as CNT90, 0 as CNT80, 0 as CNT70, 0 as CNT50, 0 as CNT30, 0 as CNT10, 0 as CNT0, COUNT(a.ID) as CNTNONE, 0 as CNT999 
      FROM TBL_ZAALT a 
      INNER JOIN TBL_TOGTOOL b ON a.TOGTOOL_ID=b.ID 
      INNER JOIN TBL_ZAALT_IMPL c ON a.ID=c.ZAALT_ID AND c.YR 
      BETWEEN "+yr+" AND "+yr2+ @" AND c.YR_HF=" + yrhf + @" AND c.EVAL IS NULL 
      INNER JOIN TBL_TOGTOOL_BR d ON b.ID=d.TOGTOOL_ID 
      WHERE a.IS_IMPL=1 AND TO_NUMBER(TO_CHAR(TO_DATE(b.SUCCES_DATE,'yyyy-mm-dd'),'yyyy')) BETWEEN " + yr+" AND "+yr2+ @" 
      GROUP BY d.BR_ID 
      UNION ALL 
      SELECT TO_NUMBER(BR_ID) as BR_ID, 0 as CNT1, 0 as CNT2, 0 as CNT100, 0 as CNT90, 0 as CNT80, 0 as CNT70, 0 as CNT50, 0 as CNT30, 0 as CNT10, 0 as CNT0, 0 as CNTNONE, 0 as CNT999 
      FROM TBL_BRANCH 
      WHERE YR=" + yr + @" AND BR_TYPE1=3 AND BR_ID!=9911 
    ) 
    GROUP BY BR_ID 
  ) a 
  INNER JOIN TBL_BRANCH b ON a.BR_ID=b.BR_ID AND b.YR=" + yr + @" 
  ORDER BY b.SORT 
) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string TogtoolTab4t6Datatable(string yr,  string yrhf)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = "";
                string strTableVal = "";
                string strIdList = myObj.OracleExecuteScalar("SELECT RTRIM(xmlagg (xmlelement (e, ID || ',') ORDER BY ID).extract('//text()'), ',') as IDLIST FROM TBL_TOGTOOL_TYPE").ToString();
                string strNameList = myObj.OracleExecuteScalar("SELECT RTRIM(xmlagg (xmlelement (e, NAME || '~') ORDER BY ID).extract('//text()'), '~') as IDLIST FROM TBL_TOGTOOL_TYPE").ToString();
                strQry = @"SELECT ROWNUM as ROWNO, a.*
FROM (
    SELECT b.DOMAIN_ORG, a.*
    FROM (
      SELECT *
      FROM (
        SELECT a.BR_ID, a.TOGTOOL_TYPE_ID, NVL(b.IMPL1CNT, 0) as IMPL1CNT, NVL(b.IMPL0CNT, 0) as IMPL0CNT
        FROM (
          SELECT a.BR_ID, b.ID as TOGTOOL_TYPE_ID
          FROM (
            SELECT a.BR_ID
            FROM TBL_BRANCH a
            WHERE a.BR_TYPE1=3 AND a.YR=(SELECT YR FROM TBL_SYSSET WHERE ACTIVE=1)
          ) a,
          TBL_TOGTOOL_TYPE b
        ) a
        LEFT JOIN (
          SELECT a.BR_ID, a.TOGTOOL_TYPE_ID, SUM(a.IMPL1) as IMPL1CNT, SUM(a.IMPL0) as IMPL0CNT
          FROM (
            SELECT a.ID, c.BR_ID, b.TOGTOOL_TYPE_ID, NVL2(d.IMPL,1,0) as IMPL1, NVL2(d.IMPL,0,1) as IMPL0
            FROM TBL_ZAALT a
            INNER JOIN TBL_TOGTOOL b ON a.TOGTOOL_ID=b.ID
            INNER JOIN TBL_TOGTOOL_BR c ON b.ID=c.TOGTOOL_ID
            LEFT JOIN  TBL_ZAALT_IMPL d ON a.ID=d.ZAALT_ID AND d.YR="+yr+" AND d.YR_HF="+yrhf+ @"
          ) a
          INNER JOIN TBL_TOGTOOL_TYPE b ON a.TOGTOOL_TYPE_ID=b.ID
          GROUP BY a.BR_ID, a.TOGTOOL_TYPE_ID
        ) b ON a.BR_ID=b.BR_ID AND a.TOGTOOL_TYPE_ID=b.TOGTOOL_TYPE_ID
      ) 
      PIVOT 
      (
        SUM(IMPL1CNT) as IMPL1CNT,
        SUM(IMPL0CNT) as IMPL0CNT
        FOR (TOGTOOL_TYPE_ID) IN ("+ strIdList + @")
      )
    ) a
    INNER JOIN TBL_BRANCH b ON a.BR_ID=b.BR_ID AND b.YR=(SELECT YR FROM TBL_SYSSET WHERE ACTIVE=1)
    ORDER BY b.SORT
) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                strTableVal += "<table id=\"togtoolTab4t6Datatable\" style=\"border: 1px solid #000; border-collapse: collapse; font: 11pt arial, sans-serif; width: 100%;\">";
                strTableVal += "<thead style=\"background-color:C6D9F1;\">";
                strTableVal += "<tr>";
                strTableVal += "<th rowspan=\"2\" style=\"border: 1px solid #000; padding:5px; text-align:center;\">№</th>";
                strTableVal += "<th rowspan=\"2\" style=\"border: 1px solid #000; padding:5px; text-align:center;\">Газар</th>";
                for (var i = 0; i < strIdList.Split(',').Length; i++)
                {
                    strTableVal += "<th colspan=\"2\" style=\"border: 1px solid #000; padding:5px; text-align:center;\">" + strNameList.Split('~')[i] + "</th>";
                }
                strTableVal += "</tr>";
                strTableVal += "<tr>";
                for (var i = 0; i < strIdList.Split(',').Length; i++)
                {
                    strTableVal += "<th style=\"border: 1px solid #000; padding:5px; text-align:center;\">Тайлагнасан</th>";
                    strTableVal += "<th style=\"border: 1px solid #000; padding:5px; text-align:center;\">Тайлагнаагүй</th>";
                }
                strTableVal += "</tr>";
                strTableVal += "</thead><tbody>";
                if (ds.Tables[0].Rows.Count != 0)
                {
                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {
                        strTableVal += "<tr>";
                        strTableVal += "<td style=\"border: 1px solid #000; padding:5px; text-align:center;\">" + dr["ROWNO"].ToString() + "</td>";
                        strTableVal += "<td style=\"border: 1px solid #000; padding:5px;\">" + dr["DOMAIN_ORG"].ToString() + " </td>";
                        for (var i = 0; i < strIdList.Split(',').Length; i++)
                        {
                            strTableVal += "<td style=\"border: 1px solid #000; padding:5px; text-align:center;\">" + dr[strIdList.Split(',')[i].ToString() + "_IMPL1CNT"].ToString() + "</td>";
                            strTableVal += "<td style=\"border: 1px solid #000; padding:5px; text-align:center;\">" + dr[strIdList.Split(',')[i].ToString() + "_IMPL0CNT"].ToString() + "</td>";
                        }
                        strTableVal += "</tr>";
                    }
                }
                strTableVal += "</tbody>";
                strTableVal += "</table>";
                return strTableVal;
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }



        //*****tushaal.aspx*****//
        public string TushaalTypeListForDDL(string which)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT ID, NAME FROM TBL_TUSHAAL_TYPE WHERE TYPE=" + which + " ORDER BY NAME");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void TUSHAALS_INSERT(string P_TUSHAAL_TYPE, string P_TUSHAAL_NAME, string P_SUCCESS_DATE, string P_TUSHAAL_NUMBER, string P_TUSHAAL_DESCRIPTION, string P_FILE_URL, string P_TUSHAAL_TYPE_ID, string P_BOLOVSRUULSAN_BRLIST, string P_BOLOVSRUULSAN_STLIST, string P_HARIUTSSAN_BRLIST, string P_HARIUTSSAN_STLIST, string P_STAFFID)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[12], ParamValue = new string[12];
                ParamName[0] = "P_TUSHAAL_TYPE";
                ParamName[1] = "P_TUSHAAL_NAME";
                ParamName[2] = "P_SUCCESS_DATE";
                ParamName[3] = "P_TUSHAAL_NUMBER";
                ParamName[4] = "P_TUSHAAL_DESCRIPTION";
                ParamName[5] = "P_FILE_URL";
                ParamName[6] = "P_TUSHAAL_TYPE_ID";
                ParamName[7] = "P_BOLOVSRUULSAN_BRLIST";
                ParamName[8] = "P_BOLOVSRUULSAN_STLIST";
                ParamName[9] = "P_HARIUTSSAN_BRLIST";
                ParamName[10] = "P_HARIUTSSAN_STLIST";
                ParamName[11] = "P_STAFFID";
                ParamValue[0] = P_TUSHAAL_TYPE;
                ParamValue[1] = P_TUSHAAL_NAME;
                ParamValue[2] = P_SUCCESS_DATE;
                ParamValue[3] = P_TUSHAAL_NUMBER;
                ParamValue[4] = P_TUSHAAL_DESCRIPTION;
                ParamValue[5] = P_FILE_URL;
                ParamValue[6] = P_TUSHAAL_TYPE_ID;
                ParamValue[7] = P_BOLOVSRUULSAN_BRLIST;
                ParamValue[8] = P_BOLOVSRUULSAN_STLIST;
                ParamValue[9] = P_HARIUTSSAN_BRLIST;
                ParamValue[10] = P_HARIUTSSAN_STLIST;
                ParamValue[11] = P_STAFFID;
                myObj.SP_OracleExecuteNonQuery("TUSHAALS_INSERT", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void TUSHAALS_UPDATE(string P_ID, string P_TUSHAAL_TYPE, string P_TUSHAAL_NAME, string P_SUCCESS_DATE, string P_TUSHAAL_NUMBER, string P_TUSHAAL_DESCRIPTION, string P_FILE_URL, string P_TUSHAAL_TYPE_ID, string P_BOLOVSRUULSAN_BRLIST, string P_BOLOVSRUULSAN_STLIST, string P_HARIUTSSAN_BRLIST, string P_HARIUTSSAN_STLIST, string P_STAFFID)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[13], ParamValue = new string[13];
                ParamName[0] = "P_ID";
                ParamName[1] = "P_TUSHAAL_TYPE";
                ParamName[2] = "P_TUSHAAL_NAME";
                ParamName[3] = "P_SUCCESS_DATE";
                ParamName[4] = "P_TUSHAAL_NUMBER";
                ParamName[5] = "P_TUSHAAL_DESCRIPTION";
                ParamName[6] = "P_FILE_URL";
                ParamName[7] = "P_TUSHAAL_TYPE_ID";
                ParamName[8] = "P_BOLOVSRUULSAN_BRLIST";
                ParamName[9] = "P_BOLOVSRUULSAN_STLIST";
                ParamName[10] = "P_HARIUTSSAN_BRLIST";
                ParamName[11] = "P_HARIUTSSAN_STLIST";
                ParamName[12] = "P_STAFFID";
                ParamValue[0] = P_ID;
                ParamValue[1] = P_TUSHAAL_TYPE;
                ParamValue[2] = P_TUSHAAL_NAME;
                ParamValue[3] = P_SUCCESS_DATE;
                ParamValue[4] = P_TUSHAAL_NUMBER;
                ParamValue[5] = P_TUSHAAL_DESCRIPTION;
                ParamValue[6] = P_FILE_URL;
                ParamValue[7] = P_TUSHAAL_TYPE_ID;
                ParamValue[8] = P_BOLOVSRUULSAN_BRLIST;
                ParamValue[9] = P_BOLOVSRUULSAN_STLIST;
                ParamValue[10] = P_HARIUTSSAN_BRLIST;
                ParamValue[11] = P_HARIUTSSAN_STLIST;
                ParamValue[12] = P_STAFFID;
                myObj.SP_OracleExecuteNonQuery("TUSHAALS_UPDATE", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void TUSHAALS_DELETE(string P_ID)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[1], ParamValue = new string[1];
                ParamName[0] = "P_ID";
                ParamValue[0] = P_ID;
                myObj.SP_OracleExecuteNonQuery("TUSHAALS_DELETE", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void TushaalSendMail(string tushaal_ID, string DOMAIN_USER, string yr)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            //  DOMAIN_USER = "prj0005202,prj0005201";
            string strReturnVal = "";

            string[] arrStrIsAttach = new string[2];
            MailMessage mail = new MailMessage();

            try
            {
                for (int i = 0; i < DOMAIN_USER.Split(',').Length; i++)
                {
                    SearchResultCollection results = null;
                    using (DirectoryEntry DEConnection = new DirectoryEntry("LDAP://mof.local"))
                    {
                        DirectorySearcher mySearcher = new DirectorySearcher(DEConnection);
                        mySearcher.Filter = "((SAMAccountName=" + DOMAIN_USER.Split(',')[i] + "))";
                        results = mySearcher.FindAll();
                        foreach (SearchResult searchResult in results)
                        {
                            Console.WriteLine("Search properties for {0}", searchResult.Path);
                            foreach (string propertyKey in searchResult.Properties.PropertyNames)
                            {
                                ResultPropertyValueCollection valueCollection = searchResult.Properties[propertyKey];
                                foreach (Object propertyValue in valueCollection)
                                {
                                    if (propertyKey == "mail")
                                    {
                                        if (strReturnVal == "") strReturnVal += propertyValue.ToString();
                                        else strReturnVal += "," + propertyValue.ToString();
                                        mail.To.Add(propertyValue.ToString());
                                    }
                                }
                            }
                        }
                    }
                }

                mail.From = new MailAddress("lmonitoring@mof.gov.mn");
                mail.Subject = myObj.OracleExecuteScalar("SELECT b.NAME as TUSHAAL_TYPE_NAME FROM TBL_TUSHAAL a INNER JOIN TBL_TUSHAAL_TYPE b ON a.TUSHAAL_TYPE_ID=b.ID  WHERE a.ID=" + tushaal_ID).ToString();
                mail.Body = myObjGetTableData.getReplaceDatabaseToDisplay(myObj.OracleExecuteScalar("SELECT '<table style=\"border:none;font: 12px arial, sans-serif;\"><tbody><tr style=\"vertical-align: top;height: 40px;\"><td colspan=\"2\">'||TUSHAAL_TYPE_NAME||' шинээр нэмэгдлээ</td></tr><tr><td style=\"font-weight: bold; width: 200px; vertical-align:top;\">Тушаалын нэр:</td><td>'||TUSHAAL_NAME||'</td></tr> <tr><td style=\"font-weight: bold; width: 200px;\">Батлагдсан огноо:</td><td>'||SUCCESS_DATE||'</td></tr> <tr><td style=\"font-weight: bold; width: 200px;\">Дугаар:</td><td>'||TUSHAAL_NUMBER||'</td></tr><tr><td style=\"font-weight: bold; width: 200px; vertical-align:top;\">Боловсруулсан газар:</td><td>'||BOLOVSRUULSAN_BRNAMELIST||'</td></tr><tr><td style=\"font-weight: bold; width: 200px; vertical-align:top;\">Боловсруулсан ажилтан:</td><td>'||BOLOVSRUULSAN_STNAMELIST||'</td></tr><tr><td style=\"font-weight: bold; width: 200px; vertical-align:top;\">Хариуцсан газар:</td><td>'||HARIUTSSAN_BRNAMELIST||'</td></tr><tr><td style=\"font-weight: bold; width: 200px; vertical-align:top;\">Хариуцсан ажилтан:</td><td>'||HARIUTSSAN_STNAMELIST||'</td></tr><tr><td style=\"font-weight: bold; width: 200px; vertical-align:top;\">Хяналтанд авсан заалт:</td><td>'||REPLACE(NVL(ZAALTLIST,'-'),'77gundee77','<br/>')||'</td></tr><tr><td style=\"font-weight: bold; width: 200px;\">Холбоос:</td><td><a href=\"http://lm.mof.gov.mn/#pg/'||CASE WHEN TUSHAAL_TYPE=2 THEN 'tushaaltnbd' ELSE 'tushaalsaid' END||'.aspx?id='||TO_CHAR(TUSHAAL_ID)||'\">http://lm.mof.gov.mn/#pg/'||CASE WHEN TUSHAAL_TYPE=2 THEN 'tushaaltnbd' ELSE 'tushaalsaid' END||'.aspx</a></td></tr></tbody><table>' FROM ( SELECT a.TUSHAAL_TYPE, a.TUSHAAL_ID, a.TUSHAAL_TYPE_NAME, a.TUSHAAL_NAME, a.SUCCESS_DATE, a.TUSHAAL_NUMBER, a.BOLOVSRUULSAN_BRNAMELIST, a.BOLOVSRUULSAN_STNAMELIST, a.HARIUTSSAN_BRNAMELIST, a.HARIUTSSAN_STNAMELIST, NVL(RTRIM(xmlagg (xmlelement (e, b.NAME || '77gundee77') ORDER BY b.NAME).extract('//text()'), '77gundee77'),'none') as ZAALTLIST FROM ( SELECT b.TUSHAAL_TYPE, a.TUSHAAL_ID, c.NAME as TUSHAAL_TYPE_NAME, b.TUSHAAL_NAME, b.SUCCESS_DATE, b.TUSHAAL_NUMBER, b.TUSHAAL_DESCRIPTION, a.BOLOVSRUULSAN_BRNAMELIST, a.HARIUTSSAN_BRNAMELIST, a.BOLOVSRUULSAN_STNAMELIST, a.HARIUTSSAN_STNAMELIST FROM ( SELECT TUSHAAL_ID, BOLOVSRUULSAN_BRNAMELIST, HARIUTSSAN_BRNAMELIST, BOLOVSRUULSAN_STNAMELIST, NVL(RTRIM(xmlagg (xmlelement (e, ST_NAME || ',')).extract('//text()'), ','),'none') as HARIUTSSAN_STNAMELIST FROM ( SELECT a.TUSHAAL_ID, a.BOLOVSRUULSAN_BRNAMELIST, a.HARIUTSSAN_BRNAMELIST, a.BOLOVSRUULSAN_STNAMELIST, SUBSTR(c.LNAME,0,1)||'.'||SUBSTR(c.FNAME,1,1)||LOWER(SUBSTR(c.FNAME,2)) as ST_NAME FROM ( SELECT TUSHAAL_ID, BOLOVSRUULSAN_BRNAMELIST, HARIUTSSAN_BRNAMELIST, NVL(RTRIM(xmlagg (xmlelement (e, ST_NAME || ',')).extract('//text()'), ','),'none') as BOLOVSRUULSAN_STNAMELIST FROM ( SELECT a.TUSHAAL_ID, a.BOLOVSRUULSAN_BRNAMELIST, a.HARIUTSSAN_BRNAMELIST, SUBSTR(c.LNAME,0,1)||'.'||SUBSTR(c.FNAME,1,1)||LOWER(SUBSTR(c.FNAME,2)) as ST_NAME FROM ( SELECT TUSHAAL_ID, BOLOVSRUULSAN_BRNAMELIST, NVL(RTRIM(xmlagg (xmlelement (e, DOMAIN_ORG || ',')).extract('//text()'), ','),'none') as HARIUTSSAN_BRNAMELIST FROM ( SELECT a.TUSHAAL_ID, a.BOLOVSRUULSAN_BRNAMELIST, c.DOMAIN_ORG FROM ( SELECT TUSHAAL_ID, NVL(RTRIM(xmlagg (xmlelement (e, DOMAIN_ORG || ',')).extract('//text()'), ','),'none') as BOLOVSRUULSAN_BRNAMELIST FROM ( SELECT a.TUSHAAL_ID, b.DOMAIN_ORG FROM TBL_TUSHAAL_BR a LEFT JOIN TBL_BRANCH b ON a.BR_ID=b.BR_ID AND b.YR=" + yr + " WHERE a.TUSHAAL_ID=" + tushaal_ID + " AND a.BR_TYPE=2 GROUP BY a.TUSHAAL_ID, b.DOMAIN_ORG ) GROUP BY TUSHAAL_ID ) a LEFT JOIN TBL_TUSHAAL_BR b ON a.TUSHAAL_ID=b.TUSHAAL_ID AND b.BR_TYPE=1 LEFT JOIN TBL_BRANCH c ON b.BR_ID=c.BR_ID AND c.YR=" + yr + " GROUP BY a.TUSHAAL_ID, a.BOLOVSRUULSAN_BRNAMELIST, c.DOMAIN_ORG ) GROUP BY TUSHAAL_ID, BOLOVSRUULSAN_BRNAMELIST ) a LEFT JOIN TBL_TUSHAAL_USERS b ON a.TUSHAAL_ID=b.TUSHAAL_ID AND b.USER_TYPE=2 LEFT JOIN hrdbuser.ST_STAFFS c ON b.ST_ID=c.ID GROUP BY a.TUSHAAL_ID, a.BOLOVSRUULSAN_BRNAMELIST, a.HARIUTSSAN_BRNAMELIST, SUBSTR(c.LNAME,0,1)||'.'||SUBSTR(c.FNAME,1,1)||LOWER(SUBSTR(c.FNAME,2)) ) GROUP BY TUSHAAL_ID, BOLOVSRUULSAN_BRNAMELIST, HARIUTSSAN_BRNAMELIST ) a LEFT JOIN TBL_TUSHAAL_USERS b ON a.TUSHAAL_ID=b.TUSHAAL_ID AND b.USER_TYPE=1 LEFT JOIN hrdbuser.ST_STAFFS c ON b.ST_ID=c.ID GROUP BY a.TUSHAAL_ID, a.BOLOVSRUULSAN_BRNAMELIST, a.HARIUTSSAN_BRNAMELIST, a.BOLOVSRUULSAN_STNAMELIST, SUBSTR(c.LNAME,0,1)||'.'||SUBSTR(c.FNAME,1,1)||LOWER(SUBSTR(c.FNAME,2)) ) GROUP BY TUSHAAL_ID, BOLOVSRUULSAN_BRNAMELIST, HARIUTSSAN_BRNAMELIST, BOLOVSRUULSAN_STNAMELIST ) a INNER JOIN TBL_TUSHAAL b ON a.TUSHAAL_ID=b.ID INNER JOIN TBL_TUSHAAL_TYPE c ON TO_CHAR(b.TUSHAAL_TYPE_ID)=TO_CHAR(c.ID) ) a LEFT JOIN TBL_TUSHAAL_ZAALT b ON a.TUSHAAL_ID=b.TUSHAAL_ID GROUP BY a.TUSHAAL_TYPE, a.TUSHAAL_ID, a.TUSHAAL_TYPE_NAME, a.TUSHAAL_NAME, a.SUCCESS_DATE, a.TUSHAAL_NUMBER, a.BOLOVSRUULSAN_BRNAMELIST, a.BOLOVSRUULSAN_STNAMELIST, a.HARIUTSSAN_BRNAMELIST, a.HARIUTSSAN_STNAMELIST )").ToString());
                mail.IsBodyHtml = true;
                //arrStrIsAttach = myObj.OracleExecuteScalar("SELECT NVL2(FILE_URL,1,0)||'~'||NVL(FILE_URL,'-') FROM TBL_TUSHAAL WHERE ID=" + tushaal_ID).ToString().Split('~');
                //if (arrStrIsAttach[0] == "1")
                //{
                //    System.Net.Mail.Attachment attachment;
                //    attachment = new System.Net.Mail.Attachment(HttpContext.Current.Server.MapPath("~/files/tushaal/" + arrStrIsAttach[1]));
                //    mail.Attachments.Add(attachment);
                //}
                SmtpClient SmtpServer = new SmtpClient();
                SmtpServer.Host = "mail.mof.gov.mn";
                SmtpServer.Port = 25;
                SmtpServer.UseDefaultCredentials = false;
                SmtpServer.Credentials = new System.Net.NetworkCredential("lmonitoring@mof.gov.mn", "m0f@dmin2o14*");
                SmtpServer.EnableSsl = false;
                SmtpServer.Send(mail);
                myObj.OracleExecuteNonQuery("UPDATE TBL_TUSHAAL SET IS_SENTMAIL=1 WHERE ID=" + tushaal_ID);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string TushaalsListForDDL(string tushaal_type_id)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT ID, TUSHAAL_NUMBER||'. '||TUSHAAL_NAME as NAME FROM TBL_TUSHAAL WHERE TUSHAAL_TYPE_ID='" + tushaal_type_id + "'");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void TUSHAALS_ZAALT_INSERT(string P_TUSHAAL_ID, string P_NAME,  string P_BOLOVSRUULSAN_BRLIST, string P_HARIUTSSAN_BRLIST, string P_STAFFID, string P_ENDDATE)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[6], ParamValue = new string[6];
                ParamName[0] = "P_TUSHAAL_ID";
                ParamName[1] = "P_NAME";
                ParamName[2] = "P_BOLOVSRUULSAN_BRLIST";
                ParamName[3] = "P_HARIUTSSAN_BRLIST";
                ParamName[4] = "P_STAFFID";
                ParamName[5] = "P_ENDDATE";
                ParamValue[0] = P_TUSHAAL_ID;
                ParamValue[1] = P_NAME;
                ParamValue[2] = P_BOLOVSRUULSAN_BRLIST;
                ParamValue[3] = P_HARIUTSSAN_BRLIST;
                ParamValue[4] = P_STAFFID;
                ParamValue[5] = P_ENDDATE;
                myObj.SP_OracleExecuteNonQuery("TUSHAALS_ZAALT_INSERT", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void TUSHAALS_ZAALT_UPDATE(string P_ID, string P_TUSHAAL_ID, string P_NAME, string P_BOLOVSRUULSAN_BRLIST, string P_HARIUTSSAN_BRLIST, string P_STAFFID, string P_ENDDATE)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[7], ParamValue = new string[7];
                ParamName[0] = "P_ID";
                ParamName[1] = "P_TUSHAAL_ID";
                ParamName[2] = "P_NAME";
                ParamName[3] = "P_BOLOVSRUULSAN_BRLIST";
                ParamName[4] = "P_HARIUTSSAN_BRLIST";
                ParamName[5] = "P_STAFFID";
                ParamName[6] = "P_ENDDATE";
                ParamValue[0] = P_ID;
                ParamValue[1] = P_TUSHAAL_ID;
                ParamValue[2] = P_NAME;
                ParamValue[3] = P_BOLOVSRUULSAN_BRLIST;
                ParamValue[4] = P_HARIUTSSAN_BRLIST;
                ParamValue[5] = P_STAFFID;
                ParamValue[6] = P_ENDDATE;
                myObj.SP_OracleExecuteNonQuery("TUSHAALS_ZAALT_UPDATE", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void TUSHAALS_ZAALT_DELETE(string P_ID)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[1], ParamValue = new string[1];
                ParamName[0] = "P_ID";
                ParamValue[0] = P_ID;
                myObj.SP_OracleExecuteNonQuery("TUSHAALS_ZAALT_DELETE", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string TushaalTypeDatatable(string which)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT ROWNUM as ROWNO, a.ID, a.NAME FROM ( SELECT ID, NAME FROM TBL_TUSHAAL_TYPE WHERE TYPE=" + which + " ORDER BY NAME ) a");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }



        //*****tushaalsaid.aspx*****//
        public string TushaalsaidTab1Datatable(string yr, string type, string hariutssangazar, string bolovsruulsangazar)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (type != "") type = " AND a.TUSHAAL_TYPE_ID='" + type + "'";
            if (hariutssangazar != "") hariutssangazar = " AND b.BR_TYPE=1 AND b.BR_ID=" + hariutssangazar;
            if (bolovsruulsangazar != "") bolovsruulsangazar = " AND b.BR_TYPE=2 AND b.BR_ID=" + bolovsruulsangazar;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT ROWNUM as ROWNO, a.* FROM ( SELECT a.TUSHAAL_ID, c.NAME as TUSHAAL_TYPE_NAME, b.TUSHAAL_NAME, b.SUCCESS_DATE, b.TUSHAAL_NUMBER, b.TUSHAAL_DESCRIPTION, NVL2(b.FILE_URL,1,0) as ISFILE, b.FILE_URL, NVL2(b.IS_SENTMAIL,1,0) as ISMAILSENT, a.BOLOVSRUULSAN_BRNAMELIST, a.HARIUTSSAN_BRNAMELIST, a.BOLOVSRUULSAN_STNAMELIST, a.HARIUTSSAN_STNAMELIST, b.TUSHAAL_TYPE_ID, a.BOLOVSRUULSAN_BRIDLIST, a.HARIUTSSAN_BRIDLIST, a.BOLOVSRUULSAN_STIDLIST, a.HARIUTSSAN_STIDLIST, NVL(TO_CHAR(b.INSERT_DATE,'YYYY-MM-DD'),'-') as INSERT_DATE FROM ( SELECT TUSHAAL_ID, BOLOVSRUULSAN_BRIDLIST, BOLOVSRUULSAN_BRNAMELIST, HARIUTSSAN_BRIDLIST, HARIUTSSAN_BRNAMELIST, BOLOVSRUULSAN_STIDLIST, BOLOVSRUULSAN_STNAMELIST, RTRIM(xmlagg (xmlelement (e, ST_ID || ',')).extract('//text()'), ',') as HARIUTSSAN_STIDLIST, RTRIM(xmlagg (xmlelement (e, ' '|| ST_NAME || ',')).extract('//text()'), ',') as HARIUTSSAN_STNAMELIST FROM ( SELECT a.TUSHAAL_ID, a.BOLOVSRUULSAN_BRIDLIST, a.BOLOVSRUULSAN_BRNAMELIST, a.HARIUTSSAN_BRIDLIST, a.HARIUTSSAN_BRNAMELIST, a.BOLOVSRUULSAN_STIDLIST, a.BOLOVSRUULSAN_STNAMELIST, b.ST_ID, SUBSTR(c.LNAME,0,1)||'.'||SUBSTR(c.FNAME,1,1)||LOWER(SUBSTR(c.FNAME,2)) as ST_NAME FROM ( SELECT TUSHAAL_ID, BOLOVSRUULSAN_BRIDLIST, BOLOVSRUULSAN_BRNAMELIST, HARIUTSSAN_BRIDLIST, HARIUTSSAN_BRNAMELIST, RTRIM(xmlagg (xmlelement (e, ST_ID || ',')).extract('//text()'), ',') as BOLOVSRUULSAN_STIDLIST, RTRIM(xmlagg (xmlelement (e, ' '|| ST_NAME || ',')).extract('//text()'), ',') as BOLOVSRUULSAN_STNAMELIST FROM ( SELECT a.TUSHAAL_ID, a.BOLOVSRUULSAN_BRIDLIST, a.BOLOVSRUULSAN_BRNAMELIST, a.HARIUTSSAN_BRIDLIST, a.HARIUTSSAN_BRNAMELIST, b.ST_ID, SUBSTR(c.LNAME,0,1)||'.'||SUBSTR(c.FNAME,1,1)||LOWER(SUBSTR(c.FNAME,2)) as ST_NAME FROM ( SELECT TUSHAAL_ID, BOLOVSRUULSAN_BRIDLIST, BOLOVSRUULSAN_BRNAMELIST, RTRIM(xmlagg (xmlelement (e, BR_ID || ',')).extract('//text()'), ',') as HARIUTSSAN_BRIDLIST, RTRIM(xmlagg (xmlelement (e, ' '|| DOMAIN_ORG || ',')).extract('//text()'), ',') as HARIUTSSAN_BRNAMELIST FROM ( SELECT a.TUSHAAL_ID, a.BOLOVSRUULSAN_BRIDLIST, a.BOLOVSRUULSAN_BRNAMELIST, b.BR_ID, c.DOMAIN_ORG FROM ( SELECT TUSHAAL_ID, RTRIM(xmlagg (xmlelement (e, BR_ID || ',')).extract('//text()'), ',') as BOLOVSRUULSAN_BRIDLIST, RTRIM(xmlagg (xmlelement (e, ' '|| DOMAIN_ORG || ',')).extract('//text()'), ',') as BOLOVSRUULSAN_BRNAMELIST FROM ( SELECT a.TUSHAAL_ID, b.BR_ID, c.DOMAIN_ORG FROM ( SELECT a.ID as TUSHAAL_ID FROM TBL_TUSHAAL a LEFT JOIN TBL_TUSHAAL_BR b ON a.ID=b.TUSHAAL_ID WHERE a.TUSHAAL_TYPE=3 AND TO_NUMBER(TO_CHAR(TO_DATE(a.SUCCESS_DATE,'yyyy-mm-dd'),'yyyy'))=" + yr + type + hariutssangazar + bolovsruulsangazar + " ) a LEFT JOIN TBL_TUSHAAL_BR b ON a.TUSHAAL_ID=b.TUSHAAL_ID AND b.BR_TYPE=2 LEFT JOIN TBL_BRANCH c ON b.BR_ID=c.BR_ID AND c.YR=" + yr + " GROUP BY a.TUSHAAL_ID, b.BR_ID, c.DOMAIN_ORG ) GROUP BY TUSHAAL_ID ) a LEFT JOIN TBL_TUSHAAL_BR b ON a.TUSHAAL_ID=b.TUSHAAL_ID AND b.BR_TYPE=1 LEFT JOIN TBL_BRANCH c ON b.BR_ID=c.BR_ID AND c.YR=" + yr + " GROUP BY a.TUSHAAL_ID, a.BOLOVSRUULSAN_BRIDLIST, a.BOLOVSRUULSAN_BRNAMELIST, b.BR_ID, c.DOMAIN_ORG ) GROUP BY TUSHAAL_ID, BOLOVSRUULSAN_BRIDLIST, BOLOVSRUULSAN_BRNAMELIST ) a LEFT JOIN TBL_TUSHAAL_USERS b ON a.TUSHAAL_ID=b.TUSHAAL_ID AND b.USER_TYPE=2 LEFT JOIN hrdbuser.ST_STAFFS c ON b.ST_ID=c.ID GROUP BY a.TUSHAAL_ID, a.BOLOVSRUULSAN_BRIDLIST, a.BOLOVSRUULSAN_BRNAMELIST, a.HARIUTSSAN_BRIDLIST, a.HARIUTSSAN_BRNAMELIST, b.ST_ID, SUBSTR(c.LNAME,0,1)||'.'||SUBSTR(c.FNAME,1,1)||LOWER(SUBSTR(c.FNAME,2)) ) GROUP BY TUSHAAL_ID, BOLOVSRUULSAN_BRIDLIST, BOLOVSRUULSAN_BRNAMELIST, HARIUTSSAN_BRIDLIST, HARIUTSSAN_BRNAMELIST ) a LEFT JOIN TBL_TUSHAAL_USERS b ON a.TUSHAAL_ID=b.TUSHAAL_ID AND b.USER_TYPE=1 LEFT JOIN hrdbuser.ST_STAFFS c ON b.ST_ID=c.ID GROUP BY a.TUSHAAL_ID, a.BOLOVSRUULSAN_BRIDLIST, a.BOLOVSRUULSAN_BRNAMELIST, a.HARIUTSSAN_BRIDLIST, a.HARIUTSSAN_BRNAMELIST, a.BOLOVSRUULSAN_STIDLIST, a.BOLOVSRUULSAN_STNAMELIST, b.ST_ID, SUBSTR(c.LNAME,0,1)||'.'||SUBSTR(c.FNAME,1,1)||LOWER(SUBSTR(c.FNAME,2)) ) GROUP BY TUSHAAL_ID, BOLOVSRUULSAN_BRIDLIST, BOLOVSRUULSAN_BRNAMELIST, HARIUTSSAN_BRIDLIST, HARIUTSSAN_BRNAMELIST, BOLOVSRUULSAN_STIDLIST, BOLOVSRUULSAN_STNAMELIST ) a INNER JOIN TBL_TUSHAAL b ON a.TUSHAAL_ID=b.ID INNER JOIN TBL_TUSHAAL_TYPE c ON TO_CHAR(b.TUSHAAL_TYPE_ID)=TO_CHAR(c.ID) ORDER BY b.SUCCESS_DATE DESC, b.TUSHAAL_NUMBER DESC ) a");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string TushaalsaidTab2Datatable(string yr, string type, string hariutssangazar, string bolovsruulsangazar, string isclosed)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (type != "") type = " AND b.TUSHAAL_TYPE_ID='" + type + "'";
            if (hariutssangazar != "") hariutssangazar = " AND c.BR_TYPE=1 AND c.BR_ID=" + hariutssangazar;
            if (bolovsruulsangazar != "") bolovsruulsangazar = " AND c.BR_TYPE=2 AND c.BR_ID=" + bolovsruulsangazar;
            if (isclosed != "") isclosed = " AND a.ISCLOSED=" + isclosed;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT ROWNUM as ROWNO, a.* FROM ( SELECT c.TUSHAAL_TYPE_ID, b.TUSHAAL_ID, d.NAME as TUSHAAL_TYPE_NAME, c.TUSHAAL_NAME, c.SUCCESS_DATE, c.TUSHAAL_NUMBER, a.BOLOVSRUULSAN_BRIDLIST, a.BOLOVSRUULSAN_BRNAMELIST, a.HARIUTSSAN_BRIDLIST, a.HARIUTSSAN_BRNAMELIST, b.ID as ZAALT_ID, b.NAME as ZAALT_NAME, b.ENDDATE, CASE WHEN b.ISCLOSED=0 THEN 'checked=\"checked\"' ELSE null END as ISCLOSED, CASE WHEN b.ENDDATE IS NOT NULL THEN CASE WHEN TO_DATE(b.ENDDATE, 'YYYY-MM-DD')<SYSDATE THEN 'warning' ELSE null END ELSE null END as ENDDATECOLOR FROM ( SELECT TUSHAAL_ZAALT_ID, BOLOVSRUULSAN_BRIDLIST, BOLOVSRUULSAN_BRNAMELIST, NVL(RTRIM(xmlagg(xmlelement(e, BR_ID || ',')).extract('//text()'), ','), 'none') as HARIUTSSAN_BRIDLIST, NVL(RTRIM(xmlagg(xmlelement(e, ' '|| DOMAIN_ORG || ',')).extract('//text()'), ','), 'none') as HARIUTSSAN_BRNAMELIST FROM( SELECT a.TUSHAAL_ZAALT_ID, a.BOLOVSRUULSAN_BRIDLIST, a.BOLOVSRUULSAN_BRNAMELIST, b.BR_ID, c.DOMAIN_ORG FROM( SELECT TUSHAAL_ZAALT_ID, NVL(RTRIM(xmlagg(xmlelement(e, BR_ID || ',')).extract('//text()'), ','), 'none') as BOLOVSRUULSAN_BRIDLIST, NVL(RTRIM(xmlagg(xmlelement(e, ' '|| DOMAIN_ORG || ',')).extract('//text()'), ','), 'none') as BOLOVSRUULSAN_BRNAMELIST FROM( SELECT a.TUSHAAL_ZAALT_ID, b.BR_ID, c.DOMAIN_ORG FROM( SELECT a.ID as TUSHAAL_ZAALT_ID FROM TBL_TUSHAAL_ZAALT a INNER JOIN TBL_TUSHAAL b ON a.TUSHAAL_ID = b.ID LEFT JOIN TBL_TUSHAAL_ZAALT_BR c ON a.ID = c.TUSHAAL_ZAALT_ID WHERE b.TUSHAAL_TYPE = 3 AND TO_NUMBER(TO_CHAR(TO_DATE(b.SUCCESS_DATE, 'yyyy-mm-dd'), 'yyyy')) = " + yr + type + hariutssangazar + bolovsruulsangazar+ isclosed + " ) a LEFT JOIN TBL_TUSHAAL_ZAALT_BR b ON a.TUSHAAL_ZAALT_ID = b.TUSHAAL_ZAALT_ID AND b.BR_TYPE = 2 LEFT JOIN TBL_BRANCH c ON b.BR_ID = c.BR_ID AND c.YR = " + yr + " GROUP BY a.TUSHAAL_ZAALT_ID, b.BR_ID, c.DOMAIN_ORG ) GROUP BY TUSHAAL_ZAALT_ID ) a LEFT JOIN TBL_TUSHAAL_ZAALT_BR b ON a.TUSHAAL_ZAALT_ID = b.TUSHAAL_ZAALT_ID AND b.BR_TYPE = 1 LEFT JOIN TBL_BRANCH c ON b.BR_ID = c.BR_ID AND c.YR = " + yr + " GROUP BY a.TUSHAAL_ZAALT_ID, a.BOLOVSRUULSAN_BRIDLIST, a.BOLOVSRUULSAN_BRNAMELIST, b.BR_ID, c.DOMAIN_ORG ) GROUP BY TUSHAAL_ZAALT_ID, BOLOVSRUULSAN_BRIDLIST, BOLOVSRUULSAN_BRNAMELIST ) a INNER JOIN TBL_TUSHAAL_ZAALT b ON a.TUSHAAL_ZAALT_ID = b.ID INNER JOIN TBL_TUSHAAL c ON b.TUSHAAL_ID = c.ID INNER JOIN TBL_TUSHAAL_TYPE d ON TO_CHAR(c.TUSHAAL_TYPE_ID) = TO_CHAR(d.ID) ORDER BY c.SUCCESS_DATE DESC ) a");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string TushaalsaidTab3Datatable(string yr, string qrtr, string type, string hariutssangazar, string bolovsruulsangazar)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (type != "") type = " AND b.TUSHAAL_TYPE_ID='" + type + "'";
            if (hariutssangazar != "") hariutssangazar = " AND c.BR_TYPE=1 AND c.BR_ID=" + hariutssangazar;
            if (bolovsruulsangazar != "") bolovsruulsangazar = " AND c.BR_TYPE=2 AND c.BR_ID=" + bolovsruulsangazar;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet(@"SELECT ROWNUM as ROWNO, a.* 
FROM ( 
    SELECT c.TUSHAAL_TYPE_ID, b.TUSHAAL_ID, d.NAME as TUSHAAL_TYPE_NAME, c.TUSHAAL_NAME, c.SUCCESS_DATE, c.TUSHAAL_NUMBER, a.BOLOVSRUULSAN_BRIDLIST, a.BOLOVSRUULSAN_BRNAMELIST, a.HARIUTSSAN_BRIDLIST, a.HARIUTSSAN_BRNAMELIST, b.ID as ZAALT_ID, b.NAME as ZAALT_NAME, b.ENDDATE, NVL2(f.IMPL,'glyphicon glyphicon-check txt-color-green font-xl','glyphicon glyphicon-edit txt-color-red font-xl') as ISIMPL, f.FILENAME, NVL2(f.EVAL,1,0) as ISEVAL 
    FROM ( 
        SELECT TUSHAAL_ZAALT_ID, BOLOVSRUULSAN_BRIDLIST, BOLOVSRUULSAN_BRNAMELIST, NVL(RTRIM(xmlagg(xmlelement(e, BR_ID || ',')).extract('//text()'), ','), 'none') as HARIUTSSAN_BRIDLIST, NVL(RTRIM(xmlagg(xmlelement(e, ' '|| DOMAIN_ORG || ',')).extract('//text()'), ','), 'none') as HARIUTSSAN_BRNAMELIST 
        FROM ( 
            SELECT a.TUSHAAL_ZAALT_ID, a.BOLOVSRUULSAN_BRIDLIST, a.BOLOVSRUULSAN_BRNAMELIST, b.BR_ID, c.DOMAIN_ORG 
            FROM ( 
                SELECT TUSHAAL_ZAALT_ID, NVL(RTRIM(xmlagg(xmlelement(e, BR_ID || ',')).extract('//text()'), ','), 'none') as BOLOVSRUULSAN_BRIDLIST, NVL(RTRIM(xmlagg(xmlelement(e, ' '|| DOMAIN_ORG || ',')).extract('//text()'), ','), 'none') as BOLOVSRUULSAN_BRNAMELIST 
                FROM ( 
                    SELECT a.TUSHAAL_ZAALT_ID, b.BR_ID, c.DOMAIN_ORG 
                    FROM ( 
                        SELECT a.ID as TUSHAAL_ZAALT_ID 
                        FROM TBL_TUSHAAL_ZAALT a INNER JOIN TBL_TUSHAAL b ON a.TUSHAAL_ID = b.ID 
                        INNER JOIN TBL_TUSHAAL b ON a.TUSHAAL_ID = b.ID
                        LEFT JOIN TBL_TUSHAAL_ZAALT_BR c ON a.ID = c.TUSHAAL_ZAALT_ID 
                        WHERE b.TUSHAAL_TYPE = 3 AND a.ISCLOSED=0 AND TO_NUMBER(TO_CHAR(TO_DATE(b.SUCCESS_DATE, 'yyyy-mm-dd'), 'yyyy')) = " + yr+ type+ hariutssangazar+ bolovsruulsangazar + @" 
                    ) a 
                    LEFT JOIN TBL_TUSHAAL_ZAALT_BR b ON a.TUSHAAL_ZAALT_ID = b.TUSHAAL_ZAALT_ID AND b.BR_TYPE = 2 
                    LEFT JOIN TBL_BRANCH c ON b.BR_ID = c.BR_ID AND c.YR = " + yr + @" 
                    GROUP BY a.TUSHAAL_ZAALT_ID, b.BR_ID, c.DOMAIN_ORG 
                ) 
                GROUP BY TUSHAAL_ZAALT_ID 
            ) a 
            LEFT JOIN TBL_TUSHAAL_ZAALT_BR b ON a.TUSHAAL_ZAALT_ID = b.TUSHAAL_ZAALT_ID AND b.BR_TYPE = 1 
            LEFT JOIN TBL_BRANCH c ON b.BR_ID = c.BR_ID AND c.YR = " + yr + @" 
            GROUP BY a.TUSHAAL_ZAALT_ID, a.BOLOVSRUULSAN_BRIDLIST, a.BOLOVSRUULSAN_BRNAMELIST, b.BR_ID, c.DOMAIN_ORG 
        ) 
        GROUP BY TUSHAAL_ZAALT_ID, BOLOVSRUULSAN_BRIDLIST, BOLOVSRUULSAN_BRNAMELIST 
    ) a INNER JOIN TBL_TUSHAAL_ZAALT b ON a.TUSHAAL_ZAALT_ID = b.ID 
    INNER JOIN TBL_TUSHAAL c ON b.TUSHAAL_ID = c.ID 
    INNER JOIN TBL_TUSHAAL_TYPE d ON TO_CHAR(c.TUSHAAL_TYPE_ID) = TO_CHAR(d.ID) 
    LEFT JOIN TBL_TUSHAAL_ZAALT_IMPL f ON a.TUSHAAL_ZAALT_ID=f.TUSHAAL_ZAALT_ID AND f.YR=" + yr + " AND f.QRTR=" + qrtr + @" 
    ORDER BY c.SUCCESS_DATE DESC 
) a");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string TushaalsaidTab4t1Datatable(string yr, string qrtr, string type, string hariutssangazar, string bolovsruulsangazar)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (type != "") type = " AND b.TUSHAAL_TYPE_ID='" + type + "'";
            if (hariutssangazar != "") hariutssangazar = " AND c.BR_TYPE=1 AND c.BR_ID=" + hariutssangazar;
            if (bolovsruulsangazar != "") bolovsruulsangazar = " AND c.BR_TYPE=2 AND c.BR_ID=" + bolovsruulsangazar;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = @"SELECT ROWNUM as ROWNO, a.* 
FROM(
  SELECT c.TUSHAAL_TYPE_ID, b.TUSHAAL_ID, d.NAME as TUSHAAL_TYPE_NAME, c.TUSHAAL_NAME, c.SUCCESS_DATE, c.TUSHAAL_NUMBER, a.BOLOVSRUULSAN_BRIDLIST, a.BOLOVSRUULSAN_BRNAMELIST, a.HARIUTSSAN_BRIDLIST, a.HARIUTSSAN_BRNAMELIST, b.ID as ZAALT_ID, b.NAME as ZAALT_NAME, b.ENDDATE, f.EVAL, f.IMPL
  FROM(
    SELECT TUSHAAL_ZAALT_ID, BOLOVSRUULSAN_BRIDLIST, BOLOVSRUULSAN_BRNAMELIST, NVL(RTRIM(xmlagg(xmlelement(e, BR_ID || ',')).extract('//text()'), ','), 'none') as HARIUTSSAN_BRIDLIST, NVL(RTRIM(xmlagg(xmlelement(e, ' ' || DOMAIN_ORG || ',')).extract('//text()'), ','), 'none') as HARIUTSSAN_BRNAMELIST
    FROM(
      SELECT a.TUSHAAL_ZAALT_ID, a.BOLOVSRUULSAN_BRIDLIST, a.BOLOVSRUULSAN_BRNAMELIST, b.BR_ID, c.DOMAIN_ORG
      FROM(
        SELECT TUSHAAL_ZAALT_ID, NVL(RTRIM(xmlagg(xmlelement(e, BR_ID || ',')).extract('//text()'), ','), 'none') as BOLOVSRUULSAN_BRIDLIST, NVL(RTRIM(xmlagg(xmlelement(e, ' ' || DOMAIN_ORG || ',')).extract('//text()'), ','), 'none') as BOLOVSRUULSAN_BRNAMELIST
        FROM(
          SELECT a.TUSHAAL_ZAALT_ID, b.BR_ID, c.DOMAIN_ORG
          FROM(
            SELECT a.ID as TUSHAAL_ZAALT_ID
            FROM TBL_TUSHAAL_ZAALT a
            INNER JOIN TBL_TUSHAAL b ON a.TUSHAAL_ID = b.ID
            LEFT JOIN TBL_TUSHAAL_ZAALT_BR c ON a.ID = c.TUSHAAL_ZAALT_ID
            LEFT JOIN TBL_TUSHAAL_ZAALT_IMPL d ON a.ID = d.TUSHAAL_ZAALT_ID AND d.YR = " + yr + " AND d.QRTR = " + qrtr + @"
            WHERE b.TUSHAAL_TYPE = 3 AND(a.ISCLOSED = 0 OR d.EVAL IS NOT NULL) AND TO_NUMBER(TO_CHAR(TO_DATE(b.SUCCESS_DATE, 'yyyy-mm-dd'), 'yyyy')) = " + yr + type + hariutssangazar + bolovsruulsangazar + @"
          ) a
          LEFT JOIN TBL_TUSHAAL_ZAALT_BR b ON a.TUSHAAL_ZAALT_ID = b.TUSHAAL_ZAALT_ID AND b.BR_TYPE = 2
          LEFT JOIN TBL_BRANCH c ON b.BR_ID = c.BR_ID AND c.YR = " + yr + @"
          GROUP BY a.TUSHAAL_ZAALT_ID, b.BR_ID, c.DOMAIN_ORG
        )
        GROUP BY TUSHAAL_ZAALT_ID
      ) a
      LEFT JOIN TBL_TUSHAAL_ZAALT_BR b ON a.TUSHAAL_ZAALT_ID = b.TUSHAAL_ZAALT_ID AND b.BR_TYPE = 1
      LEFT JOIN TBL_BRANCH c ON b.BR_ID = c.BR_ID AND c.YR = " + yr + @"
      GROUP BY a.TUSHAAL_ZAALT_ID, a.BOLOVSRUULSAN_BRIDLIST, a.BOLOVSRUULSAN_BRNAMELIST, b.BR_ID, c.DOMAIN_ORG
    )
    GROUP BY TUSHAAL_ZAALT_ID, BOLOVSRUULSAN_BRIDLIST, BOLOVSRUULSAN_BRNAMELIST
  ) a
  INNER JOIN TBL_TUSHAAL_ZAALT b ON a.TUSHAAL_ZAALT_ID = b.ID
  INNER JOIN TBL_TUSHAAL c ON b.TUSHAAL_ID = c.ID
  INNER JOIN TBL_TUSHAAL_TYPE d ON TO_CHAR(c.TUSHAAL_TYPE_ID) = TO_CHAR(d.ID)
  LEFT JOIN TBL_TUSHAAL_ZAALT_IMPL f ON a.TUSHAAL_ZAALT_ID = f.TUSHAAL_ZAALT_ID AND f.YR = " + yr + " AND f.QRTR = " + qrtr + @"
  ORDER BY c.SUCCESS_DATE DESC
) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string TushaalsaidTab5Datatable(string yr, string qrtr, string type, string hariutssangazar, string bolovsruulsangazar)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strPrevYear = "", strPrevQrtr = "";
            if (qrtr == "1")
            {
                strPrevQrtr = "4";
                strPrevYear = (Convert.ToInt32(yr) - 1).ToString();
            }
            else
            {
                strPrevQrtr = (Convert.ToInt32(qrtr) - 1).ToString();
                strPrevYear = yr;
            }
            if (type != "") type = " AND b.TUSHAAL_TYPE_ID='" + type + "'";
            if (hariutssangazar != "") hariutssangazar = " AND c.BR_TYPE=1 AND c.BR_ID=" + hariutssangazar;
            if (bolovsruulsangazar != "") bolovsruulsangazar = " AND c.BR_TYPE=2 AND c.BR_ID=" + bolovsruulsangazar;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = @"SELECT ROWNUM as ROWNO, a.* 
FROM(
  SELECT c.TUSHAAL_TYPE_ID, b.TUSHAAL_ID, d.NAME as TUSHAAL_TYPE_NAME, c.TUSHAAL_NAME, c.SUCCESS_DATE, c.TUSHAAL_NUMBER, a.BOLOVSRUULSAN_BRIDLIST, a.BOLOVSRUULSAN_BRNAMELIST, a.HARIUTSSAN_BRIDLIST, a.HARIUTSSAN_BRNAMELIST, b.ID as ZAALT_ID, b.NAME as ZAALT_NAME, b.ENDDATE, f.EVAL, f.IMPL, NVL(TO_CHAR(g.EVAL), '-') as PREVEVAL
  FROM(
    SELECT TUSHAAL_ZAALT_ID, BOLOVSRUULSAN_BRIDLIST, BOLOVSRUULSAN_BRNAMELIST, NVL(RTRIM(xmlagg(xmlelement(e, BR_ID || ',')).extract('//text()'), ','), 'none') as HARIUTSSAN_BRIDLIST, NVL(RTRIM(xmlagg(xmlelement(e, ' ' || DOMAIN_ORG || ',')).extract('//text()'), ','), 'none') as HARIUTSSAN_BRNAMELIST
    FROM(
      SELECT a.TUSHAAL_ZAALT_ID, a.BOLOVSRUULSAN_BRIDLIST, a.BOLOVSRUULSAN_BRNAMELIST, b.BR_ID, c.DOMAIN_ORG
      FROM(
        SELECT TUSHAAL_ZAALT_ID, NVL(RTRIM(xmlagg(xmlelement(e, BR_ID || ',')).extract('//text()'), ','), 'none') as BOLOVSRUULSAN_BRIDLIST, NVL(RTRIM(xmlagg(xmlelement(e, ' ' || DOMAIN_ORG || ',')).extract('//text()'), ','), 'none') as BOLOVSRUULSAN_BRNAMELIST
        FROM(
          SELECT a.TUSHAAL_ZAALT_ID, b.BR_ID, c.DOMAIN_ORG
          FROM(
            SELECT a.ID as TUSHAAL_ZAALT_ID
            FROM TBL_TUSHAAL_ZAALT a
            INNER JOIN TBL_TUSHAAL b ON a.TUSHAAL_ID = b.ID
            LEFT JOIN TBL_TUSHAAL_ZAALT_BR c ON a.ID = c.TUSHAAL_ZAALT_ID
            WHERE b.TUSHAAL_TYPE = 3 AND a.ISCLOSED = 0 AND TO_NUMBER(TO_CHAR(TO_DATE(b.SUCCESS_DATE, 'yyyy-mm-dd'), 'yyyy')) = " + yr + type + hariutssangazar + bolovsruulsangazar + @"
          ) a
          LEFT JOIN TBL_TUSHAAL_ZAALT_BR b ON a.TUSHAAL_ZAALT_ID = b.TUSHAAL_ZAALT_ID AND b.BR_TYPE = 2
          LEFT JOIN TBL_BRANCH c ON b.BR_ID = c.BR_ID AND c.YR = " + yr + @"
          GROUP BY a.TUSHAAL_ZAALT_ID, b.BR_ID, c.DOMAIN_ORG
        )
        GROUP BY TUSHAAL_ZAALT_ID
      ) a
      LEFT JOIN TBL_TUSHAAL_ZAALT_BR b ON a.TUSHAAL_ZAALT_ID = b.TUSHAAL_ZAALT_ID AND b.BR_TYPE = 1
      LEFT JOIN TBL_BRANCH c ON b.BR_ID = c.BR_ID AND c.YR = " + yr + @"
      GROUP BY a.TUSHAAL_ZAALT_ID, a.BOLOVSRUULSAN_BRIDLIST, a.BOLOVSRUULSAN_BRNAMELIST, b.BR_ID, c.DOMAIN_ORG
    )
    GROUP BY TUSHAAL_ZAALT_ID, BOLOVSRUULSAN_BRIDLIST, BOLOVSRUULSAN_BRNAMELIST
  ) a
  INNER JOIN TBL_TUSHAAL_ZAALT b ON a.TUSHAAL_ZAALT_ID = b.ID
  INNER JOIN TBL_TUSHAAL c ON b.TUSHAAL_ID = c.ID
  INNER JOIN TBL_TUSHAAL_TYPE d ON TO_CHAR(c.TUSHAAL_TYPE_ID) = TO_CHAR(d.ID)
  LEFT JOIN TBL_TUSHAAL_ZAALT_IMPL f ON a.TUSHAAL_ZAALT_ID = f.TUSHAAL_ZAALT_ID AND f.YR = " + yr + " AND f.QRTR = " + qrtr + @"
  LEFT JOIN TBL_TUSHAAL_ZAALT_IMPL g ON a.TUSHAAL_ZAALT_ID = g.TUSHAAL_ZAALT_ID AND g.YR = " + strPrevYear + " AND g.QRTR = " + strPrevQrtr + @"
  ORDER BY c.SUCCESS_DATE DESC
) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }



        //*****tushaaltnbd.aspx*****//
        public string TushaaltnbdTab1Datatable(string yr, string type, string hariutssangazar, string bolovsruulsangazar)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (type != "") type = " AND a.TUSHAAL_TYPE_ID='" + type + "'";
            if (hariutssangazar != "") hariutssangazar = " AND b.BR_TYPE=1 AND b.BR_ID=" + hariutssangazar;
            if (bolovsruulsangazar != "") bolovsruulsangazar = " AND b.BR_TYPE=2 AND b.BR_ID=" + bolovsruulsangazar;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT ROWNUM as ROWNO, a.* FROM ( SELECT a.TUSHAAL_ID, c.NAME as TUSHAAL_TYPE_NAME, b.TUSHAAL_NAME, b.SUCCESS_DATE, b.TUSHAAL_NUMBER, b.TUSHAAL_DESCRIPTION, NVL2(b.FILE_URL,1,0) as ISFILE, b.FILE_URL, NVL2(b.IS_SENTMAIL,1,0) as ISMAILSENT, a.BOLOVSRUULSAN_BRNAMELIST, a.HARIUTSSAN_BRNAMELIST, a.BOLOVSRUULSAN_STNAMELIST, a.HARIUTSSAN_STNAMELIST, b.TUSHAAL_TYPE_ID, a.BOLOVSRUULSAN_BRIDLIST, a.HARIUTSSAN_BRIDLIST, a.BOLOVSRUULSAN_STIDLIST, a.HARIUTSSAN_STIDLIST, NVL(TO_CHAR(b.INSERT_DATE,'YYYY-MM-DD'),'-') as INSERT_DATE FROM ( SELECT TUSHAAL_ID, BOLOVSRUULSAN_BRIDLIST, BOLOVSRUULSAN_BRNAMELIST, HARIUTSSAN_BRIDLIST, HARIUTSSAN_BRNAMELIST, BOLOVSRUULSAN_STIDLIST, BOLOVSRUULSAN_STNAMELIST, RTRIM(xmlagg (xmlelement (e, ST_ID || ',')).extract('//text()'), ',') as HARIUTSSAN_STIDLIST, RTRIM(xmlagg (xmlelement (e, ' '|| ST_NAME || ',')).extract('//text()'), ',') as HARIUTSSAN_STNAMELIST FROM ( SELECT a.TUSHAAL_ID, a.BOLOVSRUULSAN_BRIDLIST, a.BOLOVSRUULSAN_BRNAMELIST, a.HARIUTSSAN_BRIDLIST, a.HARIUTSSAN_BRNAMELIST, a.BOLOVSRUULSAN_STIDLIST, a.BOLOVSRUULSAN_STNAMELIST, b.ST_ID, SUBSTR(c.LNAME,0,1)||'.'||SUBSTR(c.FNAME,1,1)||LOWER(SUBSTR(c.FNAME,2)) as ST_NAME FROM ( SELECT TUSHAAL_ID, BOLOVSRUULSAN_BRIDLIST, BOLOVSRUULSAN_BRNAMELIST, HARIUTSSAN_BRIDLIST, HARIUTSSAN_BRNAMELIST, RTRIM(xmlagg (xmlelement (e, ST_ID || ',')).extract('//text()'), ',') as BOLOVSRUULSAN_STIDLIST, RTRIM(xmlagg (xmlelement (e, ' '|| ST_NAME || ',')).extract('//text()'), ',') as BOLOVSRUULSAN_STNAMELIST FROM ( SELECT a.TUSHAAL_ID, a.BOLOVSRUULSAN_BRIDLIST, a.BOLOVSRUULSAN_BRNAMELIST, a.HARIUTSSAN_BRIDLIST, a.HARIUTSSAN_BRNAMELIST, b.ST_ID, SUBSTR(c.LNAME,0,1)||'.'||SUBSTR(c.FNAME,1,1)||LOWER(SUBSTR(c.FNAME,2)) as ST_NAME FROM ( SELECT TUSHAAL_ID, BOLOVSRUULSAN_BRIDLIST, BOLOVSRUULSAN_BRNAMELIST, RTRIM(xmlagg (xmlelement (e, BR_ID || ',')).extract('//text()'), ',') as HARIUTSSAN_BRIDLIST, RTRIM(xmlagg (xmlelement (e, ' '|| DOMAIN_ORG || ',')).extract('//text()'), ',') as HARIUTSSAN_BRNAMELIST FROM ( SELECT a.TUSHAAL_ID, a.BOLOVSRUULSAN_BRIDLIST, a.BOLOVSRUULSAN_BRNAMELIST, b.BR_ID, c.DOMAIN_ORG FROM ( SELECT TUSHAAL_ID, RTRIM(xmlagg (xmlelement (e, BR_ID || ',')).extract('//text()'), ',') as BOLOVSRUULSAN_BRIDLIST, RTRIM(xmlagg (xmlelement (e, ' '|| DOMAIN_ORG || ',')).extract('//text()'), ',') as BOLOVSRUULSAN_BRNAMELIST FROM ( SELECT a.TUSHAAL_ID, b.BR_ID, c.DOMAIN_ORG FROM ( SELECT a.ID as TUSHAAL_ID FROM TBL_TUSHAAL a LEFT JOIN TBL_TUSHAAL_BR b ON a.ID=b.TUSHAAL_ID WHERE a.TUSHAAL_TYPE=2 AND TO_NUMBER(TO_CHAR(TO_DATE(a.SUCCESS_DATE,'yyyy-mm-dd'),'yyyy'))=" + yr + type + hariutssangazar + bolovsruulsangazar + " ) a LEFT JOIN TBL_TUSHAAL_BR b ON a.TUSHAAL_ID=b.TUSHAAL_ID AND b.BR_TYPE=2 LEFT JOIN TBL_BRANCH c ON b.BR_ID=c.BR_ID AND c.YR=" + yr + " GROUP BY a.TUSHAAL_ID, b.BR_ID, c.DOMAIN_ORG ) GROUP BY TUSHAAL_ID ) a LEFT JOIN TBL_TUSHAAL_BR b ON a.TUSHAAL_ID=b.TUSHAAL_ID AND b.BR_TYPE=1 LEFT JOIN TBL_BRANCH c ON b.BR_ID=c.BR_ID AND c.YR=" + yr + " GROUP BY a.TUSHAAL_ID, a.BOLOVSRUULSAN_BRIDLIST, a.BOLOVSRUULSAN_BRNAMELIST, b.BR_ID, c.DOMAIN_ORG ) GROUP BY TUSHAAL_ID, BOLOVSRUULSAN_BRIDLIST, BOLOVSRUULSAN_BRNAMELIST ) a LEFT JOIN TBL_TUSHAAL_USERS b ON a.TUSHAAL_ID=b.TUSHAAL_ID AND b.USER_TYPE=2 LEFT JOIN hrdbuser.ST_STAFFS c ON b.ST_ID=c.ID GROUP BY a.TUSHAAL_ID, a.BOLOVSRUULSAN_BRIDLIST, a.BOLOVSRUULSAN_BRNAMELIST, a.HARIUTSSAN_BRIDLIST, a.HARIUTSSAN_BRNAMELIST, b.ST_ID, SUBSTR(c.LNAME,0,1)||'.'||SUBSTR(c.FNAME,1,1)||LOWER(SUBSTR(c.FNAME,2)) ) GROUP BY TUSHAAL_ID, BOLOVSRUULSAN_BRIDLIST, BOLOVSRUULSAN_BRNAMELIST, HARIUTSSAN_BRIDLIST, HARIUTSSAN_BRNAMELIST ) a LEFT JOIN TBL_TUSHAAL_USERS b ON a.TUSHAAL_ID=b.TUSHAAL_ID AND b.USER_TYPE=1 LEFT JOIN hrdbuser.ST_STAFFS c ON b.ST_ID=c.ID GROUP BY a.TUSHAAL_ID, a.BOLOVSRUULSAN_BRIDLIST, a.BOLOVSRUULSAN_BRNAMELIST, a.HARIUTSSAN_BRIDLIST, a.HARIUTSSAN_BRNAMELIST, a.BOLOVSRUULSAN_STIDLIST, a.BOLOVSRUULSAN_STNAMELIST, b.ST_ID, SUBSTR(c.LNAME,0,1)||'.'||SUBSTR(c.FNAME,1,1)||LOWER(SUBSTR(c.FNAME,2)) ) GROUP BY TUSHAAL_ID, BOLOVSRUULSAN_BRIDLIST, BOLOVSRUULSAN_BRNAMELIST, HARIUTSSAN_BRIDLIST, HARIUTSSAN_BRNAMELIST, BOLOVSRUULSAN_STIDLIST, BOLOVSRUULSAN_STNAMELIST ) a INNER JOIN TBL_TUSHAAL b ON a.TUSHAAL_ID=b.ID INNER JOIN TBL_TUSHAAL_TYPE c ON TO_CHAR(b.TUSHAAL_TYPE_ID)=TO_CHAR(c.ID) ORDER BY b.SUCCESS_DATE DESC, b.TUSHAAL_NUMBER DESC ) a");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string TushaaltnbdTab2Datatable(string yr, string type, string hariutssangazar, string bolovsruulsangazar, string isclosed)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (type != "") type = " AND b.TUSHAAL_TYPE_ID='" + type + "'";
            if (hariutssangazar != "") hariutssangazar = " AND c.BR_TYPE=1 AND c.BR_ID=" + hariutssangazar;
            if (bolovsruulsangazar != "") bolovsruulsangazar = " AND c.BR_TYPE=2 AND c.BR_ID=" + bolovsruulsangazar;
            if (isclosed != "") isclosed = " AND a.ISCLOSED=" + isclosed;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT ROWNUM as ROWNO, a.* FROM ( SELECT c.TUSHAAL_TYPE_ID, b.TUSHAAL_ID, d.NAME as TUSHAAL_TYPE_NAME, c.TUSHAAL_NAME, c.SUCCESS_DATE, c.TUSHAAL_NUMBER, a.BOLOVSRUULSAN_BRIDLIST, a.BOLOVSRUULSAN_BRNAMELIST, a.HARIUTSSAN_BRIDLIST, a.HARIUTSSAN_BRNAMELIST, b.ID as ZAALT_ID, b.NAME as ZAALT_NAME, b.ENDDATE, CASE WHEN b.ISCLOSED=0 THEN 'checked=\"checked\"' ELSE null END as ISCLOSED, CASE WHEN b.ENDDATE IS NOT NULL THEN CASE WHEN TO_DATE(b.ENDDATE, 'YYYY-MM-DD')<SYSDATE THEN 'warning' ELSE null END ELSE null END as ENDDATECOLOR FROM ( SELECT TUSHAAL_ZAALT_ID, BOLOVSRUULSAN_BRIDLIST, BOLOVSRUULSAN_BRNAMELIST, RTRIM(xmlagg(xmlelement(e, BR_ID || ',')).extract('//text()'), ',') as HARIUTSSAN_BRIDLIST, RTRIM(xmlagg(xmlelement(e, ' '|| DOMAIN_ORG || ',')).extract('//text()'), ',') as HARIUTSSAN_BRNAMELIST FROM( SELECT a.TUSHAAL_ZAALT_ID, a.BOLOVSRUULSAN_BRIDLIST, a.BOLOVSRUULSAN_BRNAMELIST, b.BR_ID, c.DOMAIN_ORG FROM( SELECT TUSHAAL_ZAALT_ID, RTRIM(xmlagg(xmlelement(e, BR_ID || ',')).extract('//text()'), ',') as BOLOVSRUULSAN_BRIDLIST, RTRIM(xmlagg(xmlelement(e, ' '|| DOMAIN_ORG || ',')).extract('//text()'), ',') as BOLOVSRUULSAN_BRNAMELIST FROM( SELECT a.TUSHAAL_ZAALT_ID, b.BR_ID, c.DOMAIN_ORG FROM( SELECT a.ID as TUSHAAL_ZAALT_ID FROM TBL_TUSHAAL_ZAALT a INNER JOIN TBL_TUSHAAL b ON a.TUSHAAL_ID = b.ID LEFT JOIN TBL_TUSHAAL_ZAALT_BR c ON a.ID = c.TUSHAAL_ZAALT_ID WHERE b.TUSHAAL_TYPE = 2 AND TO_NUMBER(TO_CHAR(TO_DATE(b.SUCCESS_DATE, 'yyyy-mm-dd'), 'yyyy')) = " + yr + type + bolovsruulsangazar + hariutssangazar+isclosed + " ) a LEFT JOIN TBL_TUSHAAL_ZAALT_BR b ON a.TUSHAAL_ZAALT_ID = b.TUSHAAL_ZAALT_ID AND b.BR_TYPE = 2 LEFT JOIN TBL_BRANCH c ON b.BR_ID = c.BR_ID AND c.YR = " + yr + " GROUP BY a.TUSHAAL_ZAALT_ID, b.BR_ID, c.DOMAIN_ORG ) GROUP BY TUSHAAL_ZAALT_ID ) a LEFT JOIN TBL_TUSHAAL_ZAALT_BR b ON a.TUSHAAL_ZAALT_ID = b.TUSHAAL_ZAALT_ID AND b.BR_TYPE = 1 LEFT JOIN TBL_BRANCH c ON b.BR_ID = c.BR_ID AND c.YR = " + yr + " GROUP BY a.TUSHAAL_ZAALT_ID, a.BOLOVSRUULSAN_BRIDLIST, a.BOLOVSRUULSAN_BRNAMELIST, b.BR_ID, c.DOMAIN_ORG ) GROUP BY TUSHAAL_ZAALT_ID, BOLOVSRUULSAN_BRIDLIST, BOLOVSRUULSAN_BRNAMELIST ) a INNER JOIN TBL_TUSHAAL_ZAALT b ON a.TUSHAAL_ZAALT_ID = b.ID INNER JOIN TBL_TUSHAAL c ON b.TUSHAAL_ID = c.ID INNER JOIN TBL_TUSHAAL_TYPE d ON TO_CHAR(c.TUSHAAL_TYPE_ID) = TO_CHAR(d.ID) ORDER BY c.SUCCESS_DATE DESC ) a");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string TushaaltnbdTab3Datatable(string yr, string qrtr, string type, string hariutssangazar, string bolovsruulsangazar)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (type != "") type = " AND b.TUSHAAL_TYPE_ID='" + type + "'";
            if (hariutssangazar != "") hariutssangazar = " AND c.BR_TYPE=1 AND c.BR_ID=" + hariutssangazar;
            if (bolovsruulsangazar != "") bolovsruulsangazar = " AND c.BR_TYPE=2 AND c.BR_ID=" + bolovsruulsangazar;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet(@"SELECT ROWNUM as ROWNO, a.* 
FROM ( 
  SELECT c.TUSHAAL_TYPE_ID, b.TUSHAAL_ID, d.NAME as TUSHAAL_TYPE_NAME, c.TUSHAAL_NAME, c.SUCCESS_DATE, c.TUSHAAL_NUMBER, a.BOLOVSRUULSAN_BRIDLIST, a.BOLOVSRUULSAN_BRNAMELIST, a.HARIUTSSAN_BRIDLIST, a.HARIUTSSAN_BRNAMELIST, b.ID as ZAALT_ID, b.NAME as ZAALT_NAME, b.ENDDATE, NVL2(f.IMPL,'glyphicon glyphicon-check txt-color-green font-xl','glyphicon glyphicon-edit txt-color-red font-xl') as ISIMPL, f.FILENAME, NVL2(f.EVAL,1,0) as ISEVAL 
  FROM ( 
    SELECT TUSHAAL_ZAALT_ID, BOLOVSRUULSAN_BRIDLIST, BOLOVSRUULSAN_BRNAMELIST, RTRIM(xmlagg(xmlelement(e, BR_ID || ',')).extract('//text()'), ',') as HARIUTSSAN_BRIDLIST, RTRIM(xmlagg(xmlelement(e, ' '|| DOMAIN_ORG || ',')).extract('//text()'), ',') as HARIUTSSAN_BRNAMELIST 
    FROM( 
      SELECT a.TUSHAAL_ZAALT_ID, a.BOLOVSRUULSAN_BRIDLIST, a.BOLOVSRUULSAN_BRNAMELIST, b.BR_ID, c.DOMAIN_ORG 
      FROM( 
        SELECT TUSHAAL_ZAALT_ID, RTRIM(xmlagg(xmlelement(e, BR_ID || ',')).extract('//text()'), ',') as BOLOVSRUULSAN_BRIDLIST, RTRIM(xmlagg(xmlelement(e, ' '|| DOMAIN_ORG || ',')).extract('//text()'), ',') as BOLOVSRUULSAN_BRNAMELIST 
        FROM( 
          SELECT a.TUSHAAL_ZAALT_ID, b.BR_ID, c.DOMAIN_ORG 
          FROM( 
            SELECT a.ID as TUSHAAL_ZAALT_ID 
            FROM TBL_TUSHAAL_ZAALT a 
            INNER JOIN TBL_TUSHAAL b ON a.TUSHAAL_ID = b.ID 
            LEFT JOIN TBL_TUSHAAL_ZAALT_BR c ON a.ID = c.TUSHAAL_ZAALT_ID 
            WHERE b.TUSHAAL_TYPE = 2 AND a.ISCLOSED=0 AND TO_NUMBER(TO_CHAR(TO_DATE(b.SUCCESS_DATE, 'yyyy-mm-dd'), 'yyyy')) = " + yr + type + hariutssangazar + bolovsruulsangazar + @" 
          ) a
          LEFT JOIN TBL_TUSHAAL_ZAALT_BR b ON a.TUSHAAL_ZAALT_ID = b.TUSHAAL_ZAALT_ID AND b.BR_TYPE = 2
          LEFT JOIN TBL_BRANCH c ON b.BR_ID = c.BR_ID AND c.YR = " + yr + @"
          GROUP BY a.TUSHAAL_ZAALT_ID, b.BR_ID, c.DOMAIN_ORG
        ) 
        GROUP BY TUSHAAL_ZAALT_ID
      ) a
      LEFT JOIN TBL_TUSHAAL_ZAALT_BR b ON a.TUSHAAL_ZAALT_ID = b.TUSHAAL_ZAALT_ID AND b.BR_TYPE = 1
      LEFT JOIN TBL_BRANCH c ON b.BR_ID = c.BR_ID AND c.YR = " + yr + @"
      GROUP BY a.TUSHAAL_ZAALT_ID, a.BOLOVSRUULSAN_BRIDLIST, a.BOLOVSRUULSAN_BRNAMELIST, b.BR_ID, c.DOMAIN_ORG
    ) 
    GROUP BY TUSHAAL_ZAALT_ID, BOLOVSRUULSAN_BRIDLIST, BOLOVSRUULSAN_BRNAMELIST
  ) a
  INNER JOIN TBL_TUSHAAL_ZAALT b ON a.TUSHAAL_ZAALT_ID = b.ID
  INNER JOIN TBL_TUSHAAL c ON b.TUSHAAL_ID = c.ID
  INNER JOIN TBL_TUSHAAL_TYPE d ON TO_CHAR(c.TUSHAAL_TYPE_ID) = TO_CHAR(d.ID)
  LEFT JOIN TBL_TUSHAAL_ZAALT_IMPL f ON a.TUSHAAL_ZAALT_ID = f.TUSHAAL_ZAALT_ID AND f.YR = " + yr + " AND f.QRTR = " + qrtr + @"
  ORDER BY c.SUCCESS_DATE DESC
) a");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string TushaaltnbdTab4t1Datatable(string yr, string qrtr, string type, string hariutssangazar, string bolovsruulsangazar)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (type != "") type = " AND b.TUSHAAL_TYPE_ID='" + type + "'";
            if (hariutssangazar != "") hariutssangazar = " AND c.BR_TYPE=1 AND c.BR_ID=" + hariutssangazar;
            if (bolovsruulsangazar != "") bolovsruulsangazar = " AND c.BR_TYPE=2 AND c.BR_ID=" + bolovsruulsangazar;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet(@"SELECT ROWNUM as ROWNO, a.* 
FROM ( 
  SELECT c.TUSHAAL_TYPE_ID, b.TUSHAAL_ID, d.NAME as TUSHAAL_TYPE_NAME, c.TUSHAAL_NAME, c.SUCCESS_DATE, c.TUSHAAL_NUMBER, a.BOLOVSRUULSAN_BRIDLIST, a.BOLOVSRUULSAN_BRNAMELIST, a.HARIUTSSAN_BRIDLIST, a.HARIUTSSAN_BRNAMELIST, b.ID as ZAALT_ID, b.NAME as ZAALT_NAME, b.ENDDATE, f.EVAL, f.IMPL 
  FROM ( 
    SELECT TUSHAAL_ZAALT_ID, BOLOVSRUULSAN_BRIDLIST, BOLOVSRUULSAN_BRNAMELIST, NVL(RTRIM(xmlagg(xmlelement(e, BR_ID || ',')).extract('//text()'), ','), 'none') as HARIUTSSAN_BRIDLIST, NVL(RTRIM(xmlagg(xmlelement(e, ' '|| DOMAIN_ORG || ',')).extract('//text()'), ','), 'none') as HARIUTSSAN_BRNAMELIST 
    FROM( 
      SELECT a.TUSHAAL_ZAALT_ID, a.BOLOVSRUULSAN_BRIDLIST, a.BOLOVSRUULSAN_BRNAMELIST, b.BR_ID, c.DOMAIN_ORG 
      FROM( 
        SELECT TUSHAAL_ZAALT_ID, NVL(RTRIM(xmlagg(xmlelement(e, BR_ID || ',')).extract('//text()'), ','), 'none') as BOLOVSRUULSAN_BRIDLIST, NVL(RTRIM(xmlagg(xmlelement(e, ' '|| DOMAIN_ORG || ',')).extract('//text()'), ','), 'none') as BOLOVSRUULSAN_BRNAMELIST 
        FROM( 
          SELECT a.TUSHAAL_ZAALT_ID, b.BR_ID, c.DOMAIN_ORG 
          FROM( 
            SELECT a.ID as TUSHAAL_ZAALT_ID 
            FROM TBL_TUSHAAL_ZAALT a 
            INNER JOIN TBL_TUSHAAL b ON a.TUSHAAL_ID = b.ID 
            LEFT JOIN TBL_TUSHAAL_ZAALT_BR c ON a.ID = c.TUSHAAL_ZAALT_ID 
            LEFT JOIN TBL_TUSHAAL_ZAALT_IMPL d ON a.ID=d.TUSHAAL_ZAALT_ID AND d.YR=" + yr + " AND d.QRTR=" + qrtr + @" 
            WHERE b.TUSHAAL_TYPE = 2 AND(a.ISCLOSED = 0 OR d.EVAL IS NOT NULL) AND TO_NUMBER(TO_CHAR(TO_DATE(b.SUCCESS_DATE, 'yyyy-mm-dd'), 'yyyy')) = " + yr+ type+ hariutssangazar+ bolovsruulsangazar + @"
          ) a
          LEFT JOIN TBL_TUSHAAL_ZAALT_BR b ON a.TUSHAAL_ZAALT_ID = b.TUSHAAL_ZAALT_ID AND b.BR_TYPE = 2
          LEFT JOIN TBL_BRANCH c ON b.BR_ID = c.BR_ID AND c.YR = " + yr + @"
          GROUP BY a.TUSHAAL_ZAALT_ID, b.BR_ID, c.DOMAIN_ORG
        ) 
        GROUP BY TUSHAAL_ZAALT_ID
      ) a
      LEFT JOIN TBL_TUSHAAL_ZAALT_BR b ON a.TUSHAAL_ZAALT_ID = b.TUSHAAL_ZAALT_ID AND b.BR_TYPE = 1
      LEFT JOIN TBL_BRANCH c ON b.BR_ID = c.BR_ID AND c.YR = " + yr + @"
      GROUP BY a.TUSHAAL_ZAALT_ID, a.BOLOVSRUULSAN_BRIDLIST, a.BOLOVSRUULSAN_BRNAMELIST, b.BR_ID, c.DOMAIN_ORG
    ) 
    GROUP BY TUSHAAL_ZAALT_ID, BOLOVSRUULSAN_BRIDLIST, BOLOVSRUULSAN_BRNAMELIST
  ) a
  INNER JOIN TBL_TUSHAAL_ZAALT b ON a.TUSHAAL_ZAALT_ID = b.ID
  INNER JOIN TBL_TUSHAAL c ON b.TUSHAAL_ID = c.ID
  INNER JOIN TBL_TUSHAAL_TYPE d ON TO_CHAR(c.TUSHAAL_TYPE_ID) = TO_CHAR(d.ID)
  LEFT JOIN TBL_TUSHAAL_ZAALT_IMPL f ON a.TUSHAAL_ZAALT_ID = f.TUSHAAL_ZAALT_ID AND f.YR = " + yr + " AND f.QRTR = " + qrtr + @"
  ORDER BY c.SUCCESS_DATE DESC
) a");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string TushaaltnbdTab5Datatable(string yr, string qrtr, string type, string hariutssangazar, string bolovsruulsangazar)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strPrevYear = "", strPrevQrtr = "";
            if (qrtr == "1")
            {
                strPrevQrtr = "4";
                strPrevYear = (Convert.ToInt32(yr) - 1).ToString();
            }
            else
            {
                strPrevQrtr = (Convert.ToInt32(qrtr) - 1).ToString();
                strPrevYear = yr;
            }
            if (type != "") type = " AND b.TUSHAAL_TYPE_ID='" + type + "'";
            if (hariutssangazar != "") hariutssangazar = " AND c.BR_TYPE=1 AND c.BR_ID=" + hariutssangazar;
            if (bolovsruulsangazar != "") bolovsruulsangazar = " AND c.BR_TYPE=2 AND c.BR_ID=" + bolovsruulsangazar;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet(@"SELECT ROWNUM as ROWNO, a.* 
FROM(
  SELECT c.TUSHAAL_TYPE_ID, b.TUSHAAL_ID, d.NAME as TUSHAAL_TYPE_NAME, c.TUSHAAL_NAME, c.SUCCESS_DATE, c.TUSHAAL_NUMBER, a.BOLOVSRUULSAN_BRIDLIST, a.BOLOVSRUULSAN_BRNAMELIST, a.HARIUTSSAN_BRIDLIST, a.HARIUTSSAN_BRNAMELIST, b.ID as ZAALT_ID, b.NAME as ZAALT_NAME, b.ENDDATE, f.EVAL, f.IMPL, NVL(TO_CHAR(g.EVAL), '-') as PREVEVAL
  FROM(
    SELECT TUSHAAL_ZAALT_ID, BOLOVSRUULSAN_BRIDLIST, BOLOVSRUULSAN_BRNAMELIST, NVL(RTRIM(xmlagg(xmlelement(e, BR_ID || ',')).extract('//text()'), ','), 'none') as HARIUTSSAN_BRIDLIST, NVL(RTRIM(xmlagg(xmlelement(e, ' ' || DOMAIN_ORG || ',')).extract('//text()'), ','), 'none') as HARIUTSSAN_BRNAMELIST
    FROM(
      SELECT a.TUSHAAL_ZAALT_ID, a.BOLOVSRUULSAN_BRIDLIST, a.BOLOVSRUULSAN_BRNAMELIST, b.BR_ID, c.DOMAIN_ORG
      FROM(
        SELECT TUSHAAL_ZAALT_ID, NVL(RTRIM(xmlagg(xmlelement(e, BR_ID || ',')).extract('//text()'), ','), 'none') as BOLOVSRUULSAN_BRIDLIST, NVL(RTRIM(xmlagg(xmlelement(e, ' ' || DOMAIN_ORG || ',')).extract('//text()'), ','), 'none') as BOLOVSRUULSAN_BRNAMELIST
        FROM(
          SELECT a.TUSHAAL_ZAALT_ID, b.BR_ID, c.DOMAIN_ORG
          FROM(
            SELECT a.ID as TUSHAAL_ZAALT_ID
            FROM TBL_TUSHAAL_ZAALT a
            INNER JOIN TBL_TUSHAAL b ON a.TUSHAAL_ID = b.ID
            LEFT JOIN TBL_TUSHAAL_ZAALT_BR c ON a.ID = c.TUSHAAL_ZAALT_ID
            WHERE b.TUSHAAL_TYPE = 2 AND a.ISCLOSED = 0 AND TO_NUMBER(TO_CHAR(TO_DATE(b.SUCCESS_DATE, 'yyyy-mm-dd'), 'yyyy')) = " + yr + type + hariutssangazar + bolovsruulsangazar + @"
          ) a
          LEFT JOIN TBL_TUSHAAL_ZAALT_BR b ON a.TUSHAAL_ZAALT_ID = b.TUSHAAL_ZAALT_ID AND b.BR_TYPE = 2
          LEFT JOIN TBL_BRANCH c ON b.BR_ID = c.BR_ID AND c.YR = " + yr + @"
          GROUP BY a.TUSHAAL_ZAALT_ID, b.BR_ID, c.DOMAIN_ORG
        )
        GROUP BY TUSHAAL_ZAALT_ID
      ) a
      LEFT JOIN TBL_TUSHAAL_ZAALT_BR b ON a.TUSHAAL_ZAALT_ID = b.TUSHAAL_ZAALT_ID AND b.BR_TYPE = 1
      LEFT JOIN TBL_BRANCH c ON b.BR_ID = c.BR_ID AND c.YR = " + yr + @"
      GROUP BY a.TUSHAAL_ZAALT_ID, a.BOLOVSRUULSAN_BRIDLIST, a.BOLOVSRUULSAN_BRNAMELIST, b.BR_ID, c.DOMAIN_ORG
    )
    GROUP BY TUSHAAL_ZAALT_ID, BOLOVSRUULSAN_BRIDLIST, BOLOVSRUULSAN_BRNAMELIST
  ) a
  INNER JOIN TBL_TUSHAAL_ZAALT b ON a.TUSHAAL_ZAALT_ID = b.ID
  INNER JOIN TBL_TUSHAAL c ON b.TUSHAAL_ID = c.ID
  INNER JOIN TBL_TUSHAAL_TYPE d ON TO_CHAR(c.TUSHAAL_TYPE_ID) = TO_CHAR(d.ID)
  LEFT JOIN TBL_TUSHAAL_ZAALT_IMPL f ON a.TUSHAAL_ZAALT_ID = f.TUSHAAL_ZAALT_ID AND f.YR = " + yr + " AND f.QRTR = " + qrtr + @"
  LEFT JOIN TBL_TUSHAAL_ZAALT_IMPL g ON a.TUSHAAL_ZAALT_ID = g.TUSHAAL_ZAALT_ID AND g.YR = " + strPrevYear + " AND g.QRTR = " + strPrevQrtr + @"
  ORDER BY c.SUCCESS_DATE DESC
) a");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }



        //****indicatortype.aspx*****//
        public string IndicatortypeDatatable()
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT ID, NAME, DESCRIPTION, CASE WHEN ISACTIVE=1 THEN 'bg-color-teal' ELSE 'bg-color-blueLight' END as ISDISABLED FROM TBL_INDICATORTYPE ORDER BY ISACTIVE DESC, NAME");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }



        //****indicator.aspx*****//
        public string IndicatorTab1Datatable(string indicatortypeid, string yr, string gazarid)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strQry = "";
            if (gazarid != "") gazarid = " AND b.BRANCH_ID=" + gazarid + "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                strQry = "SELECT ROWNUM as ROWNO, a.* FROM(SELECT a.ID, a.BRLISTID, a.BRLISTNAME, b.NAME, b.BASLINENAME, b.INDICATORINTERVAL_ID, b.ISNUMBER, c.VAL as VAL0, d.VAL as VAL1, f.VAL as VAL2, g.VAL as VAL3, CASE WHEN b.ISCLOSED = 0 THEN 'checked=\"checked\"' ELSE null END as ISCLOSED";
                strQry += @" FROM (
  SELECT
    a.ID
    , RTRIM(xmlagg(xmlelement(e, b.BRANCH_ID || ',') ORDER BY c.SORT).extract('//text()'), ',') as BRLISTID
    , RTRIM(xmlagg(xmlelement(e, c.DOMAIN_ORG || ', ') ORDER BY c.SORT).extract('//text()'), ', ') as BRLISTNAME
  FROM(
    SELECT a.ID
    FROM TBL_INDICATOR a
    INNER JOIN TBL_INDICATOR_BR b ON a.ID = b.INDICATOR_ID
    WHERE a.INDICATORTYPE_ID = " + indicatortypeid+ gazarid + @"
    GROUP BY a.ID
  ) a
  INNER JOIN TBL_INDICATOR_BR b ON a.ID = b.INDICATOR_ID
  INNER JOIN TBL_BRANCH c ON b.BRANCH_ID = c.BR_ID AND c.YR = (SELECT YR FROM TBL_SYSSET WHERE ACTIVE = 1)
  GROUP BY a.ID
) a
INNER JOIN TBL_INDICATOR b ON a.ID = b.ID
LEFT JOIN TBL_INDICATOR_TARGET c ON a.ID = c.INDICATOR_ID AND c.YR = ("+ yr + @" - 1)
LEFT JOIN TBL_INDICATOR_TARGET d ON a.ID = d.INDICATOR_ID AND d.YR = (" + yr + @")
LEFT JOIN TBL_INDICATOR_TARGET f ON a.ID = f.INDICATOR_ID AND f.YR = (" + yr + @" + 1)
LEFT JOIN TBL_INDICATOR_TARGET g ON a.ID = g.INDICATOR_ID AND g.YR = (" + yr + @" + 2)
ORDER BY b.NAME ) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void INDICATOR_INSERT(string P_INDICATORTYPE_ID, string P_NAME, string P_BASLINENAME, string P_INDICATORINTERVAL_ID, string P_BRLIST, string P_STAFFID, string P_ISNUMBER)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[7], ParamValue = new string[7];
                ParamName[0] = "P_INDICATORTYPE_ID";
                ParamName[1] = "P_NAME";
                ParamName[2] = "P_BASLINENAME";
                ParamName[3] = "P_INDICATORINTERVAL_ID";
                ParamName[4] = "P_BRLIST";
                ParamName[5] = "P_STAFFID";
                ParamName[6] = "P_ISNUMBER";
                ParamValue[0] = P_INDICATORTYPE_ID;
                ParamValue[1] = P_NAME;
                ParamValue[2] = P_BASLINENAME;
                ParamValue[3] = P_INDICATORINTERVAL_ID;
                ParamValue[4] = P_BRLIST;
                ParamValue[5] = P_STAFFID;
                ParamValue[6] = P_ISNUMBER;
                myObj.SP_OracleExecuteNonQuery("INDICATOR_INSERT", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void INDICATOR_UPDATE(string P_ID, string P_INDICATORTYPE_ID, string P_NAME, string P_BASLINENAME, string P_INDICATORINTERVAL_ID, string P_BRLIST, string P_STAFFID, string P_ISNUMBER)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[8], ParamValue = new string[8];
                ParamName[0] = "P_ID";
                ParamName[1] = "P_INDICATORTYPE_ID";
                ParamName[2] = "P_NAME";
                ParamName[3] = "P_BASLINENAME";
                ParamName[4] = "P_INDICATORINTERVAL_ID";
                ParamName[5] = "P_BRLIST";
                ParamName[6] = "P_STAFFID";
                ParamName[7] = "P_ISNUMBER";
                ParamValue[0] = P_ID;
                ParamValue[1] = P_INDICATORTYPE_ID;
                ParamValue[2] = P_NAME;
                ParamValue[3] = P_BASLINENAME;
                ParamValue[4] = P_INDICATORINTERVAL_ID;
                ParamValue[5] = P_BRLIST;
                ParamValue[6] = P_STAFFID;
                ParamValue[7] = P_ISNUMBER;
                myObj.SP_OracleExecuteNonQuery("INDICATOR_UPDATE", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void INDICATOR_DELETE(string P_ID)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[1], ParamValue = new string[1];
                ParamName[0] = "P_ID";
                ParamValue[0] = P_ID;
                myObj.SP_OracleExecuteNonQuery("INDICATOR_DELETE", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void INDICATOR_TARGET_INSERT(string P_INDICATOR_ID, string P_YR, string P_VAL)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[3], ParamValue = new string[3];
                ParamName[0] = "P_INDICATOR_ID";
                ParamName[1] = "P_YR";
                ParamName[2] = "P_VAL";
                ParamValue[0] = P_INDICATOR_ID;
                ParamValue[1] = P_YR;
                ParamValue[2] = P_VAL;
                myObj.SP_OracleExecuteNonQuery("INDICATOR_TARGET_INSERT", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string IndicatorTab2Datatable(string indicatortypeid, string yr, string gazarid)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strQry = "";
            if (gazarid != "") gazarid = " AND b.BRANCH_ID=" + gazarid + "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                strQry = "SELECT ROWNUM as ROWNO, a.* FROM ( SELECT a.ID, a.BRLISTNAME, b.NAME, f.VAL as TARGET, c.NAME as INDICATORINTERVAL_NAME, CASE WHEN d.ISACTIVE=1 THEN CASE WHEN b.INDICATORINTERVAL_ID=12 THEN 'style=\"background-color:#FFFFE0; cursor:pointer;\" onclick=\"tab2TargetClick(this);\" onmouseover=\"$(this).css(''background-color'',''#fcf9ce'');\" onmouseout=\"$(this).css(''background-color'',''#FFFFE0'');\"' ELSE null END ELSE null END as MNTH1, CASE WHEN d.ISACTIVE=1 THEN CASE WHEN b.INDICATORINTERVAL_ID=12 THEN 'style=\"background-color:#FFFFE0; cursor:pointer;\" onclick=\"tab2TargetClick(this);\" onmouseover=\"$(this).css(''background-color'',''#fcf9ce'');\" onmouseout=\"$(this).css(''background-color'',''#FFFFE0'');\"' ELSE null END ELSE null END as MNTH2, CASE WHEN d.ISACTIVE=1 THEN CASE WHEN b.INDICATORINTERVAL_ID IN (12,4) THEN 'style=\"background-color:#FFFFE0; cursor:pointer;\" onclick=\"tab2TargetClick(this);\" onmouseover=\"$(this).css(''background-color'',''#fcf9ce'');\" onmouseout=\"$(this).css(''background-color'',''#FFFFE0'');\"' ELSE null END ELSE null END as MNTH3, CASE WHEN d.ISACTIVE=1 THEN CASE WHEN b.INDICATORINTERVAL_ID=12 THEN 'style=\"background-color:#FFFFE0; cursor:pointer;\" onclick=\"tab2TargetClick(this);\" onmouseover=\"$(this).css(''background-color'',''#fcf9ce'');\" onmouseout=\"$(this).css(''background-color'',''#FFFFE0'');\"' ELSE null END ELSE null END as MNTH4 , CASE WHEN d.ISACTIVE=1 THEN CASE WHEN b.INDICATORINTERVAL_ID=12 THEN 'style=\"background-color:#FFFFE0; cursor:pointer;\" onclick=\"tab2TargetClick(this);\" onmouseover=\"$(this).css(''background-color'',''#fcf9ce'');\" onmouseout=\"$(this).css(''background-color'',''#FFFFE0'');\"' ELSE null END ELSE null END as MNTH5 , CASE WHEN d.ISACTIVE=1 THEN CASE WHEN b.INDICATORINTERVAL_ID IN (12,4,2) THEN 'style=\"background-color:#FFFFE0; cursor:pointer;\" onclick=\"tab2TargetClick(this);\" onmouseover=\"$(this).css(''background-color'',''#fcf9ce'');\" onmouseout=\"$(this).css(''background-color'',''#FFFFE0'');\"' ELSE null END ELSE null END as MNTH6 , CASE WHEN d.ISACTIVE=1 THEN CASE WHEN b.INDICATORINTERVAL_ID=12 THEN 'style=\"background-color:#FFFFE0; cursor:pointer;\" onclick=\"tab2TargetClick(this);\" onmouseover=\"$(this).css(''background-color'',''#fcf9ce'');\" onmouseout=\"$(this).css(''background-color'',''#FFFFE0'');\"' ELSE null END ELSE null END as MNTH7 , CASE WHEN d.ISACTIVE=1 THEN CASE WHEN b.INDICATORINTERVAL_ID=12 THEN 'style=\"background-color:#FFFFE0; cursor:pointer;\" onclick=\"tab2TargetClick(this);\" onmouseover=\"$(this).css(''background-color'',''#fcf9ce'');\" onmouseout=\"$(this).css(''background-color'',''#FFFFE0'');\"' ELSE null END ELSE null END as MNTH8 , CASE WHEN d.ISACTIVE=1 THEN CASE WHEN b.INDICATORINTERVAL_ID IN (12,4) THEN 'style=\"background-color:#FFFFE0; cursor:pointer;\" onclick=\"tab2TargetClick(this);\" onmouseover=\"$(this).css(''background-color'',''#fcf9ce'');\" onmouseout=\"$(this).css(''background-color'',''#FFFFE0'');\"' ELSE null END ELSE null END as MNTH9 , CASE WHEN d.ISACTIVE=1 THEN CASE WHEN b.INDICATORINTERVAL_ID=12 THEN 'style=\"background-color:#FFFFE0; cursor:pointer;\" onclick=\"tab2TargetClick(this);\" onmouseover=\"$(this).css(''background-color'',''#fcf9ce'');\" onmouseout=\"$(this).css(''background-color'',''#FFFFE0'');\"' ELSE null END ELSE null END as MNTH10 , CASE WHEN d.ISACTIVE=1 THEN CASE WHEN b.INDICATORINTERVAL_ID=12 THEN 'style=\"background-color:#FFFFE0; cursor:pointer;\" onclick=\"tab2TargetClick(this);\" onmouseover=\"$(this).css(''background-color'',''#fcf9ce'');\" onmouseout=\"$(this).css(''background-color'',''#FFFFE0'');\"' ELSE null END ELSE null END as MNTH11, CASE WHEN d.ISACTIVE=1 THEN CASE WHEN b.INDICATORINTERVAL_ID IN (12,4,2,1) THEN 'style=\"background-color:#FFFFE0; cursor:pointer;\" onclick=\"tab2TargetClick(this);\" onmouseover=\"$(this).css(''background-color'',''#fcf9ce'');\" onmouseout=\"$(this).css(''background-color'',''#FFFFE0'');\"' ELSE null END ELSE null END as MNTH12 ";
                strQry += @", a.VALMNTH1
    , a.VALMNTH2
    , a.VALMNTH3
    , a.VALMNTH4
    , a.VALMNTH5
    , a.VALMNTH6
    , a.VALMNTH7
    , a.VALMNTH8
    , a.VALMNTH9
    , a.VALMNTH10
    , a.VALMNTH11
    , a.VALMNTH12
  FROM (  
    SELECT a.ID, a.BRLISTNAME
      , b.VAL as VALMNTH1
      , c.VAL as VALMNTH2
      , d.VAL as VALMNTH3
      , f.VAL as VALMNTH4
      , g.VAL as VALMNTH5
      , h.VAL as VALMNTH6
      , i.VAL as VALMNTH7
      , j.VAL as VALMNTH8
      , k.VAL as VALMNTH9
      , l.VAL as VALMNTH10
      , m.VAL as VALMNTH11
      , n.VAL as VALMNTH12
    FROM (
      SELECT 
        a.ID
        , RTRIM(xmlagg(xmlelement(e, c.DOMAIN_ORG || ', ') ORDER BY c.SORT).extract('//text()'), ', ') as BRLISTNAME
      FROM (
        SELECT a.ID
        FROM TBL_INDICATOR a
        INNER JOIN TBL_INDICATOR_BR b ON a.ID=b.INDICATOR_ID
        WHERE a.ISCLOSED=0 AND a.INDICATORTYPE_ID=" + indicatortypeid + gazarid + @"
        GROUP BY a.ID
      ) a
      INNER JOIN TBL_INDICATOR_BR b ON a.ID=b.INDICATOR_ID
      INNER JOIN TBL_BRANCH c ON b.BRANCH_ID=c.BR_ID AND c.YR=(SELECT YR FROM TBL_SYSSET WHERE ACTIVE=1)
      GROUP BY a.ID
    ) a
    LEFT JOIN TBL_INDICATOR_PERF b ON a.ID=b.INDICATOR_ID AND b.YR=" + yr + @" AND b.MNTH=1
    LEFT JOIN TBL_INDICATOR_PERF c ON a.ID=c.INDICATOR_ID AND c.YR=" + yr + @" AND c.MNTH=2
    LEFT JOIN TBL_INDICATOR_PERF d ON a.ID=d.INDICATOR_ID AND d.YR=" + yr + @" AND d.MNTH=3
    LEFT JOIN TBL_INDICATOR_PERF f ON a.ID=f.INDICATOR_ID AND f.YR=" + yr + @" AND f.MNTH=4
    LEFT JOIN TBL_INDICATOR_PERF g ON a.ID=g.INDICATOR_ID AND g.YR=" + yr + @" AND g.MNTH=5
    LEFT JOIN TBL_INDICATOR_PERF h ON a.ID=h.INDICATOR_ID AND h.YR=" + yr + @" AND h.MNTH=6
    LEFT JOIN TBL_INDICATOR_PERF i ON a.ID=i.INDICATOR_ID AND i.YR=" + yr + @" AND i.MNTH=7
    LEFT JOIN TBL_INDICATOR_PERF j ON a.ID=j.INDICATOR_ID AND j.YR=" + yr + @" AND j.MNTH=8
    LEFT JOIN TBL_INDICATOR_PERF k ON a.ID=k.INDICATOR_ID AND k.YR=" + yr + @" AND k.MNTH=9
    LEFT JOIN TBL_INDICATOR_PERF l ON a.ID=l.INDICATOR_ID AND l.YR=" + yr + @" AND l.MNTH=10
    LEFT JOIN TBL_INDICATOR_PERF m ON a.ID=m.INDICATOR_ID AND m.YR=" + yr + @" AND m.MNTH=11
    LEFT JOIN TBL_INDICATOR_PERF n ON a.ID=n.INDICATOR_ID AND n.YR=" + yr + @" AND n.MNTH=12 
  ) a
  INNER JOIN TBL_INDICATOR b ON a.ID=b.ID
  INNER JOIN TBL_INDICATORINTERVAL c ON b.INDICATORINTERVAL_ID=c.ID
  INNER JOIN TBL_INDICATORTYPE d ON b.INDICATORTYPE_ID=d.ID
  LEFT JOIN TBL_INDICATOR_TARGET f ON a.ID=f.INDICATOR_ID AND f.YR=" + yr + @"
  ORDER BY b.NAME 
) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void INDICATOR_PERF_INSERT(string P_INDICATOR_ID, string P_YR, string P_MNTH, string P_VAL, string P_STAFFID)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[5], ParamValue = new string[5];
                ParamName[0] = "P_INDICATOR_ID";
                ParamName[1] = "P_YR";
                ParamName[2] = "P_MNTH";
                ParamName[3] = "P_VAL";
                ParamName[4] = "P_STAFFID";
                ParamValue[0] = P_INDICATOR_ID;
                ParamValue[1] = P_YR;
                ParamValue[2] = P_MNTH;
                ParamValue[3] = P_VAL;
                ParamValue[4] = P_STAFFID;
                myObj.SP_OracleExecuteNonQuery("INDICATOR_PERF_INSERT", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string IndicatorTab3t1Datatable(string indicatortypeid, string yr, string gazarid)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strQry = "";
            if (gazarid != "") gazarid = " AND b.BRANCH_ID=" + gazarid + "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                strQry = @"SELECT ROWNUM as ROWNO, a.* 
FROM ( 
  SELECT a.ID, a.BRLISTNAME, b.NAME, f.VAL as TARGET, c.NAME as INDICATORINTERVAL_NAME, b.BASLINENAME
    , a.VALMNTH1
    , a.VALMNTH2
    , a.VALMNTH3
    , a.VALMNTH4
    , a.VALMNTH5
    , a.VALMNTH6
    , a.VALMNTH7
    , a.VALMNTH8
    , a.VALMNTH9
    , a.VALMNTH10
    , a.VALMNTH11
    , a.VALMNTH12
  FROM (  
    SELECT a.ID, a.BRLISTNAME
      , b.VAL as VALMNTH1
      , c.VAL as VALMNTH2
      , d.VAL as VALMNTH3
      , f.VAL as VALMNTH4
      , g.VAL as VALMNTH5
      , h.VAL as VALMNTH6
      , i.VAL as VALMNTH7
      , j.VAL as VALMNTH8
      , k.VAL as VALMNTH9
      , l.VAL as VALMNTH10
      , m.VAL as VALMNTH11
      , n.VAL as VALMNTH12
    FROM (
      SELECT 
        a.ID
        , RTRIM(xmlagg(xmlelement(e, c.DOMAIN_ORG || ', ') ORDER BY c.SORT).extract('//text()'), ', ') as BRLISTNAME
      FROM (
        SELECT a.ID
        FROM TBL_INDICATOR a
        INNER JOIN TBL_INDICATOR_BR b ON a.ID=b.INDICATOR_ID
        WHERE a.ISCLOSED=0 AND a.INDICATORTYPE_ID=" + indicatortypeid + gazarid + @"
        GROUP BY a.ID
      ) a
      INNER JOIN TBL_INDICATOR_BR b ON a.ID=b.INDICATOR_ID
      INNER JOIN TBL_BRANCH c ON b.BRANCH_ID=c.BR_ID AND c.YR=(SELECT YR FROM TBL_SYSSET WHERE ACTIVE=1)
      GROUP BY a.ID
    ) a
    LEFT JOIN TBL_INDICATOR_PERF b ON a.ID=b.INDICATOR_ID AND b.YR=" + yr + @" AND b.MNTH=1
    LEFT JOIN TBL_INDICATOR_PERF c ON a.ID=c.INDICATOR_ID AND c.YR=" + yr + @" AND c.MNTH=2
    LEFT JOIN TBL_INDICATOR_PERF d ON a.ID=d.INDICATOR_ID AND d.YR=" + yr + @" AND d.MNTH=3
    LEFT JOIN TBL_INDICATOR_PERF f ON a.ID=f.INDICATOR_ID AND f.YR=" + yr + @" AND f.MNTH=4
    LEFT JOIN TBL_INDICATOR_PERF g ON a.ID=g.INDICATOR_ID AND g.YR=" + yr + @" AND g.MNTH=5
    LEFT JOIN TBL_INDICATOR_PERF h ON a.ID=h.INDICATOR_ID AND h.YR=" + yr + @" AND h.MNTH=6
    LEFT JOIN TBL_INDICATOR_PERF i ON a.ID=i.INDICATOR_ID AND i.YR=" + yr + @" AND i.MNTH=7
    LEFT JOIN TBL_INDICATOR_PERF j ON a.ID=j.INDICATOR_ID AND j.YR=" + yr + @" AND j.MNTH=8
    LEFT JOIN TBL_INDICATOR_PERF k ON a.ID=k.INDICATOR_ID AND k.YR=" + yr + @" AND k.MNTH=9
    LEFT JOIN TBL_INDICATOR_PERF l ON a.ID=l.INDICATOR_ID AND l.YR=" + yr + @" AND l.MNTH=10
    LEFT JOIN TBL_INDICATOR_PERF m ON a.ID=m.INDICATOR_ID AND m.YR=" + yr + @" AND m.MNTH=11
    LEFT JOIN TBL_INDICATOR_PERF n ON a.ID=n.INDICATOR_ID AND n.YR=" + yr + @" AND n.MNTH=12 
  ) a
  INNER JOIN TBL_INDICATOR b ON a.ID=b.ID
  INNER JOIN TBL_INDICATORINTERVAL c ON b.INDICATORINTERVAL_ID=c.ID
  INNER JOIN TBL_INDICATORTYPE d ON b.INDICATORTYPE_ID=d.ID
  LEFT JOIN TBL_INDICATOR_TARGET f ON a.ID=f.INDICATOR_ID AND f.YR=" + yr + @"
  ORDER BY b.NAME 
) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string IndicatorTab3t2Datatable(string indicatortypeid, string yr, string yr2)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strQry = "", strYrList = "";
            string strTableVal = "";
            for (int i = Int32.Parse(yr); i <= Int32.Parse(yr2); i++) {
                if (strYrList != "") strYrList += ",";
                strYrList += i.ToString();
            }
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                strQry = @"SELECT ROWNUM as ROWNO, a.* 
FROM ( 
  SELECT * FROM (
    SELECT a.ID, b.NAME, b.BASLINENAME, a.VALMNTH12, a.YR, a.TARGET
    FROM (  
      SELECT a.ID, a.YR, b.VAL as VALMNTH12, c.VAL as TARGET
      FROM (
        SELECT a.ID, b.YR
        FROM TBL_INDICATOR a,
        (
          SELECT(" + yr + @" - 1) + ROWNUM YR
          FROM DUAL
          CONNECT BY LEVEL <= (" + yr2 + @" + 1) - " + yr + @"
        ) b
        WHERE a.ISCLOSED=0 AND a.INDICATORTYPE_ID=" + indicatortypeid + @"
      ) a
      LEFT JOIN TBL_INDICATOR_PERF b ON a.ID=b.INDICATOR_ID AND b.YR=a.YR AND b.MNTH=12 
      LEFT JOIN TBL_INDICATOR_TARGET c ON a.ID=c.INDICATOR_ID AND c.YR=a.YR
    ) a
    INNER JOIN TBL_INDICATOR b ON a.ID=b.ID
  )
  PIVOT (
    MAX(VALMNTH12) as VALMNTH12,
    MAX(TARGET) as VALTARGET
    FOR YR IN ("+ strYrList + @")
    
  )
  ORDER BY NAME 
) a";
                strTableVal = "";
                strTableVal += "<table style=\"border: 1px solid #000; border-collapse: collapse; font: 11pt arial, sans-serif; width: 100%;\">";
                strTableVal += "<thead>";
                strTableVal += "<tr>";
                strTableVal += "<th style=\"border: 1px solid #000; padding:5px; text-align:center; width:25px;\">#</th>";
                strTableVal += "<th style=\"border: 1px solid #000; padding:5px; text-align:center;\">Үзүүлэлт</th>";
                strTableVal += "<th style=\"border: 1px solid #000; padding:5px; text-align:center;\">Суурь үзүүлэлт</th>";
                for (var i = Int32.Parse(yr); i <= Int32.Parse(yr2); i++)
                {
                    strTableVal += "<th style=\"border: 1px solid #000; padding:5px; text-align:center;\">" + i.ToString() + " оны зорилт</th>";
                    strTableVal += "<th style=\"border: 1px solid #000; padding:5px; text-align:center;\">Гүйцэтгэл</th>";
                }
                strTableVal += "</tr>";
                strTableVal += "</thead>";
                strTableVal += "<tbody>";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                if (ds.Tables[0].Rows.Count != 0)
                {
                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {
                        strTableVal += "<tr>";
                        strTableVal += "<td style=\"border: 1px solid #000; padding:5px; text-align:center;\">" + dr["ROWNO"].ToString() + "</td>";
                        strTableVal += "<td style=\"border: 1px solid #000; padding:5px; text-align:left;\">" + myObjGetTableData.getReplaceDatabaseToDisplay(dr["NAME"].ToString()) + "</td>";
                        strTableVal += "<td style=\"border: 1px solid #000; padding:5px; text-align:center; vertical-align:middle;\">" + myObjGetTableData.getReplaceDatabaseToDisplay(dr["BASLINENAME"].ToString()) + " </td>";
                        for (var i = Int32.Parse(yr); i <= Int32.Parse(yr2); i++)
                        {
                            strTableVal += "<td style=\"border: 1px solid #000; padding:5px; text-align:center;\">" + dr[i.ToString() + "_VALTARGET"].ToString() + "</td>";
                            strTableVal += "<td style=\"border: 1px solid #000; padding:5px; text-align:center;\">" + dr[i.ToString() + "_VALMNTH12"].ToString() + "</td>";
                        }
                        strTableVal += "</tr>";
                    }
                }
                strTableVal += "</tbody>";
                strTableVal += "</table>";
                return strTableVal;
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string IndicatorTab3t3Datatable()
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strQry = "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                strQry = "SELECT ROWNUM as ROWNO, a.* FROM ( SELECT ID, NAME, FILENAME FROM TBL_INDICATORPDFATTACH ORDER BY ID DESC ) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }



        //****transparency.aspx*****//
        public string TransparencyTab1t1Datatable()
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.MySqlExecuteDataSet(@"SELECT ID, NAME FROM TBL_TRANSPARENCYTYPE ORDER BY ID");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string TransparencyTab1t2Datatable(string typeid, string groupid)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (typeid != "") typeid = " AND a.TRANSPARENCYTYPE_ID=" + typeid;
            if (groupid != "") groupid = " AND b.groups_rs_id=" + groupid;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.MySqlExecuteDataSet(@"SELECT a.ID, b.TRANSPARENCYTYPE_ID, c.NAME as TRANSPARENCYTYPE_NAME, b.NAME, b.REQUIRMENT, a.GROUPLIST_ID, a.GROUPLIST_NAME, a.MNTHLIST_ID
FROM (
	SELECT a.ID, a.GROUPLIST_ID, a.GROUPLIST_NAME, GROUP_CONCAT(CAST(b.MNTH as char(100)) ORDER BY b.MNTH) as MNTHLIST_ID
    FROM (
		SELECT a.ID, GROUP_CONCAT(CAST(b.groups_rs_id as char(100))) as GROUPLIST_ID, GROUP_CONCAT(CAST(c.init_name as nchar(100)) ORDER BY b.groups_rs_id) as GROUPLIST_NAME
		FROM (
			SELECT a.ID
			FROM TBL_TRANSPARENCY a
			INNER JOIN TBL_TRANSPARENCY_BR b ON a.ID=b.TRANSPARENCY_ID
			WHERE 1=1" + typeid + groupid + @"
			GROUP BY a.ID
		) a
		INNER JOIN TBL_TRANSPARENCY_BR b ON a.ID=b.TRANSPARENCY_ID
		INNER JOIN mof_groups_rs c ON b.groups_rs_id=c.ID
		GROUP BY a.ID
	) a
    INNER JOIN TBL_TRANSPARENCY_MNTH b ON a.ID=b.TRANSPARENCY_ID
	GROUP BY a.ID, a.GROUPLIST_ID, a.GROUPLIST_NAME
) a
INNER JOIN TBL_TRANSPARENCY b ON a.ID=b.ID
INNER JOIN TBL_TRANSPARENCYTYPE c ON b.TRANSPARENCYTYPE_ID=c.ID
ORDER BY b.TRANSPARENCYTYPE_ID, b.NAME, a.ID");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string TransparencyTypeListForDDL()
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.MySqlExecuteDataSet(@"SELECT ID, NAME FROM TBL_TRANSPARENCYTYPE ORDER BY ID");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void TRANSPARENCY_INSUPT(string P_ID, string P_TRANSPARENCYTYPE_ID, string P_NAME, string P_GROUPLIST, string P_MNTHLIST, string P_REQUIRMENT)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[6], ParamValue = new string[6];
                ParamName[0] = "P_ID";
                ParamName[1] = "P_TRANSPARENCYTYPE_ID";
                ParamName[2] = "P_NAME";
                ParamName[3] = "P_GROUPLIST";
                ParamName[4] = "P_MNTHLIST";
                ParamName[5] = "P_REQUIRMENT";
                ParamValue[0] = P_ID;
                ParamValue[1] = P_TRANSPARENCYTYPE_ID;
                ParamValue[2] = P_NAME;
                ParamValue[3] = P_GROUPLIST;
                ParamValue[4] = P_MNTHLIST;
                ParamValue[5] = P_REQUIRMENT;
                myObj.SP_MySqlExecuteNonQuery("TRANSPARENCY_INSUPT", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void TRANSPARENCY_DELETE(string P_ID)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[1], ParamValue = new string[1];
                ParamName[0] = "P_ID";
                ParamValue[0] = P_ID;
                myObj.SP_MySqlExecuteNonQuery("TRANSPARENCY_DELETE", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string TransparencyTab4Datatable(string typeid, string groupid, string yr, string mnth)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (typeid != "") typeid = " AND a.TRANSPARENCYTYPE_ID=" + typeid;
            if (groupid != "") groupid = " AND b.groups_rs_id=" + groupid;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.MySqlExecuteDataSet(@"SELECT a.ID, b.TRANSPARENCYTYPE_ID, c.NAME as TRANSPARENCYTYPE_NAME, b.NAME, b.REQUIRMENT, a.GROUPLIST_ID, a.GROUPLIST_NAME, a.MNTHLIST_ID, d.EVAL
FROM (
	SELECT a.ID, a.GROUPLIST_ID, a.GROUPLIST_NAME, GROUP_CONCAT(CAST(b.MNTH as char(100)) ORDER BY b.MNTH) as MNTHLIST_ID
    FROM (
		SELECT a.ID, GROUP_CONCAT(CAST(b.groups_rs_id as char(100))) as GROUPLIST_ID, GROUP_CONCAT(CAST(c.init_name as nchar(100)) ORDER BY b.groups_rs_id) as GROUPLIST_NAME
		FROM (
			SELECT a.ID
			FROM TBL_TRANSPARENCY a
			INNER JOIN TBL_TRANSPARENCY_BR b ON a.ID=b.TRANSPARENCY_ID
            INNER JOIN TBL_TRANSPARENCY_MNTH c ON a.ID=c.TRANSPARENCY_ID AND c.MNTH=" + mnth+@"
			WHERE 1=1" + typeid + groupid + @"
			GROUP BY a.ID
		) a
		INNER JOIN TBL_TRANSPARENCY_BR b ON a.ID=b.TRANSPARENCY_ID
		INNER JOIN mof_groups_rs c ON b.groups_rs_id=c.ID
		GROUP BY a.ID
	) a
    INNER JOIN TBL_TRANSPARENCY_MNTH b ON a.ID=b.TRANSPARENCY_ID
	GROUP BY a.ID, a.GROUPLIST_ID, a.GROUPLIST_NAME
) a
INNER JOIN TBL_TRANSPARENCY b ON a.ID=b.ID
INNER JOIN TBL_TRANSPARENCYTYPE c ON b.TRANSPARENCYTYPE_ID=c.ID
LEFT JOIN TBL_TRANSPARENCY_EVAL d ON a.ID=d.TRANSPARENCY_ID AND d.YR="+yr+@" AND d.MNTH=" + mnth+@"
ORDER BY b.TRANSPARENCYTYPE_ID, b.NAME, a.ID");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void TRANSPARENCYEVAL_INS(string P_ID, string P_YR, string P_MNTH, string P_EVAL)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[4], ParamValue = new string[4];
                ParamName[0] = "P_ID";
                ParamName[1] = "P_YR";
                ParamName[2] = "P_MNTH";
                ParamName[3] = "P_EVAL";
                ParamValue[0] = P_ID;
                ParamValue[1] = P_YR;
                ParamValue[2] = P_MNTH;
                ParamValue[3] = P_EVAL;
                myObj.SP_MySqlExecuteNonQuery("TRANSPARENCYEVAL_INS", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string TransparencyTab3t2Datatable(string yr, string mnth, string groupid)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            if (groupid != "") groupid = " AND c.parent_id=" + groupid;
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = "SELECT c.parent_id, d.init_name, REPLACE(SUBSTRING_INDEX(a.post_title,'<!--:-->',1),'<!--:mn-->','') as post_title, a.post_date FROM mof_posts a INNER JOIN mof_user2group_rs b ON a.post_author=b.user_id INNER JOIN mof_groups_rs c ON b.group_id=c.ID INNER JOIN mof_groups_rs d ON c.parent_id=d.ID WHERE a.post_status='publish' AND YEAR(a.post_date)=" + yr + " AND MONTH(a.post_date)=" + mnth + groupid + " ORDER BY c.parent_id, a.post_date";
                DataSet ds = myObj.MySqlExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string TransparencyTab3t1Datatable(string yr, string mnth, string mnth2)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strMnths = "";
            for (int i = Convert.ToInt32(mnth); i <= Convert.ToInt32(mnth2); i++)
            {
                if (strMnths != "") strMnths += ",";
                strMnths += i.ToString();
            }
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string strQry = @"SELECT 
	a.ID, a.group_name, 
	IFNULL(CAST(b.TOTALPLAN as nchar(10)),'-') as TOTALPLAN,
    IFNULL(CAST(c.CNT as nchar(10)),'-') as PUBLISHPLAN,
    IFNULL(CAST(b.EVAL100 as nchar(10)),'-') as EVAL100,
    IFNULL(CAST(b.EVAL90 as nchar(10)),'-') as EVAL90,
    IFNULL(CAST(b.EVAL80 as nchar(10)),'-') as EVAL80,
    IFNULL(CAST(b.EVAL70 as nchar(10)),'-') as EVAL70,
    IFNULL(CAST(b.EVAL50 as nchar(10)),'-') as EVAL50,
    IFNULL(CAST(b.EVAL30 as nchar(10)),'-') as EVAL30,
    IFNULL(CAST(b.EVAL10 as nchar(10)),'-') as EVAL10,
    IFNULL(CAST(b.EVAL0 as nchar(10)),'-') as EVAL0,
    IFNULL(CAST(b.EVALNONE as nchar(10)),'-') as EVALNONE,
    IFNULL(CAST(b.PERAVG as nchar(10)),'-') as PERAVG,
    IFNULL(CAST(b.PNTAVG as nchar(10)),'-') as PNTAVG
FROM (
	SELECT ID, group_name FROM mof_groups_rs WHERE id IN (SELECT parent_id FROM mof_groups_rs WHERE parent_id is not null GROUP BY parent_id)
) a
LEFT JOIN (
	SELECT 
		a.groups_rs_id, 
		COUNT(a.ID) as TOTALPLAN, 
		SUM(a.EVAL100) as EVAL100, 
		SUM(a.EVAL90) as EVAL90, 
		SUM(a.EVAL80) as EVAL80, 
		SUM(a.EVAL70) as EVAL70, 
		SUM(a.EVAL50) as EVAL50, 
		SUM(a.EVAL30) as EVAL30, 
		SUM(a.EVAL10) as EVAL10, 
		SUM(a.EVAL0) as EVAL0, 
		SUM(a.EVALNONE) as EVALNONE,
		ROUND((((IFNULL(SUM(a.EVAL100),0)*100)+ (IFNULL(SUM(a.EVAL90),0)*90)+ (IFNULL(SUM(a.EVAL80),0)*80)+ (IFNULL(SUM(a.EVAL70),0)*70)+ (IFNULL(SUM(a.EVAL50),0)*50)+ (IFNULL(SUM(a.EVAL30),0)*30)+ (IFNULL(SUM(a.EVAL10),0)*10)+ (IFNULL(SUM(a.EVAL0),0)*0))/CASE WHEN ((IFNULL(SUM(a.EVAL100),0)+IFNULL(SUM(a.EVAL90),0)+IFNULL(SUM(a.EVAL80),0)+IFNULL(SUM(a.EVAL70),0)+IFNULL(SUM(a.EVAL50),0)+IFNULL(SUM(a.EVAL30),0)+IFNULL(SUM(a.EVAL10),0)+IFNULL(SUM(a.EVAL0),0))*100)=0 THEN 1 ELSE ((IFNULL(SUM(a.EVAL100),0)+IFNULL(SUM(a.EVAL90),0)+IFNULL(SUM(a.EVAL80),0)+IFNULL(SUM(a.EVAL70),0)+IFNULL(SUM(a.EVAL50),0)+IFNULL(SUM(a.EVAL30),0)+IFNULL(SUM(a.EVAL10),0)+IFNULL(SUM(a.EVAL0),0))*100) END)*100,1) as PERAVG,
		ROUND(((ROUND((((IFNULL(SUM(a.EVAL100),0)*100)+ (IFNULL(SUM(a.EVAL90),0)*90)+ (IFNULL(SUM(a.EVAL80),0)*80)+ (IFNULL(SUM(a.EVAL70),0)*70)+ (IFNULL(SUM(a.EVAL50),0)*50)+ (IFNULL(SUM(a.EVAL30),0)*30)+ (IFNULL(SUM(a.EVAL10),0)*10)+ (IFNULL(SUM(a.EVAL0),0)*0))/CASE WHEN ((IFNULL(SUM(a.EVAL100),0)+IFNULL(SUM(a.EVAL90),0)+IFNULL(SUM(a.EVAL80),0)+IFNULL(SUM(a.EVAL70),0)+IFNULL(SUM(a.EVAL50),0)+IFNULL(SUM(a.EVAL30),0)+IFNULL(SUM(a.EVAL10),0)+IFNULL(SUM(a.EVAL0),0))*100)=0 THEN 1 ELSE ((IFNULL(SUM(a.EVAL100),0)+IFNULL(SUM(a.EVAL90),0)+IFNULL(SUM(a.EVAL80),0)+IFNULL(SUM(a.EVAL70),0)+IFNULL(SUM(a.EVAL50),0)+IFNULL(SUM(a.EVAL30),0)+IFNULL(SUM(a.EVAL10),0)+IFNULL(SUM(a.EVAL0),0))*100) END)*100,1))/100)*5,1) as PNTAVG
	FROM (
		SELECT 
			a.ID, 
			b.groups_rs_id, 
			CASE WHEN d.EVAL=100 THEN 1 ELSE 0 END as EVAL100,
			CASE WHEN d.EVAL=90 THEN 1 END as EVAL90, 
			CASE WHEN d.EVAL=80 THEN 1 END as EVAL80, 
			CASE WHEN d.EVAL=70 THEN 1 END as EVAL70, 
			CASE WHEN d.EVAL=50 THEN 1 END as EVAL50, 
			CASE WHEN d.EVAL=30 THEN 1 END as EVAL30, 
			CASE WHEN d.EVAL=10 THEN 1 END as EVAL10, 
			CASE WHEN d.EVAL=0 THEN 1 END as EVAL0, 
			CASE WHEN d.EVAL is null THEN 1 END as EVALNONE
		FROM TBL_TRANSPARENCY a
		INNER JOIN TBL_TRANSPARENCY_BR b ON a.ID=b.TRANSPARENCY_ID
		INNER JOIN TBL_TRANSPARENCY_MNTH c ON a.ID=c.TRANSPARENCY_ID AND c.MNTH IN ("+strMnths+@")
		LEFT JOIN TBL_TRANSPARENCY_EVAL d ON a.ID=d.TRANSPARENCY_ID AND d.YR=" + yr+ " AND d.MNTH IN (" + strMnths + @")
		GROUP BY a.ID, b.groups_rs_id
	) a
	INNER JOIN mof_groups_rs b ON a.groups_rs_id=b.ID
	GROUP BY a.groups_rs_id
) b ON a.ID=b.groups_rs_id
LEFT JOIN (
	SELECT c.parent_id, COUNT(c.parent_id) as CNT 
	FROM mof_posts a 
	INNER JOIN mof_user2group_rs b ON a.post_author=b.user_id 
	INNER JOIN mof_groups_rs c ON b.group_id=c.ID 
	WHERE a.post_status='publish' AND YEAR(a.post_date)=" + yr + " AND MONTH(a.post_date) IN (" + strMnths + @") 
    GROUP BY c.parent_id
) c ON a.ID=c.parent_id
ORDER BY a.ID";
                DataSet ds = myObj.MySqlExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }

        //****indicatortype2.aspx*****//
        public string Indicatortype2Datatable()
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                DataSet ds = myObj.OracleExecuteDataSet("SELECT ID, NAME, DESCRIPTION, CASE WHEN ISACTIVE=1 THEN 'bg-color-teal' ELSE 'bg-color-blueLight' END as ISDISABLED FROM TBL_INDICATORTYPE2 ORDER BY ISACTIVE DESC, NAME");
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }



        //****indicator.aspx*****//
        public string Indicator2Tab1Datatable(string indicatortypeid, string yr, string gazarid)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strQry = "";
            if (gazarid != "") gazarid = " AND b.BRANCH_ID=" + gazarid + "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                strQry = "SELECT ROWNUM as ROWNO, a.* FROM(SELECT a.ID, a.BRLISTID, a.BRLISTNAME, b.NAME, b.BASLINENAME, b.INDICATORINTERVAL_ID, b.ISNUMBER, c.VAL as VAL0, d.VAL as VAL1, f.VAL as VAL2, g.VAL as VAL3, CASE WHEN b.ISCLOSED = 0 THEN 'checked=\"checked\"' ELSE null END as ISCLOSED";
                strQry += @" FROM (
  SELECT
    a.ID
    , RTRIM(xmlagg(xmlelement(e, b.BRANCH_ID || ',') ORDER BY c.SORT).extract('//text()'), ',') as BRLISTID
    , RTRIM(xmlagg(xmlelement(e, c.DOMAIN_ORG || ', ') ORDER BY c.SORT).extract('//text()'), ', ') as BRLISTNAME
  FROM(
    SELECT a.ID
    FROM TBL_INDICATOR2 a
    INNER JOIN TBL_INDICATOR_BR2 b ON a.ID = b.INDICATOR_ID
    WHERE a.INDICATORTYPE_ID = " + indicatortypeid + gazarid + @"
    GROUP BY a.ID
  ) a
  INNER JOIN TBL_INDICATOR_BR2 b ON a.ID = b.INDICATOR_ID
  INNER JOIN TBL_BRANCH c ON b.BRANCH_ID = c.BR_ID AND c.YR = (SELECT YR FROM TBL_SYSSET WHERE ACTIVE = 1)
  GROUP BY a.ID
) a
INNER JOIN TBL_INDICATOR2 b ON a.ID = b.ID
LEFT JOIN TBL_INDICATOR_TARGET2 c ON a.ID = c.INDICATOR_ID AND c.YR = (" + yr + @" - 1)
LEFT JOIN TBL_INDICATOR_TARGET2 d ON a.ID = d.INDICATOR_ID AND d.YR = (" + yr + @")
LEFT JOIN TBL_INDICATOR_TARGET2 f ON a.ID = f.INDICATOR_ID AND f.YR = (" + yr + @" + 1)
LEFT JOIN TBL_INDICATOR_TARGET2 g ON a.ID = g.INDICATOR_ID AND g.YR = (" + yr + @" + 2)
ORDER BY b.NAME ) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string Indicator2Tab1t2Datatable()
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strQry = "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                strQry = @"SELECT ROWNUM as ROWNO, a.*
FROM (
  SELECT a.ID, a.INDICATORTYPE_ID, a.NAME
  FROM TBL_INDICATORCATEGORY2 a
  ORDER BY a.NAME
) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void INDICATOR2_INSERT(string P_INDICATORTYPE_ID, string P_INDICATORCATEGORY_ID, string P_NAME, string P_BASLINENAME, string P_INDICATORINTERVAL_ID, string P_BRLIST, string P_STAFFID, string P_ISNUMBER)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[8], ParamValue = new string[8];
                ParamName[0] = "P_INDICATORTYPE_ID";
                ParamName[1] = "P_INDICATORCATEGORY_ID";
                ParamName[2] = "P_NAME";
                ParamName[3] = "P_BASLINENAME";
                ParamName[4] = "P_INDICATORINTERVAL_ID";
                ParamName[5] = "P_BRLIST";
                ParamName[6] = "P_STAFFID";
                ParamName[7] = "P_ISNUMBER";
                ParamValue[0] = P_INDICATORTYPE_ID;
                ParamValue[1] = P_INDICATORCATEGORY_ID;
                ParamValue[2] = P_NAME;
                ParamValue[3] = P_BASLINENAME;
                ParamValue[4] = P_INDICATORINTERVAL_ID;
                ParamValue[5] = P_BRLIST;
                ParamValue[6] = P_STAFFID;
                ParamValue[7] = P_ISNUMBER;
                myObj.SP_OracleExecuteNonQuery("INDICATOR2_INSERT", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void INDICATOR2_UPDATE(string P_ID, string P_INDICATORTYPE_ID, string P_INDICATORCATEGORY_ID, string P_NAME, string P_BASLINENAME, string P_INDICATORINTERVAL_ID, string P_BRLIST, string P_STAFFID, string P_ISNUMBER)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[9], ParamValue = new string[9];
                ParamName[0] = "P_ID";
                ParamName[1] = "P_INDICATORTYPE_ID";
                ParamName[2] = "P_INDICATORCATEGORY_ID";
                ParamName[3] = "P_NAME";
                ParamName[4] = "P_BASLINENAME";
                ParamName[5] = "P_INDICATORINTERVAL_ID";
                ParamName[6] = "P_BRLIST";
                ParamName[7] = "P_STAFFID";
                ParamName[8] = "P_ISNUMBER";
                ParamValue[0] = P_ID;
                ParamValue[1] = P_INDICATORTYPE_ID;
                ParamValue[2] = P_INDICATORCATEGORY_ID;
                ParamValue[3] = P_NAME;
                ParamValue[4] = P_BASLINENAME;
                ParamValue[5] = P_INDICATORINTERVAL_ID;
                ParamValue[6] = P_BRLIST;
                ParamValue[7] = P_STAFFID;
                ParamValue[8] = P_ISNUMBER;
                myObj.SP_OracleExecuteNonQuery("INDICATOR2_UPDATE", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void INDICATOR2_DELETE(string P_ID)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[1], ParamValue = new string[1];
                ParamName[0] = "P_ID";
                ParamValue[0] = P_ID;
                myObj.SP_OracleExecuteNonQuery("INDICATOR2_DELETE", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void INDICATOR2_TARGET_INSERT(string P_INDICATOR_ID, string P_YR, string P_VAL)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[3], ParamValue = new string[3];
                ParamName[0] = "P_INDICATOR_ID";
                ParamName[1] = "P_YR";
                ParamName[2] = "P_VAL";
                ParamValue[0] = P_INDICATOR_ID;
                ParamValue[1] = P_YR;
                ParamValue[2] = P_VAL;
                myObj.SP_OracleExecuteNonQuery("INDICATOR2_TARGET_INSERT", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string Indicator2Tab2Datatable(string indicatortypeid, string yr, string gazarid)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strQry = "";
            if (gazarid != "") gazarid = " AND b.BRANCH_ID=" + gazarid + "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                strQry = "SELECT ROWNUM as ROWNO, a.* FROM ( SELECT a.ID, a.BRLISTNAME, b.NAME, f.VAL as TARGET, c.NAME as INDICATORINTERVAL_NAME, CASE WHEN d.ISACTIVE=1 THEN CASE WHEN b.INDICATORINTERVAL_ID=12 THEN 'style=\"background-color:#FFFFE0; cursor:pointer;\" onclick=\"tab2TargetClick(this);\" onmouseover=\"$(this).css(''background-color'',''#fcf9ce'');\" onmouseout=\"$(this).css(''background-color'',''#FFFFE0'');\"' ELSE null END ELSE null END as MNTH1, CASE WHEN d.ISACTIVE=1 THEN CASE WHEN b.INDICATORINTERVAL_ID=12 THEN 'style=\"background-color:#FFFFE0; cursor:pointer;\" onclick=\"tab2TargetClick(this);\" onmouseover=\"$(this).css(''background-color'',''#fcf9ce'');\" onmouseout=\"$(this).css(''background-color'',''#FFFFE0'');\"' ELSE null END ELSE null END as MNTH2, CASE WHEN d.ISACTIVE=1 THEN CASE WHEN b.INDICATORINTERVAL_ID IN (12,4) THEN 'style=\"background-color:#FFFFE0; cursor:pointer;\" onclick=\"tab2TargetClick(this);\" onmouseover=\"$(this).css(''background-color'',''#fcf9ce'');\" onmouseout=\"$(this).css(''background-color'',''#FFFFE0'');\"' ELSE null END ELSE null END as MNTH3, CASE WHEN d.ISACTIVE=1 THEN CASE WHEN b.INDICATORINTERVAL_ID=12 THEN 'style=\"background-color:#FFFFE0; cursor:pointer;\" onclick=\"tab2TargetClick(this);\" onmouseover=\"$(this).css(''background-color'',''#fcf9ce'');\" onmouseout=\"$(this).css(''background-color'',''#FFFFE0'');\"' ELSE null END ELSE null END as MNTH4 , CASE WHEN d.ISACTIVE=1 THEN CASE WHEN b.INDICATORINTERVAL_ID=12 THEN 'style=\"background-color:#FFFFE0; cursor:pointer;\" onclick=\"tab2TargetClick(this);\" onmouseover=\"$(this).css(''background-color'',''#fcf9ce'');\" onmouseout=\"$(this).css(''background-color'',''#FFFFE0'');\"' ELSE null END ELSE null END as MNTH5 , CASE WHEN d.ISACTIVE=1 THEN CASE WHEN b.INDICATORINTERVAL_ID IN (12,4,2) THEN 'style=\"background-color:#FFFFE0; cursor:pointer;\" onclick=\"tab2TargetClick(this);\" onmouseover=\"$(this).css(''background-color'',''#fcf9ce'');\" onmouseout=\"$(this).css(''background-color'',''#FFFFE0'');\"' ELSE null END ELSE null END as MNTH6 , CASE WHEN d.ISACTIVE=1 THEN CASE WHEN b.INDICATORINTERVAL_ID=12 THEN 'style=\"background-color:#FFFFE0; cursor:pointer;\" onclick=\"tab2TargetClick(this);\" onmouseover=\"$(this).css(''background-color'',''#fcf9ce'');\" onmouseout=\"$(this).css(''background-color'',''#FFFFE0'');\"' ELSE null END ELSE null END as MNTH7 , CASE WHEN d.ISACTIVE=1 THEN CASE WHEN b.INDICATORINTERVAL_ID=12 THEN 'style=\"background-color:#FFFFE0; cursor:pointer;\" onclick=\"tab2TargetClick(this);\" onmouseover=\"$(this).css(''background-color'',''#fcf9ce'');\" onmouseout=\"$(this).css(''background-color'',''#FFFFE0'');\"' ELSE null END ELSE null END as MNTH8 , CASE WHEN d.ISACTIVE=1 THEN CASE WHEN b.INDICATORINTERVAL_ID IN (12,4) THEN 'style=\"background-color:#FFFFE0; cursor:pointer;\" onclick=\"tab2TargetClick(this);\" onmouseover=\"$(this).css(''background-color'',''#fcf9ce'');\" onmouseout=\"$(this).css(''background-color'',''#FFFFE0'');\"' ELSE null END ELSE null END as MNTH9 , CASE WHEN d.ISACTIVE=1 THEN CASE WHEN b.INDICATORINTERVAL_ID=12 THEN 'style=\"background-color:#FFFFE0; cursor:pointer;\" onclick=\"tab2TargetClick(this);\" onmouseover=\"$(this).css(''background-color'',''#fcf9ce'');\" onmouseout=\"$(this).css(''background-color'',''#FFFFE0'');\"' ELSE null END ELSE null END as MNTH10 , CASE WHEN d.ISACTIVE=1 THEN CASE WHEN b.INDICATORINTERVAL_ID=12 THEN 'style=\"background-color:#FFFFE0; cursor:pointer;\" onclick=\"tab2TargetClick(this);\" onmouseover=\"$(this).css(''background-color'',''#fcf9ce'');\" onmouseout=\"$(this).css(''background-color'',''#FFFFE0'');\"' ELSE null END ELSE null END as MNTH11, CASE WHEN d.ISACTIVE=1 THEN CASE WHEN b.INDICATORINTERVAL_ID IN (12,4,2,1) THEN 'style=\"background-color:#FFFFE0; cursor:pointer;\" onclick=\"tab2TargetClick(this);\" onmouseover=\"$(this).css(''background-color'',''#fcf9ce'');\" onmouseout=\"$(this).css(''background-color'',''#FFFFE0'');\"' ELSE null END ELSE null END as MNTH12 ";
                strQry += @", a.VALMNTH1
    , a.VALMNTH2
    , a.VALMNTH3
    , a.VALMNTH4
    , a.VALMNTH5
    , a.VALMNTH6
    , a.VALMNTH7
    , a.VALMNTH8
    , a.VALMNTH9
    , a.VALMNTH10
    , a.VALMNTH11
    , a.VALMNTH12
  FROM (  
    SELECT a.ID, a.BRLISTNAME
      , b.VAL as VALMNTH1
      , c.VAL as VALMNTH2
      , d.VAL as VALMNTH3
      , f.VAL as VALMNTH4
      , g.VAL as VALMNTH5
      , h.VAL as VALMNTH6
      , i.VAL as VALMNTH7
      , j.VAL as VALMNTH8
      , k.VAL as VALMNTH9
      , l.VAL as VALMNTH10
      , m.VAL as VALMNTH11
      , n.VAL as VALMNTH12
    FROM (
      SELECT 
        a.ID
        , RTRIM(xmlagg(xmlelement(e, c.DOMAIN_ORG || ', ') ORDER BY c.SORT).extract('//text()'), ', ') as BRLISTNAME
      FROM (
        SELECT a.ID
        FROM TBL_INDICATOR2 a
        INNER JOIN TBL_INDICATOR_BR2 b ON a.ID=b.INDICATOR_ID
        WHERE a.ISCLOSED=0 AND a.INDICATORTYPE_ID=" + indicatortypeid + gazarid + @"
        GROUP BY a.ID
      ) a
      INNER JOIN TBL_INDICATOR_BR2 b ON a.ID=b.INDICATOR_ID
      INNER JOIN TBL_BRANCH c ON b.BRANCH_ID=c.BR_ID AND c.YR=(SELECT YR FROM TBL_SYSSET WHERE ACTIVE=1)
      GROUP BY a.ID
    ) a
    LEFT JOIN TBL_INDICATOR_PERF2 b ON a.ID=b.INDICATOR_ID AND b.YR=" + yr + @" AND b.MNTH=1
    LEFT JOIN TBL_INDICATOR_PERF2 c ON a.ID=c.INDICATOR_ID AND c.YR=" + yr + @" AND c.MNTH=2
    LEFT JOIN TBL_INDICATOR_PERF2 d ON a.ID=d.INDICATOR_ID AND d.YR=" + yr + @" AND d.MNTH=3
    LEFT JOIN TBL_INDICATOR_PERF2 f ON a.ID=f.INDICATOR_ID AND f.YR=" + yr + @" AND f.MNTH=4
    LEFT JOIN TBL_INDICATOR_PERF2 g ON a.ID=g.INDICATOR_ID AND g.YR=" + yr + @" AND g.MNTH=5
    LEFT JOIN TBL_INDICATOR_PERF2 h ON a.ID=h.INDICATOR_ID AND h.YR=" + yr + @" AND h.MNTH=6
    LEFT JOIN TBL_INDICATOR_PERF2 i ON a.ID=i.INDICATOR_ID AND i.YR=" + yr + @" AND i.MNTH=7
    LEFT JOIN TBL_INDICATOR_PERF2 j ON a.ID=j.INDICATOR_ID AND j.YR=" + yr + @" AND j.MNTH=8
    LEFT JOIN TBL_INDICATOR_PERF2 k ON a.ID=k.INDICATOR_ID AND k.YR=" + yr + @" AND k.MNTH=9
    LEFT JOIN TBL_INDICATOR_PERF2 l ON a.ID=l.INDICATOR_ID AND l.YR=" + yr + @" AND l.MNTH=10
    LEFT JOIN TBL_INDICATOR_PERF2 m ON a.ID=m.INDICATOR_ID AND m.YR=" + yr + @" AND m.MNTH=11
    LEFT JOIN TBL_INDICATOR_PERF2 n ON a.ID=n.INDICATOR_ID AND n.YR=" + yr + @" AND n.MNTH=12 
  ) a
  INNER JOIN TBL_INDICATOR2 b ON a.ID=b.ID
  INNER JOIN TBL_INDICATORINTERVAL2 c ON b.INDICATORINTERVAL_ID=c.ID
  INNER JOIN TBL_INDICATORTYPE2 d ON b.INDICATORTYPE_ID=d.ID
  LEFT JOIN TBL_INDICATOR_TARGET2 f ON a.ID=f.INDICATOR_ID AND f.YR=" + yr + @"
  ORDER BY b.NAME 
) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public void INDICATOR2_PERF_INSERT(string P_INDICATOR_ID, string P_YR, string P_MNTH, string P_VAL, string P_STAFFID)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                string[] ParamName = new string[5], ParamValue = new string[5];
                ParamName[0] = "P_INDICATOR_ID";
                ParamName[1] = "P_YR";
                ParamName[2] = "P_MNTH";
                ParamName[3] = "P_VAL";
                ParamName[4] = "P_STAFFID";
                ParamValue[0] = P_INDICATOR_ID;
                ParamValue[1] = P_YR;
                ParamValue[2] = P_MNTH;
                ParamValue[3] = P_VAL;
                ParamValue[4] = P_STAFFID;
                myObj.SP_OracleExecuteNonQuery("INDICATOR2_PERF_INSERT", ParamName, ParamValue);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string Indicator2Tab3t1Datatable(string indicatortypeid, string yr, string gazarid)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strQry = "";
            if (gazarid != "") gazarid = " AND b.BRANCH_ID=" + gazarid + "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                strQry = @"SELECT ROWNUM as ROWNO, a.* 
FROM ( 
  SELECT a.ID, a.BRLISTNAME, b.NAME, f.VAL as TARGET, c.NAME as INDICATORINTERVAL_NAME, b.BASLINENAME
    , a.VALMNTH1
    , a.VALMNTH2
    , a.VALMNTH3
    , a.VALMNTH4
    , a.VALMNTH5
    , a.VALMNTH6
    , a.VALMNTH7
    , a.VALMNTH8
    , a.VALMNTH9
    , a.VALMNTH10
    , a.VALMNTH11
    , a.VALMNTH12
  FROM (  
    SELECT a.ID, a.BRLISTNAME
      , b.VAL as VALMNTH1
      , c.VAL as VALMNTH2
      , d.VAL as VALMNTH3
      , f.VAL as VALMNTH4
      , g.VAL as VALMNTH5
      , h.VAL as VALMNTH6
      , i.VAL as VALMNTH7
      , j.VAL as VALMNTH8
      , k.VAL as VALMNTH9
      , l.VAL as VALMNTH10
      , m.VAL as VALMNTH11
      , n.VAL as VALMNTH12
    FROM (
      SELECT 
        a.ID
        , RTRIM(xmlagg(xmlelement(e, c.DOMAIN_ORG || ', ') ORDER BY c.SORT).extract('//text()'), ', ') as BRLISTNAME
      FROM (
        SELECT a.ID
        FROM TBL_INDICATOR2 a
        INNER JOIN TBL_INDICATOR_BR2 b ON a.ID=b.INDICATOR_ID
        WHERE a.ISCLOSED=0 AND a.INDICATORTYPE_ID=" + indicatortypeid + gazarid + @"
        GROUP BY a.ID
      ) a
      INNER JOIN TBL_INDICATOR_BR2 b ON a.ID=b.INDICATOR_ID
      INNER JOIN TBL_BRANCH c ON b.BRANCH_ID=c.BR_ID AND c.YR=(SELECT YR FROM TBL_SYSSET WHERE ACTIVE=1)
      GROUP BY a.ID
    ) a
    LEFT JOIN TBL_INDICATOR_PERF2 b ON a.ID=b.INDICATOR_ID AND b.YR=" + yr + @" AND b.MNTH=1
    LEFT JOIN TBL_INDICATOR_PERF2 c ON a.ID=c.INDICATOR_ID AND c.YR=" + yr + @" AND c.MNTH=2
    LEFT JOIN TBL_INDICATOR_PERF2 d ON a.ID=d.INDICATOR_ID AND d.YR=" + yr + @" AND d.MNTH=3
    LEFT JOIN TBL_INDICATOR_PERF2 f ON a.ID=f.INDICATOR_ID AND f.YR=" + yr + @" AND f.MNTH=4
    LEFT JOIN TBL_INDICATOR_PERF2 g ON a.ID=g.INDICATOR_ID AND g.YR=" + yr + @" AND g.MNTH=5
    LEFT JOIN TBL_INDICATOR_PERF2 h ON a.ID=h.INDICATOR_ID AND h.YR=" + yr + @" AND h.MNTH=6
    LEFT JOIN TBL_INDICATOR_PERF2 i ON a.ID=i.INDICATOR_ID AND i.YR=" + yr + @" AND i.MNTH=7
    LEFT JOIN TBL_INDICATOR_PERF2 j ON a.ID=j.INDICATOR_ID AND j.YR=" + yr + @" AND j.MNTH=8
    LEFT JOIN TBL_INDICATOR_PERF2 k ON a.ID=k.INDICATOR_ID AND k.YR=" + yr + @" AND k.MNTH=9
    LEFT JOIN TBL_INDICATOR_PERF2 l ON a.ID=l.INDICATOR_ID AND l.YR=" + yr + @" AND l.MNTH=10
    LEFT JOIN TBL_INDICATOR_PERF2 m ON a.ID=m.INDICATOR_ID AND m.YR=" + yr + @" AND m.MNTH=11
    LEFT JOIN TBL_INDICATOR_PERF2 n ON a.ID=n.INDICATOR_ID AND n.YR=" + yr + @" AND n.MNTH=12 
  ) a
  INNER JOIN TBL_INDICATOR2 b ON a.ID=b.ID
  INNER JOIN TBL_INDICATORINTERVAL2 c ON b.INDICATORINTERVAL_ID=c.ID
  INNER JOIN TBL_INDICATORTYPE2 d ON b.INDICATORTYPE_ID=d.ID
  LEFT JOIN TBL_INDICATOR_TARGET2 f ON a.ID=f.INDICATOR_ID AND f.YR=" + yr + @"
  ORDER BY b.NAME 
) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string Indicator2Tab3t2Datatable(string indicatortypeid, string yr, string yr2)
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strQry = "", strYrList = "";
            string strTableVal = "";
            for (int i = Int32.Parse(yr); i <= Int32.Parse(yr2); i++)
            {
                if (strYrList != "") strYrList += ",";
                strYrList += i.ToString();
            }
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                strQry = @"SELECT ROWNUM as ROWNO, a.* 
FROM ( 
  SELECT * FROM (
    SELECT a.ID, b.NAME, b.BASLINENAME, a.VALMNTH12, a.YR, a.TARGET
    FROM (  
      SELECT a.ID, a.YR, b.VAL as VALMNTH12, c.VAL as TARGET
      FROM (
        SELECT a.ID, b.YR
        FROM TBL_INDICATOR2 a,
        (
          SELECT(" + yr + @" - 1) + ROWNUM YR
          FROM DUAL
          CONNECT BY LEVEL <= (" + yr2 + @" + 1) - " + yr + @"
        ) b
        WHERE a.ISCLOSED=0 AND a.INDICATORTYPE_ID=" + indicatortypeid + @"
      ) a
      LEFT JOIN TBL_INDICATOR_PERF2 b ON a.ID=b.INDICATOR_ID AND b.YR=a.YR AND b.MNTH=12 
      LEFT JOIN TBL_INDICATOR_TARGET2 c ON a.ID=c.INDICATOR_ID AND c.YR=a.YR
    ) a
    INNER JOIN TBL_INDICATOR2 b ON a.ID=b.ID
  )
  PIVOT (
    MAX(VALMNTH12) as VALMNTH12,
    MAX(TARGET) as VALTARGET
    FOR YR IN (" + strYrList + @")
    
  )
  ORDER BY NAME 
) a";
                strTableVal = "";
                strTableVal += "<table style=\"border: 1px solid #000; border-collapse: collapse; font: 11pt arial, sans-serif; width: 100%;\">";
                strTableVal += "<thead>";
                strTableVal += "<tr>";
                strTableVal += "<th style=\"border: 1px solid #000; padding:5px; text-align:center; width:25px;\">#</th>";
                strTableVal += "<th style=\"border: 1px solid #000; padding:5px; text-align:center;\">Үзүүлэлт</th>";
                strTableVal += "<th style=\"border: 1px solid #000; padding:5px; text-align:center;\">Суурь үзүүлэлт</th>";
                for (var i = Int32.Parse(yr); i <= Int32.Parse(yr2); i++)
                {
                    strTableVal += "<th style=\"border: 1px solid #000; padding:5px; text-align:center;\">" + i.ToString() + " оны зорилт</th>";
                    strTableVal += "<th style=\"border: 1px solid #000; padding:5px; text-align:center;\">Гүйцэтгэл</th>";
                }
                strTableVal += "</tr>";
                strTableVal += "</thead>";
                strTableVal += "<tbody>";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                if (ds.Tables[0].Rows.Count != 0)
                {
                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {
                        strTableVal += "<tr>";
                        strTableVal += "<td style=\"border: 1px solid #000; padding:5px; text-align:center;\">" + dr["ROWNO"].ToString() + "</td>";
                        strTableVal += "<td style=\"border: 1px solid #000; padding:5px; text-align:left;\">" + myObjGetTableData.getReplaceDatabaseToDisplay(dr["NAME"].ToString()) + "</td>";
                        strTableVal += "<td style=\"border: 1px solid #000; padding:5px; text-align:center; vertical-align:middle;\">" + myObjGetTableData.getReplaceDatabaseToDisplay(dr["BASLINENAME"].ToString()) + " </td>";
                        for (var i = Int32.Parse(yr); i <= Int32.Parse(yr2); i++)
                        {
                            strTableVal += "<td style=\"border: 1px solid #000; padding:5px; text-align:center;\">" + dr[i.ToString() + "_VALTARGET"].ToString() + "</td>";
                            strTableVal += "<td style=\"border: 1px solid #000; padding:5px; text-align:center;\">" + dr[i.ToString() + "_VALMNTH12"].ToString() + "</td>";
                        }
                        strTableVal += "</tr>";
                    }
                }
                strTableVal += "</tbody>";
                strTableVal += "</table>";
                return strTableVal;
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }
        public string Indicator2Tab3t3Datatable()
        {
            ModifyDB myObj = new ModifyDB();
            GetTableData myObjGetTableData = new GetTableData();
            string strQry = "";
            try
            {
                if (!myObjGetTableData.checkUserSession()) throw new cs.LMException("SessionDied");
                strQry = "SELECT ROWNUM as ROWNO, a.* FROM ( SELECT ID, NAME, FILENAME FROM TBL_INDICATOR2PDFATTACH ORDER BY ID DESC ) a";
                DataSet ds = myObj.OracleExecuteDataSet(strQry);
                return myObjGetTableData.DataTableToJson(ds.Tables[0]);
            }
            catch (cs.LMException ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
            catch (Exception ex)
            {
                myObjGetTableData.exeptionMethod(ex);
                throw ex;
            }
        }

    }
}
